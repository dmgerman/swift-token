begin_unit
comment|'# Copyright (c) 2010-2011 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Database code for Swift """'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'uuid'
name|'import'
name|'uuid4'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'randint'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkstemp'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
newline|'\n'
name|'import'
name|'simplejson'
name|'as'
name|'json'
newline|'\n'
name|'import'
name|'sqlite3'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'normalize_timestamp'
op|','
name|'renamer'
op|','
name|'mkdirs'
op|','
name|'lock_parent_directory'
op|','
name|'fallocate'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'LockTimeout'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#: Timeout for trying to connect to a DB'
nl|'\n'
DECL|variable|BROKER_TIMEOUT
name|'BROKER_TIMEOUT'
op|'='
number|'25'
newline|'\n'
comment|'#: Pickle protocol to use'
nl|'\n'
DECL|variable|PICKLE_PROTOCOL
name|'PICKLE_PROTOCOL'
op|'='
number|'2'
newline|'\n'
comment|'#: Max number of pending entries'
nl|'\n'
DECL|variable|PENDING_CAP
name|'PENDING_CAP'
op|'='
number|'131072'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatabaseConnectionError
name|'class'
name|'DatabaseConnectionError'
op|'('
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""More friendly error messages for DB Errors."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'DB connection error (%s, %s):\\n%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'timeout'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenDBConnection
dedent|''
dedent|''
name|'class'
name|'GreenDBConnection'
op|'('
name|'sqlite3'
op|'.'
name|'Connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""SQLite DB Connection handler that plays well with eventlet."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'timeout'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'timeout'"
op|','
name|'BROKER_TIMEOUT'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|"'timeout'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'db_file'
op|'='
name|'args'
name|'and'
name|'args'
op|'['
number|'0'
op|']'
name|'or'
string|"'-'"
newline|'\n'
name|'sqlite3'
op|'.'
name|'Connection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_timeout
dedent|''
name|'def'
name|'_timeout'
op|'('
name|'self'
op|','
name|'call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'LockTimeout'
op|'('
name|'self'
op|'.'
name|'timeout'
op|','
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'call'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'locked'"
name|'not'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'sleep'
op|'('
number|'0.05'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
dedent|''
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_timeout'
op|'('
name|'lambda'
op|':'
name|'sqlite3'
op|'.'
name|'Connection'
op|'.'
name|'execute'
op|'('
nl|'\n'
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_timeout'
op|'('
name|'lambda'
op|':'
name|'sqlite3'
op|'.'
name|'Connection'
op|'.'
name|'commit'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict_factory
dedent|''
dedent|''
name|'def'
name|'dict_factory'
op|'('
name|'crs'
op|','
name|'row'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This should only be used when you need a real dict,\n    i.e. when you\'re going to serialize the results.\n    """'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
op|'('
op|'('
name|'col'
op|'['
number|'0'
op|']'
op|','
name|'row'
op|'['
name|'idx'
op|']'
op|')'
name|'for'
name|'idx'
op|','
name|'col'
name|'in'
name|'enumerate'
op|'('
name|'crs'
op|'.'
name|'description'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|chexor
dedent|''
name|'def'
name|'chexor'
op|'('
name|'old'
op|','
name|'name'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Each entry in the account and container databases is XORed by the 128-bit\n    hash on insert or delete.  This serves as a rolling, order-independent hash\n    of the contents. (check + XOR)\n\n    :param old: hex representation of the current DB hash\n    :param name: name of the object or container being inserted\n    :param timestamp: timestamp of the new record\n    :returns: a hex representation of the new hash value\n    """'
newline|'\n'
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
string|"'name is None!'"
op|')'
newline|'\n'
dedent|''
name|'old'
op|'='
name|'old'
op|'.'
name|'decode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
name|'new'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
op|'('
string|"'%s-%s'"
op|'%'
op|'('
name|'name'
op|','
name|'timestamp'
op|')'
op|')'
op|'.'
name|'encode'
op|'('
string|"'utf_8'"
op|')'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'response'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
nl|'\n'
name|'map'
op|'('
name|'chr'
op|','
name|'map'
op|'('
name|'operator'
op|'.'
name|'xor'
op|','
name|'map'
op|'('
name|'ord'
op|','
name|'old'
op|')'
op|','
name|'map'
op|'('
name|'ord'
op|','
name|'new'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'response'
op|'.'
name|'encode'
op|'('
string|"'hex'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_db_connection
dedent|''
name|'def'
name|'get_db_connection'
op|'('
name|'path'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'okay_to_create'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a properly configured SQLite database connection.\n\n    :param path: path to DB\n    :param timeout: timeout for connection\n    :param okay_to_create: if True, create the DB if it doesn\'t exist\n    :returns: DB connection object\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'connect_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'sqlite3'
op|'.'
name|'connect'
op|'('
name|'path'
op|','
name|'check_same_thread'
op|'='
name|'False'
op|','
nl|'\n'
name|'factory'
op|'='
name|'GreenDBConnection'
op|','
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'!='
string|"':memory:'"
name|'and'
name|'not'
name|'okay_to_create'
op|':'
newline|'\n'
comment|'# attempt to detect and fail when connect creates the db file'
nl|'\n'
indent|'            '
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'stat'
op|'.'
name|'st_size'
op|'=='
number|'0'
name|'and'
name|'stat'
op|'.'
name|'st_ctime'
op|'>='
name|'connect_time'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'path'
op|')'
newline|'\n'
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'path'
op|','
nl|'\n'
string|"'DB file created by connect?'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'row_factory'
op|'='
name|'sqlite3'
op|'.'
name|'Row'
newline|'\n'
name|'conn'
op|'.'
name|'text_factory'
op|'='
name|'str'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA synchronous = NORMAL'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA count_changes = OFF'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA temp_store = MEMORY'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA journal_mode = DELETE'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'create_function'
op|'('
string|"'chexor'"
op|','
number|'3'
op|','
name|'chexor'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'traceback'
newline|'\n'
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'path'
op|','
name|'traceback'
op|'.'
name|'format_exc'
op|'('
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatabaseBroker
dedent|''
name|'class'
name|'DatabaseBroker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encapsulates working with a database."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'db_file'
op|','
name|'timeout'
op|'='
name|'BROKER_TIMEOUT'
op|','
name|'logger'
op|'='
name|'None'
op|','
nl|'\n'
name|'account'
op|'='
name|'None'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'pending_timeout'
op|'='
number|'10'
op|','
nl|'\n'
name|'stale_reads_ok'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Encapsulates working with a database. """'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'db_file'
op|'='
name|'db_file'
newline|'\n'
name|'self'
op|'.'
name|'pending_file'
op|'='
name|'self'
op|'.'
name|'db_file'
op|'+'
string|"'.pending'"
newline|'\n'
name|'self'
op|'.'
name|'pending_timeout'
op|'='
name|'pending_timeout'
newline|'\n'
name|'self'
op|'.'
name|'stale_reads_ok'
op|'='
name|'stale_reads_ok'
newline|'\n'
name|'self'
op|'.'
name|'db_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'db_file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
name|'or'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'account'
op|'='
name|'account'
newline|'\n'
name|'self'
op|'.'
name|'container'
op|'='
name|'container'
newline|'\n'
name|'self'
op|'.'
name|'_db_version'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|initialize
dedent|''
name|'def'
name|'initialize'
op|'('
name|'self'
op|','
name|'put_timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the DB\n\n        :param put_timestamp: timestamp of initial PUT request\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'tmp_db_file'
op|'='
name|'None'
newline|'\n'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mkdirs'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|')'
newline|'\n'
name|'fd'
op|','
name|'tmp_db_file'
op|'='
name|'mkstemp'
op|'('
name|'suffix'
op|'='
string|"'.tmp'"
op|','
name|'dir'
op|'='
name|'self'
op|'.'
name|'db_dir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'sqlite3'
op|'.'
name|'connect'
op|'('
name|'tmp_db_file'
op|','
name|'check_same_thread'
op|'='
name|'False'
op|','
nl|'\n'
name|'factory'
op|'='
name|'GreenDBConnection'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
newline|'\n'
comment|'# creating dbs implicitly does a lot of transactions, so we'
nl|'\n'
comment|'# pick fast, unsafe options here and do a big fsync at the end.'
nl|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA synchronous = OFF'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA temp_store = MEMORY'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA journal_mode = MEMORY'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'create_function'
op|'('
string|"'chexor'"
op|','
number|'3'
op|','
name|'chexor'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'row_factory'
op|'='
name|'sqlite3'
op|'.'
name|'Row'
newline|'\n'
name|'conn'
op|'.'
name|'text_factory'
op|'='
name|'str'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE outgoing_sync (\n                remote_id TEXT UNIQUE,\n                sync_point INTEGER,\n                updated_at TEXT DEFAULT 0\n            );\n            CREATE TABLE incoming_sync (\n                remote_id TEXT UNIQUE,\n                sync_point INTEGER,\n                updated_at TEXT DEFAULT 0\n            );\n            CREATE TRIGGER outgoing_sync_insert AFTER INSERT ON outgoing_sync\n            BEGIN\n                UPDATE outgoing_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER outgoing_sync_update AFTER UPDATE ON outgoing_sync\n            BEGIN\n                UPDATE outgoing_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER incoming_sync_insert AFTER INSERT ON incoming_sync\n            BEGIN\n                UPDATE incoming_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER incoming_sync_update AFTER UPDATE ON incoming_sync\n            BEGIN\n                UPDATE incoming_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n        """'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'put_timestamp'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'normalize_timestamp'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_initialize'
op|'('
name|'conn'
op|','
name|'put_timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'if'
name|'tmp_db_file'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'tmp_db_file'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'fsync'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
comment|'# It\'s as if there was a "condition" where different parts'
nl|'\n'
comment|'# of the system were "racing" each other.'
nl|'\n'
indent|'                    '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
nl|'\n'
string|"'DB created by someone else while working?'"
op|')'
newline|'\n'
dedent|''
name|'renamer'
op|'('
name|'tmp_db_file'
op|','
name|'self'
op|'.'
name|'db_file'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
nl|'\n'
DECL|member|delete_db
dedent|''
dedent|''
name|'def'
name|'delete_db'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the DB as deleted\n\n        :param timestamp: delete timestamp\n        """'
newline|'\n'
name|'timestamp'
op|'='
name|'normalize_timestamp'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_db'
op|'('
name|'conn'
op|','
name|'timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|get
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use with the "with" statement; returns a database connection."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|'"DB doesn\'t exist"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'conn'
newline|'\n'
name|'conn'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|lock
name|'def'
name|'lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use with the "with" statement; locks a database."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|'"DB doesn\'t exist"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'orig_isolation_level'
op|'='
name|'conn'
op|'.'
name|'isolation_level'
newline|'\n'
name|'conn'
op|'.'
name|'isolation_level'
op|'='
name|'None'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'BEGIN IMMEDIATE'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'ROLLBACK'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'isolation_level'
op|'='
name|'orig_isolation_level'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Broker error trying to rollback locked connection'"
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|newid
dedent|''
dedent|''
name|'def'
name|'newid'
op|'('
name|'self'
op|','
name|'remote_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Re-id the database.  This should be called after an rsync.\n\n        :param remote_id: the ID of the remote database being rsynced in\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE %s_stat SET id=?\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'str'
op|'('
name|'uuid4'
op|'('
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT ROWID FROM %s ORDER BY ROWID DESC LIMIT 1\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'sync_point'
op|'='
name|'row'
op|'['
string|"'ROWID'"
op|']'
name|'if'
name|'row'
name|'else'
op|'-'
number|'1'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                INSERT OR REPLACE INTO incoming_sync (sync_point, remote_id)\n                VALUES (?, ?)\n            '''"
op|','
op|'('
name|'sync_point'
op|','
name|'remote_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_newid'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_newid
dedent|''
dedent|''
name|'def'
name|'_newid'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
comment|'# Override for additional work when receiving an rsynced db.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|merge_timestamps
dedent|''
name|'def'
name|'merge_timestamps'
op|'('
name|'self'
op|','
name|'created_at'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used in replication to handle updating timestamps.\n\n        :param created_at: create timestamp\n        :param put_timestamp: put timestamp\n        :param delete_timestamp: delete timestamp\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE %s_stat SET created_at=MIN(?, created_at),\n                                   put_timestamp=MAX(?, put_timestamp),\n                                   delete_timestamp=MAX(?, delete_timestamp)\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'created_at'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_items_since
dedent|''
dedent|''
name|'def'
name|'get_items_since'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of objects in the database between start and end.\n\n        :param start: start ROWID\n        :param count: number to get\n        :returns: list of objects between start and end\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT * FROM %s WHERE ROWID > ? ORDER BY ROWID ASC LIMIT ?\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
op|','
op|'('
name|'start'
op|','
name|'count'
op|')'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'dict_factory'
newline|'\n'
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_sync
dedent|''
dedent|''
name|'def'
name|'get_sync'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets the most recent sync point for a server from the sync table.\n\n        :param id: remote ID to get the sync_point for\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        :returns: the sync point, or -1 if the id doesn\'t exist.\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|'"SELECT sync_point FROM %s_sync WHERE remote_id=?"'
nl|'\n'
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
op|'('
name|'id'
op|','
op|')'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'row'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'row'
op|'['
string|"'sync_point'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_syncs
dedent|''
dedent|''
name|'def'
name|'get_syncs'
op|'('
name|'self'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a serialized copy of the sync table.\n\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        :returns: list of {\'remote_id\', \'sync_point\'}\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT remote_id, sync_point FROM %s_sync\n            '''"
op|'%'
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'curs'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'remote_id'"
op|':'
name|'row'
op|'['
number|'0'
op|']'
op|','
string|"'sync_point'"
op|':'
name|'row'
op|'['
number|'1'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|get_replication_info
dedent|''
dedent|''
name|'def'
name|'get_replication_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get information about the DB required for replication.\n\n        :returns: dict containing keys: hash, id, created_at, put_timestamp,\n            delete_timestamp, count, max_row, and metadata\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'query_part1'
op|'='
string|"'''\n            SELECT hash, id, created_at, put_timestamp, delete_timestamp,\n                %s_count AS count,\n                CASE WHEN SQLITE_SEQUENCE.seq IS NOT NULL\n                    THEN SQLITE_SEQUENCE.seq ELSE -1 END AS max_row, '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
newline|'\n'
name|'query_part2'
op|'='
string|"'''\n            FROM (%s_stat LEFT JOIN SQLITE_SEQUENCE\n                  ON SQLITE_SEQUENCE.name == '%s') LIMIT 1\n        '''"
op|'%'
op|'('
name|'self'
op|'.'
name|'db_type'
op|','
name|'self'
op|'.'
name|'db_contains_type'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query_part1'
op|'+'
string|"'metadata'"
op|'+'
name|'query_part2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query_part1'
op|'+'
string|'"\'\' as metadata"'
op|'+'
nl|'\n'
name|'query_part2'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'dict_factory'
newline|'\n'
name|'return'
name|'curs'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts
dedent|''
dedent|''
name|'def'
name|'_commit_puts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
comment|'# stub to be overridden if need be'
newline|'\n'
nl|'\n'
DECL|member|merge_syncs
dedent|''
name|'def'
name|'merge_syncs'
op|'('
name|'self'
op|','
name|'sync_points'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Merge a list of sync points with the incoming sync table.\n\n        :param sync_points: list of sync points where a sync point is a dict of\n                            {\'sync_point\', \'remote_id\'}\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rec'
name|'in'
name|'sync_points'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO %s_sync (sync_point, remote_id)\n                        VALUES (?, ?)\n                    '''"
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'sync_point'"
op|']'
op|','
name|'rec'
op|'['
string|"'remote_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'IntegrityError'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        UPDATE %s_sync SET sync_point=max(?, sync_point)\n                        WHERE remote_id=?\n                    '''"
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'sync_point'"
op|']'
op|','
name|'rec'
op|'['
string|"'remote_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_preallocate
dedent|''
dedent|''
name|'def'
name|'_preallocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The idea is to allocate space in front of an expanding db.  If it gets\n        within 512k of a boundary, it allocates to the next boundary.\n        Boundaries are 2m, 5m, 10m, 25m, 50m, then every 50m after.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'MB'
op|'='
op|'('
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
nl|'\n'
DECL|function|prealloc_points
name|'def'
name|'prealloc_points'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'pm'
name|'in'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'5'
op|','
number|'10'
op|','
number|'25'
op|','
number|'50'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'pm'
op|'*'
name|'MB'
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'pm'
op|'+='
number|'50'
newline|'\n'
name|'yield'
name|'pm'
op|'*'
name|'MB'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
newline|'\n'
name|'file_size'
op|'='
name|'stat'
op|'.'
name|'st_size'
newline|'\n'
name|'allocated_size'
op|'='
name|'stat'
op|'.'
name|'st_blocks'
op|'*'
number|'512'
newline|'\n'
name|'for'
name|'point'
name|'in'
name|'prealloc_points'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'file_size'
op|'<='
name|'point'
op|'-'
name|'MB'
op|'/'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'prealloc_size'
op|'='
name|'point'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'allocated_size'
op|'<'
name|'prealloc_size'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|"'rb+'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'int'
op|'('
name|'prealloc_size'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|metadata
name|'def'
name|'metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the metadata dict for the database. The metadata dict values\n        are tuples of (value, timestamp) where the timestamp indicates when\n        that key was set to that value.\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'metadata'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'metadata'
newline|'\n'
nl|'\n'
DECL|member|update_metadata
dedent|''
name|'def'
name|'update_metadata'
op|'('
name|'self'
op|','
name|'metadata_updates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Updates the metadata dict for the database. The metadata dict values\n        are tuples of (value, timestamp) where the timestamp indicates when\n        that key was set to that value. Key/values will only be overwritten if\n        the timestamp is newer. To delete a key, set its value to (\'\',\n        timestamp). These empty keys will eventually be removed by\n        :func:reclaim\n        """'
newline|'\n'
name|'old_metadata'
op|'='
name|'self'
op|'.'
name|'metadata'
newline|'\n'
name|'if'
name|'set'
op|'('
name|'metadata_updates'
op|')'
op|'.'
name|'issubset'
op|'('
name|'set'
op|'('
name|'old_metadata'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
op|'('
name|'value'
op|','
name|'timestamp'
op|')'
name|'in'
name|'metadata_updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'timestamp'
op|'>'
name|'old_metadata'
op|'['
name|'key'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'md'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'md'
op|'='
name|'md'
name|'and'
name|'json'
op|'.'
name|'loads'
op|'('
name|'md'
op|')'
name|'or'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n                    ALTER TABLE %s_stat\n                    ADD COLUMN metadata TEXT DEFAULT \'\' """'
op|'%'
name|'self'
op|'.'
name|'db_type'
op|')'
newline|'\n'
name|'md'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value_timestamp'
name|'in'
name|'metadata_updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|','
name|'timestamp'
op|'='
name|'value_timestamp'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'md'
name|'or'
name|'timestamp'
op|'>'
name|'md'
op|'['
name|'key'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'md'
op|'['
name|'key'
op|']'
op|'='
name|'value_timestamp'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'UPDATE %s_stat SET metadata = ?'"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
nl|'\n'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'md'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reclaim
dedent|''
dedent|''
name|'def'
name|'reclaim'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes any empty metadata values older than the timestamp"""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_reclaim'
op|'('
name|'conn'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reclaim
dedent|''
dedent|''
dedent|''
name|'def'
name|'_reclaim'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removes any empty metadata values older than the timestamp using the\n        given database connection. This function will not call commit on the\n        conn, but will instead return True if the database needs committing.\n        This function was created as a worker to limit transactions and commits\n        from other related functions.\n\n        :param conn: Database connection to reclaim metadata within.\n        :param timestamp: Empty metadata items last updated before this\n                          timestamp will be removed.\n        :returns: True if conn.commit() should be called\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'md'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'md'
op|':'
newline|'\n'
indent|'                '
name|'md'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'md'
op|')'
newline|'\n'
name|'keys_to_delete'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
op|'('
name|'value'
op|','
name|'value_timestamp'
op|')'
name|'in'
name|'md'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'value'
op|'=='
string|"''"
name|'and'
name|'value_timestamp'
op|'<'
name|'timestamp'
op|':'
newline|'\n'
indent|'                        '
name|'keys_to_delete'
op|'.'
name|'append'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'keys_to_delete'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'key'
name|'in'
name|'keys_to_delete'
op|':'
newline|'\n'
indent|'                        '
name|'del'
name|'md'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'UPDATE %s_stat SET metadata = ?'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'md'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainerBroker
dedent|''
dedent|''
name|'class'
name|'ContainerBroker'
op|'('
name|'DatabaseBroker'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encapsulates working with a container database."""'
newline|'\n'
DECL|variable|db_type
name|'db_type'
op|'='
string|"'container'"
newline|'\n'
DECL|variable|db_contains_type
name|'db_contains_type'
op|'='
string|"'object'"
newline|'\n'
nl|'\n'
DECL|member|_initialize
name|'def'
name|'_initialize'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a brand new database (tables, indices, triggers, etc.)"""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Attempting to create a new database with no account set'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'container'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Attempting to create a new database with no container set'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'create_object_table'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_container_stat_table'
op|'('
name|'conn'
op|','
name|'put_timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_object_table
dedent|''
name|'def'
name|'create_object_table'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the object table which is specifc to the container DB.\n\n        :param conn: DB connection object\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE object (\n                ROWID INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT,\n                created_at TEXT,\n                size INTEGER,\n                content_type TEXT,\n                etag TEXT,\n                deleted INTEGER DEFAULT 0\n            );\n\n            CREATE INDEX ix_object_deleted_name ON object (deleted, name);\n\n            CREATE TRIGGER object_insert AFTER INSERT ON object\n            BEGIN\n                UPDATE container_stat\n                SET object_count = object_count + (1 - new.deleted),\n                    bytes_used = bytes_used + new.size,\n                    hash = chexor(hash, new.name, new.created_at);\n            END;\n\n            CREATE TRIGGER object_update BEFORE UPDATE ON object\n            BEGIN\n                SELECT RAISE(FAIL, \'UPDATE not allowed; DELETE and INSERT\');\n            END;\n\n            CREATE TRIGGER object_delete AFTER DELETE ON object\n            BEGIN\n                UPDATE container_stat\n                SET object_count = object_count - (1 - old.deleted),\n                    bytes_used = bytes_used - old.size,\n                    hash = chexor(hash, old.name, old.created_at);\n            END;\n        """'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_container_stat_table
dedent|''
name|'def'
name|'create_container_stat_table'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the container_stat table which is specific to the container DB.\n\n        :param conn: DB connection object\n        :param put_timestamp: put timestamp\n        """'
newline|'\n'
name|'if'
name|'put_timestamp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'normalize_timestamp'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE container_stat (\n                account TEXT,\n                container TEXT,\n                created_at TEXT,\n                put_timestamp TEXT DEFAULT \'0\',\n                delete_timestamp TEXT DEFAULT \'0\',\n                object_count INTEGER,\n                bytes_used INTEGER,\n                reported_put_timestamp TEXT DEFAULT \'0\',\n                reported_delete_timestamp TEXT DEFAULT \'0\',\n                reported_object_count INTEGER DEFAULT 0,\n                reported_bytes_used INTEGER DEFAULT 0,\n                hash TEXT default \'00000000000000000000000000000000\',\n                id TEXT,\n                status TEXT DEFAULT \'\',\n                status_changed_at TEXT DEFAULT \'0\',\n                metadata TEXT DEFAULT \'\',\n                x_container_sync_point1 INTEGER DEFAULT -1,\n                x_container_sync_point2 INTEGER DEFAULT -1\n            );\n\n            INSERT INTO container_stat (object_count, bytes_used)\n                VALUES (0, 0);\n        """'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n            UPDATE container_stat\n            SET account = ?, container = ?, created_at = ?, id = ?,\n                put_timestamp = ?\n        '''"
op|','
op|'('
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|','
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'uuid4'
op|'('
op|')'
op|')'
op|','
name|'put_timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_version
dedent|''
name|'def'
name|'get_db_version'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_db_version'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT name FROM sqlite_master\n                    WHERE name = 'ix_object_deleted_name' '''"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_db_version'
newline|'\n'
nl|'\n'
DECL|member|_newid
dedent|''
name|'def'
name|'_newid'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n            UPDATE container_stat\n            SET reported_put_timestamp = 0, reported_delete_timestamp = 0,\n                reported_object_count = 0, reported_bytes_used = 0'''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_put_timestamp
dedent|''
name|'def'
name|'update_put_timestamp'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the put_timestamp.  Only modifies it if it is greater than\n        the current timestamp.\n\n        :param timestamp: put timestamp\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat SET put_timestamp = ?\n                WHERE put_timestamp < ? '''"
op|','
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_db
dedent|''
dedent|''
name|'def'
name|'_delete_db'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the DB as deleted\n\n        :param conn: DB connection object\n        :param timestamp: timestamp to mark as deleted\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n            UPDATE container_stat\n            SET delete_timestamp = ?,\n                status = \'DELETED\',\n                status_changed_at = ?\n            WHERE delete_timestamp < ? """'
op|','
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|empty
dedent|''
name|'def'
name|'empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the DB is empty.\n\n        :returns: True if the database has no active objects, False otherwise\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'SELECT object_count from container_stat'"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts
dedent|''
dedent|''
name|'def'
name|'_commit_puts'
op|'('
name|'self'
op|','
name|'item_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles commiting rows in .pending files."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'item_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'item_list'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_preallocate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'entry'
name|'in'
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'entry'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
op|'('
name|'name'
op|','
name|'timestamp'
op|','
name|'size'
op|','
name|'content_type'
op|','
name|'etag'
op|','
nl|'\n'
name|'deleted'
op|')'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'entry'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
op|')'
newline|'\n'
name|'item_list'
op|'.'
name|'append'
op|'('
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'created_at'"
op|':'
nl|'\n'
name|'timestamp'
op|','
string|"'size'"
op|':'
name|'size'
op|','
string|"'content_type'"
op|':'
nl|'\n'
name|'content_type'
op|','
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid pending entry %(file)s: %(entry)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'file'"
op|':'
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'entry'"
op|':'
name|'entry'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'ftruncate'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|reclaim
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'reclaim'
op|'('
name|'self'
op|','
name|'object_timestamp'
op|','
name|'sync_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete rows from the object table that are marked deleted and\n        whose created_at timestamp is < object_timestamp.  Also deletes rows\n        from incoming_sync and outgoing_sync where the updated_at timestamp is\n        < sync_timestamp.\n\n        In addition, this calls the DatabaseBroker\'s :func:_reclaim method.\n\n        :param object_timestamp: max created_at timestamp of object rows to\n                                 delete\n        :param sync_timestamp: max update_at timestamp of sync rows to delete\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n                    DELETE FROM object\n                    WHERE deleted = 1\n                    AND created_at < ?"""'
op|','
op|'('
name|'object_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM outgoing_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM incoming_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
comment|"# Old dbs didn't have updated_at in the _sync tables."
nl|'\n'
indent|'                '
name|'if'
string|"'no such column: updated_at'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'DatabaseBroker'
op|'.'
name|'_reclaim'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'object_timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_object
dedent|''
dedent|''
name|'def'
name|'delete_object'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark an object deleted.\n\n        :param name: object name to be deleted\n        :param timestamp: timestamp when the object was marked as deleted\n        """'
newline|'\n'
name|'self'
op|'.'
name|'put_object'
op|'('
name|'name'
op|','
name|'timestamp'
op|','
number|'0'
op|','
string|"'application/deleted'"
op|','
string|"'noetag'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|put_object
dedent|''
name|'def'
name|'put_object'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timestamp'
op|','
name|'size'
op|','
name|'content_type'
op|','
name|'etag'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates an object in the DB with its metadata.\n\n        :param name: object name to be created\n        :param timestamp: timestamp of when the object was created\n        :param size: object size\n        :param content_type: object content-type\n        :param etag: object etag\n        :param deleted: if True, marks the object as deleted and sets the\n                        deteleted_at timestamp to timestamp\n        """'
newline|'\n'
name|'record'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'created_at'"
op|':'
name|'timestamp'
op|','
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'content_type'"
op|':'
name|'content_type'
op|','
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'merge_items'
op|'('
op|'['
name|'record'
op|']'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|'"DB doesn\'t exist"'
op|')'
newline|'\n'
dedent|''
name|'pending_size'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pending_size'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'pending_size'
op|'>'
name|'PENDING_CAP'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|'['
name|'record'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'lock_parent_directory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'pending_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'a+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
comment|"# Colons aren't used in base64 encoding; so they are our"
nl|'\n'
comment|'# delimiter'
nl|'\n'
indent|'                    '
name|'fp'
op|'.'
name|'write'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'pickle'
op|'.'
name|'dumps'
op|'('
nl|'\n'
op|'('
name|'name'
op|','
name|'timestamp'
op|','
name|'size'
op|','
name|'content_type'
op|','
name|'etag'
op|','
name|'deleted'
op|')'
op|','
nl|'\n'
name|'protocol'
op|'='
name|'PICKLE_PROTOCOL'
op|')'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_deleted
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'is_deleted'
op|'('
name|'self'
op|','
name|'timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the DB is considered to be deleted.\n\n        :returns: True if the DB is considered to be deleted, False otherwise\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT put_timestamp, delete_timestamp, object_count\n                FROM container_stat'''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
comment|'# leave this db as a tombstone for a consistency window'
nl|'\n'
name|'if'
name|'timestamp'
name|'and'
name|'row'
op|'['
string|"'delete_timestamp'"
op|']'
op|'>'
name|'timestamp'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
comment|'# The container is considered deleted if the delete_timestamp'
nl|'\n'
comment|'# value is greater than the put_timestamp, and there are no'
nl|'\n'
comment|'# objects in the container.'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'row'
op|'['
string|"'object_count'"
op|']'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
op|')'
name|'and'
op|'('
name|'float'
op|'('
name|'row'
op|'['
string|"'delete_timestamp'"
op|']'
op|')'
op|'>'
name|'float'
op|'('
name|'row'
op|'['
string|"'put_timestamp'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get global data for the container.\n\n        :returns: a dict with at least the following keys: account, container,\n                  created_at, put_timestamp, delete_timestamp, object_count,\n                  bytes_used, reported_put_timestamp,\n                  reported_delete_timestamp, reported_object_count,\n                  reported_bytes_used, hash, id, x_container_sync_point1, and\n                  x_container_sync_point2\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT account, container, created_at, put_timestamp,\n                        delete_timestamp, object_count, bytes_used,\n                        reported_put_timestamp, reported_delete_timestamp,\n                        reported_object_count, reported_bytes_used, hash, id,\n                        x_container_sync_point1, x_container_sync_point2\n                    FROM container_stat\n                '''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: x_container_sync_point'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'return'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT account, container, created_at, put_timestamp,\n                        delete_timestamp, object_count, bytes_used,\n                        reported_put_timestamp, reported_delete_timestamp,\n                        reported_object_count, reported_bytes_used, hash, id,\n                        -1 AS x_container_sync_point1,\n                        -1 AS x_container_sync_point2\n                    FROM container_stat\n                '''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_x_container_sync_points
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_x_container_sync_points'
op|'('
name|'self'
op|','
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_x_container_sync_points'
op|'('
name|'conn'
op|','
name|'sync_point1'
op|','
nl|'\n'
name|'sync_point2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: x_container_sync_point'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    ALTER TABLE container_stat\n                    ADD COLUMN x_container_sync_point1 INTEGER DEFAULT -1\n                '''"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    ALTER TABLE container_stat\n                    ADD COLUMN x_container_sync_point2 INTEGER DEFAULT -1\n                '''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_x_container_sync_points'
op|'('
name|'conn'
op|','
name|'sync_point1'
op|','
nl|'\n'
name|'sync_point2'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_x_container_sync_points
dedent|''
dedent|''
name|'def'
name|'_set_x_container_sync_points'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sync_point1'
name|'is'
name|'not'
name|'None'
name|'and'
name|'sync_point2'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point1 = ?,\n                    x_container_sync_point2 = ?\n            '''"
op|','
op|'('
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sync_point1'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point1 = ?\n            '''"
op|','
op|'('
name|'sync_point1'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sync_point2'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point2 = ?\n            '''"
op|','
op|'('
name|'sync_point2'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reported
dedent|''
dedent|''
name|'def'
name|'reported'
op|'('
name|'self'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
name|'object_count'
op|','
nl|'\n'
name|'bytes_used'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update reported stats.\n\n        :param put_timestamp: put_timestamp to update\n        :param delete_timestamp: delete_timestamp to update\n        :param object_count: object_count to update\n        :param bytes_used: bytes_used to update\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET reported_put_timestamp = ?, reported_delete_timestamp = ?,\n                    reported_object_count = ?, reported_bytes_used = ?\n            '''"
op|','
op|'('
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
name|'object_count'
op|','
name|'bytes_used'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_objects_iter
dedent|''
dedent|''
name|'def'
name|'list_objects_iter'
op|'('
name|'self'
op|','
name|'limit'
op|','
name|'marker'
op|','
name|'end_marker'
op|','
name|'prefix'
op|','
name|'delimiter'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
name|'format'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of objects sorted by name starting at marker onward, up\n        to limit entries.  Entries will begin with the prefix and will not\n        have the delimiter after the prefix.\n\n        :param limit: maximum number of entries to get\n        :param marker: marker query\n        :param end_marker: end marker query\n        :param prefix: prefix query\n        :param delimeter: delimeter for query\n        :param path: if defined, will set the prefix and delimter based on\n                     the path\n        :param format: TOOD: remove as it is no longer used\n\n        :returns: list of tuples of (name, created_at, size, content_type,\n                  etag)\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
name|'path'
newline|'\n'
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'                '
name|'prefix'
op|'='
name|'path'
op|'='
name|'path'
op|'.'
name|'rstrip'
op|'('
string|"'/'"
op|')'
op|'+'
string|"'/'"
newline|'\n'
dedent|''
name|'delimiter'
op|'='
string|"'/'"
newline|'\n'
dedent|''
name|'elif'
name|'delimiter'
name|'and'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'orig_marker'
op|'='
name|'marker'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'results'
op|')'
op|'<'
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'query'
op|'='
string|"'''SELECT name, created_at, size, content_type, etag\n                           FROM object WHERE'''"
newline|'\n'
name|'query_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'end_marker'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name < ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'end_marker'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'marker'
name|'and'
name|'marker'
op|'>='
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name > ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'marker'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name >= ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' +deleted = 0'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' deleted = 0'"
newline|'\n'
dedent|''
name|'query'
op|'+='
string|"' ORDER BY name LIMIT ?'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'limit'
op|'-'
name|'len'
op|'('
name|'results'
op|')'
op|')'
newline|'\n'
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
name|'query_args'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'delimiter'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
name|'if'
name|'r'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|']'
newline|'\n'
dedent|''
name|'rowcount'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'curs'
op|':'
newline|'\n'
indent|'                    '
name|'rowcount'
op|'+='
number|'1'
newline|'\n'
name|'marker'
op|'='
name|'name'
op|'='
name|'row'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'results'
op|')'
op|'>='
name|'limit'
name|'or'
name|'not'
name|'name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
name|'delimiter'
op|','
name|'len'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'name'
op|'=='
name|'path'
op|':'
newline|'\n'
indent|'                            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'end'
op|'>='
number|'0'
name|'and'
name|'len'
op|'('
name|'name'
op|')'
op|'>'
name|'end'
op|'+'
name|'len'
op|'('
name|'delimiter'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'marker'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|']'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
name|'delimiter'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'end'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'marker'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|']'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
name|'delimiter'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'dir_name'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'dir_name'
op|'!='
name|'orig_marker'
op|':'
newline|'\n'
indent|'                            '
name|'results'
op|'.'
name|'append'
op|'('
op|'['
name|'dir_name'
op|','
string|"'0'"
op|','
number|'0'
op|','
name|'None'
op|','
string|"''"
op|']'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'results'
op|'.'
name|'append'
op|'('
name|'row'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rowcount'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|merge_items
dedent|''
dedent|''
name|'def'
name|'merge_items'
op|'('
name|'self'
op|','
name|'item_list'
op|','
name|'source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Merge items into the object table.\n\n        :param item_list: list of dictionaries of {\'name\', \'created_at\',\n                          \'size\', \'content_type\', \'etag\', \'deleted\'}\n        :param source: if defined, update incoming_sync with the source\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'max_rowid'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'rec'
name|'in'
name|'item_list'
op|':'
newline|'\n'
indent|'                '
name|'query'
op|'='
string|"'''\n                    DELETE FROM object\n                    WHERE name = ? AND (created_at < ?)\n                '''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' AND deleted IN (0, 1)'"
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
op|'('
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
name|'rec'
op|'['
string|"'created_at'"
op|']'
op|')'
op|')'
newline|'\n'
name|'query'
op|'='
string|"'SELECT 1 FROM object WHERE name = ?'"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' AND deleted IN (0, 1)'"
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
op|'('
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
op|')'
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO object (name, created_at, size,\n                            content_type, etag, deleted)\n                        VALUES (?, ?, ?, ?, ?, ?)\n                    '''"
op|','
op|'('
op|'['
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
name|'rec'
op|'['
string|"'created_at'"
op|']'
op|','
name|'rec'
op|'['
string|"'size'"
op|']'
op|','
nl|'\n'
name|'rec'
op|'['
string|"'content_type'"
op|']'
op|','
name|'rec'
op|'['
string|"'etag'"
op|']'
op|','
name|'rec'
op|'['
string|"'deleted'"
op|']'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'                    '
name|'max_rowid'
op|'='
name|'max'
op|'('
name|'max_rowid'
op|','
name|'rec'
op|'['
string|"'ROWID'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO incoming_sync (sync_point, remote_id)\n                        VALUES (?, ?)\n                    '''"
op|','
op|'('
name|'max_rowid'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'IntegrityError'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        UPDATE incoming_sync SET sync_point=max(?, sync_point)\n                        WHERE remote_id=?\n                    '''"
op|','
op|'('
name|'max_rowid'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AccountBroker
dedent|''
dedent|''
dedent|''
name|'class'
name|'AccountBroker'
op|'('
name|'DatabaseBroker'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encapsulates working with a account database."""'
newline|'\n'
DECL|variable|db_type
name|'db_type'
op|'='
string|"'account'"
newline|'\n'
DECL|variable|db_contains_type
name|'db_contains_type'
op|'='
string|"'container'"
newline|'\n'
nl|'\n'
DECL|member|_initialize
name|'def'
name|'_initialize'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a brand new database (tables, indices, triggers, etc.)\n\n        :param conn: DB connection object\n        :param put_timestamp: put timestamp\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Attempting to create a new database with no account set'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'create_container_table'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_account_stat_table'
op|'('
name|'conn'
op|','
name|'put_timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_container_table
dedent|''
name|'def'
name|'create_container_table'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create container table which is specific to the account DB.\n\n        :param conn: DB connection object\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE container (\n                ROWID INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT,\n                put_timestamp TEXT,\n                delete_timestamp TEXT,\n                object_count INTEGER,\n                bytes_used INTEGER,\n                deleted INTEGER DEFAULT 0\n            );\n\n            CREATE INDEX ix_container_deleted_name ON\n                container (deleted, name);\n\n            CREATE TRIGGER container_insert AFTER INSERT ON container\n            BEGIN\n                UPDATE account_stat\n                SET container_count = container_count + (1 - new.deleted),\n                    object_count = object_count + new.object_count,\n                    bytes_used = bytes_used + new.bytes_used,\n                    hash = chexor(hash, new.name,\n                                  new.put_timestamp || \'-\' ||\n                                    new.delete_timestamp || \'-\' ||\n                                    new.object_count || \'-\' || new.bytes_used);\n            END;\n\n            CREATE TRIGGER container_update BEFORE UPDATE ON container\n            BEGIN\n                SELECT RAISE(FAIL, \'UPDATE not allowed; DELETE and INSERT\');\n            END;\n\n\n            CREATE TRIGGER container_delete AFTER DELETE ON container\n            BEGIN\n                UPDATE account_stat\n                SET container_count = container_count - (1 - old.deleted),\n                    object_count = object_count - old.object_count,\n                    bytes_used = bytes_used - old.bytes_used,\n                    hash = chexor(hash, old.name,\n                                  old.put_timestamp || \'-\' ||\n                                    old.delete_timestamp || \'-\' ||\n                                    old.object_count || \'-\' || old.bytes_used);\n            END;\n        """'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_account_stat_table
dedent|''
name|'def'
name|'create_account_stat_table'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create account_stat table which is specific to the account DB.\n\n        :param conn: DB connection object\n        :param put_timestamp: put timestamp\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE account_stat (\n                account TEXT,\n                created_at TEXT,\n                put_timestamp TEXT DEFAULT \'0\',\n                delete_timestamp TEXT DEFAULT \'0\',\n                container_count INTEGER,\n                object_count INTEGER DEFAULT 0,\n                bytes_used INTEGER DEFAULT 0,\n                hash TEXT default \'00000000000000000000000000000000\',\n                id TEXT,\n                status TEXT DEFAULT \'\',\n                status_changed_at TEXT DEFAULT \'0\',\n                metadata TEXT DEFAULT \'\'\n            );\n\n            INSERT INTO account_stat (container_count) VALUES (0);\n        """'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n            UPDATE account_stat SET account = ?, created_at = ?, id = ?,\n                   put_timestamp = ?\n            '''"
op|','
op|'('
name|'self'
op|'.'
name|'account'
op|','
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'uuid4'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'put_timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_version
dedent|''
name|'def'
name|'get_db_version'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_db_version'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT name FROM sqlite_master\n                    WHERE name = 'ix_container_deleted_name' '''"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_db_version'
newline|'\n'
nl|'\n'
DECL|member|update_put_timestamp
dedent|''
name|'def'
name|'update_put_timestamp'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the put_timestamp.  Only modifies it if it is greater than\n        the current timestamp.\n\n        :param timestamp: put timestamp\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE account_stat SET put_timestamp = ?\n                WHERE put_timestamp < ? '''"
op|','
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_db
dedent|''
dedent|''
name|'def'
name|'_delete_db'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'timestamp'
op|','
name|'force'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the DB as deleted.\n\n        :param conn: DB connection object\n        :param timestamp: timestamp to mark as deleted\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n            UPDATE account_stat\n            SET delete_timestamp = ?,\n                status = \'DELETED\',\n                status_changed_at = ?\n            WHERE delete_timestamp < ? """'
op|','
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts
dedent|''
name|'def'
name|'_commit_puts'
op|'('
name|'self'
op|','
name|'item_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles commiting rows in .pending files."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'item_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'item_list'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_preallocate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'entry'
name|'in'
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'entry'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
op|'('
name|'name'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
nl|'\n'
name|'object_count'
op|','
name|'bytes_used'
op|','
name|'deleted'
op|')'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'entry'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
op|')'
newline|'\n'
name|'item_list'
op|'.'
name|'append'
op|'('
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'put_timestamp'"
op|':'
name|'put_timestamp'
op|','
nl|'\n'
string|"'delete_timestamp'"
op|':'
name|'delete_timestamp'
op|','
nl|'\n'
string|"'object_count'"
op|':'
name|'object_count'
op|','
nl|'\n'
string|"'bytes_used'"
op|':'
name|'bytes_used'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid pending entry %(file)s: %(entry)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'file'"
op|':'
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'entry'"
op|':'
name|'entry'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'ftruncate'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|empty
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the account DB is empty.\n\n        :returns: True if the database has no active containers.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'SELECT container_count from account_stat'"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reclaim
dedent|''
dedent|''
name|'def'
name|'reclaim'
op|'('
name|'self'
op|','
name|'container_timestamp'
op|','
name|'sync_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete rows from the container table that are marked deleted and\n        whose created_at timestamp is < object_timestamp.  Also deletes rows\n        from incoming_sync and outgoing_sync where the updated_at timestamp is\n        < sync_timestamp.\n\n        In addition, this calls the DatabaseBroker\'s :func:_reclaim method.\n\n        :param object_timestamp: max created_at timestamp of container rows to\n                                 delete\n        :param sync_timestamp: max update_at timestamp of sync rows to delete\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                DELETE FROM container WHERE\n                deleted = 1 AND delete_timestamp < ?\n            '''"
op|','
op|'('
name|'container_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM outgoing_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM incoming_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
op|','
name|'err'
op|':'
newline|'\n'
comment|"# Old dbs didn't have updated_at in the _sync tables."
nl|'\n'
indent|'                '
name|'if'
string|"'no such column: updated_at'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'DatabaseBroker'
op|'.'
name|'_reclaim'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'container_timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_container_timestamp
dedent|''
dedent|''
name|'def'
name|'get_container_timestamp'
op|'('
name|'self'
op|','
name|'container_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the put_timestamp of a container.\n\n        :param container_name: container name\n\n        :returns: put_timestamp of the container\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT put_timestamp FROM container\n                WHERE name = ? AND deleted != 1'''"
op|','
nl|'\n'
op|'('
name|'container_name'
op|','
op|')'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'ret'
op|'='
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|put_container
dedent|''
dedent|''
name|'def'
name|'put_container'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
nl|'\n'
name|'object_count'
op|','
name|'bytes_used'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a container with the given attributes.\n\n        :param name: name of the container to create\n        :param put_timestamp: put_timestamp of the container to create\n        :param delete_timestamp: delete_timestamp of the container to create\n        :param object_count: number of objects in the container\n        :param bytes_used: number of bytes used by the container\n        """'
newline|'\n'
name|'if'
name|'delete_timestamp'
op|'>'
name|'put_timestamp'
name|'and'
name|'object_count'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'deleted'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'deleted'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'record'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'put_timestamp'"
op|':'
name|'put_timestamp'
op|','
nl|'\n'
string|"'delete_timestamp'"
op|':'
name|'delete_timestamp'
op|','
nl|'\n'
string|"'object_count'"
op|':'
name|'object_count'
op|','
nl|'\n'
string|"'bytes_used'"
op|':'
name|'bytes_used'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'merge_items'
op|'('
op|'['
name|'record'
op|']'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'commit'
op|'='
name|'False'
newline|'\n'
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'a+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
comment|"# Colons aren't used in base64 encoding; so they are our"
nl|'\n'
comment|'# delimiter'
nl|'\n'
indent|'                '
name|'fp'
op|'.'
name|'write'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'pickle'
op|'.'
name|'dumps'
op|'('
nl|'\n'
op|'('
name|'name'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
name|'object_count'
op|','
nl|'\n'
name|'bytes_used'
op|','
name|'deleted'
op|')'
op|','
nl|'\n'
name|'protocol'
op|'='
name|'PICKLE_PROTOCOL'
op|')'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fp'
op|'.'
name|'tell'
op|'('
op|')'
op|'>'
name|'PENDING_CAP'
op|':'
newline|'\n'
indent|'                    '
name|'commit'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'commit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|can_delete_db
dedent|''
dedent|''
name|'def'
name|'can_delete_db'
op|'('
name|'self'
op|','
name|'cutoff'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the accont DB can be deleted.\n\n        :returns: True if the account can be deleted, False otherwise\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT status, put_timestamp, delete_timestamp, container_count\n                FROM account_stat'''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
comment|'# The account is considered deleted if its status is marked'
nl|'\n'
comment|'# as \'DELETED" and the delete_timestamp is older than the supplied'
nl|'\n'
comment|'# cutoff date; or if the delete_timestamp value is greater than'
nl|'\n'
comment|'# the put_timestamp, and there are no containers for the account'
nl|'\n'
name|'status_del'
op|'='
op|'('
name|'row'
op|'['
string|"'status'"
op|']'
op|'=='
string|"'DELETED'"
op|')'
newline|'\n'
name|'deltime'
op|'='
name|'float'
op|'('
name|'row'
op|'['
string|"'delete_timestamp'"
op|']'
op|')'
newline|'\n'
name|'past_cutoff'
op|'='
op|'('
name|'deltime'
op|'<'
name|'cutoff'
op|')'
newline|'\n'
name|'time_later'
op|'='
op|'('
name|'row'
op|'['
string|"'delete_timestamp'"
op|']'
op|'>'
name|'row'
op|'['
string|"'put_timestamp'"
op|']'
op|')'
newline|'\n'
name|'no_containers'
op|'='
op|'('
name|'row'
op|'['
string|"'container_count'"
op|']'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
op|')'
newline|'\n'
name|'return'
op|'('
nl|'\n'
op|'('
name|'status_del'
name|'and'
name|'past_cutoff'
op|')'
name|'or'
op|'('
name|'time_later'
name|'and'
name|'no_containers'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_deleted
dedent|''
dedent|''
name|'def'
name|'is_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the account DB is considered to be deleted.\n\n        :returns: True if the account DB is considered to be deleted, False\n                  otherwise\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT put_timestamp, delete_timestamp, container_count, status\n                FROM account_stat'''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'return'
name|'row'
op|'['
string|"'status'"
op|']'
op|'=='
string|"'DELETED'"
name|'or'
op|'('
nl|'\n'
name|'row'
op|'['
string|"'container_count'"
op|']'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
name|'and'
nl|'\n'
name|'row'
op|'['
string|"'delete_timestamp'"
op|']'
op|'>'
name|'row'
op|'['
string|"'put_timestamp'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_status_deleted
dedent|''
dedent|''
name|'def'
name|'is_status_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Only returns true if the status field is set to DELETED."""'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT status\n                FROM account_stat'''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'row'
op|'['
string|"'status'"
op|']'
op|'=='
string|'"DELETED"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get global data for the account.\n\n        :returns: a dict with at least the following keys: account, created_at,\n                  put_timestamp, delete_timestamp, container_count,\n                  object_count, bytes_used, hash, id\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT account, created_at,  put_timestamp, delete_timestamp,\n                       container_count, object_count, bytes_used, hash, id\n                FROM account_stat\n            '''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_containers_iter
dedent|''
dedent|''
name|'def'
name|'list_containers_iter'
op|'('
name|'self'
op|','
name|'limit'
op|','
name|'marker'
op|','
name|'end_marker'
op|','
name|'prefix'
op|','
nl|'\n'
name|'delimiter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of containerss sorted by name starting at marker onward, up\n        to limit entries.  Entries will begin with the prefix and will not\n        have the delimiter after the prefix.\n\n        :param limit: maximum number of entries to get\n        :param marker: marker query\n        :param end_marker: end marker query\n        :param prefix: prefix query\n        :param delimeter: delimeter for query\n\n        :returns: list of tuples of (name, object_count, bytes_used, 0)\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'delimiter'
name|'and'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'orig_marker'
op|'='
name|'marker'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'results'
op|')'
op|'<'
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'query'
op|'='
string|'"""\n                    SELECT name, object_count, bytes_used, 0\n                    FROM container\n                    WHERE deleted = 0 AND """'
newline|'\n'
name|'query_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'end_marker'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name <= ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'end_marker'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'marker'
name|'and'
name|'marker'
op|'>='
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name > ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'marker'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name >= ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' +deleted = 0'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' deleted = 0'"
newline|'\n'
dedent|''
name|'query'
op|'+='
string|"' ORDER BY name LIMIT ?'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'limit'
op|'-'
name|'len'
op|'('
name|'results'
op|')'
op|')'
newline|'\n'
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
name|'query_args'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'delimiter'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
name|'if'
name|'r'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|']'
newline|'\n'
dedent|''
name|'rowcount'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'curs'
op|':'
newline|'\n'
indent|'                    '
name|'rowcount'
op|'+='
number|'1'
newline|'\n'
name|'marker'
op|'='
name|'name'
op|'='
name|'row'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'results'
op|')'
op|'>='
name|'limit'
name|'or'
name|'not'
name|'name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
name|'delimiter'
op|','
name|'len'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'marker'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|']'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
name|'delimiter'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'dir_name'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'dir_name'
op|'!='
name|'orig_marker'
op|':'
newline|'\n'
indent|'                            '
name|'results'
op|'.'
name|'append'
op|'('
op|'['
name|'dir_name'
op|','
number|'0'
op|','
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'results'
op|'.'
name|'append'
op|'('
name|'row'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rowcount'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|merge_items
dedent|''
dedent|''
name|'def'
name|'merge_items'
op|'('
name|'self'
op|','
name|'item_list'
op|','
name|'source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Merge items into the container table.\n\n        :param item_list: list of dictionaries of {\'name\', \'put_timestamp\',\n                          \'delete_timestamp\', \'object_count\', \'bytes_used\',\n                          \'deleted\'}\n        :param source: if defined, update incoming_sync with the source\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'max_rowid'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'rec'
name|'in'
name|'item_list'
op|':'
newline|'\n'
indent|'                '
name|'record'
op|'='
op|'['
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
name|'rec'
op|'['
string|"'put_timestamp'"
op|']'
op|','
nl|'\n'
name|'rec'
op|'['
string|"'delete_timestamp'"
op|']'
op|','
name|'rec'
op|'['
string|"'object_count'"
op|']'
op|','
nl|'\n'
name|'rec'
op|'['
string|"'bytes_used'"
op|']'
op|','
name|'rec'
op|'['
string|"'deleted'"
op|']'
op|']'
newline|'\n'
name|'query'
op|'='
string|"'''\n                    SELECT name, put_timestamp, delete_timestamp,\n                           object_count, bytes_used, deleted\n                    FROM container WHERE name = ?\n                '''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' AND deleted IN (0, 1)'"
newline|'\n'
dedent|''
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
op|'('
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'None'
newline|'\n'
name|'row'
op|'='
name|'curs'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'if'
name|'row'
op|':'
newline|'\n'
indent|'                    '
name|'row'
op|'='
name|'list'
op|'('
name|'row'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'record'
op|'['
name|'i'
op|']'
name|'is'
name|'None'
name|'and'
name|'row'
op|'['
name|'i'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                            '
name|'record'
op|'['
name|'i'
op|']'
op|'='
name|'row'
op|'['
name|'i'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'row'
op|'['
number|'1'
op|']'
op|'>'
name|'record'
op|'['
number|'1'
op|']'
op|':'
comment|'# Keep newest put_timestamp'
newline|'\n'
indent|'                        '
name|'record'
op|'['
number|'1'
op|']'
op|'='
name|'row'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'row'
op|'['
number|'2'
op|']'
op|'>'
name|'record'
op|'['
number|'2'
op|']'
op|':'
comment|'# Keep newest delete_timestamp'
newline|'\n'
indent|'                        '
name|'record'
op|'['
number|'2'
op|']'
op|'='
name|'row'
op|'['
number|'2'
op|']'
newline|'\n'
comment|'# If deleted, mark as such'
nl|'\n'
dedent|''
name|'if'
name|'record'
op|'['
number|'2'
op|']'
op|'>'
name|'record'
op|'['
number|'1'
op|']'
name|'and'
name|'record'
op|'['
number|'3'
op|']'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'record'
op|'['
number|'5'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'record'
op|'['
number|'5'
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM container WHERE name = ? AND\n                                                deleted IN (0, 1)\n                '''"
op|','
op|'('
name|'record'
op|'['
number|'0'
op|']'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    INSERT INTO container (name, put_timestamp,\n                        delete_timestamp, object_count, bytes_used,\n                        deleted)\n                    VALUES (?, ?, ?, ?, ?, ?)\n                '''"
op|','
name|'record'
op|')'
newline|'\n'
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'                    '
name|'max_rowid'
op|'='
name|'max'
op|'('
name|'max_rowid'
op|','
name|'rec'
op|'['
string|"'ROWID'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO incoming_sync (sync_point, remote_id)\n                        VALUES (?, ?)\n                    '''"
op|','
op|'('
name|'max_rowid'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'IntegrityError'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        UPDATE incoming_sync SET sync_point=max(?, sync_point)\n                        WHERE remote_id=?\n                    '''"
op|','
op|'('
name|'max_rowid'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit
