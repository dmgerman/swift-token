begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nWhy our own memcache client?\nBy Michael Barton\n\npython-memcached doesn\'t use consistent hashing, so adding or\nremoving a memcache server from the pool invalidates a huge\npercentage of cached items.\n\nIf you keep a pool of python-memcached client objects, each client\nobject has its own connection to every memcached server, only one of\nwhich is ever in use.  So you wind up with n * m open sockets and\nalmost all of them idle. This client effectively has a pool for each\nserver, so the number of backend connections is hopefully greatly\nreduced.\n\npython-memcache uses pickle to store things, and there was already a\nhuge stink about Swift using pickles in memcache\n(http://osvdb.org/show/osvdb/86581).  That seemed sort of unfair,\nsince nova and keystone and everyone else use pickles for memcache\ntoo, but it\'s hidden behind a "standard" library. But changing would\nbe a security regression at this point.\n\nAlso, pylibmc wouldn\'t work for us because it needs to use python\nsockets in order to play nice with eventlet.\n\nLucid comes with memcached: v1.4.2.  Protocol documentation for that\nversion is at:\n\nhttp://github.com/memcached/memcached/blob/1.4.2/doc/protocol.txt\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'bisect'
name|'import'
name|'bisect'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'socket'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'pools'
name|'import'
name|'Pool'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'range'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_MEMCACHED_PORT
name|'DEFAULT_MEMCACHED_PORT'
op|'='
number|'11211'
newline|'\n'
nl|'\n'
DECL|variable|CONN_TIMEOUT
name|'CONN_TIMEOUT'
op|'='
number|'0.3'
newline|'\n'
DECL|variable|POOL_TIMEOUT
name|'POOL_TIMEOUT'
op|'='
number|'1.0'
comment|'# WAG'
newline|'\n'
DECL|variable|IO_TIMEOUT
name|'IO_TIMEOUT'
op|'='
number|'2.0'
newline|'\n'
DECL|variable|PICKLE_FLAG
name|'PICKLE_FLAG'
op|'='
number|'1'
newline|'\n'
DECL|variable|JSON_FLAG
name|'JSON_FLAG'
op|'='
number|'2'
newline|'\n'
DECL|variable|NODE_WEIGHT
name|'NODE_WEIGHT'
op|'='
number|'50'
newline|'\n'
DECL|variable|PICKLE_PROTOCOL
name|'PICKLE_PROTOCOL'
op|'='
number|'2'
newline|'\n'
DECL|variable|TRY_COUNT
name|'TRY_COUNT'
op|'='
number|'3'
newline|'\n'
nl|'\n'
comment|'# if ERROR_LIMIT_COUNT errors occur in ERROR_LIMIT_TIME seconds, the server'
nl|'\n'
comment|'# will be considered failed for ERROR_LIMIT_DURATION seconds.'
nl|'\n'
DECL|variable|ERROR_LIMIT_COUNT
name|'ERROR_LIMIT_COUNT'
op|'='
number|'10'
newline|'\n'
DECL|variable|ERROR_LIMIT_TIME
name|'ERROR_LIMIT_TIME'
op|'='
number|'60'
newline|'\n'
DECL|variable|ERROR_LIMIT_DURATION
name|'ERROR_LIMIT_DURATION'
op|'='
number|'60'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|md5hash
name|'def'
name|'md5hash'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'md5'
op|'('
name|'key'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_timeout
dedent|''
name|'def'
name|'sanitize_timeout'
op|'('
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sanitize a timeout value to use an absolute expiration time if the delta\n    is greater than 30 days (in seconds). Note that the memcached server\n    translates negative values to mean a delta of 30 days in seconds (and 1\n    additional second), client beware.\n    """'
newline|'\n'
name|'if'
name|'timeout'
op|'>'
op|'('
number|'30'
op|'*'
number|'24'
op|'*'
number|'60'
op|'*'
number|'60'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeout'
op|'+='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'timeout'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemcacheConnectionError
dedent|''
name|'class'
name|'MemcacheConnectionError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemcachePoolTimeout
dedent|''
name|'class'
name|'MemcachePoolTimeout'
op|'('
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemcacheConnPool
dedent|''
name|'class'
name|'MemcacheConnPool'
op|'('
name|'Pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Connection pool for Memcache Connections\n\n    The *server* parameter can be a hostname, an IPv4 address, or an IPv6\n    address with an optional port. See\n    :func:`swift.common.utils.parse_socket_string` for details.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'size'
op|','
name|'connect_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Pool'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'max_size'
op|'='
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|'='
name|'utils'
op|'.'
name|'parse_socket_string'
op|'('
nl|'\n'
name|'server'
op|','
name|'DEFAULT_MEMCACHED_PORT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connect_timeout'
op|'='
name|'connect_timeout'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addrs'
op|'='
name|'socket'
op|'.'
name|'getaddrinfo'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'socket'
op|'.'
name|'AF_UNSPEC'
op|','
nl|'\n'
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'family'
op|','
name|'socktype'
op|','
name|'proto'
op|','
name|'canonname'
op|','
name|'sockaddr'
op|'='
name|'addrs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'family'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
number|'1'
op|')'
newline|'\n'
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_connect_timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sock'
op|'.'
name|'connect'
op|'('
name|'sockaddr'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'sock'
op|'.'
name|'makefile'
op|'('
op|')'
op|','
name|'sock'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|','
name|'sock'
op|'='
name|'super'
op|'('
name|'MemcacheConnPool'
op|','
name|'self'
op|')'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fp'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# An error happened previously, so we need a new connection'
nl|'\n'
indent|'            '
name|'fp'
op|','
name|'sock'
op|'='
name|'self'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'fp'
op|','
name|'sock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MemcacheRing
dedent|''
dedent|''
name|'class'
name|'MemcacheRing'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Simple, consistent-hashed memcache client.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'servers'
op|','
name|'connect_timeout'
op|'='
name|'CONN_TIMEOUT'
op|','
nl|'\n'
name|'io_timeout'
op|'='
name|'IO_TIMEOUT'
op|','
name|'pool_timeout'
op|'='
name|'POOL_TIMEOUT'
op|','
nl|'\n'
name|'tries'
op|'='
name|'TRY_COUNT'
op|','
name|'allow_pickle'
op|'='
name|'False'
op|','
name|'allow_unpickle'
op|'='
name|'False'
op|','
nl|'\n'
name|'max_conns'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ring'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_errors'
op|'='
name|'dict'
op|'('
op|'('
op|'('
name|'serv'
op|','
op|'['
op|']'
op|')'
name|'for'
name|'serv'
name|'in'
name|'servers'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_error_limited'
op|'='
name|'dict'
op|'('
op|'('
op|'('
name|'serv'
op|','
number|'0'
op|')'
name|'for'
name|'serv'
name|'in'
name|'servers'
op|')'
op|')'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'sorted'
op|'('
name|'servers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'NODE_WEIGHT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_ring'
op|'['
name|'md5hash'
op|'('
string|"'%s-%s'"
op|'%'
op|'('
name|'server'
op|','
name|'i'
op|')'
op|')'
op|']'
op|'='
name|'server'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_tries'
op|'='
name|'tries'
name|'if'
name|'tries'
op|'<='
name|'len'
op|'('
name|'servers'
op|')'
name|'else'
name|'len'
op|'('
name|'servers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sorted'
op|'='
name|'sorted'
op|'('
name|'self'
op|'.'
name|'_ring'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_client_cache'
op|'='
name|'dict'
op|'('
op|'('
op|'('
name|'server'
op|','
nl|'\n'
name|'MemcacheConnPool'
op|'('
name|'server'
op|','
name|'max_conns'
op|','
nl|'\n'
name|'connect_timeout'
op|')'
op|')'
nl|'\n'
name|'for'
name|'server'
name|'in'
name|'servers'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_connect_timeout'
op|'='
name|'connect_timeout'
newline|'\n'
name|'self'
op|'.'
name|'_io_timeout'
op|'='
name|'io_timeout'
newline|'\n'
name|'self'
op|'.'
name|'_pool_timeout'
op|'='
name|'pool_timeout'
newline|'\n'
name|'self'
op|'.'
name|'_allow_pickle'
op|'='
name|'allow_pickle'
newline|'\n'
name|'self'
op|'.'
name|'_allow_unpickle'
op|'='
name|'allow_unpickle'
name|'or'
name|'allow_pickle'
newline|'\n'
nl|'\n'
DECL|member|_exception_occurred
dedent|''
name|'def'
name|'_exception_occurred'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'e'
op|','
name|'action'
op|'='
string|"'talking'"
op|','
nl|'\n'
name|'sock'
op|'='
name|'None'
op|','
name|'fp'
op|'='
name|'None'
op|','
name|'got_connection'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'e'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Timeout %(action)s to memcached: %(server)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'action'"
op|':'
name|'action'
op|','
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error %(action)s to memcached: %(server)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'action'"
op|':'
name|'action'
op|','
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'del'
name|'fp'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'sock'
op|':'
newline|'\n'
indent|'                '
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'del'
name|'sock'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'got_connection'
op|':'
newline|'\n'
comment|'# We need to return something to the pool'
nl|'\n'
comment|'# A new connection will be created the next time it is retrieved'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_errors'
op|'['
name|'server'
op|']'
op|'.'
name|'append'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_errors'
op|'['
name|'server'
op|']'
op|')'
op|'>'
name|'ERROR_LIMIT_COUNT'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_errors'
op|'['
name|'server'
op|']'
op|'='
op|'['
name|'err'
name|'for'
name|'err'
name|'in'
name|'self'
op|'.'
name|'_errors'
op|'['
name|'server'
op|']'
nl|'\n'
name|'if'
name|'err'
op|'>'
name|'now'
op|'-'
name|'ERROR_LIMIT_TIME'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_errors'
op|'['
name|'server'
op|']'
op|')'
op|'>'
name|'ERROR_LIMIT_COUNT'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_error_limited'
op|'['
name|'server'
op|']'
op|'='
name|'now'
op|'+'
name|'ERROR_LIMIT_DURATION'
newline|'\n'
name|'logging'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Error limiting server %s'"
op|')'
op|','
name|'server'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_conns
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_conns'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves a server conn from the pool, or connects a new one.\n        Chooses the server based on a consistent hash of "key".\n        """'
newline|'\n'
name|'pos'
op|'='
name|'bisect'
op|'('
name|'self'
op|'.'
name|'_sorted'
op|','
name|'key'
op|')'
newline|'\n'
name|'served'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'served'
op|')'
op|'<'
name|'self'
op|'.'
name|'_tries'
op|':'
newline|'\n'
indent|'            '
name|'pos'
op|'='
op|'('
name|'pos'
op|'+'
number|'1'
op|')'
op|'%'
name|'len'
op|'('
name|'self'
op|'.'
name|'_sorted'
op|')'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_ring'
op|'['
name|'self'
op|'.'
name|'_sorted'
op|'['
name|'pos'
op|']'
op|']'
newline|'\n'
name|'if'
name|'server'
name|'in'
name|'served'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'served'
op|'.'
name|'append'
op|'('
name|'server'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_error_limited'
op|'['
name|'server'
op|']'
op|'>'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'sock'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'MemcachePoolTimeout'
op|'('
name|'self'
op|'.'
name|'_pool_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'fp'
op|','
name|'sock'
op|'='
name|'self'
op|'.'
name|'_client_cache'
op|'['
name|'server'
op|']'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
dedent|''
name|'yield'
name|'server'
op|','
name|'fp'
op|','
name|'sock'
newline|'\n'
dedent|''
name|'except'
name|'MemcachePoolTimeout'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
nl|'\n'
name|'server'
op|','
name|'e'
op|','
name|'action'
op|'='
string|"'getting a connection'"
op|','
nl|'\n'
name|'got_connection'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Typically a Timeout exception caught here is the one raised'
nl|'\n'
comment|"# by the create() method of this server's MemcacheConnPool"
nl|'\n'
comment|'# object.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
nl|'\n'
name|'server'
op|','
name|'e'
op|','
name|'action'
op|'='
string|"'connecting'"
op|','
name|'sock'
op|'='
name|'sock'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_return_conn
dedent|''
dedent|''
dedent|''
name|'def'
name|'_return_conn'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a server connection to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'_client_cache'
op|'['
name|'server'
op|']'
op|'.'
name|'put'
op|'('
op|'('
name|'fp'
op|','
name|'sock'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|','
name|'serialize'
op|'='
name|'True'
op|','
name|'time'
op|'='
number|'0'
op|','
nl|'\n'
name|'min_compress_len'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set a key/value pair in memcache\n\n        :param key: key\n        :param value: value\n        :param serialize: if True, value is serialized with JSON before sending\n                          to memcache, or with pickle if configured to use\n                          pickle instead of JSON (to avoid cache poisoning)\n        :param time: the time to live\n        :min_compress_len: minimum compress length, this parameter was added\n                           to keep the signature compatible with\n                           python-memcached interface. This implementation\n                           ignores it.\n        """'
newline|'\n'
name|'key'
op|'='
name|'md5hash'
op|'('
name|'key'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'sanitize_timeout'
op|'('
name|'time'
op|')'
newline|'\n'
name|'flags'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'serialize'
name|'and'
name|'self'
op|'.'
name|'_allow_pickle'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'value'
op|','
name|'PICKLE_PROTOCOL'
op|')'
newline|'\n'
name|'flags'
op|'|='
name|'PICKLE_FLAG'
newline|'\n'
dedent|''
name|'elif'
name|'serialize'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
newline|'\n'
name|'flags'
op|'|='
name|'JSON_FLAG'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'set %s %d %d %s\\r\\n%s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'key'
op|','
name|'flags'
op|','
name|'timeout'
op|','
name|'len'
op|'('
name|'value'
op|')'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
comment|'# Wait for the set to complete'
nl|'\n'
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
dedent|''
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets the object specified by key.  It will also unserialize the object\n        before returning if it is serialized in memcache with JSON, or if it\n        is pickled and unpickling is allowed.\n\n        :param key: key\n        :returns: value of the key in memcache\n        """'
newline|'\n'
name|'key'
op|'='
name|'md5hash'
op|'('
name|'key'
op|')'
newline|'\n'
name|'value'
op|'='
name|'None'
newline|'\n'
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'get %s\\r\\n'"
op|'%'
name|'key'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'while'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'END'"
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'VALUE'"
name|'and'
name|'line'
op|'['
number|'1'
op|']'
op|'=='
name|'key'
op|':'
newline|'\n'
indent|'                            '
name|'size'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'value'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'size'
op|')'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'line'
op|'['
number|'2'
op|']'
op|')'
op|'&'
name|'PICKLE_FLAG'
op|':'
newline|'\n'
indent|'                                '
name|'if'
name|'self'
op|'.'
name|'_allow_unpickle'
op|':'
newline|'\n'
indent|'                                    '
name|'value'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                                    '
name|'value'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'int'
op|'('
name|'line'
op|'['
number|'2'
op|']'
op|')'
op|'&'
name|'JSON_FLAG'
op|':'
newline|'\n'
indent|'                                '
name|'value'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|incr
dedent|''
dedent|''
dedent|''
name|'def'
name|'incr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'delta'
op|'='
number|'1'
op|','
name|'time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Increments a key which has a numeric value by delta.\n        If the key can\'t be found, it\'s added as delta or 0 if delta < 0.\n        If passed a negative number, will use memcached\'s decr. Returns\n        the int stored in memcached\n        Note: The data memcached stores as the result of incr/decr is\n        an unsigned int.  decr\'s that result in a number below 0 are\n        stored as 0.\n\n        :param key: key\n        :param delta: amount to add to the value of key (or set as the value\n                      if the key is not found) will be cast to an int\n        :param time: the time to live\n        :returns: result of incrementing\n        :raises MemcacheConnectionError:\n        """'
newline|'\n'
name|'key'
op|'='
name|'md5hash'
op|'('
name|'key'
op|')'
newline|'\n'
name|'command'
op|'='
string|"'incr'"
newline|'\n'
name|'if'
name|'delta'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
string|"'decr'"
newline|'\n'
dedent|''
name|'delta'
op|'='
name|'str'
op|'('
name|'abs'
op|'('
name|'int'
op|'('
name|'delta'
op|')'
op|')'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'sanitize_timeout'
op|'('
name|'time'
op|')'
newline|'\n'
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'%s %s %s\\r\\n'"
op|'%'
op|'('
name|'command'
op|','
name|'key'
op|','
name|'delta'
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'NOT_FOUND'"
op|':'
newline|'\n'
indent|'                        '
name|'add_val'
op|'='
name|'delta'
newline|'\n'
name|'if'
name|'command'
op|'=='
string|"'decr'"
op|':'
newline|'\n'
indent|'                            '
name|'add_val'
op|'='
string|"'0'"
newline|'\n'
dedent|''
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'add %s %d %d %s\\r\\n%s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'key'
op|','
number|'0'
op|','
name|'timeout'
op|','
name|'len'
op|'('
name|'add_val'
op|')'
op|','
name|'add_val'
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'NOT_STORED'"
op|':'
newline|'\n'
indent|'                            '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'%s %s %s\\r\\n'"
op|'%'
op|'('
name|'command'
op|','
name|'key'
op|','
nl|'\n'
name|'delta'
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'ret'
op|'='
name|'int'
op|'('
name|'add_val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'ret'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'MemcacheConnectionError'
op|'('
string|'"No Memcached connections succeeded."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decr
dedent|''
name|'def'
name|'decr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'delta'
op|'='
number|'1'
op|','
name|'time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decrements a key which has a numeric value by delta. Calls incr with\n        -delta.\n\n        :param key: key\n        :param delta: amount to subtract to the value of key (or set the\n                      value to 0 if the key is not found) will be cast to\n                      an int\n        :param time: the time to live\n        :returns: result of decrementing\n        :raises MemcacheConnectionError:\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'incr'
op|'('
name|'key'
op|','
name|'delta'
op|'='
op|'-'
name|'delta'
op|','
name|'time'
op|'='
name|'time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deletes a key/value pair from memcache.\n\n        :param key: key to be deleted\n        """'
newline|'\n'
name|'key'
op|'='
name|'md5hash'
op|'('
name|'key'
op|')'
newline|'\n'
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'delete %s\\r\\n'"
op|'%'
name|'key'
op|')'
newline|'\n'
comment|'# Wait for the delete to complete'
nl|'\n'
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_multi
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_multi'
op|'('
name|'self'
op|','
name|'mapping'
op|','
name|'server_key'
op|','
name|'serialize'
op|'='
name|'True'
op|','
name|'time'
op|'='
number|'0'
op|','
nl|'\n'
name|'min_compress_len'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sets multiple key/value pairs in memcache.\n\n        :param mapping: dictionary of keys and values to be set in memcache\n        :param servery_key: key to use in determining which server in the ring\n                            is used\n        :param serialize: if True, value is serialized with JSON before sending\n                          to memcache, or with pickle if configured to use\n                          pickle instead of JSON (to avoid cache poisoning)\n        :param time: the time to live\n        :min_compress_len: minimum compress length, this parameter was added\n                           to keep the signature compatible with\n                           python-memcached interface. This implementation\n                           ignores it\n        """'
newline|'\n'
name|'server_key'
op|'='
name|'md5hash'
op|'('
name|'server_key'
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'sanitize_timeout'
op|'('
name|'time'
op|')'
newline|'\n'
name|'msg'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'mapping'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'md5hash'
op|'('
name|'key'
op|')'
newline|'\n'
name|'flags'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'serialize'
name|'and'
name|'self'
op|'.'
name|'_allow_pickle'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'value'
op|','
name|'PICKLE_PROTOCOL'
op|')'
newline|'\n'
name|'flags'
op|'|='
name|'PICKLE_FLAG'
newline|'\n'
dedent|''
name|'elif'
name|'serialize'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
newline|'\n'
name|'flags'
op|'|='
name|'JSON_FLAG'
newline|'\n'
dedent|''
name|'msg'
op|'+='
op|'('
string|"'set %s %d %d %s\\r\\n%s\\r\\n'"
op|'%'
nl|'\n'
op|'('
name|'key'
op|','
name|'flags'
op|','
name|'timeout'
op|','
name|'len'
op|'('
name|'value'
op|')'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'server_key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
name|'msg'
op|')'
newline|'\n'
comment|'# Wait for the set to complete'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'mapping'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_multi
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_multi'
op|'('
name|'self'
op|','
name|'keys'
op|','
name|'server_key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets multiple values from memcache for the given keys.\n\n        :param keys: keys for values to be retrieved from memcache\n        :param servery_key: key to use in determining which server in the ring\n                            is used\n        :returns: list of values\n        """'
newline|'\n'
name|'server_key'
op|'='
name|'md5hash'
op|'('
name|'server_key'
op|')'
newline|'\n'
name|'keys'
op|'='
op|'['
name|'md5hash'
op|'('
name|'key'
op|')'
name|'for'
name|'key'
name|'in'
name|'keys'
op|']'
newline|'\n'
name|'for'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
name|'in'
name|'self'
op|'.'
name|'_get_conns'
op|'('
name|'server_key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'_io_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sock'
op|'.'
name|'sendall'
op|'('
string|"'get %s\\r\\n'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'keys'
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'responses'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'while'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'END'"
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'VALUE'"
op|':'
newline|'\n'
indent|'                            '
name|'size'
op|'='
name|'int'
op|'('
name|'line'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'value'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'size'
op|')'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'line'
op|'['
number|'2'
op|']'
op|')'
op|'&'
name|'PICKLE_FLAG'
op|':'
newline|'\n'
indent|'                                '
name|'if'
name|'self'
op|'.'
name|'_allow_unpickle'
op|':'
newline|'\n'
indent|'                                    '
name|'value'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                                    '
name|'value'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'int'
op|'('
name|'line'
op|'['
number|'2'
op|']'
op|')'
op|'&'
name|'JSON_FLAG'
op|':'
newline|'\n'
indent|'                                '
name|'value'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'responses'
op|'['
name|'line'
op|'['
number|'1'
op|']'
op|']'
op|'='
name|'value'
newline|'\n'
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
dedent|''
name|'values'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'key'
name|'in'
name|'responses'
op|':'
newline|'\n'
indent|'                            '
name|'values'
op|'.'
name|'append'
op|'('
name|'responses'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'values'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_return_conn'
op|'('
name|'server'
op|','
name|'fp'
op|','
name|'sock'
op|')'
newline|'\n'
name|'return'
name|'values'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_exception_occurred'
op|'('
name|'server'
op|','
name|'e'
op|','
name|'sock'
op|'='
name|'sock'
op|','
name|'fp'
op|'='
name|'fp'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit
