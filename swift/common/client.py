begin_unit
comment|'# Copyright (c) 2010 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCloud Files client library used internally\n"""'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'httplib'
name|'import'
name|'HTTPConnection'
op|','
name|'HTTPException'
op|','
name|'HTTPSConnection'
newline|'\n'
name|'from'
name|'re'
name|'import'
name|'compile'
op|','
name|'DOTALL'
newline|'\n'
name|'from'
name|'tokenize'
name|'import'
name|'generate_tokens'
op|','
name|'STRING'
op|','
name|'NAME'
op|','
name|'OP'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
name|'as'
name|'_quote'
op|','
name|'unquote'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
op|','
name|'urlunparse'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'time'
name|'import'
name|'sleep'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|quote
dedent|''
name|'def'
name|'quote'
op|'('
name|'value'
op|','
name|'safe'
op|'='
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Patched version of urllib.quote that encodes utf8 strings before quoting\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf8'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_quote'
op|'('
name|'value'
op|','
name|'safe'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# look for a real json parser first'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# simplejson is popular and pretty good'
nl|'\n'
indent|'    '
name|'from'
name|'simplejson'
name|'import'
name|'loads'
name|'as'
name|'json_loads'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
comment|'# 2.6 will have a json module in the stdlib'
nl|'\n'
indent|'        '
name|'from'
name|'json'
name|'import'
name|'loads'
name|'as'
name|'json_loads'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
comment|'# fall back on local parser otherwise'
nl|'\n'
DECL|variable|comments
indent|'        '
name|'comments'
op|'='
name|'compile'
op|'('
string|"r'/\\*.*\\*/|//[^\\r\\n]*'"
op|','
name|'DOTALL'
op|')'
newline|'\n'
nl|'\n'
DECL|function|json_loads
name|'def'
name|'json_loads'
op|'('
name|'string'
op|')'
op|':'
newline|'\n'
indent|'            '
string|"'''\n            Fairly competent json parser exploiting the python tokenizer and\n            eval(). -- From python-cloudfiles\n\n            _loads(serialized_json) -> object\n            '''"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'='
op|'['
op|']'
newline|'\n'
name|'consts'
op|'='
op|'{'
string|"'true'"
op|':'
name|'True'
op|','
string|"'false'"
op|':'
name|'False'
op|','
string|"'null'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'string'
op|'='
string|"'('"
op|'+'
name|'comments'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'string'
op|')'
op|'+'
string|"')'"
newline|'\n'
name|'for'
name|'type'
op|','
name|'val'
op|','
name|'_'
op|','
name|'_'
op|','
name|'_'
name|'in'
name|'generate_tokens'
op|'('
name|'StringIO'
op|'('
name|'string'
op|')'
op|'.'
name|'readline'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
op|'('
name|'type'
op|'=='
name|'OP'
name|'and'
name|'val'
name|'not'
name|'in'
string|"'[]{}:,()-'"
op|')'
name|'or'
op|'('
name|'type'
op|'=='
name|'NAME'
name|'and'
name|'val'
name|'not'
name|'in'
name|'consts'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'AttributeError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'=='
name|'STRING'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'.'
name|'append'
op|'('
string|"'u'"
op|')'
newline|'\n'
name|'res'
op|'.'
name|'append'
op|'('
name|'val'
op|'.'
name|'replace'
op|'('
string|"'\\\\/'"
op|','
string|"'/'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'.'
name|'append'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'eval'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'res'
op|')'
op|','
op|'{'
op|'}'
op|','
name|'consts'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AttributeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientException
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ClientException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'http_scheme'
op|'='
string|"''"
op|','
name|'http_host'
op|'='
string|"''"
op|','
name|'http_port'
op|'='
string|"''"
op|','
nl|'\n'
name|'http_path'
op|'='
string|"''"
op|','
name|'http_query'
op|'='
string|"''"
op|','
name|'http_status'
op|'='
number|'0'
op|','
name|'http_reason'
op|'='
string|"''"
op|','
nl|'\n'
name|'http_device'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
name|'self'
op|'.'
name|'http_scheme'
op|'='
name|'http_scheme'
newline|'\n'
name|'self'
op|'.'
name|'http_host'
op|'='
name|'http_host'
newline|'\n'
name|'self'
op|'.'
name|'http_port'
op|'='
name|'http_port'
newline|'\n'
name|'self'
op|'.'
name|'http_path'
op|'='
name|'http_path'
newline|'\n'
name|'self'
op|'.'
name|'http_query'
op|'='
name|'http_query'
newline|'\n'
name|'self'
op|'.'
name|'http_status'
op|'='
name|'http_status'
newline|'\n'
name|'self'
op|'.'
name|'http_reason'
op|'='
name|'http_reason'
newline|'\n'
name|'self'
op|'.'
name|'http_device'
op|'='
name|'http_device'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'a'
op|'='
name|'self'
op|'.'
name|'msg'
newline|'\n'
name|'b'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'http_scheme'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'+='
string|"'%s://'"
op|'%'
name|'self'
op|'.'
name|'http_scheme'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_host'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'+='
name|'self'
op|'.'
name|'http_host'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_port'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'+='
string|"':%s'"
op|'%'
name|'self'
op|'.'
name|'http_port'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_path'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'+='
name|'self'
op|'.'
name|'http_path'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_query'
op|':'
newline|'\n'
indent|'            '
name|'b'
op|'+='
string|"'?%s'"
op|'%'
name|'self'
op|'.'
name|'http_query'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_status'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'b'
op|','
name|'self'
op|'.'
name|'http_status'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'http_status'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_reason'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'b'
op|','
name|'self'
op|'.'
name|'http_reason'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
string|"'- %s'"
op|'%'
name|'self'
op|'.'
name|'http_reason'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'http_device'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
string|"'%s: device %s'"
op|'%'
op|'('
name|'b'
op|','
name|'self'
op|'.'
name|'http_device'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
string|"'device %s'"
op|'%'
name|'self'
op|'.'
name|'http_device'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'b'
name|'and'
string|"'%s: %s'"
op|'%'
op|'('
name|'a'
op|','
name|'b'
op|')'
name|'or'
name|'a'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|http_connection
dedent|''
dedent|''
name|'def'
name|'http_connection'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make an HTTPConnection or HTTPSConnection\n\n    :param url: url to connect to\n    :returns: tuple of (parsed url, connection object)\n    :raises ClientException: Unable to handle protocol scheme\n    """'
newline|'\n'
name|'parsed'
op|'='
name|'urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'if'
name|'parsed'
op|'.'
name|'scheme'
op|'=='
string|"'http'"
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'HTTPConnection'
op|'('
name|'parsed'
op|'.'
name|'netloc'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parsed'
op|'.'
name|'scheme'
op|'=='
string|"'https'"
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'HTTPSConnection'
op|'('
name|'parsed'
op|'.'
name|'netloc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Cannot handle protocol scheme %s for url %s'"
op|'%'
nl|'\n'
op|'('
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'repr'
op|'('
name|'url'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'parsed'
op|','
name|'conn'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_auth
dedent|''
name|'def'
name|'get_auth'
op|'('
name|'url'
op|','
name|'user'
op|','
name|'key'
op|','
name|'snet'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get authentication/authorization credentials.\n\n    The snet parameter is used for Rackspace\'s ServiceNet internal network\n    implementation. In this function, it simply adds *snet-* to the beginning\n    of the host name for the returned storage URL. With Rackspace Cloud Files,\n    use of this network path causes no bandwidth charges but requires the\n    client to be running on Rackspace\'s ServiceNet network.\n\n    :param url: authentication/authorization URL\n    :param user: user to authenticate as\n    :param key: key or password for authorization\n    :param snet: use SERVICENET internal network (see above), default is False\n    :returns: tuple of (storage URL, auth token)\n    :raises ClientException: HTTP GET request to auth URL failed\n    """'
newline|'\n'
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
name|'parsed'
op|'.'
name|'path'
op|','
string|"''"
op|','
nl|'\n'
op|'{'
string|"'X-Auth-User'"
op|':'
name|'user'
op|','
string|"'X-Auth-Key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Auth GET failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
nl|'\n'
name|'http_path'
op|'='
name|'parsed'
op|'.'
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'url'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-storage-url'"
op|')'
newline|'\n'
name|'if'
name|'snet'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|'='
name|'list'
op|'('
name|'urlparse'
op|'('
name|'url'
op|')'
op|')'
newline|'\n'
comment|'# Second item in the list is the netloc'
nl|'\n'
name|'parsed'
op|'['
number|'1'
op|']'
op|'='
string|"'snet-'"
op|'+'
name|'parsed'
op|'['
number|'1'
op|']'
newline|'\n'
name|'url'
op|'='
name|'urlunparse'
op|'('
name|'parsed'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'url'
op|','
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-storage-token'"
op|','
nl|'\n'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-auth-token'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account
dedent|''
name|'def'
name|'get_account'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'marker'
op|'='
name|'None'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'prefix'
op|'='
name|'None'
op|','
nl|'\n'
name|'http_conn'
op|'='
name|'None'
op|','
name|'full_listing'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a listing of containers for the account.\n\n    :param url: storage URL\n    :param token: auth token\n    :param marker: marker query\n    :param limit: limit query\n    :param prefix: prefix query\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :param full_listing: if True, return a full listing, else returns a max\n                         of 10000 listings\n    :returns: a list of accounts\n    :raises ClientException: HTTP GET request failed\n    """'
newline|'\n'
name|'if'
name|'not'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'http_conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'full_listing'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
op|'['
op|']'
newline|'\n'
name|'listing'
op|'='
name|'get_account'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'marker'
op|','
name|'limit'
op|','
name|'prefix'
op|','
name|'http_conn'
op|')'
newline|'\n'
name|'while'
name|'listing'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'.'
name|'extend'
op|'('
name|'listing'
op|')'
newline|'\n'
name|'marker'
op|'='
name|'listing'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'listing'
op|'='
name|'get_account'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'marker'
op|','
name|'limit'
op|','
name|'prefix'
op|','
name|'http_conn'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
name|'qs'
op|'='
string|"'format=json'"
newline|'\n'
name|'if'
name|'marker'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&marker=%s'"
op|'%'
name|'quote'
op|'('
name|'marker'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'limit'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&limit=%d'"
op|'%'
name|'limit'
newline|'\n'
dedent|''
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&prefix=%s'"
op|'%'
name|'quote'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
string|"'%s?%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'qs'
op|')'
op|','
string|"''"
op|','
nl|'\n'
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'ClientException'
op|'('
string|"'Account GET failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
nl|'\n'
name|'http_path'
op|'='
name|'parsed'
op|'.'
name|'path'
op|','
name|'http_query'
op|'='
name|'qs'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'resp'
op|'.'
name|'status'
op|'=='
number|'204'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'json_loads'
op|'('
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|head_account
dedent|''
name|'def'
name|'head_account'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get account stats.\n\n    :param url: storage URL\n    :param token: auth token\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :returns: a tuple of (container count, object count, bytes used)\n    :raises ClientException: HTTP HEAD request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'request'
op|'('
string|"'HEAD'"
op|','
name|'parsed'
op|'.'
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Account HEAD failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
nl|'\n'
name|'http_path'
op|'='
name|'parsed'
op|'.'
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-account-container-count'"
op|','
number|'0'
op|')'
op|')'
op|','
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-account-object-count'"
op|','
number|'0'
op|')'
op|')'
op|','
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-account-bytes-used'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container
dedent|''
name|'def'
name|'get_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'marker'
op|'='
name|'None'
op|','
name|'limit'
op|'='
name|'None'
op|','
nl|'\n'
name|'prefix'
op|'='
name|'None'
op|','
name|'delimiter'
op|'='
name|'None'
op|','
name|'http_conn'
op|'='
name|'None'
op|','
nl|'\n'
name|'full_listing'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a listing of objects for the container.\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name to get a listing for\n    :param marker: marker query\n    :param limit: limit query\n    :param prefix: prefix query\n    :param delimeter: string to delimit the queries on\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :param full_listing: if True, return a full listing, else returns a max\n                         of 10000 listings\n    :returns: a list of objects\n    :raises ClientException: HTTP GET request failed\n    """'
newline|'\n'
name|'if'
name|'not'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'http_conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'full_listing'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
op|'['
op|']'
newline|'\n'
name|'listing'
op|'='
name|'get_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'marker'
op|','
name|'limit'
op|','
name|'prefix'
op|','
nl|'\n'
name|'delimiter'
op|','
name|'http_conn'
op|')'
newline|'\n'
name|'while'
name|'listing'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'.'
name|'extend'
op|'('
name|'listing'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'delimiter'
op|':'
newline|'\n'
indent|'                '
name|'marker'
op|'='
name|'listing'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'marker'
op|'='
name|'listing'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'listing'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'subdir'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'listing'
op|'='
name|'get_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'marker'
op|','
name|'limit'
op|','
nl|'\n'
name|'prefix'
op|','
name|'delimiter'
op|','
name|'http_conn'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
name|'path'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|')'
newline|'\n'
name|'qs'
op|'='
string|"'format=json'"
newline|'\n'
name|'if'
name|'marker'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&marker=%s'"
op|'%'
name|'quote'
op|'('
name|'marker'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'limit'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&limit=%d'"
op|'%'
name|'limit'
newline|'\n'
dedent|''
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&prefix=%s'"
op|'%'
name|'quote'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'delimiter'
op|':'
newline|'\n'
indent|'        '
name|'qs'
op|'+='
string|"'&delimiter=%s'"
op|'%'
name|'quote'
op|'('
name|'delimiter'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
string|"'%s?%s'"
op|'%'
op|'('
name|'path'
op|','
name|'qs'
op|')'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'ClientException'
op|'('
string|"'Container GET failed'"
op|','
nl|'\n'
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
nl|'\n'
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
name|'http_query'
op|'='
name|'qs'
op|','
nl|'\n'
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'resp'
op|'.'
name|'status'
op|'=='
number|'204'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'json_loads'
op|'('
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|head_container
dedent|''
name|'def'
name|'head_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get container stats.\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name to get stats for\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :returns: a tuple of (object count, bytes used)\n    :raises ClientException: HTTP HEAD request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'HEAD'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Container HEAD failed'"
op|','
nl|'\n'
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
nl|'\n'
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-container-object-count'"
op|','
number|'0'
op|')'
op|')'
op|','
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-container-bytes-used'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|put_container
dedent|''
name|'def'
name|'put_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create a container\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name to create\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :raises ClientException: HTTP PUT request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'PUT'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Container PUT failed'"
op|','
nl|'\n'
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
nl|'\n'
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_container
dedent|''
dedent|''
name|'def'
name|'delete_container'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Delete a container\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name to delete\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :raises ClientException: HTTP DELETE request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'DELETE'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Container DELETE failed'"
op|','
nl|'\n'
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
nl|'\n'
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_object
dedent|''
dedent|''
name|'def'
name|'get_object'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'name'
op|','
name|'http_conn'
op|'='
name|'None'
op|','
nl|'\n'
name|'resp_chunk_size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get an object\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name that the object is in\n    :param name: object name to get\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :param resp_chunk_size: if defined, chunk size of data to read\n    :returns: a list of objects\n    :raises ClientException: HTTP GET request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'GET'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'ClientException'
op|'('
string|"'Object GET failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
nl|'\n'
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'resp'
op|'.'
name|'getheaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|"'x-object-meta-'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
name|'unquote'
op|'('
name|'key'
op|'['
name|'len'
op|'('
string|"'x-object-meta-'"
op|')'
op|':'
op|']'
op|')'
op|']'
op|'='
name|'unquote'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'resp_chunk_size'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_object_body
indent|'        '
name|'def'
name|'_object_body'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'buf'
op|'='
name|'resp'
op|'.'
name|'read'
op|'('
name|'resp_chunk_size'
op|')'
newline|'\n'
name|'while'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'buf'
newline|'\n'
name|'buf'
op|'='
name|'resp'
op|'.'
name|'read'
op|'('
name|'resp_chunk_size'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'object_body'
op|'='
name|'_object_body'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'object_body'
op|'='
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'content-type'"
op|')'
op|','
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'content-length'"
op|','
number|'0'
op|')'
op|')'
op|','
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'last-modified'"
op|')'
op|','
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'etag'"
op|')'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|','
name|'metadata'
op|','
name|'object_body'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|head_object
dedent|''
name|'def'
name|'head_object'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'name'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get object info\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name that the object is in\n    :param name: object name to get info for\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :returns: a tuple of (content type, content length, last modfied, etag,\n              dictionary of metadata)\n    :raises ClientException: HTTP HEAD request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'HEAD'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Object HEAD failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
nl|'\n'
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'resp'
op|'.'
name|'getheaders'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|"'x-object-meta-'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
name|'unquote'
op|'('
name|'key'
op|'['
name|'len'
op|'('
string|"'x-object-meta-'"
op|')'
op|':'
op|']'
op|')'
op|']'
op|'='
name|'unquote'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'content-type'"
op|')'
op|','
name|'int'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'content-length'"
op|','
number|'0'
op|')'
op|')'
op|','
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'last-modified'"
op|')'
op|','
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'etag'"
op|')'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|','
name|'metadata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|put_object
dedent|''
name|'def'
name|'put_object'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'name'
op|','
name|'contents'
op|','
name|'metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'content_length'
op|'='
name|'None'
op|','
name|'etag'
op|'='
name|'None'
op|','
name|'chunk_size'
op|'='
number|'65536'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'None'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Put an object\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name that the object is in\n    :param name: object name to put\n    :param contents: file like object to read object data from\n    :param metadata: dictionary of object metadata\n    :param content_length: value to send as content-length header\n    :param etag: etag of contents\n    :param chunk_size: chunk size of data to write\n    :param content_type: value to send as content-type header\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :returns: etag from server response\n    :raises ClientException: HTTP PUT request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'X-Object-Meta-%s'"
op|'%'
name|'quote'
op|'('
name|'key'
op|')'
op|']'
op|'='
name|'quote'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'ETag'"
op|']'
op|'='
name|'etag'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
dedent|''
name|'if'
name|'content_length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|'='
name|'str'
op|'('
name|'content_length'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'content_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'Content-Type'"
op|']'
op|'='
name|'content_type'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'contents'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|'='
string|"'0'"
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'contents'
op|','
string|"'read'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'putrequest'
op|'('
string|"'PUT'"
op|','
name|'path'
op|')'
newline|'\n'
name|'for'
name|'header'
op|','
name|'value'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'putheader'
op|'('
name|'header'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'content_length'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'putheader'
op|'('
string|"'Transfer-Encoding'"
op|','
string|"'chunked'"
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'endheaders'
op|'('
op|')'
newline|'\n'
name|'chunk'
op|'='
name|'contents'
op|'.'
name|'read'
op|'('
name|'chunk_size'
op|')'
newline|'\n'
name|'while'
name|'chunk'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'content_length'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'send'
op|'('
string|"'%x\\r\\n%s\\r\\n'"
op|'%'
op|'('
name|'len'
op|'('
name|'chunk'
op|')'
op|','
name|'chunk'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'send'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'chunk'
op|'='
name|'contents'
op|'.'
name|'read'
op|'('
name|'chunk_size'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'content_length'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'send'
op|'('
string|"'0\\r\\n\\r\\n'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'request'
op|'('
string|"'PUT'"
op|','
name|'path'
op|','
name|'contents'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Object PUT failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
nl|'\n'
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'etag'"
op|')'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|post_object
dedent|''
name|'def'
name|'post_object'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'name'
op|','
name|'metadata'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Change object metadata\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name that the object is in\n    :param name: object name to change\n    :param metadata: dictionary of object metadata\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :raises ClientException: HTTP POST request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'X-Object-Meta-%s'"
op|'%'
name|'quote'
op|'('
name|'key'
op|')'
op|']'
op|'='
name|'quote'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'request'
op|'('
string|"'POST'"
op|','
name|'path'
op|','
string|"''"
op|','
name|'headers'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Object POST failed'"
op|','
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
nl|'\n'
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_object
dedent|''
dedent|''
name|'def'
name|'delete_object'
op|'('
name|'url'
op|','
name|'token'
op|','
name|'container'
op|','
name|'name'
op|','
name|'http_conn'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Delete object\n\n    :param url: storage URL\n    :param token: auth token\n    :param container: container name that the object is in\n    :param name: object name to delete\n    :param http_conn: HTTP connection object (If None, it will create the\n                      conn object)\n    :raises ClientException: HTTP DELETE request failed\n    """'
newline|'\n'
name|'if'
name|'http_conn'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_conn'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|','
name|'conn'
op|'='
name|'http_connection'
op|'('
name|'url'
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
name|'quote'
op|'('
name|'container'
op|')'
op|','
name|'quote'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'request'
op|'('
string|"'DELETE'"
op|','
name|'path'
op|','
string|"''"
op|','
op|'{'
string|"'X-Auth-Token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'200'
name|'or'
name|'resp'
op|'.'
name|'status'
op|'>='
number|'300'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ClientException'
op|'('
string|"'Object DELETE failed'"
op|','
nl|'\n'
name|'http_scheme'
op|'='
name|'parsed'
op|'.'
name|'scheme'
op|','
name|'http_host'
op|'='
name|'conn'
op|'.'
name|'host'
op|','
nl|'\n'
name|'http_port'
op|'='
name|'conn'
op|'.'
name|'port'
op|','
name|'http_path'
op|'='
name|'path'
op|','
name|'http_status'
op|'='
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
name|'http_reason'
op|'='
name|'resp'
op|'.'
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience class to make requests that will also retry the request"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'authurl'
op|','
name|'user'
op|','
name|'key'
op|','
name|'retries'
op|'='
number|'5'
op|','
name|'preauthurl'
op|'='
name|'None'
op|','
nl|'\n'
name|'preauthtoken'
op|'='
name|'None'
op|','
name|'snet'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param authurl: authenitcation URL\n        :param user: user name to authenticate as\n        :param key: key/password to authenticate with\n        :param retries: Number of times to retry the request before failing\n        :param preauthurl: storage URL (if you have already authenticated)\n        :param preauthtoken: authentication token (if you have already\n                             authenticated)\n        :param snet: use SERVICENET internal network default is False\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authurl'
op|'='
name|'authurl'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'user'
newline|'\n'
name|'self'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'retries'
op|'='
name|'retries'
newline|'\n'
name|'self'
op|'.'
name|'http_conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'url'
op|'='
name|'preauthurl'
newline|'\n'
name|'self'
op|'.'
name|'token'
op|'='
name|'preauthtoken'
newline|'\n'
name|'self'
op|'.'
name|'attempts'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'snet'
op|'='
name|'snet'
newline|'\n'
nl|'\n'
DECL|member|_retry
dedent|''
name|'def'
name|'_retry'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'http_conn'"
op|']'
op|'='
name|'self'
op|'.'
name|'http_conn'
newline|'\n'
name|'self'
op|'.'
name|'attempts'
op|'='
number|'0'
newline|'\n'
name|'backoff'
op|'='
number|'1'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'attempts'
op|'<='
name|'self'
op|'.'
name|'retries'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attempts'
op|'+='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'url'
name|'or'
name|'not'
name|'self'
op|'.'
name|'token'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'url'
op|','
name|'self'
op|'.'
name|'token'
op|'='
name|'get_auth'
op|'('
name|'self'
op|'.'
name|'authurl'
op|','
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'key'
op|','
nl|'\n'
name|'snet'
op|'='
name|'self'
op|'.'
name|'snet'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'http_conn'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'http_conn'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'http_conn'
op|'='
name|'http_connection'
op|'('
name|'self'
op|'.'
name|'url'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|"'http_conn'"
op|']'
op|'='
name|'self'
op|'.'
name|'http_conn'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'func'
op|'('
name|'self'
op|'.'
name|'url'
op|','
name|'self'
op|'.'
name|'token'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'socket'
op|'.'
name|'error'
op|','
name|'HTTPException'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'attempts'
op|'>'
name|'self'
op|'.'
name|'retries'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'http_conn'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'except'
name|'ClientException'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'attempts'
op|'>'
name|'self'
op|'.'
name|'retries'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'if'
name|'err'
op|'.'
name|'http_status'
op|'=='
number|'401'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'url'
op|'='
name|'self'
op|'.'
name|'token'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'attempts'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'elif'
number|'500'
op|'<='
name|'err'
op|'.'
name|'http_status'
op|'<='
number|'599'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'sleep'
op|'('
name|'backoff'
op|')'
newline|'\n'
name|'backoff'
op|'*='
number|'2'
newline|'\n'
nl|'\n'
DECL|member|head_account
dedent|''
dedent|''
name|'def'
name|'head_account'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`head_account`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'head_account'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_account
dedent|''
name|'def'
name|'get_account'
op|'('
name|'self'
op|','
name|'marker'
op|'='
name|'None'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'prefix'
op|'='
name|'None'
op|','
nl|'\n'
name|'full_listing'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`get_account`"""'
newline|'\n'
comment|'# TODO(unknown): With full_listing=True this will restart the entire'
nl|'\n'
comment|'# listing with each retry. Need to make a better version that just'
nl|'\n'
comment|'# retries where it left off.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'get_account'
op|','
name|'marker'
op|'='
name|'marker'
op|','
name|'limit'
op|'='
name|'limit'
op|','
nl|'\n'
name|'prefix'
op|'='
name|'prefix'
op|','
name|'full_listing'
op|'='
name|'full_listing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|head_container
dedent|''
name|'def'
name|'head_container'
op|'('
name|'self'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`head_container`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'head_container'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_container
dedent|''
name|'def'
name|'get_container'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'marker'
op|'='
name|'None'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'prefix'
op|'='
name|'None'
op|','
nl|'\n'
name|'delimiter'
op|'='
name|'None'
op|','
name|'full_listing'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`get_container`"""'
newline|'\n'
comment|'# TODO(unknown): With full_listing=True this will restart the entire'
nl|'\n'
comment|'# listing with each retry. Need to make a better version that just'
nl|'\n'
comment|'# retries where it left off.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'get_container'
op|','
name|'container'
op|','
name|'marker'
op|'='
name|'marker'
op|','
nl|'\n'
name|'limit'
op|'='
name|'limit'
op|','
name|'prefix'
op|'='
name|'prefix'
op|','
name|'delimiter'
op|'='
name|'delimiter'
op|','
nl|'\n'
name|'full_listing'
op|'='
name|'full_listing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|put_container
dedent|''
name|'def'
name|'put_container'
op|'('
name|'self'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`put_container`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'put_container'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_container
dedent|''
name|'def'
name|'delete_container'
op|'('
name|'self'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`delete_container`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'delete_container'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
DECL|member|head_object
dedent|''
name|'def'
name|'head_object'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`head_object`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'head_object'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_object
dedent|''
name|'def'
name|'get_object'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'resp_chunk_size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`get_object`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'get_object'
op|','
name|'container'
op|','
name|'obj'
op|','
nl|'\n'
name|'resp_chunk_size'
op|'='
name|'resp_chunk_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|put_object
dedent|''
name|'def'
name|'put_object'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'contents'
op|','
name|'metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'content_length'
op|'='
name|'None'
op|','
name|'etag'
op|'='
name|'None'
op|','
name|'chunk_size'
op|'='
number|'65536'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`put_object`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'put_object'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'contents'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|','
name|'content_length'
op|'='
name|'content_length'
op|','
name|'etag'
op|'='
name|'etag'
op|','
nl|'\n'
name|'chunk_size'
op|'='
name|'chunk_size'
op|','
name|'content_type'
op|'='
name|'content_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_object
dedent|''
name|'def'
name|'post_object'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`post_object`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'post_object'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_object
dedent|''
name|'def'
name|'delete_object'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for :func:`delete_object`"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_retry'
op|'('
name|'delete_object'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
