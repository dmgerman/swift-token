begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Miscellaneous utility functions for use with Swift."""'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'fcntl'
newline|'\n'
name|'import'
name|'grp'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pwd'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'threading'
name|'as'
name|'stdlib_threading'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
op|','
name|'sha1'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'random'
op|','
name|'shuffle'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
name|'as'
name|'_quote'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
op|','
name|'closing'
newline|'\n'
name|'import'
name|'ctypes'
newline|'\n'
name|'import'
name|'ctypes'
op|'.'
name|'util'
newline|'\n'
name|'from'
name|'ConfigParser'
name|'import'
name|'ConfigParser'
op|','
name|'NoSectionError'
op|','
name|'NoOptionError'
op|','
name|'RawConfigParser'
newline|'\n'
name|'from'
name|'optparse'
name|'import'
name|'OptionParser'
newline|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
op|','
name|'Empty'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkstemp'
op|','
name|'NamedTemporaryFile'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'simplejson'
name|'as'
name|'json'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'json'
newline|'\n'
dedent|''
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
name|'as'
name|'stdlib_urlparse'
op|','
name|'ParseResult'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'semaphore'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'GreenPool'
op|','
name|'sleep'
op|','
name|'Timeout'
op|','
name|'tpool'
op|','
name|'greenthread'
op|','
name|'greenio'
op|','
name|'event'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'socket'
op|','
name|'threading'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'queue'
newline|'\n'
name|'import'
name|'netifaces'
newline|'\n'
name|'import'
name|'codecs'
newline|'\n'
DECL|variable|utf8_decoder
name|'utf8_decoder'
op|'='
name|'codecs'
op|'.'
name|'getdecoder'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
DECL|variable|utf8_encoder
name|'utf8_encoder'
op|'='
name|'codecs'
op|'.'
name|'getencoder'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'import'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'http'
name|'import'
name|'is_success'
op|','
name|'is_redirection'
op|','
name|'HTTP_NOT_FOUND'
op|','
name|'HTTP_PRECONDITION_FAILED'
op|','
name|'HTTP_REQUESTED_RANGE_NOT_SATISFIABLE'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# logging doesn't import patched as cleanly as one would like"
nl|'\n'
name|'from'
name|'logging'
op|'.'
name|'handlers'
name|'import'
name|'SysLogHandler'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'logging'
op|'.'
name|'thread'
op|'='
name|'eventlet'
op|'.'
name|'green'
op|'.'
name|'thread'
newline|'\n'
name|'logging'
op|'.'
name|'threading'
op|'='
name|'eventlet'
op|'.'
name|'green'
op|'.'
name|'threading'
newline|'\n'
name|'logging'
op|'.'
name|'_lock'
op|'='
name|'logging'
op|'.'
name|'threading'
op|'.'
name|'RLock'
op|'('
op|')'
newline|'\n'
comment|'# setup notice level logging'
nl|'\n'
DECL|variable|NOTICE
name|'NOTICE'
op|'='
number|'25'
newline|'\n'
name|'logging'
op|'.'
name|'_levelNames'
op|'['
name|'NOTICE'
op|']'
op|'='
string|"'NOTICE'"
newline|'\n'
name|'SysLogHandler'
op|'.'
name|'priority_map'
op|'['
string|"'NOTICE'"
op|']'
op|'='
string|"'notice'"
newline|'\n'
nl|'\n'
comment|'# These are lazily pulled from libc elsewhere'
nl|'\n'
DECL|variable|_sys_fallocate
name|'_sys_fallocate'
op|'='
name|'None'
newline|'\n'
DECL|variable|_posix_fadvise
name|'_posix_fadvise'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# If set to non-zero, fallocate routines will fail based on free space'
nl|'\n'
comment|'# available being at or below this amount, in bytes.'
nl|'\n'
DECL|variable|FALLOCATE_RESERVE
name|'FALLOCATE_RESERVE'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Used by hash_path to offer a bit more security when generating hashes for'
nl|'\n'
comment|'# paths. It simply appends this value to all paths; guessing the hash a path'
nl|'\n'
comment|'# will end up with would also require knowing this suffix.'
nl|'\n'
DECL|variable|HASH_PATH_SUFFIX
name|'HASH_PATH_SUFFIX'
op|'='
string|"''"
newline|'\n'
DECL|variable|HASH_PATH_PREFIX
name|'HASH_PATH_PREFIX'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|variable|SWIFT_CONF_FILE
name|'SWIFT_CONF_FILE'
op|'='
string|"'/etc/swift/swift.conf'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidHashPathConfigError
name|'class'
name|'InvalidHashPathConfigError'
op|'('
name|'ValueError'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__str__
indent|'    '
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"[swift-hash]: both swift_hash_path_suffix and "'
string|'"swift_hash_path_prefix are missing from %s"'
op|'%'
name|'SWIFT_CONF_FILE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_hash_conf
dedent|''
dedent|''
name|'def'
name|'validate_hash_conf'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'HASH_PATH_SUFFIX'
newline|'\n'
name|'global'
name|'HASH_PATH_PREFIX'
newline|'\n'
name|'if'
name|'not'
name|'HASH_PATH_SUFFIX'
name|'and'
name|'not'
name|'HASH_PATH_PREFIX'
op|':'
newline|'\n'
indent|'        '
name|'hash_conf'
op|'='
name|'ConfigParser'
op|'('
op|')'
newline|'\n'
name|'if'
name|'hash_conf'
op|'.'
name|'read'
op|'('
name|'SWIFT_CONF_FILE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'HASH_PATH_SUFFIX'
op|'='
name|'hash_conf'
op|'.'
name|'get'
op|'('
string|"'swift-hash'"
op|','
nl|'\n'
string|"'swift_hash_path_suffix'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'NoSectionError'
op|','
name|'NoOptionError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'HASH_PATH_PREFIX'
op|'='
name|'hash_conf'
op|'.'
name|'get'
op|'('
string|"'swift-hash'"
op|','
nl|'\n'
string|"'swift_hash_path_prefix'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'NoSectionError'
op|','
name|'NoOptionError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'HASH_PATH_SUFFIX'
name|'and'
name|'not'
name|'HASH_PATH_PREFIX'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidHashPathConfigError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'validate_hash_conf'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidHashPathConfigError'
op|':'
newline|'\n'
comment|'# could get monkey patched or lazy loaded'
nl|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_hmac
dedent|''
name|'def'
name|'get_hmac'
op|'('
name|'request_method'
op|','
name|'path'
op|','
name|'expires'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns the hexdigest string of the HMAC-SHA1 (RFC 2104) for\n    the request.\n\n    :param request_method: Request method to allow.\n    :param path: The path to the resource to allow access to.\n    :param expires: Unix timestamp as an int for when the URL\n                    expires.\n    :param key: HMAC shared secret.\n\n    :returns: hexdigest str of the HMAC-SHA1 for the request.\n    """'
newline|'\n'
name|'return'
name|'hmac'
op|'.'
name|'new'
op|'('
nl|'\n'
name|'key'
op|','
string|"'%s\\n%s\\n%s'"
op|'%'
op|'('
name|'request_method'
op|','
name|'expires'
op|','
name|'path'
op|')'
op|','
name|'sha1'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Used by get_swift_info and register_swift_info to store information about'
nl|'\n'
comment|'# the swift cluster.'
nl|'\n'
DECL|variable|_swift_info
dedent|''
name|'_swift_info'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|_swift_admin_info
name|'_swift_admin_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_swift_info
name|'def'
name|'get_swift_info'
op|'('
name|'admin'
op|'='
name|'False'
op|','
name|'disallowed_sections'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns information about the swift cluster that has been previously\n    registered with the register_swift_info call.\n\n    :param admin: boolean value, if True will additionally return an \'admin\'\n                  section with information previously registered as admin\n                  info.\n    :param disallowed_sections: list of section names to be withheld from the\n                                information returned.\n    :returns: dictionary of information about the swift cluster.\n    """'
newline|'\n'
name|'disallowed_sections'
op|'='
name|'disallowed_sections'
name|'or'
op|'['
op|']'
newline|'\n'
name|'info'
op|'='
name|'dict'
op|'('
name|'_swift_info'
op|')'
newline|'\n'
name|'for'
name|'section'
name|'in'
name|'disallowed_sections'
op|':'
newline|'\n'
indent|'        '
name|'key_to_pop'
op|'='
name|'None'
newline|'\n'
name|'sub_section_dict'
op|'='
name|'info'
newline|'\n'
name|'for'
name|'sub_section'
name|'in'
name|'section'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key_to_pop'
op|':'
newline|'\n'
indent|'                '
name|'sub_section_dict'
op|'='
name|'sub_section_dict'
op|'.'
name|'get'
op|'('
name|'key_to_pop'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'sub_section_dict'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'sub_section_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'key_to_pop'
op|'='
name|'sub_section'
newline|'\n'
dedent|''
name|'sub_section_dict'
op|'.'
name|'pop'
op|'('
name|'key_to_pop'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'admin'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'['
string|"'admin'"
op|']'
op|'='
name|'dict'
op|'('
name|'_swift_admin_info'
op|')'
newline|'\n'
name|'info'
op|'['
string|"'admin'"
op|']'
op|'['
string|"'disallowed_sections'"
op|']'
op|'='
name|'list'
op|'('
name|'disallowed_sections'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_swift_info
dedent|''
name|'def'
name|'register_swift_info'
op|'('
name|'name'
op|'='
string|"'swift'"
op|','
name|'admin'
op|'='
name|'False'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Registers information about the swift cluster to be retrieved with calls\n    to get_swift_info.\n\n    NOTE: Do not use "." in the param: name or any keys in kwargs. "." is used\n          in the disallowed_sections to remove unwanted keys from /info.\n\n    :param name: string, the section name to place the information under.\n    :param admin: boolean, if True, information will be registered to an\n                  admin section which can optionally be withheld when\n                  requesting the information.\n    :param kwargs: key value arguments representing the information to be\n                   added.\n    :raises ValueError: if name or any of the keys in kwargs has "." in it\n    """'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'admin'"
name|'or'
name|'name'
op|'=='
string|"'disallowed_sections'"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'\\'{0}\\' is reserved name.'"
op|'.'
name|'format'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'admin'
op|':'
newline|'\n'
indent|'        '
name|'dict_to_use'
op|'='
name|'_swift_admin_info'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'dict_to_use'
op|'='
name|'_swift_info'
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'dict_to_use'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|'"."'
name|'in'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'\'Cannot use "." in a swift_info key: %s\''
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'dict_to_use'
op|'['
name|'name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'kwargs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|'"."'
name|'in'
name|'key'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'\'Cannot use "." in a swift_info key: %s\''
op|'%'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'dict_to_use'
op|'['
name|'name'
op|']'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|backward
dedent|''
dedent|''
name|'def'
name|'backward'
op|'('
name|'f'
op|','
name|'blocksize'
op|'='
number|'4096'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A generator returning lines from a file starting with the last line,\n    then the second last line, etc. i.e., it reads lines backwards.\n    Stops when the first line (if any) is read.\n    This is useful when searching for recent activity in very\n    large files.\n\n    :param f: file object to read\n    :param blocksize: no of characters to go backwards at each block\n    """'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_END'
op|')'
newline|'\n'
name|'if'
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'last_row'
op|'='
string|"''"
newline|'\n'
name|'while'
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'seek'
op|'('
op|'-'
name|'blocksize'
op|','
name|'os'
op|'.'
name|'SEEK_CUR'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'blocksize'
op|'='
name|'f'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
op|'-'
name|'blocksize'
op|','
name|'os'
op|'.'
name|'SEEK_CUR'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
name|'blocksize'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
op|'-'
name|'blocksize'
op|','
name|'os'
op|'.'
name|'SEEK_CUR'
op|')'
newline|'\n'
name|'rows'
op|'='
name|'block'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'rows'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'rows'
op|'['
op|'-'
number|'1'
op|']'
op|'+'
name|'last_row'
newline|'\n'
name|'while'
name|'rows'
op|':'
newline|'\n'
indent|'            '
name|'last_row'
op|'='
name|'rows'
op|'.'
name|'pop'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'rows'
name|'and'
name|'last_row'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'last_row'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'yield'
name|'last_row'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Used when reading config values'
nl|'\n'
DECL|variable|TRUE_VALUES
dedent|''
name|'TRUE_VALUES'
op|'='
name|'set'
op|'('
op|'('
string|"'true'"
op|','
string|"'1'"
op|','
string|"'yes'"
op|','
string|"'on'"
op|','
string|"'t'"
op|','
string|"'y'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|config_true_value
name|'def'
name|'config_true_value'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns True if the value is either True or a string in TRUE_VALUES.\n    Returns False otherwise.\n    """'
newline|'\n'
name|'return'
name|'value'
name|'is'
name|'True'
name|'or'
op|'('
name|'isinstance'
op|'('
name|'value'
op|','
name|'basestring'
op|')'
name|'and'
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'TRUE_VALUES'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|config_auto_int_value
dedent|''
name|'def'
name|'config_auto_int_value'
op|'('
name|'value'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns default if value is None or \'auto\'.\n    Returns value as an int or raises ValueError otherwise.\n    """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
name|'or'
op|'('
name|'isinstance'
op|'('
name|'value'
op|','
name|'basestring'
op|')'
name|'and'
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'auto'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'default'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Config option must be an integer or the '"
nl|'\n'
string|'\'string "auto", not "%s".\''
op|'%'
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|noop_libc_function
dedent|''
name|'def'
name|'noop_libc_function'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_configuration
dedent|''
name|'def'
name|'validate_configuration'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'validate_hash_conf'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidHashPathConfigError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Error: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_libc_function
dedent|''
dedent|''
name|'def'
name|'load_libc_function'
op|'('
name|'func_name'
op|','
name|'log_error'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Attempt to find the function in libc, otherwise return a no-op func.\n\n    :param func_name: name of the function to pull from libc.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'libc'
op|'='
name|'ctypes'
op|'.'
name|'CDLL'
op|'('
name|'ctypes'
op|'.'
name|'util'
op|'.'
name|'find_library'
op|'('
string|"'c'"
op|')'
op|','
name|'use_errno'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'libc'
op|','
name|'func_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'log_error'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Unable to locate %s in libc.  Leaving as a "'
nl|'\n'
string|'"no-op."'
op|')'
op|','
name|'func_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'noop_libc_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_trans_id
dedent|''
dedent|''
name|'def'
name|'generate_trans_id'
op|'('
name|'trans_id_suffix'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'tx%s-%010x%s'"
op|'%'
op|'('
nl|'\n'
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|'['
op|':'
number|'21'
op|']'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'quote'
op|'('
name|'trans_id_suffix'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_log_line
dedent|''
name|'def'
name|'get_log_line'
op|'('
name|'req'
op|','
name|'res'
op|','
name|'trans_time'
op|','
name|'additional_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a line for logging that matches the documented log line format\n    for backend servers.\n\n    :param req: the request.\n    :param res: the response.\n    :param trans_time: the time the request took to complete, a float.\n    :param additional_info: a string to log at the end of the line\n\n    :returns: a properly formated line for logging.\n    """'
newline|'\n'
nl|'\n'
name|'return'
string|'\'%s - - [%s] "%s %s" %s %s "%s" "%s" "%s" %.4f "%s" %d\''
op|'%'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'remote_addr'
op|','
nl|'\n'
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%d/%b/%Y:%H:%M:%S +0000'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'req'
op|'.'
name|'method'
op|','
name|'req'
op|'.'
name|'path'
op|','
name|'res'
op|'.'
name|'status'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'res'
op|'.'
name|'content_length'
name|'or'
string|"'-'"
op|','
name|'req'
op|'.'
name|'referer'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-trans-id'"
op|','
string|"'-'"
op|')'
op|','
nl|'\n'
name|'req'
op|'.'
name|'user_agent'
name|'or'
string|"'-'"
op|','
name|'trans_time'
op|','
name|'additional_info'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_trans_id_time
dedent|''
name|'def'
name|'get_trans_id_time'
op|'('
name|'trans_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'trans_id'
op|')'
op|'>='
number|'34'
name|'and'
name|'trans_id'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'tx'"
name|'and'
name|'trans_id'
op|'['
number|'23'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'trans_id'
op|'['
number|'24'
op|':'
number|'34'
op|']'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FileLikeIter
dedent|''
name|'class'
name|'FileLikeIter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'iterable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wraps an iterable to behave as a file-like object.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'iterator'
op|'='
name|'iter'
op|'('
name|'iterable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'buf'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        x.next() -> the next value, or raise StopIteration\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'I/O operation on closed file'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'buf'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'='
name|'self'
op|'.'
name|'buf'
newline|'\n'
name|'self'
op|'.'
name|'buf'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'size'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        read([size]) -> read at most size bytes, returned as a string.\n\n        If the size argument is negative or omitted, read until EOF is reached.\n        Notice that when in non-blocking mode, less data than what was\n        requested may be returned, even if no size parameter was given.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'I/O operation on closed file'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'size'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'buf'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'buf'
newline|'\n'
name|'self'
op|'.'
name|'buf'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'chunk'
op|')'
op|'>'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'buf'
op|'='
name|'chunk'
op|'['
name|'size'
op|':'
op|']'
newline|'\n'
name|'chunk'
op|'='
name|'chunk'
op|'['
op|':'
name|'size'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'chunk'
newline|'\n'
nl|'\n'
DECL|member|readline
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
name|'size'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        readline([size]) -> next line from the file, as a string.\n\n        Retain newline.  A non-negative size argument limits the maximum\n        number of bytes to return (an incomplete line may be returned then).\n        Return an empty string at EOF.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'I/O operation on closed file'"
op|')'
newline|'\n'
dedent|''
name|'data'
op|'='
string|"''"
newline|'\n'
name|'while'
string|"'\\n'"
name|'not'
name|'in'
name|'data'
name|'and'
op|'('
name|'size'
op|'<'
number|'0'
name|'or'
name|'len'
op|'('
name|'data'
op|')'
op|'<'
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'size'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'read'
op|'('
number|'1024'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'read'
op|'('
name|'size'
op|'-'
name|'len'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'data'
op|'+='
name|'chunk'
newline|'\n'
dedent|''
name|'if'
string|"'\\n'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|','
name|'sep'
op|','
name|'rest'
op|'='
name|'data'
op|'.'
name|'partition'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'data'
op|'+='
name|'sep'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'buf'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'buf'
op|'='
name|'rest'
op|'+'
name|'self'
op|'.'
name|'buf'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'buf'
op|'='
name|'rest'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|readlines
dedent|''
name|'def'
name|'readlines'
op|'('
name|'self'
op|','
name|'sizehint'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        readlines([size]) -> list of strings, each a line from the file.\n\n        Call readline() repeatedly and return a list of the lines so read.\n        The optional size argument, if given, is an approximate bound on the\n        total number of bytes in the lines returned.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'I/O operation on closed file'"
op|')'
newline|'\n'
dedent|''
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'self'
op|'.'
name|'readline'
op|'('
name|'sizehint'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'sizehint'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'sizehint'
op|'-='
name|'len'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'sizehint'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        close() -> None or (perhaps) an integer.  Close the file.\n\n        Sets data attribute .closed to True.  A closed file cannot be used for\n        further I/O operations.  close() may be called more than once without\n        error.  Some kinds of file objects (for example, opened by popen())\n        may return an exit status upon closing.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'iterator'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FallocateWrapper
dedent|''
dedent|''
name|'class'
name|'FallocateWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'noop'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'noop'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'func_name'
op|'='
string|"'posix_fallocate'"
newline|'\n'
name|'self'
op|'.'
name|'fallocate'
op|'='
name|'noop_libc_function'
newline|'\n'
name|'return'
newline|'\n'
comment|'## fallocate is preferred because we need the on-disk size to match'
nl|'\n'
comment|'## the allocated size. Older versions of sqlite require that the'
nl|'\n'
comment|'## two sizes match. However, fallocate is Linux only.'
nl|'\n'
dedent|''
name|'for'
name|'func'
name|'in'
op|'('
string|"'fallocate'"
op|','
string|"'posix_fallocate'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'func_name'
op|'='
name|'func'
newline|'\n'
name|'self'
op|'.'
name|'fallocate'
op|'='
name|'load_libc_function'
op|'('
name|'func'
op|','
name|'log_error'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fallocate'
name|'is'
name|'not'
name|'noop_libc_function'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'fallocate'
name|'is'
name|'noop_libc_function'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Unable to locate fallocate, posix_fallocate in "'
nl|'\n'
string|'"libc.  Leaving as a no-op."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'mode'
op|','
name|'offset'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The length parameter must be a ctypes.c_uint64."""'
newline|'\n'
name|'if'
name|'FALLOCATE_RESERVE'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'st'
op|'='
name|'os'
op|'.'
name|'fstatvfs'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'free'
op|'='
name|'st'
op|'.'
name|'f_frsize'
op|'*'
name|'st'
op|'.'
name|'f_bavail'
op|'-'
name|'length'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'free'
op|'<='
name|'FALLOCATE_RESERVE'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
string|"'FALLOCATE_RESERVE fail %s <= %s'"
op|'%'
op|'('
nl|'\n'
name|'free'
op|','
name|'FALLOCATE_RESERVE'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'args'
op|'='
op|'{'
nl|'\n'
string|"'fallocate'"
op|':'
op|'('
name|'fd'
op|','
name|'mode'
op|','
name|'offset'
op|','
name|'length'
op|')'
op|','
nl|'\n'
string|"'posix_fallocate'"
op|':'
op|'('
name|'fd'
op|','
name|'offset'
op|','
name|'length'
op|')'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'fallocate'
op|'('
op|'*'
name|'args'
op|'['
name|'self'
op|'.'
name|'func_name'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|disable_fallocate
dedent|''
dedent|''
name|'def'
name|'disable_fallocate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_sys_fallocate'
newline|'\n'
name|'_sys_fallocate'
op|'='
name|'FallocateWrapper'
op|'('
name|'noop'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fallocate
dedent|''
name|'def'
name|'fallocate'
op|'('
name|'fd'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Pre-allocate disk space for a file.\n\n    :param fd: file descriptor\n    :param size: size to allocate (in bytes)\n    """'
newline|'\n'
name|'global'
name|'_sys_fallocate'
newline|'\n'
name|'if'
name|'_sys_fallocate'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_sys_fallocate'
op|'='
name|'FallocateWrapper'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'size'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'size'
op|'='
number|'0'
newline|'\n'
comment|'# 1 means "FALLOC_FL_KEEP_SIZE", which means it pre-allocates invisibly'
nl|'\n'
dedent|''
name|'ret'
op|'='
name|'_sys_fallocate'
op|'('
name|'fd'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
name|'size'
op|')'
op|')'
newline|'\n'
name|'err'
op|'='
name|'ctypes'
op|'.'
name|'get_errno'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ret'
name|'and'
name|'err'
name|'not'
name|'in'
op|'('
number|'0'
op|','
name|'errno'
op|'.'
name|'ENOSYS'
op|','
name|'errno'
op|'.'
name|'EOPNOTSUPP'
op|','
nl|'\n'
name|'errno'
op|'.'
name|'EINVAL'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'OSError'
op|'('
name|'err'
op|','
string|"'Unable to fallocate(%s)'"
op|'%'
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fsync
dedent|''
dedent|''
name|'def'
name|'fsync'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sync modified file data and metadata to disk.\n\n    :param fd: file descriptor\n    """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'fcntl'
op|','
string|"'F_FULLSYNC'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_FULLSYNC'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'e'
op|'.'
name|'errno'
op|','
string|"'Unable to F_FULLSYNC(%s)'"
op|'%'
name|'fd'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'fsync'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fdatasync
dedent|''
dedent|''
name|'def'
name|'fdatasync'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sync modified file data to disk.\n\n    :param fd: file descriptor\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'fdatasync'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'        '
name|'fsync'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_buffer_cache
dedent|''
dedent|''
name|'def'
name|'drop_buffer_cache'
op|'('
name|'fd'
op|','
name|'offset'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Drop \'buffer\' cache for the given range of the given file.\n\n    :param fd: file descriptor\n    :param offset: start offset\n    :param length: length\n    """'
newline|'\n'
name|'global'
name|'_posix_fadvise'
newline|'\n'
name|'if'
name|'_posix_fadvise'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_posix_fadvise'
op|'='
name|'load_libc_function'
op|'('
string|"'posix_fadvise64'"
op|')'
newline|'\n'
comment|'# 4 means "POSIX_FADV_DONTNEED"'
nl|'\n'
dedent|''
name|'ret'
op|'='
name|'_posix_fadvise'
op|'('
name|'fd'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
name|'offset'
op|')'
op|','
nl|'\n'
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
name|'length'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'"posix_fadvise64(%(fd)s, %(offset)s, %(length)s, 4) "'
nl|'\n'
string|'"-> %(ret)s"'
op|','
op|'{'
string|"'fd'"
op|':'
name|'fd'
op|','
string|"'offset'"
op|':'
name|'offset'
op|','
nl|'\n'
string|"'length'"
op|':'
name|'length'
op|','
string|"'ret'"
op|':'
name|'ret'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|NORMAL_FORMAT
dedent|''
dedent|''
name|'NORMAL_FORMAT'
op|'='
string|'"%016.05f"'
newline|'\n'
DECL|variable|INTERNAL_FORMAT
name|'INTERNAL_FORMAT'
op|'='
name|'NORMAL_FORMAT'
op|'+'
string|"'_%016x'"
newline|'\n'
comment|'# Setting this to True will cause the internal format to always display'
nl|'\n'
comment|'# extended digits - even when the value is equivalent to the normalized form.'
nl|'\n'
comment|"# This isn't ideal during an upgrade when some servers might not understand"
nl|'\n'
comment|'# the new time format - but flipping it to True works great for testing.'
nl|'\n'
DECL|variable|FORCE_INTERNAL
name|'FORCE_INTERNAL'
op|'='
name|'False'
comment|'# or True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Timestamp
name|'class'
name|'Timestamp'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Internal Representation of Swift Time.\n\n    The normalized form of the X-Timestamp header looks like a float\n    with a fixed width to ensure stable string sorting - normalized\n    timestamps look like "1402464677.04188"\n\n    To support overwrites of existing data without modifying the original\n    timestamp but still maintain consistency a second internal offset vector\n    is append to the normalized timestamp form which compares and sorts\n    greater than the fixed width float format but less than a newer timestamp.\n    The internalized format of timestamps looks like\n    "1402464677.04188_0000000000000000" - the portion after the underscore is\n    the offset and is a formatted hexadecimal integer.\n\n    The internalized form is not exposed to clients in responses from\n    Swift.  Normal client operations will not create a timestamp with an\n    offset.\n\n    The Timestamp class in common.utils supports internalized and\n    normalized formatting of timestamps and also comparison of timestamp\n    values.  When the offset value of a Timestamp is 0 - it\'s considered\n    insignificant and need not be represented in the string format; to\n    support backwards compatibility during a Swift upgrade the\n    internalized and normalized form of a Timestamp with an\n    insignificant offset are identical.  When a timestamp includes an\n    offset it will always be represented in the internalized form, but\n    is still excluded from the normalized form.  Timestamps with an\n    equivalent timestamp portion (the float part) will compare and order\n    by their offset.  Timestamps with a greater timestamp portion will\n    always compare and order greater than a Timestamp with a lesser\n    timestamp regardless of it\'s offset.  String comparison and ordering\n    is guaranteed for the internalized string format, and is backwards\n    compatible for normalized timestamps which do not include an offset.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'timestamp'
op|','
name|'offset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'timestamp'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'='
name|'timestamp'
op|'.'
name|'split'
op|'('
string|"'_'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'float'
op|'('
name|'parts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'if'
name|'parts'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'offset'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'offset'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'float'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'offset'
op|'='
name|'getattr'
op|'('
name|'timestamp'
op|','
string|"'offset'"
op|','
number|'0'
op|')'
newline|'\n'
comment|'# increment offset'
nl|'\n'
dedent|''
name|'if'
name|'offset'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'offset'
op|'+='
name|'offset'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'offset must be non-negative'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'INTERNAL_FORMAT'
op|'%'
op|'('
name|'self'
op|'.'
name|'timestamp'
op|','
name|'self'
op|'.'
name|'offset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
string|"'You must specify which string format is required'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__float__
dedent|''
name|'def'
name|'__float__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'timestamp'
newline|'\n'
nl|'\n'
DECL|member|__int__
dedent|''
name|'def'
name|'__int__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'self'
op|'.'
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__nonzero__
dedent|''
name|'def'
name|'__nonzero__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'timestamp'
name|'or'
name|'self'
op|'.'
name|'offset'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|normal
name|'def'
name|'normal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'NORMAL_FORMAT'
op|'%'
name|'self'
op|'.'
name|'timestamp'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|internal
name|'def'
name|'internal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'offset'
name|'or'
name|'FORCE_INTERNAL'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'INTERNAL_FORMAT'
op|'%'
op|'('
name|'self'
op|'.'
name|'timestamp'
op|','
name|'self'
op|'.'
name|'offset'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'normal'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|isoformat
name|'def'
name|'isoformat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'isoformat'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcfromtimestamp'
op|'('
nl|'\n'
name|'float'
op|'('
name|'self'
op|'.'
name|'normal'
op|')'
op|')'
op|'.'
name|'isoformat'
op|'('
op|')'
newline|'\n'
comment|"# python isoformat() doesn't include msecs when zero"
nl|'\n'
name|'if'
name|'len'
op|'('
name|'isoformat'
op|')'
op|'<'
name|'len'
op|'('
string|'"1970-01-01T00:00:00.000000"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'isoformat'
op|'+='
string|'".000000"'
newline|'\n'
dedent|''
name|'return'
name|'isoformat'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Timestamp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other'
op|'='
name|'Timestamp'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'internal'
op|'=='
name|'other'
op|'.'
name|'internal'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Timestamp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other'
op|'='
name|'Timestamp'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'internal'
op|'!='
name|'other'
op|'.'
name|'internal'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'other'
op|','
name|'Timestamp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other'
op|'='
name|'Timestamp'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'internal'
op|','
name|'other'
op|'.'
name|'internal'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize_timestamp
dedent|''
dedent|''
name|'def'
name|'normalize_timestamp'
op|'('
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Format a timestamp (string or numeric) into a standardized\n    xxxxxxxxxx.xxxxx (10.5) format.\n\n    Note that timestamps using values greater than or equal to November 20th,\n    2286 at 17:46 UTC will use 11 digits to represent the number of\n    seconds.\n\n    :param timestamp: unix timestamp\n    :returns: normalized timestamp as a string\n    """'
newline|'\n'
name|'return'
name|'Timestamp'
op|'('
name|'timestamp'
op|')'
op|'.'
name|'normal'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_modified_date_to_timestamp
dedent|''
name|'def'
name|'last_modified_date_to_timestamp'
op|'('
name|'last_modified_date_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a last modified date (like you\'d get from a container listing,\n    e.g. 2014-02-28T23:22:36.698390) to a float.\n    """'
newline|'\n'
name|'return'
name|'Timestamp'
op|'('
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'strptime'
op|'('
nl|'\n'
name|'last_modified_date_str'
op|','
string|"'%Y-%m-%dT%H:%M:%S.%f'"
nl|'\n'
op|')'
op|'.'
name|'strftime'
op|'('
string|"'%s.%f'"
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize_delete_at_timestamp
dedent|''
name|'def'
name|'normalize_delete_at_timestamp'
op|'('
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Format a timestamp (string or numeric) into a standardized\n    xxxxxxxxxx (10) format.\n\n    Note that timestamps less than 0000000000 are raised to\n    0000000000 and values greater than November 20th, 2286 at\n    17:46:39 UTC will be capped at that date and time, resulting in\n    no return value exceeding 9999999999.\n\n    This cap is because the expirer is already working through a\n    sorted list of strings that were all a length of 10. Adding\n    another digit would mess up the sort and cause the expirer to\n    break from processing early. By 2286, this problem will need to\n    be fixed, probably by creating an additional .expiring_objects\n    account to work from with 11 (or more) digit container names.\n\n    :param timestamp: unix timestamp\n    :returns: normalized timestamp as a string\n    """'
newline|'\n'
name|'return'
string|"'%010d'"
op|'%'
name|'min'
op|'('
name|'max'
op|'('
number|'0'
op|','
name|'float'
op|'('
name|'timestamp'
op|')'
op|')'
op|','
number|'9999999999'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mkdirs
dedent|''
name|'def'
name|'mkdirs'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Ensures the path is a directory or makes it if not. Errors if the path\n    exists but is a file or on permissions failure.\n\n    :param path: path to create\n    """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EEXIST'
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|renamer
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'renamer'
op|'('
name|'old'
op|','
name|'new'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Attempt to fix / hide race conditions like empty object directories\n    being removed by backend processes during uploads, by retrying.\n\n    :param old: old path to be renamed\n    :param new: new path to be renamed to\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'new'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'old'
op|','
name|'new'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'        '
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'new'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rename'
op|'('
name|'old'
op|','
name|'new'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|split_path
dedent|''
dedent|''
name|'def'
name|'split_path'
op|'('
name|'path'
op|','
name|'minsegs'
op|'='
number|'1'
op|','
name|'maxsegs'
op|'='
name|'None'
op|','
name|'rest_with_last'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Validate and split the given HTTP request path.\n\n    **Examples**::\n\n        [\'a\'] = split_path(\'/a\')\n        [\'a\', None] = split_path(\'/a\', 1, 2)\n        [\'a\', \'c\'] = split_path(\'/a/c\', 1, 2)\n        [\'a\', \'c\', \'o/r\'] = split_path(\'/a/c/o/r\', 1, 3, True)\n\n    :param path: HTTP Request path to be split\n    :param minsegs: Minimum number of segments to be extracted\n    :param maxsegs: Maximum number of segments to be extracted\n    :param rest_with_last: If True, trailing data will be returned as part\n                           of last segment.  If False, and there is\n                           trailing data, raises ValueError.\n    :returns: list of segments with a length of maxsegs (non-existent\n              segments will return as None)\n    :raises: ValueError if given an invalid path\n    """'
newline|'\n'
name|'if'
name|'not'
name|'maxsegs'
op|':'
newline|'\n'
indent|'        '
name|'maxsegs'
op|'='
name|'minsegs'
newline|'\n'
dedent|''
name|'if'
name|'minsegs'
op|'>'
name|'maxsegs'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'minsegs > maxsegs: %d > %d'"
op|'%'
op|'('
name|'minsegs'
op|','
name|'maxsegs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rest_with_last'
op|':'
newline|'\n'
indent|'        '
name|'segs'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
name|'maxsegs'
op|')'
newline|'\n'
name|'minsegs'
op|'+='
number|'1'
newline|'\n'
name|'maxsegs'
op|'+='
number|'1'
newline|'\n'
name|'count'
op|'='
name|'len'
op|'('
name|'segs'
op|')'
newline|'\n'
name|'if'
op|'('
name|'segs'
op|'['
number|'0'
op|']'
name|'or'
name|'count'
op|'<'
name|'minsegs'
name|'or'
name|'count'
op|'>'
name|'maxsegs'
name|'or'
nl|'\n'
string|"''"
name|'in'
name|'segs'
op|'['
number|'1'
op|':'
name|'minsegs'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid path: %s'"
op|'%'
name|'quote'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'minsegs'
op|'+='
number|'1'
newline|'\n'
name|'maxsegs'
op|'+='
number|'1'
newline|'\n'
name|'segs'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
name|'maxsegs'
op|')'
newline|'\n'
name|'count'
op|'='
name|'len'
op|'('
name|'segs'
op|')'
newline|'\n'
name|'if'
op|'('
name|'segs'
op|'['
number|'0'
op|']'
name|'or'
name|'count'
op|'<'
name|'minsegs'
name|'or'
name|'count'
op|'>'
name|'maxsegs'
op|'+'
number|'1'
name|'or'
nl|'\n'
string|"''"
name|'in'
name|'segs'
op|'['
number|'1'
op|':'
name|'minsegs'
op|']'
name|'or'
nl|'\n'
op|'('
name|'count'
op|'=='
name|'maxsegs'
op|'+'
number|'1'
name|'and'
name|'segs'
op|'['
name|'maxsegs'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid path: %s'"
op|'%'
name|'quote'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'segs'
op|'='
name|'segs'
op|'['
number|'1'
op|':'
name|'maxsegs'
op|']'
newline|'\n'
name|'segs'
op|'.'
name|'extend'
op|'('
op|'['
name|'None'
op|']'
op|'*'
op|'('
name|'maxsegs'
op|'-'
number|'1'
op|'-'
name|'len'
op|'('
name|'segs'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'segs'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_device_partition
dedent|''
name|'def'
name|'validate_device_partition'
op|'('
name|'device'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Validate that a device and a partition are valid and won\'t lead to\n    directory traversal when used.\n\n    :param device: device to validate\n    :param partition: partition to validate\n    :raises: ValueError if given an invalid device or partition\n    """'
newline|'\n'
name|'invalid_device'
op|'='
name|'False'
newline|'\n'
name|'invalid_partition'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'device'
name|'or'
string|"'/'"
name|'in'
name|'device'
name|'or'
name|'device'
name|'in'
op|'['
string|"'.'"
op|','
string|"'..'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'invalid_device'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'partition'
name|'or'
string|"'/'"
name|'in'
name|'partition'
name|'or'
name|'partition'
name|'in'
op|'['
string|"'.'"
op|','
string|"'..'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'invalid_partition'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'invalid_device'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid device: %s'"
op|'%'
name|'quote'
op|'('
name|'device'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_partition'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid partition: %s'"
op|'%'
name|'quote'
op|'('
name|'partition'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RateLimitedIterator
dedent|''
dedent|''
name|'class'
name|'RateLimitedIterator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap an iterator to only yield elements at a rate of N per second.\n\n    :param iterable: iterable to wrap\n    :param elements_per_second: the rate at which to yield elements\n    :param limit_after: rate limiting kicks in only after yielding\n                        this many elements; default is 0 (rate limit\n                        immediately)\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'iterable'
op|','
name|'elements_per_second'
op|','
name|'limit_after'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'iterator'
op|'='
name|'iter'
op|'('
name|'iterable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'elements_per_second'
op|'='
name|'elements_per_second'
newline|'\n'
name|'self'
op|'.'
name|'limit_after'
op|'='
name|'limit_after'
newline|'\n'
name|'self'
op|'.'
name|'running_time'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'limit_after'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'limit_after'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'running_time'
op|'='
name|'ratelimit_sleep'
op|'('
name|'self'
op|'.'
name|'running_time'
op|','
nl|'\n'
name|'self'
op|'.'
name|'elements_per_second'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenthreadSafeIterator
dedent|''
dedent|''
name|'class'
name|'GreenthreadSafeIterator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap an iterator to ensure that only one greenthread is inside its next()\n    method at a time.\n\n    This is useful if an iterator\'s next() method may perform network IO, as\n    that may trigger a greenthread context switch (aka trampoline), which can\n    give another greenthread a chance to call next(). At that point, you get\n    an error like "ValueError: generator already executing". By wrapping calls\n    to next() with a mutex, we avoid that error.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'unsafe_iterable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unsafe_iter'
op|'='
name|'iter'
op|'('
name|'unsafe_iterable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'semaphore'
op|'='
name|'eventlet'
op|'.'
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
name|'value'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'semaphore'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'unsafe_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NullLogger
dedent|''
dedent|''
dedent|''
name|'class'
name|'NullLogger'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A no-op logger for eventlet wsgi."""'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'#"Logs" the args to nowhere'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoggerFileObject
dedent|''
dedent|''
name|'class'
name|'LoggerFileObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'logger'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'Connection reset by peer'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'STDOUT: Connection reset by peer'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'STDOUT: %s'"
op|')'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writelines
dedent|''
dedent|''
dedent|''
name|'def'
name|'writelines'
op|'('
name|'self'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'STDOUT: %s'"
op|')'
op|','
string|"'#012'"
op|'.'
name|'join'
op|'('
name|'values'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EBADF'
op|','
string|"'Bad file descriptor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'size'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EBADF'
op|','
string|"'Bad file descriptor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|readline
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
name|'size'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EBADF'
op|','
string|"'Bad file descriptor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tell
dedent|''
name|'def'
name|'tell'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|xreadlines
dedent|''
name|'def'
name|'xreadlines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StatsdClient
dedent|''
dedent|''
name|'class'
name|'StatsdClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'base_prefix'
op|'='
string|"''"
op|','
name|'tail_prefix'
op|'='
string|"''"
op|','
nl|'\n'
name|'default_sample_rate'
op|'='
number|'1'
op|','
name|'sample_rate_factor'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'_port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'_base_prefix'
op|'='
name|'base_prefix'
newline|'\n'
name|'self'
op|'.'
name|'set_prefix'
op|'('
name|'tail_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_default_sample_rate'
op|'='
name|'default_sample_rate'
newline|'\n'
name|'self'
op|'.'
name|'_sample_rate_factor'
op|'='
name|'sample_rate_factor'
newline|'\n'
name|'self'
op|'.'
name|'_target'
op|'='
op|'('
name|'self'
op|'.'
name|'_host'
op|','
name|'self'
op|'.'
name|'_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'random'
op|'='
name|'random'
newline|'\n'
nl|'\n'
DECL|member|set_prefix
dedent|''
name|'def'
name|'set_prefix'
op|'('
name|'self'
op|','
name|'new_prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'new_prefix'
name|'and'
name|'self'
op|'.'
name|'_base_prefix'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prefix'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'self'
op|'.'
name|'_base_prefix'
op|','
name|'new_prefix'
op|','
string|"''"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'new_prefix'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prefix'
op|'='
name|'new_prefix'
op|'+'
string|"'.'"
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_base_prefix'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prefix'
op|'='
name|'self'
op|'.'
name|'_base_prefix'
op|'+'
string|"'.'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prefix'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|_send
dedent|''
dedent|''
name|'def'
name|'_send'
op|'('
name|'self'
op|','
name|'m_name'
op|','
name|'m_value'
op|','
name|'m_type'
op|','
name|'sample_rate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sample_rate'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'sample_rate'
op|'='
name|'self'
op|'.'
name|'_default_sample_rate'
newline|'\n'
dedent|''
name|'sample_rate'
op|'='
name|'sample_rate'
op|'*'
name|'self'
op|'.'
name|'_sample_rate_factor'
newline|'\n'
name|'parts'
op|'='
op|'['
string|"'%s%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_prefix'
op|','
name|'m_name'
op|','
name|'m_value'
op|')'
op|','
name|'m_type'
op|']'
newline|'\n'
name|'if'
name|'sample_rate'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'random'
op|'('
op|')'
op|'<'
name|'sample_rate'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'.'
name|'append'
op|'('
string|"'@%s'"
op|'%'
op|'('
name|'sample_rate'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
comment|"# Ideally, we'd cache a sending socket in self, but that"
nl|'\n'
comment|'# results in a socket getting shared by multiple green threads.'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'closing'
op|'('
name|'self'
op|'.'
name|'_open_socket'
op|'('
op|')'
op|')'
name|'as'
name|'sock'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'sock'
op|'.'
name|'sendto'
op|'('
string|"'|'"
op|'.'
name|'join'
op|'('
name|'parts'
op|')'
op|','
name|'self'
op|'.'
name|'_target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_open_socket
dedent|''
dedent|''
name|'def'
name|'_open_socket'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_stats
dedent|''
name|'def'
name|'update_stats'
op|'('
name|'self'
op|','
name|'m_name'
op|','
name|'m_value'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_send'
op|'('
name|'m_name'
op|','
name|'m_value'
op|','
string|"'c'"
op|','
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|increment
dedent|''
name|'def'
name|'increment'
op|'('
name|'self'
op|','
name|'metric'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'update_stats'
op|'('
name|'metric'
op|','
number|'1'
op|','
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decrement
dedent|''
name|'def'
name|'decrement'
op|'('
name|'self'
op|','
name|'metric'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'update_stats'
op|'('
name|'metric'
op|','
op|'-'
number|'1'
op|','
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|timing
dedent|''
name|'def'
name|'timing'
op|'('
name|'self'
op|','
name|'metric'
op|','
name|'timing_ms'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_send'
op|'('
name|'metric'
op|','
name|'timing_ms'
op|','
string|"'ms'"
op|','
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|timing_since
dedent|''
name|'def'
name|'timing_since'
op|'('
name|'self'
op|','
name|'metric'
op|','
name|'orig_time'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'timing'
op|'('
name|'metric'
op|','
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'orig_time'
op|')'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|transfer_rate
dedent|''
name|'def'
name|'transfer_rate'
op|'('
name|'self'
op|','
name|'metric'
op|','
name|'elapsed_time'
op|','
name|'byte_xfer'
op|','
name|'sample_rate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'byte_xfer'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'timing'
op|'('
name|'metric'
op|','
nl|'\n'
name|'elapsed_time'
op|'*'
number|'1000'
op|'/'
name|'byte_xfer'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'sample_rate'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|server_handled_successfully
dedent|''
dedent|''
dedent|''
name|'def'
name|'server_handled_successfully'
op|'('
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    True for successful responses *or* error codes that are not Swift\'s fault,\n    False otherwise. For example, 500 is definitely the server\'s fault, but\n    412 is an error code (4xx are all errors) that is due to a header the\n    client sent.\n\n    If one is tracking error rates to monitor server health, one would be\n    advised to use a function like this one, lest a client cause a flurry of\n    404s or 416s and make a spurious spike in your errors graph.\n    """'
newline|'\n'
name|'return'
op|'('
name|'is_success'
op|'('
name|'status_int'
op|')'
name|'or'
nl|'\n'
name|'is_redirection'
op|'('
name|'status_int'
op|')'
name|'or'
nl|'\n'
name|'status_int'
op|'=='
name|'HTTP_NOT_FOUND'
name|'or'
nl|'\n'
name|'status_int'
op|'=='
name|'HTTP_PRECONDITION_FAILED'
name|'or'
nl|'\n'
name|'status_int'
op|'=='
name|'HTTP_REQUESTED_RANGE_NOT_SATISFIABLE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|timing_stats
dedent|''
name|'def'
name|'timing_stats'
op|'('
op|'**'
name|'dec_kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a decorator that logs timing events or errors for public methods in\n    swift\'s wsgi server controllers, based on response code.\n    """'
newline|'\n'
DECL|function|decorating_func
name|'def'
name|'decorating_func'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method'
op|'='
name|'func'
op|'.'
name|'func_name'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|_timing_stats
name|'def'
name|'_timing_stats'
op|'('
name|'ctrl'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'='
name|'func'
op|'('
name|'ctrl'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'server_handled_successfully'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ctrl'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|'('
name|'method'
op|'+'
string|"'.timing'"
op|','
nl|'\n'
name|'start_time'
op|','
op|'**'
name|'dec_kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ctrl'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|'('
name|'method'
op|'+'
string|"'.errors.timing'"
op|','
nl|'\n'
name|'start_time'
op|','
op|'**'
name|'dec_kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'_timing_stats'
newline|'\n'
dedent|''
name|'return'
name|'decorating_func'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoggingHandlerWeakRef
dedent|''
name|'class'
name|'LoggingHandlerWeakRef'
op|'('
name|'weakref'
op|'.'
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Like a weak reference, but passes through a couple methods that logging\n    handlers need.\n    """'
newline|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'referent'
op|'='
name|'self'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'referent'
op|':'
newline|'\n'
indent|'                '
name|'referent'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# This is to catch an issue with old py2.6 versions'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'referent'
op|'='
name|'self'
op|'('
op|')'
newline|'\n'
name|'if'
name|'referent'
op|':'
newline|'\n'
indent|'            '
name|'referent'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# double inheritance to support property with setter'
nl|'\n'
DECL|class|LogAdapter
dedent|''
dedent|''
dedent|''
name|'class'
name|'LogAdapter'
op|'('
name|'logging'
op|'.'
name|'LoggerAdapter'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Logger like object which performs some reformatting on calls to\n    :meth:`exception`.  Can be used to store a threadlocal transaction id and\n    client ip.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_cls_thread_local
name|'_cls_thread_local'
op|'='
name|'threading'
op|'.'
name|'local'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'logger'
op|','
name|'server'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'LoggerAdapter'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'logger'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server'
op|'='
name|'server'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
string|"'warn'"
op|','
name|'self'
op|'.'
name|'warning'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|txn_id
name|'def'
name|'txn_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'_cls_thread_local'
op|','
string|"'txn_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_cls_thread_local'
op|'.'
name|'txn_id'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'txn_id'
op|'.'
name|'setter'
newline|'\n'
DECL|member|txn_id
name|'def'
name|'txn_id'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_cls_thread_local'
op|'.'
name|'txn_id'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|client_ip
name|'def'
name|'client_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'_cls_thread_local'
op|','
string|"'client_ip'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_cls_thread_local'
op|'.'
name|'client_ip'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'client_ip'
op|'.'
name|'setter'
newline|'\n'
DECL|member|client_ip
name|'def'
name|'client_ip'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_cls_thread_local'
op|'.'
name|'client_ip'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|thread_locals
name|'def'
name|'thread_locals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'txn_id'
op|','
name|'self'
op|'.'
name|'client_ip'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'thread_locals'
op|'.'
name|'setter'
newline|'\n'
DECL|member|thread_locals
name|'def'
name|'thread_locals'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'txn_id'
op|','
name|'self'
op|'.'
name|'client_ip'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|getEffectiveLevel
dedent|''
name|'def'
name|'getEffectiveLevel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'getEffectiveLevel'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add extra info to message\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'extra'"
op|']'
op|'='
op|'{'
string|"'server'"
op|':'
name|'self'
op|'.'
name|'server'
op|','
string|"'txn_id'"
op|':'
name|'self'
op|'.'
name|'txn_id'
op|','
nl|'\n'
string|"'client_ip'"
op|':'
name|'self'
op|'.'
name|'client_ip'
op|'}'
newline|'\n'
name|'return'
name|'msg'
op|','
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|notice
dedent|''
name|'def'
name|'notice'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convenience function for syslog priority LOG_NOTICE. The python\n        logging lvl is set to 25, just above info.  SysLogHandler is\n        monkey patched to map this log lvl to the LOG_NOTICE syslog\n        priority.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'log'
op|'('
name|'NOTICE'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_exception
dedent|''
name|'def'
name|'_exception'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'LoggerAdapter'
op|'.'
name|'exception'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exception
dedent|''
name|'def'
name|'exception'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_junk'
op|','
name|'exc'
op|','
name|'_junk'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'call'
op|'='
name|'self'
op|'.'
name|'error'
newline|'\n'
name|'emsg'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'OSError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EIO'
op|','
name|'errno'
op|'.'
name|'ENOSPC'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'emsg'
op|'='
name|'str'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'call'
op|'='
name|'self'
op|'.'
name|'_exception'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'socket'
op|'.'
name|'error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ECONNREFUSED'
op|':'
newline|'\n'
indent|'                '
name|'emsg'
op|'='
name|'_'
op|'('
string|"'Connection refused'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EHOSTUNREACH'
op|':'
newline|'\n'
indent|'                '
name|'emsg'
op|'='
name|'_'
op|'('
string|"'Host unreachable'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ETIMEDOUT'
op|':'
newline|'\n'
indent|'                '
name|'emsg'
op|'='
name|'_'
op|'('
string|"'Connection timeout'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'call'
op|'='
name|'self'
op|'.'
name|'_exception'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'eventlet'
op|'.'
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'emsg'
op|'='
name|'exc'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'exc'
op|','
string|"'seconds'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'emsg'
op|'+='
string|"' (%ss)'"
op|'%'
name|'exc'
op|'.'
name|'seconds'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'exc'
op|'.'
name|'msg'
op|':'
newline|'\n'
indent|'                    '
name|'emsg'
op|'+='
string|"' %s'"
op|'%'
name|'exc'
op|'.'
name|'msg'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'call'
op|'='
name|'self'
op|'.'
name|'_exception'
newline|'\n'
dedent|''
name|'call'
op|'('
string|"'%s: %s'"
op|'%'
op|'('
name|'msg'
op|','
name|'emsg'
op|')'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_statsd_prefix
dedent|''
name|'def'
name|'set_statsd_prefix'
op|'('
name|'self'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The StatsD client prefix defaults to the "name" of the logger.  This\n        method may override that default with a specific value.  Currently used\n        in the proxy-server to differentiate the Account, Container, and Object\n        controllers.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'set_prefix'
op|'('
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
DECL|member|statsd_delegate
dedent|''
dedent|''
name|'def'
name|'statsd_delegate'
op|'('
name|'statsd_func_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Factory to create methods which delegate to methods on\n        self.logger.statsd_client (an instance of StatsdClient).  The\n        created methods conditionally delegate to a method whose name is given\n        in \'statsd_func_name\'.  The created delegate methods are a no-op when\n        StatsD logging is not configured.\n\n        :param statsd_func_name: the name of a method on StatsdClient.\n        """'
newline|'\n'
nl|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'StatsdClient'
op|','
name|'statsd_func_name'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'logger'
op|','
string|"'statsd_client'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'func'
op|'('
name|'self'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
DECL|variable|update_stats
dedent|''
name|'update_stats'
op|'='
name|'statsd_delegate'
op|'('
string|"'update_stats'"
op|')'
newline|'\n'
DECL|variable|increment
name|'increment'
op|'='
name|'statsd_delegate'
op|'('
string|"'increment'"
op|')'
newline|'\n'
DECL|variable|decrement
name|'decrement'
op|'='
name|'statsd_delegate'
op|'('
string|"'decrement'"
op|')'
newline|'\n'
DECL|variable|timing
name|'timing'
op|'='
name|'statsd_delegate'
op|'('
string|"'timing'"
op|')'
newline|'\n'
DECL|variable|timing_since
name|'timing_since'
op|'='
name|'statsd_delegate'
op|'('
string|"'timing_since'"
op|')'
newline|'\n'
DECL|variable|transfer_rate
name|'transfer_rate'
op|'='
name|'statsd_delegate'
op|'('
string|"'transfer_rate'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SwiftLogFormatter
dedent|''
name|'class'
name|'SwiftLogFormatter'
op|'('
name|'logging'
op|'.'
name|'Formatter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Custom logging.Formatter will append txn_id to a log message if the\n    record has one and the message does not. Optionally it can shorten\n    overly long log lines.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fmt'
op|'='
name|'None'
op|','
name|'datefmt'
op|'='
name|'None'
op|','
name|'max_line_length'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'Formatter'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'fmt'
op|'='
name|'fmt'
op|','
name|'datefmt'
op|'='
name|'datefmt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_line_length'
op|'='
name|'max_line_length'
newline|'\n'
nl|'\n'
DECL|member|format
dedent|''
name|'def'
name|'format'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'record'
op|','
string|"'server'"
op|')'
op|':'
newline|'\n'
comment|'# Catch log messages that were not initiated by swift'
nl|'\n'
comment|'# (for example, the keystone auth middleware)'
nl|'\n'
indent|'            '
name|'record'
op|'.'
name|'server'
op|'='
name|'record'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
comment|"# Included from Python's logging.Formatter and then altered slightly to"
nl|'\n'
comment|'# replace \\n with #012'
nl|'\n'
dedent|''
name|'record'
op|'.'
name|'message'
op|'='
name|'record'
op|'.'
name|'getMessage'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_fmt'
op|'.'
name|'find'
op|'('
string|"'%(asctime)'"
op|')'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'record'
op|'.'
name|'asctime'
op|'='
name|'self'
op|'.'
name|'formatTime'
op|'('
name|'record'
op|','
name|'self'
op|'.'
name|'datefmt'
op|')'
newline|'\n'
dedent|''
name|'msg'
op|'='
op|'('
name|'self'
op|'.'
name|'_fmt'
op|'%'
name|'record'
op|'.'
name|'__dict__'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'#012'"
op|')'
newline|'\n'
name|'if'
name|'record'
op|'.'
name|'exc_info'
op|':'
newline|'\n'
comment|'# Cache the traceback text to avoid converting it multiple times'
nl|'\n'
comment|"# (it's constant anyway)"
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'record'
op|'.'
name|'exc_text'
op|':'
newline|'\n'
indent|'                '
name|'record'
op|'.'
name|'exc_text'
op|'='
name|'self'
op|'.'
name|'formatException'
op|'('
nl|'\n'
name|'record'
op|'.'
name|'exc_info'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"'#012'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'record'
op|'.'
name|'exc_text'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|'!='
string|"'#012'"
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'msg'
op|'+'
string|"'#012'"
newline|'\n'
dedent|''
name|'msg'
op|'='
name|'msg'
op|'+'
name|'record'
op|'.'
name|'exc_text'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'hasattr'
op|'('
name|'record'
op|','
string|"'txn_id'"
op|')'
name|'and'
name|'record'
op|'.'
name|'txn_id'
name|'and'
nl|'\n'
name|'record'
op|'.'
name|'levelno'
op|'!='
name|'logging'
op|'.'
name|'INFO'
name|'and'
nl|'\n'
name|'record'
op|'.'
name|'txn_id'
name|'not'
name|'in'
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"%s (txn: %s)"'
op|'%'
op|'('
name|'msg'
op|','
name|'record'
op|'.'
name|'txn_id'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'hasattr'
op|'('
name|'record'
op|','
string|"'client_ip'"
op|')'
name|'and'
name|'record'
op|'.'
name|'client_ip'
name|'and'
nl|'\n'
name|'record'
op|'.'
name|'levelno'
op|'!='
name|'logging'
op|'.'
name|'INFO'
name|'and'
nl|'\n'
name|'record'
op|'.'
name|'client_ip'
name|'not'
name|'in'
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"%s (client_ip: %s)"'
op|'%'
op|'('
name|'msg'
op|','
name|'record'
op|'.'
name|'client_ip'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'max_line_length'
op|'>'
number|'0'
name|'and'
name|'len'
op|'('
name|'msg'
op|')'
op|'>'
name|'self'
op|'.'
name|'max_line_length'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'max_line_length'
op|'<'
number|'7'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'msg'
op|'['
op|':'
name|'self'
op|'.'
name|'max_line_length'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'approxhalf'
op|'='
op|'('
name|'self'
op|'.'
name|'max_line_length'
op|'-'
number|'5'
op|')'
op|'/'
number|'2'
newline|'\n'
name|'msg'
op|'='
name|'msg'
op|'['
op|':'
name|'approxhalf'
op|']'
op|'+'
string|'" ... "'
op|'+'
name|'msg'
op|'['
op|'-'
name|'approxhalf'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_logger
dedent|''
dedent|''
name|'def'
name|'get_logger'
op|'('
name|'conf'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'log_to_console'
op|'='
name|'False'
op|','
name|'log_route'
op|'='
name|'None'
op|','
nl|'\n'
name|'fmt'
op|'='
string|'"%(server)s: %(message)s"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the current system logger using config settings.\n\n    **Log config and defaults**::\n\n        log_facility = LOG_LOCAL0\n        log_level = INFO\n        log_name = swift\n        log_max_line_length = 0\n        log_udp_host = (disabled)\n        log_udp_port = logging.handlers.SYSLOG_UDP_PORT\n        log_address = /dev/log\n        log_statsd_host = (disabled)\n        log_statsd_port = 8125\n        log_statsd_default_sample_rate = 1.0\n        log_statsd_sample_rate_factor = 1.0\n        log_statsd_metric_prefix = (empty-string)\n\n    :param conf: Configuration dict to read settings from\n    :param name: Name of the logger\n    :param log_to_console: Add handler which writes to console on stderr\n    :param log_route: Route for the logging, not emitted to the log, just used\n                      to separate logging configurations\n    :param fmt: Override log format\n    """'
newline|'\n'
name|'if'
name|'not'
name|'conf'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|','
string|"'swift'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'log_route'
op|':'
newline|'\n'
indent|'        '
name|'log_route'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'log_route'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'propagate'
op|'='
name|'False'
newline|'\n'
comment|'# all new handlers will get the same formatter'
nl|'\n'
name|'formatter'
op|'='
name|'SwiftLogFormatter'
op|'('
nl|'\n'
name|'fmt'
op|'='
name|'fmt'
op|','
name|'max_line_length'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_max_line_length'"
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get_logger will only ever add one SysLog Handler to a logger'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'get_logger'
op|','
string|"'handler4logger'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'get_logger'
op|'.'
name|'handler4logger'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'logger'
name|'in'
name|'get_logger'
op|'.'
name|'handler4logger'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'get_logger'
op|'.'
name|'handler4logger'
op|'['
name|'logger'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# facility for this logger will be set by last call wins'
nl|'\n'
dedent|''
name|'facility'
op|'='
name|'getattr'
op|'('
name|'SysLogHandler'
op|','
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_facility'"
op|','
string|"'LOG_LOCAL0'"
op|')'
op|','
nl|'\n'
name|'SysLogHandler'
op|'.'
name|'LOG_LOCAL0'
op|')'
newline|'\n'
name|'udp_host'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_udp_host'"
op|')'
newline|'\n'
name|'if'
name|'udp_host'
op|':'
newline|'\n'
indent|'        '
name|'udp_port'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_udp_port'"
op|','
nl|'\n'
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SYSLOG_UDP_PORT'
op|')'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'SysLogHandler'
op|'('
name|'address'
op|'='
op|'('
name|'udp_host'
op|','
name|'udp_port'
op|')'
op|','
nl|'\n'
name|'facility'
op|'='
name|'facility'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'log_address'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_address'"
op|','
string|"'/dev/log'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'='
name|'SysLogHandler'
op|'('
name|'address'
op|'='
name|'log_address'
op|','
name|'facility'
op|'='
name|'facility'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|"# Either /dev/log isn't a UNIX socket or it does not exist at all"
nl|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'not'
name|'in'
op|'['
name|'errno'
op|'.'
name|'ENOTSOCK'
op|','
name|'errno'
op|'.'
name|'ENOENT'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'e'
newline|'\n'
dedent|''
name|'handler'
op|'='
name|'SysLogHandler'
op|'('
name|'facility'
op|'='
name|'facility'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'handler'
op|'.'
name|'setFormatter'
op|'('
name|'formatter'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'get_logger'
op|'.'
name|'handler4logger'
op|'['
name|'logger'
op|']'
op|'='
name|'handler'
newline|'\n'
nl|'\n'
comment|'# setup console logging'
nl|'\n'
name|'if'
name|'log_to_console'
name|'or'
name|'hasattr'
op|'('
name|'get_logger'
op|','
string|"'console_handler4logger'"
op|')'
op|':'
newline|'\n'
comment|'# remove pre-existing console handler for this logger'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'get_logger'
op|','
string|"'console_handler4logger'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'get_logger'
op|'.'
name|'console_handler4logger'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'logger'
name|'in'
name|'get_logger'
op|'.'
name|'console_handler4logger'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'get_logger'
op|'.'
name|'console_handler4logger'
op|'['
name|'logger'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'console_handler'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sys'
op|'.'
name|'__stderr__'
op|')'
newline|'\n'
name|'console_handler'
op|'.'
name|'setFormatter'
op|'('
name|'formatter'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'console_handler'
op|')'
newline|'\n'
name|'get_logger'
op|'.'
name|'console_handler4logger'
op|'['
name|'logger'
op|']'
op|'='
name|'console_handler'
newline|'\n'
nl|'\n'
comment|'# set the level for the logger'
nl|'\n'
dedent|''
name|'logger'
op|'.'
name|'setLevel'
op|'('
nl|'\n'
name|'getattr'
op|'('
name|'logging'
op|','
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_level'"
op|','
string|"'INFO'"
op|')'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'logging'
op|'.'
name|'INFO'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Setup logger with a StatsD client if so configured'
nl|'\n'
name|'statsd_host'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_statsd_host'"
op|')'
newline|'\n'
name|'if'
name|'statsd_host'
op|':'
newline|'\n'
indent|'        '
name|'statsd_port'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_statsd_port'"
op|','
number|'8125'
op|')'
op|')'
newline|'\n'
name|'base_prefix'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_statsd_metric_prefix'"
op|','
string|"''"
op|')'
newline|'\n'
name|'default_sample_rate'
op|'='
name|'float'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'log_statsd_default_sample_rate'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'sample_rate_factor'
op|'='
name|'float'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'log_statsd_sample_rate_factor'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'statsd_client'
op|'='
name|'StatsdClient'
op|'('
name|'statsd_host'
op|','
name|'statsd_port'
op|','
name|'base_prefix'
op|','
nl|'\n'
name|'name'
op|','
name|'default_sample_rate'
op|','
nl|'\n'
name|'sample_rate_factor'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'statsd_client'
op|'='
name|'statsd_client'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'.'
name|'statsd_client'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'adapted_logger'
op|'='
name|'LogAdapter'
op|'('
name|'logger'
op|','
name|'name'
op|')'
newline|'\n'
name|'other_handlers'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_custom_handlers'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'other_handlers'
op|':'
newline|'\n'
indent|'        '
name|'log_custom_handlers'
op|'='
op|'['
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'other_handlers'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
nl|'\n'
name|'if'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
name|'for'
name|'hook'
name|'in'
name|'log_custom_handlers'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'mod'
op|','
name|'fnc'
op|'='
name|'hook'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
name|'logger_hook'
op|'='
name|'getattr'
op|'('
name|'__import__'
op|'('
name|'mod'
op|','
name|'fromlist'
op|'='
op|'['
name|'fnc'
op|']'
op|')'
op|','
name|'fnc'
op|')'
newline|'\n'
name|'logger_hook'
op|'('
name|'conf'
op|','
name|'name'
op|','
name|'log_to_console'
op|','
name|'log_route'
op|','
name|'fmt'
op|','
nl|'\n'
name|'logger'
op|','
name|'adapted_logger'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'ImportError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'Error calling custom handler [%s]'"
op|'%'
name|'hook'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'Invalid custom handler format [%s]'"
op|'%'
name|'hook'
newline|'\n'
nl|'\n'
comment|'# Python 2.6 has the undesirable property of keeping references to all log'
nl|'\n'
comment|'# handlers around forever in logging._handlers and logging._handlerList.'
nl|'\n'
comment|'# Combine that with handlers that keep file descriptors, and you get an fd'
nl|'\n'
comment|'# leak.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# And no, we can't share handlers; a SyslogHandler has a socket, and if"
nl|'\n'
comment|'# two greenthreads end up logging at the same time, you could get message'
nl|'\n'
comment|'# overlap that garbles the logs and makes eventlet complain.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Python 2.7 uses weakrefs to avoid the leak, so let's do that too."
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
number|'0'
op|']'
op|'=='
number|'2'
name|'and'
name|'sys'
op|'.'
name|'version_info'
op|'['
number|'1'
op|']'
op|'<='
number|'6'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'_acquireLock'
op|'('
op|')'
comment|'# some thread-safety thing'
newline|'\n'
name|'for'
name|'handler'
name|'in'
name|'adapted_logger'
op|'.'
name|'logger'
op|'.'
name|'handlers'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'handler'
name|'in'
name|'logging'
op|'.'
name|'_handlers'
op|':'
newline|'\n'
indent|'                    '
name|'wr'
op|'='
name|'LoggingHandlerWeakRef'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'del'
name|'logging'
op|'.'
name|'_handlers'
op|'['
name|'handler'
op|']'
newline|'\n'
name|'logging'
op|'.'
name|'_handlers'
op|'['
name|'wr'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'for'
name|'i'
op|','
name|'handler_ref'
name|'in'
name|'enumerate'
op|'('
name|'logging'
op|'.'
name|'_handlerList'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'handler_ref'
name|'is'
name|'handler'
op|':'
newline|'\n'
indent|'                        '
name|'logging'
op|'.'
name|'_handlerList'
op|'['
name|'i'
op|']'
op|'='
name|'LoggingHandlerWeakRef'
op|'('
nl|'\n'
name|'handler'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'_releaseLock'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'adapted_logger'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_hub
dedent|''
name|'def'
name|'get_hub'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Checks whether poll is available and falls back\n    on select if it isn\'t.\n\n    Note about epoll:\n\n    Review: https://review.openstack.org/#/c/18806/\n\n    There was a problem where once out of every 30 quadrillion\n    connections, a coroutine wouldn\'t wake up when the client\n    closed its end. Epoll was not reporting the event or it was\n    getting swallowed somewhere. Then when that file descriptor\n    was re-used, eventlet would freak right out because it still\n    thought it was waiting for activity from it in some other coro.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'select'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'select'
op|','
string|'"poll"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"poll"'
newline|'\n'
dedent|''
name|'return'
string|'"selects"'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_privileges
dedent|''
dedent|''
name|'def'
name|'drop_privileges'
op|'('
name|'user'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sets the userid/groupid of the current process, get session leader, etc.\n\n    :param user: User name to change privileges to\n    """'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'geteuid'
op|'('
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'groups'
op|'='
op|'['
name|'g'
op|'.'
name|'gr_gid'
name|'for'
name|'g'
name|'in'
name|'grp'
op|'.'
name|'getgrall'
op|'('
op|')'
name|'if'
name|'user'
name|'in'
name|'g'
op|'.'
name|'gr_mem'
op|']'
newline|'\n'
name|'os'
op|'.'
name|'setgroups'
op|'('
name|'groups'
op|')'
newline|'\n'
dedent|''
name|'user'
op|'='
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'user'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'setgid'
op|'('
name|'user'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'setuid'
op|'('
name|'user'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'HOME'"
op|']'
op|'='
name|'user'
op|'['
number|'5'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'setsid'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'chdir'
op|'('
string|"'/'"
op|')'
comment|'# in case you need to rmdir on where you started the daemon'
newline|'\n'
name|'os'
op|'.'
name|'umask'
op|'('
number|'0o22'
op|')'
comment|'# ensure files are created with the correct privileges'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|capture_stdio
dedent|''
name|'def'
name|'capture_stdio'
op|'('
name|'logger'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Log unhandled exceptions, close stdio, capture stdout and stderr.\n\n    param logger: Logger object to use\n    """'
newline|'\n'
comment|'# log uncaught exceptions'
nl|'\n'
name|'sys'
op|'.'
name|'excepthook'
op|'='
name|'lambda'
op|'*'
name|'exc_info'
op|':'
name|'logger'
op|'.'
name|'critical'
op|'('
name|'_'
op|'('
string|"'UNCAUGHT EXCEPTION'"
op|')'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# collect stdio file desc not in use for logging'
nl|'\n'
name|'stdio_files'
op|'='
op|'['
name|'sys'
op|'.'
name|'stdin'
op|','
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stderr'
op|']'
newline|'\n'
name|'console_fds'
op|'='
op|'['
name|'h'
op|'.'
name|'stream'
op|'.'
name|'fileno'
op|'('
op|')'
name|'for'
name|'_junk'
op|','
name|'h'
name|'in'
name|'getattr'
op|'('
nl|'\n'
name|'get_logger'
op|','
string|"'console_handler4logger'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
name|'stdio_files'
op|'='
op|'['
name|'f'
name|'for'
name|'f'
name|'in'
name|'stdio_files'
name|'if'
name|'f'
op|'.'
name|'fileno'
op|'('
op|')'
name|'not'
name|'in'
name|'console_fds'
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'os'
op|'.'
name|'devnull'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'nullfile'
op|':'
newline|'\n'
comment|'# close stdio (excludes fds open for logging)'
nl|'\n'
indent|'        '
name|'for'
name|'f'
name|'in'
name|'stdio_files'
op|':'
newline|'\n'
comment|'# some platforms throw an error when attempting an stdin flush'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'dup2'
op|'('
name|'nullfile'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'f'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# redirect stdio'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'capture_stdout'"
op|','
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'LoggerFileObject'
op|'('
name|'logger'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'capture_stderr'"
op|','
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'LoggerFileObject'
op|'('
name|'logger'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_options
dedent|''
dedent|''
name|'def'
name|'parse_options'
op|'('
name|'parser'
op|'='
name|'None'
op|','
name|'once'
op|'='
name|'False'
op|','
name|'test_args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse standard swift server/daemon options with optparse.OptionParser.\n\n    :param parser: OptionParser to use. If not sent one will be created.\n    :param once: Boolean indicating the "once" option is available\n    :param test_args: Override sys.argv; used in testing\n\n    :returns : Tuple of (config, options); config is an absolute path to the\n               config file, options is the parser options as a dictionary.\n\n    :raises SystemExit: First arg (CONFIG) is required, file must exist\n    """'
newline|'\n'
name|'if'
name|'not'
name|'parser'
op|':'
newline|'\n'
indent|'        '
name|'parser'
op|'='
name|'OptionParser'
op|'('
name|'usage'
op|'='
string|'"%prog CONFIG [options]"'
op|')'
newline|'\n'
dedent|''
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-v"'
op|','
string|'"--verbose"'
op|','
name|'default'
op|'='
name|'False'
op|','
name|'action'
op|'='
string|'"store_true"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"log to console"'
op|')'
newline|'\n'
name|'if'
name|'once'
op|':'
newline|'\n'
indent|'        '
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-o"'
op|','
string|'"--once"'
op|','
name|'default'
op|'='
name|'False'
op|','
name|'action'
op|'='
string|'"store_true"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"only run one pass of daemon"'
op|')'
newline|'\n'
nl|'\n'
comment|'# if test_args is None, optparse will use sys.argv[:1]'
nl|'\n'
dedent|''
name|'options'
op|','
name|'args'
op|'='
name|'parser'
op|'.'
name|'parse_args'
op|'('
name|'args'
op|'='
name|'test_args'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'args'
op|':'
newline|'\n'
indent|'        '
name|'parser'
op|'.'
name|'print_usage'
op|'('
op|')'
newline|'\n'
name|'print'
name|'_'
op|'('
string|'"Error: missing config path argument"'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'config'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parser'
op|'.'
name|'print_usage'
op|'('
op|')'
newline|'\n'
name|'print'
name|'_'
op|'('
string|'"Error: unable to locate %s"'
op|')'
op|'%'
name|'config'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'extra_args'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# if any named options appear in remaining args, set the option to True'
nl|'\n'
name|'for'
name|'arg'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
name|'in'
name|'options'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'options'
op|','
name|'arg'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'extra_args'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'options'
op|'='
name|'vars'
op|'('
name|'options'
op|')'
newline|'\n'
name|'if'
name|'extra_args'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'['
string|"'extra_args'"
op|']'
op|'='
name|'extra_args'
newline|'\n'
dedent|''
name|'return'
name|'config'
op|','
name|'options'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|whataremyips
dedent|''
name|'def'
name|'whataremyips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the machine\'s ip addresses\n\n    :returns: list of Strings of ip addresses\n    """'
newline|'\n'
name|'addresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'interface'
name|'in'
name|'netifaces'
op|'.'
name|'interfaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'iface_data'
op|'='
name|'netifaces'
op|'.'
name|'ifaddresses'
op|'('
name|'interface'
op|')'
newline|'\n'
name|'for'
name|'family'
name|'in'
name|'iface_data'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'family'
name|'not'
name|'in'
op|'('
name|'netifaces'
op|'.'
name|'AF_INET'
op|','
name|'netifaces'
op|'.'
name|'AF_INET6'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'address'
name|'in'
name|'iface_data'
op|'['
name|'family'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'addr'
op|'='
name|'address'
op|'['
string|"'addr'"
op|']'
newline|'\n'
nl|'\n'
comment|'# If we have an ipv6 address remove the'
nl|'\n'
comment|'# %ether_interface at the end'
nl|'\n'
name|'if'
name|'family'
op|'=='
name|'netifaces'
op|'.'
name|'AF_INET6'
op|':'
newline|'\n'
indent|'                        '
name|'addr'
op|'='
name|'addr'
op|'.'
name|'split'
op|'('
string|"'%'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'addresses'
op|'.'
name|'append'
op|'('
name|'addr'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'addresses'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|storage_directory
dedent|''
name|'def'
name|'storage_directory'
op|'('
name|'datadir'
op|','
name|'partition'
op|','
name|'name_hash'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the storage directory\n\n    :param datadir: Base data directory\n    :param partition: Partition\n    :param name_hash: Account, container or object name hash\n    :returns: Storage directory\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir'
op|','
name|'str'
op|'('
name|'partition'
op|')'
op|','
name|'name_hash'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|','
name|'name_hash'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_path
dedent|''
name|'def'
name|'hash_path'
op|'('
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'object'
op|'='
name|'None'
op|','
name|'raw_digest'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the canonical hash for an account/container/object\n\n    :param account: Account\n    :param container: Container\n    :param object: Object\n    :param raw_digest: If True, return the raw version rather than a hex digest\n    :returns: hash string\n    """'
newline|'\n'
name|'if'
name|'object'
name|'and'
name|'not'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'container is required if object is provided'"
op|')'
newline|'\n'
dedent|''
name|'paths'
op|'='
op|'['
name|'account'
op|']'
newline|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'.'
name|'append'
op|'('
name|'container'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'object'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'.'
name|'append'
op|'('
name|'object'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'raw_digest'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'md5'
op|'('
name|'HASH_PATH_PREFIX'
op|'+'
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|')'
nl|'\n'
op|'+'
name|'HASH_PATH_SUFFIX'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'md5'
op|'('
name|'HASH_PATH_PREFIX'
op|'+'
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|')'
nl|'\n'
op|'+'
name|'HASH_PATH_SUFFIX'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|lock_path
name|'def'
name|'lock_path'
op|'('
name|'directory'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'timeout_class'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Context manager that acquires a lock on a directory.  This will block until\n    the lock can be acquired, or the timeout time has expired (whichever occurs\n    first).\n\n    For locking exclusively, file or directory has to be opened in Write mode.\n    Python doesn\'t allow directories to be opened in Write Mode. So we\n    workaround by locking a hidden file in the directory.\n\n    :param directory: directory to be locked\n    :param timeout: timeout (in seconds)\n    :param timeout_class: The class of the exception to raise if the\n        lock cannot be granted within the timeout. Will be\n        constructed as timeout_class(timeout, lockpath). Default:\n        LockTimeout\n    """'
newline|'\n'
name|'if'
name|'timeout_class'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'timeout_class'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
op|'.'
name|'LockTimeout'
newline|'\n'
dedent|''
name|'mkdirs'
op|'('
name|'directory'
op|')'
newline|'\n'
name|'lockpath'
op|'='
string|"'%s/.lock'"
op|'%'
name|'directory'
newline|'\n'
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'lockpath'
op|','
name|'os'
op|'.'
name|'O_WRONLY'
op|'|'
name|'os'
op|'.'
name|'O_CREAT'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'timeout_class'
op|'('
name|'timeout'
op|','
name|'lockpath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fcntl'
op|'.'
name|'flock'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EAGAIN'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'sleep'
op|'('
number|'0.01'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'True'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|lock_file
name|'def'
name|'lock_file'
op|'('
name|'filename'
op|','
name|'timeout'
op|'='
number|'10'
op|','
name|'append'
op|'='
name|'False'
op|','
name|'unlink'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Context manager that acquires a lock on a file.  This will block until\n    the lock can be acquired, or the timeout time has expired (whichever occurs\n    first).\n\n    :param filename: file to be locked\n    :param timeout: timeout (in seconds)\n    :param append: True if file should be opened in append mode\n    :param unlink: True if the file should be unlinked at the end\n    """'
newline|'\n'
name|'flags'
op|'='
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_RDWR'
newline|'\n'
name|'if'
name|'append'
op|':'
newline|'\n'
indent|'        '
name|'flags'
op|'|='
name|'os'
op|'.'
name|'O_APPEND'
newline|'\n'
name|'mode'
op|'='
string|"'a+'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
string|"'r+'"
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'filename'
op|','
name|'flags'
op|')'
newline|'\n'
name|'file_obj'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
name|'mode'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
op|'.'
name|'LockTimeout'
op|'('
name|'timeout'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'fcntl'
op|'.'
name|'flock'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EAGAIN'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'sleep'
op|'('
number|'0.01'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'stat'
op|'('
name|'filename'
op|')'
op|'.'
name|'st_ino'
op|'!='
name|'os'
op|'.'
name|'fstat'
op|'('
name|'fd'
op|')'
op|'.'
name|'st_ino'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'yield'
name|'file_obj'
newline|'\n'
name|'if'
name|'unlink'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'file_obj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|lock_parent_directory
dedent|''
dedent|''
dedent|''
name|'def'
name|'lock_parent_directory'
op|'('
name|'filename'
op|','
name|'timeout'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Context manager that acquires a lock on the parent directory of the given\n    file path.  This will block until the lock can be acquired, or the timeout\n    time has expired (whichever occurs first).\n\n    :param filename: file path of the parent directory to be locked\n    :param timeout: timeout (in seconds)\n    """'
newline|'\n'
name|'return'
name|'lock_path'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
op|','
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_time_units
dedent|''
name|'def'
name|'get_time_units'
op|'('
name|'time_amount'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a nomralized length of time in the largest unit of time (hours,\n    minutes, or seconds.)\n\n    :param time_amount: length of time in seconds\n    :returns: A touple of (length of time, unit of time) where unit of time is\n              one of (\'h\', \'m\', \'s\')\n    """'
newline|'\n'
name|'time_unit'
op|'='
string|"'s'"
newline|'\n'
name|'if'
name|'time_amount'
op|'>'
number|'60'
op|':'
newline|'\n'
indent|'        '
name|'time_amount'
op|'/='
number|'60'
newline|'\n'
name|'time_unit'
op|'='
string|"'m'"
newline|'\n'
name|'if'
name|'time_amount'
op|'>'
number|'60'
op|':'
newline|'\n'
indent|'            '
name|'time_amount'
op|'/='
number|'60'
newline|'\n'
name|'time_unit'
op|'='
string|"'h'"
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'time_amount'
op|','
name|'time_unit'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compute_eta
dedent|''
name|'def'
name|'compute_eta'
op|'('
name|'start_time'
op|','
name|'current_value'
op|','
name|'final_value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Compute an ETA.  Now only if we could also have a progress bar...\n\n    :param start_time: Unix timestamp when the operation began\n    :param current_value: Current value\n    :param final_value: Final value\n    :returns: ETA as a tuple of (length of time, unit of time) where unit of\n              time is one of (\'h\', \'m\', \'s\')\n    """'
newline|'\n'
name|'elapsed'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'completion'
op|'='
op|'('
name|'float'
op|'('
name|'current_value'
op|')'
op|'/'
name|'final_value'
op|')'
name|'or'
number|'0.00001'
newline|'\n'
name|'return'
name|'get_time_units'
op|'('
number|'1.0'
op|'/'
name|'completion'
op|'*'
name|'elapsed'
op|'-'
name|'elapsed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unlink_older_than
dedent|''
name|'def'
name|'unlink_older_than'
op|'('
name|'path'
op|','
name|'mtime'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Remove any file in a given path that that was last modified before mtime.\n\n    :param path: path to remove file from\n    :mtime: timestamp of oldest file to keep\n    """'
newline|'\n'
name|'for'
name|'fname'
name|'in'
name|'listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'fname'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'fpath'
op|')'
op|'<'
name|'mtime'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'fpath'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|item_from_env
dedent|''
dedent|''
dedent|''
name|'def'
name|'item_from_env'
op|'('
name|'env'
op|','
name|'item_name'
op|','
name|'allow_none'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a value from the wsgi environment\n\n    :param env: wsgi environment dict\n    :param item_name: name of item to get\n\n    :returns: the value from the environment\n    """'
newline|'\n'
name|'item'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
name|'item_name'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'item'
name|'is'
name|'None'
name|'and'
name|'not'
name|'allow_none'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'error'
op|'('
string|'"ERROR: %s could not be found in env!"'
op|','
name|'item_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cache_from_env
dedent|''
name|'def'
name|'cache_from_env'
op|'('
name|'env'
op|','
name|'allow_none'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get memcache connection pool from the environment (which had been\n    previously set by the memcache middleware\n\n    :param env: wsgi environment dict\n\n    :returns: swift.common.memcached.MemcacheRing from environment\n    """'
newline|'\n'
name|'return'
name|'item_from_env'
op|'('
name|'env'
op|','
string|"'swift.cache'"
op|','
name|'allow_none'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_conf_dir
dedent|''
name|'def'
name|'read_conf_dir'
op|'('
name|'parser'
op|','
name|'conf_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conf_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'conf_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'f'
op|'.'
name|'endswith'
op|'('
string|"'.conf'"
op|')'
name|'and'
name|'not'
name|'f'
op|'.'
name|'startswith'
op|'('
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_files'
op|'.'
name|'append'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'conf_dir'
op|','
name|'f'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'parser'
op|'.'
name|'read'
op|'('
name|'sorted'
op|'('
name|'conf_files'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|readconf
dedent|''
name|'def'
name|'readconf'
op|'('
name|'conf_path'
op|','
name|'section_name'
op|'='
name|'None'
op|','
name|'log_name'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'None'
op|','
nl|'\n'
name|'raw'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Read config file(s) and return config items as a dict\n\n    :param conf_path: path to config file/directory, or a file-like object\n                     (hasattr readline)\n    :param section_name: config section to read (will return all sections if\n                     not defined)\n    :param log_name: name to be used with logging (will use section_name if\n                     not defined)\n    :param defaults: dict of default values to pre-populate the config with\n    :returns: dict of config items\n    """'
newline|'\n'
name|'if'
name|'defaults'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'defaults'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'raw'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'RawConfigParser'
op|'('
name|'defaults'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'ConfigParser'
op|'('
name|'defaults'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'conf_path'
op|','
string|"'readline'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'.'
name|'readfp'
op|'('
name|'conf_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'conf_path'
op|')'
op|':'
newline|'\n'
comment|'# read all configs in directory'
nl|'\n'
indent|'            '
name|'success'
op|'='
name|'read_conf_dir'
op|'('
name|'c'
op|','
name|'conf_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'success'
op|'='
name|'c'
op|'.'
name|'read'
op|'('
name|'conf_path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'success'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'_'
op|'('
string|'"Unable to read config from %s"'
op|')'
op|'%'
name|'conf_path'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'section_name'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'.'
name|'has_section'
op|'('
name|'section_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'='
name|'dict'
op|'('
name|'c'
op|'.'
name|'items'
op|'('
name|'section_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'_'
op|'('
string|'"Unable to find %s config section in %s"'
op|')'
op|'%'
op|'('
name|'section_name'
op|','
name|'conf_path'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'if'
string|'"log_name"'
name|'not'
name|'in'
name|'conf'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'log_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'['
string|"'log_name'"
op|']'
op|'='
name|'log_name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'['
string|"'log_name'"
op|']'
op|'='
name|'section_name'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'c'
op|'.'
name|'sections'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'update'
op|'('
op|'{'
name|'s'
op|':'
name|'dict'
op|'('
name|'c'
op|'.'
name|'items'
op|'('
name|'s'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'log_name'"
name|'not'
name|'in'
name|'conf'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'['
string|"'log_name'"
op|']'
op|'='
name|'log_name'
newline|'\n'
dedent|''
dedent|''
name|'conf'
op|'['
string|"'__file__'"
op|']'
op|'='
name|'conf_path'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_pickle
dedent|''
name|'def'
name|'write_pickle'
op|'('
name|'obj'
op|','
name|'dest'
op|','
name|'tmp'
op|'='
name|'None'
op|','
name|'pickle_protocol'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Ensure that a pickle file gets written to disk.  The file\n    is first written to a tmp location, ensure it is synced to disk, then\n    perform a move to its final location\n\n    :param obj: python object to be pickled\n    :param dest: path of final destination file\n    :param tmp: path to tmp to use, defaults to None\n    :param pickle_protocol: protocol to pickle the obj with, defaults to 0\n    """'
newline|'\n'
name|'if'
name|'tmp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'tmp'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'dest'
op|')'
newline|'\n'
dedent|''
name|'fd'
op|','
name|'tmppath'
op|'='
name|'mkstemp'
op|'('
name|'dir'
op|'='
name|'tmp'
op|','
name|'suffix'
op|'='
string|"'.tmp'"
op|')'
newline|'\n'
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'wb'"
op|')'
name|'as'
name|'fo'
op|':'
newline|'\n'
indent|'        '
name|'pickle'
op|'.'
name|'dump'
op|'('
name|'obj'
op|','
name|'fo'
op|','
name|'pickle_protocol'
op|')'
newline|'\n'
name|'fo'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'fsync'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'renamer'
op|'('
name|'tmppath'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|search_tree
dedent|''
dedent|''
name|'def'
name|'search_tree'
op|'('
name|'root'
op|','
name|'glob_match'
op|','
name|'ext'
op|'='
string|"''"
op|','
name|'exts'
op|'='
name|'None'
op|','
name|'dir_ext'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Look in root, for any files/dirs matching glob, recursively traversing\n    any found directories looking for files ending with ext\n\n    :param root: start of search path\n    :param glob_match: glob to match in root, matching dirs are traversed with\n                       os.walk\n    :param ext: only files that end in ext will be returned\n    :param dir_ext: if present directories that end with dir_ext will not be\n                    traversed and instead will be returned as a matched path\n\n    :returns: list of full paths to matching files, sorted\n\n    """'
newline|'\n'
name|'exts'
op|'='
name|'exts'
name|'or'
op|'['
name|'ext'
op|']'
newline|'\n'
name|'found_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'root'
op|','
name|'glob_match'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'root'
op|','
name|'dirs'
op|','
name|'files'
name|'in'
name|'os'
op|'.'
name|'walk'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'dir_ext'
name|'and'
name|'root'
op|'.'
name|'endswith'
op|'('
name|'dir_ext'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'found_files'
op|'.'
name|'append'
op|'('
name|'root'
op|')'
newline|'\n'
comment|'# the root is a config dir, descend no further'
nl|'\n'
name|'break'
newline|'\n'
dedent|''
name|'for'
name|'file_'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'any'
op|'('
name|'exts'
op|')'
name|'and'
name|'not'
name|'any'
op|'('
name|'file_'
op|'.'
name|'endswith'
op|'('
name|'e'
op|')'
name|'for'
name|'e'
name|'in'
name|'exts'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
dedent|''
name|'found_files'
op|'.'
name|'append'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'root'
op|','
name|'file_'
op|')'
op|')'
newline|'\n'
dedent|''
name|'found_dir'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'dir_'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'dir_ext'
name|'and'
name|'dir_'
op|'.'
name|'endswith'
op|'('
name|'dir_ext'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'found_dir'
op|'='
name|'True'
newline|'\n'
name|'found_files'
op|'.'
name|'append'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'root'
op|','
name|'dir_'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'found_dir'
op|':'
newline|'\n'
comment|'# do not descend further into matching directories'
nl|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ext'
name|'and'
name|'not'
name|'path'
op|'.'
name|'endswith'
op|'('
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'found_files'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'sorted'
op|'('
name|'found_files'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_file
dedent|''
name|'def'
name|'write_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write contents to file at path\n\n    :param path: any path, subdirs will be created as needed\n    :param contents: data to write to file, will be converted to string\n\n    """'
newline|'\n'
name|'dirname'
op|','
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'dirname'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EACCES'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'exit'
op|'('
string|"'Unable to create %s.  Running as '"
nl|'\n'
string|"'non-root?'"
op|'%'
name|'dirname'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'with'
name|'open'
op|'('
name|'path'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'write'
op|'('
string|"'%s'"
op|'%'
name|'contents'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_file
dedent|''
dedent|''
name|'def'
name|'remove_file'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Quiet wrapper for os.unlink, OSErrors are suppressed\n\n    :param path: first and only argument passed to os.unlink\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|audit_location_generator
dedent|''
dedent|''
name|'def'
name|'audit_location_generator'
op|'('
name|'devices'
op|','
name|'datadir'
op|','
name|'suffix'
op|'='
string|"''"
op|','
nl|'\n'
name|'mount_check'
op|'='
name|'True'
op|','
name|'logger'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''\n    Given a devices path and a data directory, yield (path, device,\n    partition) for all files in that directory\n\n    :param devices: parent directory of the devices to be audited\n    :param datadir: a directory located under self.devices. This should be\n                    one of the DATADIR constants defined in the account,\n                    container, and object servers.\n    :param suffix: path name suffix required for all names returned\n    :param mount_check: Flag to check if a mount check should be performed\n                    on devices\n    :param logger: a logger object\n    '''"
newline|'\n'
name|'device_dir'
op|'='
name|'listdir'
op|'('
name|'devices'
op|')'
newline|'\n'
comment|'# randomize devices in case of process restart before sweep completed'
nl|'\n'
name|'shuffle'
op|'('
name|'device_dir'
op|')'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'device_dir'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mount_check'
name|'and'
name|'not'
name|'ismount'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'logger'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'warning'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Skipping %s as it is not mounted'"
op|')'
op|','
name|'device'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|','
name|'datadir'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'partitions'
op|'='
name|'listdir'
op|'('
name|'datadir_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'logger'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'warning'
op|'('
string|"'Skipping %s because %s'"
op|','
name|'datadir_path'
op|','
name|'e'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'partition'
name|'in'
name|'partitions'
op|':'
newline|'\n'
indent|'            '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir_path'
op|','
name|'partition'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'suffixes'
op|'='
name|'listdir'
op|'('
name|'part_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'asuffix'
name|'in'
name|'suffixes'
op|':'
newline|'\n'
indent|'                '
name|'suff_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'asuffix'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'hashes'
op|'='
name|'listdir'
op|'('
name|'suff_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'hsh'
name|'in'
name|'hashes'
op|':'
newline|'\n'
indent|'                    '
name|'hash_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'suff_path'
op|','
name|'hsh'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'files'
op|'='
name|'sorted'
op|'('
name|'listdir'
op|'('
name|'hash_path'
op|')'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'fname'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'suffix'
name|'and'
name|'not'
name|'fname'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'continue'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'hash_path'
op|','
name|'fname'
op|')'
newline|'\n'
name|'yield'
name|'path'
op|','
name|'device'
op|','
name|'partition'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ratelimit_sleep
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'ratelimit_sleep'
op|'('
name|'running_time'
op|','
name|'max_rate'
op|','
name|'incr_by'
op|'='
number|'1'
op|','
name|'rate_buffer'
op|'='
number|'5'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''\n    Will eventlet.sleep() for the appropriate time so that the max_rate\n    is never exceeded.  If max_rate is 0, will not ratelimit.  The\n    maximum recommended rate should not exceed (1000 * incr_by) a second\n    as eventlet.sleep() does involve some overhead.  Returns running_time\n    that should be used for subsequent calls.\n\n    :param running_time: the running time in milliseconds of the next\n                         allowable request. Best to start at zero.\n    :param max_rate: The maximum rate per second allowed for the process.\n    :param incr_by: How much to increment the counter.  Useful if you want\n                    to ratelimit 1024 bytes/sec and have differing sizes\n                    of requests. Must be > 0 to engage rate-limiting\n                    behavior.\n    :param rate_buffer: Number of seconds the rate counter can drop and be\n                        allowed to catch up (at a faster than listed rate).\n                        A larger number will result in larger spikes in rate\n                        but better average accuracy. Must be > 0 to engage\n                        rate-limiting behavior.\n    '''"
newline|'\n'
name|'if'
name|'max_rate'
op|'<='
number|'0'
name|'or'
name|'incr_by'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'running_time'
newline|'\n'
nl|'\n'
comment|'# 1,000 milliseconds = 1 second'
nl|'\n'
dedent|''
name|'clock_accuracy'
op|'='
number|'1000.0'
newline|'\n'
nl|'\n'
comment|'# Convert seconds to milliseconds'
nl|'\n'
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'*'
name|'clock_accuracy'
newline|'\n'
nl|'\n'
comment|'# Calculate time per request in milliseconds'
nl|'\n'
name|'time_per_request'
op|'='
name|'clock_accuracy'
op|'*'
op|'('
name|'float'
op|'('
name|'incr_by'
op|')'
op|'/'
name|'max_rate'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert rate_buffer to milliseconds and compare'
nl|'\n'
name|'if'
name|'now'
op|'-'
name|'running_time'
op|'>'
name|'rate_buffer'
op|'*'
name|'clock_accuracy'
op|':'
newline|'\n'
indent|'        '
name|'running_time'
op|'='
name|'now'
newline|'\n'
dedent|''
name|'elif'
name|'running_time'
op|'-'
name|'now'
op|'>'
name|'time_per_request'
op|':'
newline|'\n'
comment|'# Convert diff back to a floating point number of seconds and sleep'
nl|'\n'
indent|'        '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
op|'('
name|'running_time'
op|'-'
name|'now'
op|')'
op|'/'
name|'clock_accuracy'
op|')'
newline|'\n'
nl|'\n'
comment|'# Return the absolute time for the next interval in milliseconds; note'
nl|'\n'
comment|'# that time could have passed well beyond that point, but the next call'
nl|'\n'
comment|'# will catch that and skip the sleep.'
nl|'\n'
dedent|''
name|'return'
name|'running_time'
op|'+'
name|'time_per_request'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContextPool
dedent|''
name|'class'
name|'ContextPool'
op|'('
name|'GreenPool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"GreenPool subclassed to kill its coros when it gets gc\'ed"'
newline|'\n'
nl|'\n'
DECL|member|__enter__
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'type'
op|','
name|'value'
op|','
name|'traceback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'coro'
name|'in'
name|'list'
op|'('
name|'self'
op|'.'
name|'coroutines_running'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'coro'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenAsyncPileWaitallTimeout
dedent|''
dedent|''
dedent|''
name|'class'
name|'GreenAsyncPileWaitallTimeout'
op|'('
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenAsyncPile
dedent|''
name|'class'
name|'GreenAsyncPile'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Runs jobs in a pool of green threads, and the results can be retrieved by\n    using this object as an iterator.\n\n    This is very similar in principle to eventlet.GreenPile, except it returns\n    results as they become available rather than in the order they were\n    launched.\n\n    Correlating results with jobs (if necessary) is left to the caller.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param size: size pool of green threads to use\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_pool'
op|'='
name|'GreenPool'
op|'('
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_responses'
op|'='
name|'eventlet'
op|'.'
name|'queue'
op|'.'
name|'LightQueue'
op|'('
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inflight'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|_run_func
dedent|''
name|'def'
name|'_run_func'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_responses'
op|'.'
name|'put'
op|'('
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_inflight'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Spawn a job in a green thread on the pile.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_inflight'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_run_func'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|waitall
dedent|''
name|'def'
name|'waitall'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wait timeout seconds for any results to come in.\n\n        :param timeout: seconds to wait for results\n        :returns: list of results accrued in that time\n        """'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'GreenAsyncPileWaitallTimeout'
op|'('
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'results'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'GreenAsyncPileWaitallTimeout'
op|','
name|'StopIteration'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_responses'
op|'.'
name|'get_nowait'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_inflight'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'_responses'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ModifiedParseResult
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ModifiedParseResult'
op|'('
name|'ParseResult'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Parse results class for urlparse."'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|hostname
name|'def'
name|'hostname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'netloc'
op|'='
name|'self'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'netloc'
op|'.'
name|'startswith'
op|'('
string|"'['"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netloc'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|"']'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'elif'
string|"':'"
name|'in'
name|'netloc'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netloc'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'netloc'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|port
name|'def'
name|'port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'netloc'
op|'='
name|'self'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'netloc'
op|'.'
name|'startswith'
op|'('
string|"'['"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'netloc'
op|'='
name|'netloc'
op|'.'
name|'rsplit'
op|'('
string|"']'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"':'"
name|'in'
name|'netloc'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'netloc'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|urlparse
dedent|''
dedent|''
name|'def'
name|'urlparse'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    urlparse augmentation.\n    This is necessary because urlparse can\'t handle RFC 2732 URLs.\n\n    :param url: URL to parse.\n    """'
newline|'\n'
name|'return'
name|'ModifiedParseResult'
op|'('
op|'*'
name|'stdlib_urlparse'
op|'('
name|'url'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_sync_to
dedent|''
name|'def'
name|'validate_sync_to'
op|'('
name|'value'
op|','
name|'allowed_sync_hosts'
op|','
name|'realms_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Validates an X-Container-Sync-To header value, returning the\n    validated endpoint, realm, and realm_key, or an error string.\n\n    :param value: The X-Container-Sync-To header value to validate.\n    :param allowed_sync_hosts: A list of allowed hosts in endpoints,\n        if realms_conf does not apply.\n    :param realms_conf: A instance of\n        swift.common.container_sync_realms.ContainerSyncRealms to\n        validate against.\n    :returns: A tuple of (error_string, validated_endpoint, realm,\n        realm_key). The error_string will None if the rest of the\n        values have been validated. The validated_endpoint will be\n        the validated endpoint to sync to. The realm and realm_key\n        will be set if validation was done through realms_conf.\n    """'
newline|'\n'
name|'orig_value'
op|'='
name|'value'
newline|'\n'
name|'value'
op|'='
name|'value'
op|'.'
name|'rstrip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'.'
name|'startswith'
op|'('
string|"'//'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'realms_conf'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'data'
op|'='
name|'value'
op|'['
number|'2'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid X-Container-Sync-To format %r'"
op|')'
op|'%'
name|'orig_value'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'realm'
op|','
name|'cluster'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'data'
newline|'\n'
name|'realm_key'
op|'='
name|'realms_conf'
op|'.'
name|'key'
op|'('
name|'realm'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'realm_key'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'_'
op|'('
string|"'No realm key for %r'"
op|')'
op|'%'
name|'realm'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'endpoint'
op|'='
name|'realms_conf'
op|'.'
name|'endpoint'
op|'('
name|'realm'
op|','
name|'cluster'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'endpoint'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'No cluster endpoint for %r %r'"
op|')'
op|'%'
op|'('
name|'realm'
op|','
name|'cluster'
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'%s/%s/%s'"
op|'%'
op|'('
name|'endpoint'
op|'.'
name|'rstrip'
op|'('
string|"'/'"
op|')'
op|','
name|'account'
op|','
name|'container'
op|')'
op|','
nl|'\n'
name|'realm'
op|'.'
name|'upper'
op|'('
op|')'
op|','
name|'realm_key'
op|')'
newline|'\n'
dedent|''
name|'p'
op|'='
name|'urlparse'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'p'
op|'.'
name|'scheme'
name|'not'
name|'in'
op|'('
string|"'http'"
op|','
string|"'https'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'_'
op|'('
string|'\'Invalid scheme %r in X-Container-Sync-To, must be "//", \''
nl|'\n'
string|'\'"http", or "https".\''
op|')'
op|'%'
name|'p'
op|'.'
name|'scheme'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'p'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'_'
op|'('
string|"'Path required in X-Container-Sync-To'"
op|')'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'p'
op|'.'
name|'params'
name|'or'
name|'p'
op|'.'
name|'query'
name|'or'
name|'p'
op|'.'
name|'fragment'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Params, queries, and fragments not allowed in '"
nl|'\n'
string|"'X-Container-Sync-To'"
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'p'
op|'.'
name|'hostname'
name|'not'
name|'in'
name|'allowed_sync_hosts'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid host %r in X-Container-Sync-To'"
op|')'
op|'%'
name|'p'
op|'.'
name|'hostname'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'None'
op|','
name|'value'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|affinity_key_function
dedent|''
name|'def'
name|'affinity_key_function'
op|'('
name|'affinity_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turns an affinity config value into a function suitable for passing to\n    sort(). After doing so, the array will be sorted with respect to the given\n    ordering.\n\n    For example, if affinity_str is "r1=1, r2z7=2, r2z8=2", then the array\n    will be sorted with all nodes from region 1 (r1=1) first, then all the\n    nodes from region 2 zones 7 and 8 (r2z7=2 and r2z8=2), then everything\n    else.\n\n    Note that the order of the pieces of affinity_str is irrelevant; the\n    priority values are what comes after the equals sign.\n\n    If affinity_str is empty or all whitespace, then the resulting function\n    will not alter the ordering of the nodes.\n\n    :param affinity_str: affinity config value, e.g. "r1z2=3"\n                         or "r1=1, r2z1=2, r2z2=2"\n    :returns: single-argument function\n    :raises: ValueError if argument invalid\n    """'
newline|'\n'
name|'affinity_str'
op|'='
name|'affinity_str'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'affinity_str'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'lambda'
name|'x'
op|':'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'priority_matchers'
op|'='
op|'['
op|']'
newline|'\n'
name|'pieces'
op|'='
op|'['
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'affinity_str'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|']'
newline|'\n'
name|'for'
name|'piece'
name|'in'
name|'pieces'
op|':'
newline|'\n'
comment|'# matches r<number>=<number> or r<number>z<number>=<number>'
nl|'\n'
indent|'        '
name|'match'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
string|'"r(\\d+)(?:z(\\d+))?=(\\d+)$"'
op|','
name|'piece'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'            '
name|'region'
op|','
name|'zone'
op|','
name|'priority'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'region'
op|'='
name|'int'
op|'('
name|'region'
op|')'
newline|'\n'
name|'priority'
op|'='
name|'int'
op|'('
name|'priority'
op|')'
newline|'\n'
name|'zone'
op|'='
name|'int'
op|'('
name|'zone'
op|')'
name|'if'
name|'zone'
name|'else'
name|'None'
newline|'\n'
nl|'\n'
name|'matcher'
op|'='
op|'{'
string|"'region'"
op|':'
name|'region'
op|','
string|"'priority'"
op|':'
name|'priority'
op|'}'
newline|'\n'
name|'if'
name|'zone'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'matcher'
op|'['
string|"'zone'"
op|']'
op|'='
name|'zone'
newline|'\n'
dedent|''
name|'priority_matchers'
op|'.'
name|'append'
op|'('
name|'matcher'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid affinity value: %r"'
op|'%'
name|'affinity_str'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'priority_matchers'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'itemgetter'
op|'('
string|"'priority'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|keyfn
name|'def'
name|'keyfn'
op|'('
name|'ring_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'matcher'
name|'in'
name|'priority_matchers'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'matcher'
op|'['
string|"'region'"
op|']'
op|'=='
name|'ring_node'
op|'['
string|"'region'"
op|']'
nl|'\n'
name|'and'
op|'('
string|"'zone'"
name|'not'
name|'in'
name|'matcher'
nl|'\n'
name|'or'
name|'matcher'
op|'['
string|"'zone'"
op|']'
op|'=='
name|'ring_node'
op|'['
string|"'zone'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'matcher'
op|'['
string|"'priority'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
number|'4294967296'
comment|'# 2^32, i.e. "a big number"'
newline|'\n'
dedent|''
name|'return'
name|'keyfn'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|affinity_locality_predicate
dedent|''
name|'def'
name|'affinity_locality_predicate'
op|'('
name|'write_affinity_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Turns a write-affinity config value into a predicate function for nodes.\n    The returned value will be a 1-arg function that takes a node dictionary\n    and returns a true value if it is "local" and a false value otherwise. The\n    definition of "local" comes from the affinity_str argument passed in here.\n\n    For example, if affinity_str is "r1, r2z2", then only nodes where region=1\n    or where (region=2 and zone=2) are considered local.\n\n    If affinity_str is empty or all whitespace, then the resulting function\n    will consider everything local\n\n    :param affinity_str: affinity config value, e.g. "r1z2"\n        or "r1, r2z1, r2z2"\n    :returns: single-argument function, or None if affinity_str is empty\n    :raises: ValueError if argument invalid\n    """'
newline|'\n'
name|'affinity_str'
op|'='
name|'write_affinity_str'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'affinity_str'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'matchers'
op|'='
op|'['
op|']'
newline|'\n'
name|'pieces'
op|'='
op|'['
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'affinity_str'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|']'
newline|'\n'
name|'for'
name|'piece'
name|'in'
name|'pieces'
op|':'
newline|'\n'
comment|'# matches r<number> or r<number>z<number>'
nl|'\n'
indent|'        '
name|'match'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
string|'"r(\\d+)(?:z(\\d+))?$"'
op|','
name|'piece'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'            '
name|'region'
op|','
name|'zone'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'region'
op|'='
name|'int'
op|'('
name|'region'
op|')'
newline|'\n'
name|'zone'
op|'='
name|'int'
op|'('
name|'zone'
op|')'
name|'if'
name|'zone'
name|'else'
name|'None'
newline|'\n'
nl|'\n'
name|'matcher'
op|'='
op|'{'
string|"'region'"
op|':'
name|'region'
op|'}'
newline|'\n'
name|'if'
name|'zone'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'matcher'
op|'['
string|"'zone'"
op|']'
op|'='
name|'zone'
newline|'\n'
dedent|''
name|'matchers'
op|'.'
name|'append'
op|'('
name|'matcher'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid write-affinity value: %r"'
op|'%'
name|'affinity_str'
op|')'
newline|'\n'
nl|'\n'
DECL|function|is_local
dedent|''
dedent|''
name|'def'
name|'is_local'
op|'('
name|'ring_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'matcher'
name|'in'
name|'matchers'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'matcher'
op|'['
string|"'region'"
op|']'
op|'=='
name|'ring_node'
op|'['
string|"'region'"
op|']'
nl|'\n'
name|'and'
op|'('
string|"'zone'"
name|'not'
name|'in'
name|'matcher'
nl|'\n'
name|'or'
name|'matcher'
op|'['
string|"'zone'"
op|']'
op|'=='
name|'ring_node'
op|'['
string|"'zone'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'is_local'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_remote_client
dedent|''
name|'def'
name|'get_remote_client'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
comment|'# remote host for zeus'
nl|'\n'
indent|'    '
name|'client'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-cluster-client-ip'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'client'
name|'and'
string|"'x-forwarded-for'"
name|'in'
name|'req'
op|'.'
name|'headers'
op|':'
newline|'\n'
comment|'# remote host for other lbs'
nl|'\n'
indent|'        '
name|'client'
op|'='
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-forwarded-for'"
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'client'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'req'
op|'.'
name|'remote_addr'
newline|'\n'
dedent|''
name|'return'
name|'client'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|human_readable
dedent|''
name|'def'
name|'human_readable'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns the number in a human readable format; for example 1048576 = "1Mi".\n    """'
newline|'\n'
name|'value'
op|'='
name|'float'
op|'('
name|'value'
op|')'
newline|'\n'
name|'index'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'suffixes'
op|'='
string|"'KMGTPEZY'"
newline|'\n'
name|'while'
name|'value'
op|'>='
number|'1024'
name|'and'
name|'index'
op|'+'
number|'1'
op|'<'
name|'len'
op|'('
name|'suffixes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'index'
op|'+='
number|'1'
newline|'\n'
name|'value'
op|'='
name|'round'
op|'('
name|'value'
op|'/'
number|'1024'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'index'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%d'"
op|'%'
name|'value'
newline|'\n'
dedent|''
name|'return'
string|"'%d%si'"
op|'%'
op|'('
name|'round'
op|'('
name|'value'
op|')'
op|','
name|'suffixes'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|put_recon_cache_entry
dedent|''
name|'def'
name|'put_recon_cache_entry'
op|'('
name|'cache_entry'
op|','
name|'key'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Function that will check if item is a dict, and if so put it under\n    cache_entry[key].  We use nested recon cache entries when the object\n    auditor runs in parallel or else in \'once\' mode with a specified\n    subset of devices.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'item'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'not'
name|'in'
name|'cache_entry'
name|'or'
name|'key'
name|'in'
name|'cache_entry'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'cache_entry'
op|'['
name|'key'
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cache_entry'
op|'['
name|'key'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
name|'cache_entry'
name|'and'
name|'item'
op|'=='
op|'{'
op|'}'
op|':'
newline|'\n'
indent|'            '
name|'cache_entry'
op|'.'
name|'pop'
op|'('
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'item'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'v'
op|'=='
op|'{'
op|'}'
op|':'
newline|'\n'
indent|'                '
name|'cache_entry'
op|'['
name|'key'
op|']'
op|'.'
name|'pop'
op|'('
name|'k'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cache_entry'
op|'['
name|'key'
op|']'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_entry'
op|'['
name|'key'
op|']'
op|'='
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dump_recon_cache
dedent|''
dedent|''
name|'def'
name|'dump_recon_cache'
op|'('
name|'cache_dict'
op|','
name|'cache_file'
op|','
name|'logger'
op|','
name|'lock_timeout'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Update recon cache values\n\n    :param cache_dict: Dictionary of cache key/value pairs to write out\n    :param cache_file: cache file to update\n    :param logger: the logger to use to log an encountered error\n    :param lock_timeout: timeout (in seconds)\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'lock_file'
op|'('
name|'cache_file'
op|','
name|'lock_timeout'
op|','
name|'unlink'
op|'='
name|'False'
op|')'
name|'as'
name|'cf'
op|':'
newline|'\n'
indent|'            '
name|'cache_entry'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'existing_entry'
op|'='
name|'cf'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'existing_entry'
op|':'
newline|'\n'
indent|'                    '
name|'cache_entry'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'existing_entry'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|"#file doesn't have a valid entry, we'll recreate it"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'for'
name|'cache_key'
op|','
name|'cache_value'
name|'in'
name|'cache_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'put_recon_cache_entry'
op|'('
name|'cache_entry'
op|','
name|'cache_key'
op|','
name|'cache_value'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'NamedTemporaryFile'
op|'('
name|'dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'cache_file'
op|')'
op|','
nl|'\n'
name|'delete'
op|'='
name|'False'
op|')'
name|'as'
name|'tf'
op|':'
newline|'\n'
indent|'                    '
name|'tf'
op|'.'
name|'write'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'cache_entry'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'rename'
op|'('
name|'tf'
op|'.'
name|'name'
op|','
name|'cache_file'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tf'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Exception dumping recon cache'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|listdir
dedent|''
dedent|''
name|'def'
name|'listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|streq_const_time
dedent|''
name|'def'
name|'streq_const_time'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Constant-time string comparison.\n\n    :params s1: the first string\n    :params s2: the second string\n\n    :return: True if the strings are equal.\n\n    This function takes two strings and compares them.  It is intended to be\n    used when doing a comparison for authentication purposes to help guard\n    against timing attacks.\n    """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'s1'
op|')'
op|'!='
name|'len'
op|'('
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'result'
op|'='
number|'0'
newline|'\n'
name|'for'
op|'('
name|'a'
op|','
name|'b'
op|')'
name|'in'
name|'zip'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'|='
name|'ord'
op|'('
name|'a'
op|')'
op|'^'
name|'ord'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|replication
dedent|''
name|'def'
name|'replication'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods are accessible for different\n    type of servers:\n\n    * If option replication_server is None then this decorator\n      doesn\'t matter.\n    * If option replication_server is True then ONLY decorated with\n      this decorator methods will be started.\n    * If option replication_server is False then decorated with this\n      decorator methods will NOT be started.\n\n    :param func: function to mark accessible for replication\n    """'
newline|'\n'
name|'func'
op|'.'
name|'replication'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'return'
name|'func'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|public
dedent|''
name|'def'
name|'public'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods are publicly accessible as HTTP\n    requests\n\n    :param func: function to make public\n    """'
newline|'\n'
name|'func'
op|'.'
name|'publicly_accessible'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|quorum_size
dedent|''
name|'def'
name|'quorum_size'
op|'('
name|'n'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Number of successful backend requests needed for the proxy to consider\n    the client request successful.\n    """'
newline|'\n'
name|'return'
op|'('
name|'n'
op|'//'
number|'2'
op|')'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rsync_ip
dedent|''
name|'def'
name|'rsync_ip'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Transform ip string to an rsync-compatible form\n\n    Will return ipv4 addresses unchanged, but will nest ipv6 addresses\n    inside square brackets.\n\n    :param ip: an ip string (ipv4 or ipv6)\n\n    :returns: a string ip address\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'socket'
op|'.'
name|'inet_pton'
op|'('
name|'socket'
op|'.'
name|'AF_INET6'
op|','
name|'ip'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
comment|"# it's IPv4"
newline|'\n'
indent|'        '
name|'return'
name|'ip'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'[%s]'"
op|'%'
name|'ip'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_valid_utf8_str
dedent|''
dedent|''
name|'def'
name|'get_valid_utf8_str'
op|'('
name|'str_or_unicode'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get valid parts of utf-8 str from str, unicode and even invalid utf-8 str\n\n    :param str_or_unicode: a string or an unicode which can be invalid utf-8\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'str_or_unicode'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'str_or_unicode'
op|','
name|'_len'
op|')'
op|'='
name|'utf8_encoder'
op|'('
name|'str_or_unicode'
op|','
string|"'replace'"
op|')'
newline|'\n'
dedent|''
op|'('
name|'valid_utf8_str'
op|','
name|'_len'
op|')'
op|'='
name|'utf8_decoder'
op|'('
name|'str_or_unicode'
op|','
string|"'replace'"
op|')'
newline|'\n'
name|'return'
name|'valid_utf8_str'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|list_from_csv
dedent|''
name|'def'
name|'list_from_csv'
op|'('
name|'comma_separated_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Splits the str given and returns a properly stripped list of the comma\n    separated values.\n    """'
newline|'\n'
name|'if'
name|'comma_separated_str'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'v'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'v'
name|'in'
name|'comma_separated_str'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
name|'if'
name|'v'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|csv_append
dedent|''
name|'def'
name|'csv_append'
op|'('
name|'csv_string'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Appends an item to a comma-separated string.\n\n    If the comma-separated string is empty/None, just returns item.\n    """'
newline|'\n'
name|'if'
name|'csv_string'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'","'
op|'.'
name|'join'
op|'('
op|'('
name|'csv_string'
op|','
name|'item'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CloseableChain
dedent|''
dedent|''
name|'class'
name|'CloseableChain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Like itertools.chain, but with a close method that will attempt to invoke\n    its sub-iterators\' close methods, if any.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'iterables'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'iterables'
op|'='
name|'iterables'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'itertools'
op|'.'
name|'chain'
op|'('
op|'*'
op|'('
name|'self'
op|'.'
name|'iterables'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'it'
name|'in'
name|'self'
op|'.'
name|'iterables'
op|':'
newline|'\n'
indent|'            '
name|'close_method'
op|'='
name|'getattr'
op|'('
name|'it'
op|','
string|"'close'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'close_method'
op|':'
newline|'\n'
indent|'                '
name|'close_method'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reiterate
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'reiterate'
op|'('
name|'iterable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Consume the first item from an iterator, then re-chain it to the rest of\n    the iterator.  This is useful when you want to make sure the prologue to\n    downstream generators have been executed before continuing.\n\n    :param iterable: an iterable object\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'iterable'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iterable'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'iterator'
op|'='
name|'iter'
op|'('
name|'iterable'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
string|"''"
newline|'\n'
name|'while'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'next'
op|'('
name|'iterator'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'CloseableChain'
op|'('
op|'['
name|'chunk'
op|']'
op|','
name|'iterator'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InputProxy
dedent|''
dedent|''
dedent|''
name|'class'
name|'InputProxy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    File-like object that counts bytes read.\n    To be swapped in for wsgi.input for accounting purposes.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wsgi_input'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param wsgi_input: file-like object to wrap the functionality of\n        """'
newline|'\n'
name|'self'
op|'.'
name|'wsgi_input'
op|'='
name|'wsgi_input'
newline|'\n'
name|'self'
op|'.'
name|'bytes_received'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'client_disconnect'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass read request to the underlying file-like object and\n        add bytes read to total.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'wsgi_input'
op|'.'
name|'read'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client_disconnect'
op|'='
name|'True'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'bytes_received'
op|'+='
name|'len'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'return'
name|'chunk'
newline|'\n'
nl|'\n'
DECL|member|readline
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pass readline request to the underlying file-like object and\n        add bytes read to total.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'self'
op|'.'
name|'wsgi_input'
op|'.'
name|'readline'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client_disconnect'
op|'='
name|'True'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'bytes_received'
op|'+='
name|'len'
op|'('
name|'line'
op|')'
newline|'\n'
name|'return'
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LRUCache
dedent|''
dedent|''
name|'class'
name|'LRUCache'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator for size/time bound memoization that evicts the least\n    recently used members.\n    """'
newline|'\n'
nl|'\n'
name|'PREV'
op|','
name|'NEXT'
op|','
name|'KEY'
op|','
name|'CACHED_AT'
op|','
name|'VALUE'
op|'='
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
comment|'# link fields'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'maxsize'
op|'='
number|'1000'
op|','
name|'maxtime'
op|'='
number|'3600'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'maxsize'
op|'='
name|'maxsize'
newline|'\n'
name|'self'
op|'.'
name|'maxtime'
op|'='
name|'maxtime'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'head'
op|'='
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
comment|'# oldest'
newline|'\n'
name|'self'
op|'.'
name|'tail'
op|'='
op|'['
name|'self'
op|'.'
name|'head'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
comment|'# newest'
newline|'\n'
name|'self'
op|'.'
name|'head'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'='
name|'self'
op|'.'
name|'tail'
newline|'\n'
nl|'\n'
DECL|member|set_cache
dedent|''
name|'def'
name|'set_cache'
op|'('
name|'self'
op|','
name|'value'
op|','
op|'*'
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'len'
op|'('
name|'self'
op|'.'
name|'mapping'
op|')'
op|'>='
name|'self'
op|'.'
name|'maxsize'
op|':'
newline|'\n'
indent|'            '
name|'old_next'
op|','
name|'old_key'
op|'='
name|'self'
op|'.'
name|'head'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|':'
name|'self'
op|'.'
name|'NEXT'
op|'+'
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'head'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|','
name|'old_next'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
op|'='
name|'old_next'
op|','
name|'self'
op|'.'
name|'head'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'mapping'
op|'['
name|'old_key'
op|']'
newline|'\n'
dedent|''
name|'last'
op|'='
name|'self'
op|'.'
name|'tail'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
newline|'\n'
name|'link'
op|'='
op|'['
name|'last'
op|','
name|'self'
op|'.'
name|'tail'
op|','
name|'key'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'value'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mapping'
op|'['
name|'key'
op|']'
op|'='
name|'last'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'='
name|'self'
op|'.'
name|'tail'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
op|'='
name|'link'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|get_cached
dedent|''
name|'def'
name|'get_cached'
op|'('
name|'self'
op|','
name|'link'
op|','
op|'*'
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'link_prev'
op|','
name|'link_next'
op|','
name|'key'
op|','
name|'cached_at'
op|','
name|'value'
op|'='
name|'link'
newline|'\n'
name|'if'
name|'cached_at'
op|'+'
name|'self'
op|'.'
name|'maxtime'
op|'<'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
string|"'%r has timed out'"
op|'%'
op|'('
name|'key'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'link_prev'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'='
name|'link_next'
newline|'\n'
name|'link_next'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
op|'='
name|'link_prev'
newline|'\n'
name|'last'
op|'='
name|'self'
op|'.'
name|'tail'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
newline|'\n'
name|'last'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'='
name|'self'
op|'.'
name|'tail'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
op|'='
name|'link'
newline|'\n'
name|'link'
op|'['
name|'self'
op|'.'
name|'PREV'
op|']'
op|'='
name|'last'
newline|'\n'
name|'link'
op|'['
name|'self'
op|'.'
name|'NEXT'
op|']'
op|'='
name|'self'
op|'.'
name|'tail'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|LRUCacheWrapped
indent|'        '
name|'class'
name|'LRUCacheWrapped'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'im_self'
op|','
op|'*'
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'link'
op|'='
name|'self'
op|'.'
name|'mapping'
op|'.'
name|'get'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'head'
op|')'
newline|'\n'
name|'if'
name|'link'
name|'is'
name|'not'
name|'self'
op|'.'
name|'head'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'self'
op|'.'
name|'get_cached'
op|'('
name|'link'
op|','
op|'*'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'value'
op|'='
name|'f'
op|'('
op|'*'
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_cache'
op|'('
name|'value'
op|','
op|'*'
name|'key'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|size
dedent|''
name|'def'
name|'size'
op|'('
name|'im_self'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Return the size of the cache\n                """'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'im_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_maxsize
dedent|''
name|'def'
name|'get_maxsize'
op|'('
name|'im_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'maxsize'
newline|'\n'
nl|'\n'
DECL|member|set_maxsize
dedent|''
name|'def'
name|'set_maxsize'
op|'('
name|'im_self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxsize'
op|'='
name|'i'
newline|'\n'
nl|'\n'
DECL|member|get_maxtime
dedent|''
name|'def'
name|'get_maxtime'
op|'('
name|'im_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'maxtime'
newline|'\n'
nl|'\n'
DECL|member|set_maxtime
dedent|''
name|'def'
name|'set_maxtime'
op|'('
name|'im_self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxtime'
op|'='
name|'i'
newline|'\n'
nl|'\n'
DECL|variable|maxsize
dedent|''
name|'maxsize'
op|'='
name|'property'
op|'('
name|'get_maxsize'
op|','
name|'set_maxsize'
op|')'
newline|'\n'
DECL|variable|maxtime
name|'maxtime'
op|'='
name|'property'
op|'('
name|'get_maxtime'
op|','
name|'set_maxtime'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'im_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'<%s %r>'"
op|'%'
op|'('
name|'im_self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'LRUCacheWrapped'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|tpool_reraise
dedent|''
dedent|''
name|'def'
name|'tpool_reraise'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Hack to work around Eventlet\'s tpool not catching and reraising Timeouts.\n    """'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'BaseException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'err'
newline|'\n'
dedent|''
dedent|''
name|'resp'
op|'='
name|'tpool'
op|'.'
name|'execute'
op|'('
name|'inner'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'resp'
op|','
name|'BaseException'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'resp'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadPool
dedent|''
name|'class'
name|'ThreadPool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|BYTE
indent|'    '
name|'BYTE'
op|'='
string|"'a'"
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
string|'"""\n    Perform blocking operations in background threads.\n\n    Call its methods from within greenlets to green-wait for results without\n    blocking the eventlet reactor (hopefully).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'nthreads'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nthreads'
op|'='
name|'nthreads'
newline|'\n'
name|'self'
op|'.'
name|'_run_queue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_result_queue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_threads'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'nthreads'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# We spawn a greenthread whose job it is to pull results from the'
nl|'\n'
comment|'# worker threads via a real Queue and send them to eventlet Events so'
nl|'\n'
comment|'# that the calling greenthreads can be awoken.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Since each OS thread has its own collection of greenthreads, it'
nl|'\n'
comment|"# doesn't work to have the worker thread send stuff to the event, as"
nl|'\n'
comment|'# it then notifies its own thread-local eventlet hub to wake up, which'
nl|'\n'
comment|"# doesn't do anything to help out the actual calling greenthread over"
nl|'\n'
comment|'# in the main thread.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Thus, each worker sticks its results into a result queue and then'
nl|'\n'
comment|'# writes a byte to a pipe, signaling the result-consuming greenlet (in'
nl|'\n'
comment|'# the main thread) to wake up and consume results.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# This is all stuff that eventlet.tpool does, but that code can't have"
nl|'\n'
comment|'# multiple instances instantiated. Since the object server uses one'
nl|'\n'
comment|'# pool per disk, we have to reimplement this stuff.'
nl|'\n'
dedent|''
name|'_raw_rpipe'
op|','
name|'self'
op|'.'
name|'wpipe'
op|'='
name|'os'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rpipe'
op|'='
name|'greenio'
op|'.'
name|'GreenPipe'
op|'('
name|'_raw_rpipe'
op|','
string|"'rb'"
op|','
name|'bufsize'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'_junk'
name|'in'
name|'xrange'
op|'('
name|'nthreads'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thr'
op|'='
name|'stdlib_threading'
op|'.'
name|'Thread'
op|'('
nl|'\n'
name|'target'
op|'='
name|'self'
op|'.'
name|'_worker'
op|','
nl|'\n'
name|'args'
op|'='
op|'('
name|'self'
op|'.'
name|'_run_queue'
op|','
name|'self'
op|'.'
name|'_result_queue'
op|')'
op|')'
newline|'\n'
name|'thr'
op|'.'
name|'daemon'
op|'='
name|'True'
newline|'\n'
name|'thr'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_threads'
op|'.'
name|'append'
op|'('
name|'thr'
op|')'
newline|'\n'
nl|'\n'
comment|'# This is the result-consuming greenthread that runs in the main OS'
nl|'\n'
comment|'# thread, as described above.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_consumer_coro'
op|'='
name|'greenthread'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'_consume_results'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_result_queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_worker
dedent|''
name|'def'
name|'_worker'
op|'('
name|'self'
op|','
name|'work_queue'
op|','
name|'result_queue'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pulls an item from the queue and runs it, then puts the result into\n        the result queue. Repeats forever.\n\n        :param work_queue: queue from which to pull work\n        :param result_queue: queue into which to place results\n        """'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'item'
op|'='
name|'work_queue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'ev'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|'='
name|'item'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'result_queue'
op|'.'
name|'put'
op|'('
op|'('
name|'ev'
op|','
name|'True'
op|','
name|'result'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'BaseException'
op|':'
newline|'\n'
indent|'                '
name|'result_queue'
op|'.'
name|'put'
op|'('
op|'('
name|'ev'
op|','
name|'False'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'work_queue'
op|'.'
name|'task_done'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'wpipe'
op|','
name|'self'
op|'.'
name|'BYTE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_consume_results
dedent|''
dedent|''
dedent|''
name|'def'
name|'_consume_results'
op|'('
name|'self'
op|','
name|'queue'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Runs as a greenthread in the same OS thread as callers of\n        run_in_thread().\n\n        Takes results from the worker OS threads and sends them to the waiting\n        greenthreads.\n        """'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'rpipe'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# can happen at process shutdown when pipe is closed'
nl|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'ev'
op|','
name|'success'
op|','
name|'result'
op|'='
name|'queue'
op|'.'
name|'get'
op|'('
name|'block'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'                        '
name|'ev'
op|'.'
name|'send'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'ev'
op|'.'
name|'send_exception'
op|'('
op|'*'
name|'result'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'queue'
op|'.'
name|'task_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_in_thread
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'run_in_thread'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Runs func(*args, **kwargs) in a thread. Blocks the current greenlet\n        until results are available.\n\n        Exceptions thrown will be reraised in the calling thread.\n\n        If the threadpool was initialized with nthreads=0, it invokes\n        func(*args, **kwargs) directly, followed by eventlet.sleep() to ensure\n        the eventlet hub has a chance to execute. It is more likely the hub\n        will be invoked when queuing operations to an external thread.\n\n        :returns: result of calling func\n        :raises: whatever func raises\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nthreads'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'sleep'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
name|'ev'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_queue'
op|'.'
name|'put'
op|'('
op|'('
name|'ev'
op|','
name|'func'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|','
name|'block'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# blocks this greenlet (and only *this* greenlet) until the real'
nl|'\n'
comment|'# thread calls ev.send().'
nl|'\n'
name|'result'
op|'='
name|'ev'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_run_in_eventlet_tpool
dedent|''
name|'def'
name|'_run_in_eventlet_tpool'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Really run something in an external thread, even if we haven\'t got any\n        threads of our own.\n        """'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'True'
op|','
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Timeout'
op|','
name|'BaseException'
op|')'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'False'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'success'
op|','
name|'result'
op|'='
name|'tpool'
op|'.'
name|'execute'
op|'('
name|'inner'
op|')'
newline|'\n'
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|force_run_in_thread
dedent|''
dedent|''
name|'def'
name|'force_run_in_thread'
op|'('
name|'self'
op|','
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Runs func(*args, **kwargs) in a thread. Blocks the current greenlet\n        until results are available.\n\n        Exceptions thrown will be reraised in the calling thread.\n\n        If the threadpool was initialized with nthreads=0, uses eventlet.tpool\n        to run the function. This is in contrast to run_in_thread(), which\n        will (in that case) simply execute func in the calling thread.\n\n        :returns: result of calling func\n        :raises: whatever func raises\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nthreads'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_run_in_eventlet_tpool'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'run_in_thread'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ismount
dedent|''
dedent|''
dedent|''
name|'def'
name|'ismount'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test whether a path is a mount point. This will catch any\n    exceptions and translate them into a False return value\n    Use ismount_raw to have the exceptions raised instead.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ismount_raw'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ismount_raw
dedent|''
dedent|''
name|'def'
name|'ismount_raw'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test whether a path is a mount point. Whereas ismount will catch\n    any exceptions and just return False, this raw version will not\n    catch exceptions.\n\n    This is code hijacked from C Python 2.6.8, adapted to remove the extra\n    lstat() system call.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'s1'
op|'='
name|'os'
op|'.'
name|'lstat'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'os'
op|'.'
name|'error'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
comment|"# It doesn't exist -- so not a mount point :-)"
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'stat'
op|'.'
name|'S_ISLNK'
op|'('
name|'s1'
op|'.'
name|'st_mode'
op|')'
op|':'
newline|'\n'
comment|'# A symlink can never be a mount point'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'s2'
op|'='
name|'os'
op|'.'
name|'lstat'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'..'"
op|')'
op|')'
newline|'\n'
name|'dev1'
op|'='
name|'s1'
op|'.'
name|'st_dev'
newline|'\n'
name|'dev2'
op|'='
name|'s2'
op|'.'
name|'st_dev'
newline|'\n'
name|'if'
name|'dev1'
op|'!='
name|'dev2'
op|':'
newline|'\n'
comment|'# path/.. on a different device as path'
nl|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'ino1'
op|'='
name|'s1'
op|'.'
name|'st_ino'
newline|'\n'
name|'ino2'
op|'='
name|'s2'
op|'.'
name|'st_ino'
newline|'\n'
name|'if'
name|'ino1'
op|'=='
name|'ino2'
op|':'
newline|'\n'
comment|'# path/.. is the same i-node as path'
nl|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_rfc_token
dedent|''
name|'_rfc_token'
op|'='
string|'r\'[^()<>@,;:\\"/\\[\\]?={}\\x00-\\x20\\x7f]+\''
newline|'\n'
DECL|variable|_rfc_extension_pattern
name|'_rfc_extension_pattern'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
nl|'\n'
string|"r'(?:\\s*;\\s*('"
op|'+'
name|'_rfc_token'
op|'+'
string|'r")\\s*(?:=\\s*("'
op|'+'
name|'_rfc_token'
op|'+'
nl|'\n'
string|'r\'|"(?:[^"\\\\]|\\\\.)*"))?)\''
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_content_type
name|'def'
name|'parse_content_type'
op|'('
name|'content_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse a content-type and its parameters into values.\n    RFC 2616 sec 14.17 and 3.7 are pertinent.\n\n    **Examples**::\n\n        \'text/plain; charset=UTF-8\' -> (\'text/plain\', [(\'charset, \'UTF-8\')])\n        \'text/plain; charset=UTF-8; level=1\' ->\n            (\'text/plain\', [(\'charset, \'UTF-8\'), (\'level\', \'1\')])\n\n    :param content_type: content_type to parse\n    :returns: a typle containing (content type, list of k, v parameter tuples)\n    """'
newline|'\n'
name|'parm_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|"';'"
name|'in'
name|'content_type'
op|':'
newline|'\n'
indent|'        '
name|'content_type'
op|','
name|'parms'
op|'='
name|'content_type'
op|'.'
name|'split'
op|'('
string|"';'"
op|','
number|'1'
op|')'
newline|'\n'
name|'parms'
op|'='
string|"';'"
op|'+'
name|'parms'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'_rfc_extension_pattern'
op|'.'
name|'findall'
op|'('
name|'parms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'m'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'m'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'parm_list'
op|'.'
name|'append'
op|'('
op|'('
name|'key'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'content_type'
op|','
name|'parm_list'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|override_bytes_from_content_type
dedent|''
name|'def'
name|'override_bytes_from_content_type'
op|'('
name|'listing_dict'
op|','
name|'logger'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Takes a dict from a container listing and overrides the content_type,\n    bytes fields if swift_bytes is set.\n    """'
newline|'\n'
name|'content_type'
op|','
name|'params'
op|'='
name|'parse_content_type'
op|'('
name|'listing_dict'
op|'['
string|"'content_type'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
op|'=='
string|"'swift_bytes'"
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'listing_dict'
op|'['
string|"'bytes'"
op|']'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'logger'
op|':'
newline|'\n'
indent|'                    '
name|'logger'
op|'.'
name|'exception'
op|'('
string|'"Invalid swift_bytes"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'content_type'
op|'+='
string|"';%s=%s'"
op|'%'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'listing_dict'
op|'['
string|"'content_type'"
op|']'
op|'='
name|'content_type'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clean_content_type
dedent|''
name|'def'
name|'clean_content_type'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"';'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'left'
op|','
name|'right'
op|'='
name|'value'
op|'.'
name|'rsplit'
op|'('
string|"';'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'right'
op|'.'
name|'lstrip'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|"'swift_bytes='"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'left'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|quote
dedent|''
name|'def'
name|'quote'
op|'('
name|'value'
op|','
name|'safe'
op|'='
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Patched version of urllib.quote that encodes utf-8 strings before quoting\n    """'
newline|'\n'
name|'return'
name|'_quote'
op|'('
name|'get_valid_utf8_str'
op|'('
name|'value'
op|')'
op|','
name|'safe'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
