begin_unit
comment|'# Copyright (c) 2011 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'time'
name|'import'
name|'gmtime'
op|','
name|'strftime'
op|','
name|'time'
newline|'\n'
name|'from'
name|'traceback'
name|'import'
name|'format_exc'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
op|','
name|'unquote'
newline|'\n'
name|'from'
name|'uuid'
name|'import'
name|'uuid4'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'sha1'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Response'
op|','
name|'Request'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'HTTPBadRequest'
op|','
name|'HTTPForbidden'
op|','
name|'HTTPNotFound'
op|','
name|'HTTPUnauthorized'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'middleware'
op|'.'
name|'acl'
name|'import'
name|'clean_acl'
op|','
name|'parse_acl'
op|','
name|'referrer_allowed'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'cache_from_env'
op|','
name|'get_logger'
op|','
name|'get_remote_client'
op|','
name|'split_path'
op|','
name|'config_true_value'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'http'
name|'import'
name|'HTTP_CLIENT_CLOSED_REQUEST'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TempAuth
name|'class'
name|'TempAuth'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test authentication and authorization system.\n\n    Add to your pipeline in proxy-server.conf, such as::\n\n        [pipeline:main]\n        pipeline = catch_errors cache tempauth proxy-server\n\n    Set account auto creation to true in proxy-server.conf::\n\n        [app:proxy-server]\n        account_autocreate = true\n\n    And add a tempauth filter section, such as::\n\n        [filter:tempauth]\n        use = egg:swift#tempauth\n        user_admin_admin = admin .admin .reseller_admin\n        user_test_tester = testing .admin\n        user_test2_tester2 = testing2 .admin\n        user_test_tester3 = testing3\n        # To allow accounts/users with underscores you can base64 encode them.\n        # Here is the account "under_score" and username "a_b" (note the lack\n        # of padding equal signs):\n        user64_dW5kZXJfc2NvcmU_YV9i = testing4\n\n\n    See the proxy-server.conf-sample for more information.\n\n    :param app: The next WSGI app in the pipeline\n    :param conf: The dict of configuration values\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'get_logger'
op|'('
name|'conf'
op|','
name|'log_route'
op|'='
string|"'tempauth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'log_headers'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_headers'"
op|','
string|"'f'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reseller_prefix'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'reseller_prefix'"
op|','
string|"'AUTH'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
name|'and'
name|'self'
op|'.'
name|'reseller_prefix'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'_'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reseller_prefix'
op|'+='
string|"'_'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'tempauth.%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reseller_prefix'
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
name|'else'
string|"'NONE'"
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_prefix'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'auth_prefix'"
op|','
string|"'/auth/'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'auth_prefix'
name|'or'
name|'not'
name|'self'
op|'.'
name|'auth_prefix'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
string|'\'Rewriting invalid auth prefix "%s" to \''
nl|'\n'
string|'\'"/auth/" (Non-empty auth prefix path \''
nl|'\n'
string|"'is required)'"
op|'%'
name|'self'
op|'.'
name|'auth_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_prefix'
op|'='
string|"'/auth/'"
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|'['
number|'0'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'auth_prefix'
op|'='
string|"'/'"
op|'+'
name|'self'
op|'.'
name|'auth_prefix'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'auth_prefix'
op|'+='
string|"'/'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'token_life'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'token_life'"
op|','
number|'86400'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allow_overrides'
op|'='
name|'config_true_value'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'allow_overrides'"
op|','
string|"'t'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'storage_url_scheme'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'storage_url_scheme'"
op|','
string|"'default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'conf_key'
name|'in'
name|'conf'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user_'"
op|')'
name|'or'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user64_'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'account'
op|','
name|'username'
op|'='
name|'conf_key'
op|'.'
name|'split'
op|'('
string|"'_'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'_'"
op|')'
newline|'\n'
name|'if'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user64_'"
op|')'
op|':'
newline|'\n'
comment|'# Because trailing equal signs would screw up config file'
nl|'\n'
comment|"# parsing, we auto-pad with '=' chars."
nl|'\n'
indent|'                    '
name|'account'
op|'+='
string|"'='"
op|'*'
op|'('
name|'len'
op|'('
name|'account'
op|')'
op|'%'
number|'4'
op|')'
newline|'\n'
name|'account'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'account'
op|')'
newline|'\n'
name|'username'
op|'+='
string|"'='"
op|'*'
op|'('
name|'len'
op|'('
name|'username'
op|')'
op|'%'
number|'4'
op|')'
newline|'\n'
name|'username'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'username'
op|')'
newline|'\n'
dedent|''
name|'values'
op|'='
name|'conf'
op|'['
name|'conf_key'
op|']'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'values'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'%s has no key set'"
op|'%'
name|'conf_key'
op|')'
newline|'\n'
dedent|''
name|'key'
op|'='
name|'values'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'values'
name|'and'
op|'('
string|"'://'"
name|'in'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
name|'or'
string|"'$HOST'"
name|'in'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'url'
op|'='
name|'values'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'url'
op|'='
string|"'$HOST/v1/%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'users'
op|'['
name|'account'
op|'+'
string|"':'"
op|'+'
name|'username'
op|']'
op|'='
op|'{'
nl|'\n'
string|"'key'"
op|':'
name|'key'
op|','
string|"'url'"
op|':'
name|'url'
op|','
string|"'groups'"
op|':'
name|'values'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Accepts a standard WSGI application call, authenticating the request\n        and installing callback hooks for authorization and ACL header\n        validation. For an authenticated request, REMOTE_USER will be set to a\n        comma separated list of the user\'s groups.\n\n        With a non-empty reseller prefix, acts as the definitive auth service\n        for just tokens and accounts that begin with that prefix, but will deny\n        requests outside this prefix if no other auth middleware overrides it.\n\n        With an empty reseller prefix, acts as the definitive auth service only\n        for tokens that validate to a non-empty set of groups. For all other\n        requests, acts as the fallback auth service when no other auth\n        middleware overrides it.\n\n        Alternatively, if the request matches the self.auth_prefix, the request\n        will be routed through the internal auth request handler (self.handle).\n        This is to handle granting tokens, etc.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'allow_overrides'
name|'and'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.authorize_override'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'env'
op|'.'
name|'get'
op|'('
string|"'PATH_INFO'"
op|','
string|"''"
op|')'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'auth_prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'handle'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'s3'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_AUTHORIZATION'"
op|')'
newline|'\n'
name|'token'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_AUTH_TOKEN'"
op|','
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_STORAGE_TOKEN'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'s3'
name|'or'
op|'('
name|'token'
name|'and'
name|'token'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Note: Empty reseller_prefix will match all tokens.'
nl|'\n'
indent|'            '
name|'groups'
op|'='
name|'self'
op|'.'
name|'get_groups'
op|'('
name|'env'
op|','
name|'token'
op|')'
newline|'\n'
name|'if'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'env'
op|'['
string|"'REMOTE_USER'"
op|']'
op|'='
name|'groups'
newline|'\n'
name|'user'
op|'='
name|'groups'
name|'and'
name|'groups'
op|'.'
name|'split'
op|'('
string|"','"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
name|'or'
string|"''"
newline|'\n'
comment|'# We know the proxy logs the token, so we augment it just a bit'
nl|'\n'
comment|'# to also log the authenticated user.'
nl|'\n'
name|'env'
op|'['
string|"'HTTP_X_AUTH_TOKEN'"
op|']'
op|'='
string|"'%s,%s'"
op|'%'
op|'('
name|'user'
op|','
string|"'s3'"
name|'if'
name|'s3'
name|'else'
name|'token'
op|')'
newline|'\n'
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Unauthorized token'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
op|':'
newline|'\n'
comment|"# Because I know I'm the definitive auth for this token, I"
nl|'\n'
comment|'# can deny it outright.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'unauthorized'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
comment|"# Because I'm not certain if I'm the definitive auth for empty"
nl|'\n'
comment|"# reseller_prefixed tokens, I won't overwrite swift.authorize."
nl|'\n'
dedent|''
name|'elif'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'denied_response'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
op|':'
newline|'\n'
comment|'# With a non-empty reseller_prefix, I would like to be called'
nl|'\n'
comment|"# back for anonymous access to accounts I know I'm the"
nl|'\n'
comment|'# definitive auth for.'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'version'
op|','
name|'rest'
op|'='
name|'split_path'
op|'('
name|'env'
op|'.'
name|'get'
op|'('
string|"'PATH_INFO'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'1'
op|','
number|'2'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'version'
op|','
name|'rest'
op|'='
name|'None'
op|','
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rest'
name|'and'
name|'rest'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|')'
op|':'
newline|'\n'
comment|"# Handle anonymous access to accounts I'm the definitive"
nl|'\n'
comment|'# auth for.'
nl|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
comment|"# Not my token, not my account, I can't authorize this request,"
nl|'\n'
comment|'# deny all is a good idea if not already set...'
nl|'\n'
dedent|''
name|'elif'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'denied_response'
newline|'\n'
comment|"# Because I'm not certain if I'm the definitive auth for empty"
nl|'\n'
comment|"# reseller_prefixed accounts, I won't overwrite swift.authorize."
nl|'\n'
dedent|''
dedent|''
name|'elif'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_groups
dedent|''
name|'def'
name|'get_groups'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'token'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get groups for the given token.\n\n        :param env: The current WSGI environment dictionary.\n        :param token: Token to validate and return a group string for.\n\n        :returns: None if the token is invalid or a string containing a comma\n                  separated list of groups the authenticated user is a member\n                  of. The first group in the list is also considered a unique\n                  identifier for that user.\n        """'
newline|'\n'
name|'groups'
op|'='
name|'None'
newline|'\n'
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Memcache required'"
op|')'
newline|'\n'
dedent|''
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'token'
op|')'
newline|'\n'
name|'cached_auth_data'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_token_key'
op|')'
newline|'\n'
name|'if'
name|'cached_auth_data'
op|':'
newline|'\n'
indent|'            '
name|'expires'
op|','
name|'groups'
op|'='
name|'cached_auth_data'
newline|'\n'
name|'if'
name|'expires'
op|'<'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_AUTHORIZATION'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'account_user'
op|','
name|'sign'
op|'='
name|'env'
op|'['
string|"'HTTP_AUTHORIZATION'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'account_user'
name|'not'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'account'
op|','
name|'user'
op|'='
name|'account_user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'account_id'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'path'
op|'='
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
newline|'\n'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
name|'path'
op|'.'
name|'replace'
op|'('
name|'account_user'
op|','
name|'account_id'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'base64'
op|'.'
name|'urlsafe_b64decode'
op|'('
name|'unquote'
op|'('
name|'token'
op|')'
op|')'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'key'"
op|']'
newline|'\n'
name|'s'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'hmac'
op|'.'
name|'new'
op|'('
name|'key'
op|','
name|'msg'
op|','
name|'sha1'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'s'
op|'!='
name|'sign'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'groups'
op|'='
op|'['
name|'account'
op|','
name|'account_user'
op|']'
newline|'\n'
name|'groups'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'groups'"
op|']'
op|')'
newline|'\n'
name|'if'
string|"'.admin'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'.'
name|'remove'
op|'('
string|"'.admin'"
op|')'
newline|'\n'
name|'groups'
op|'.'
name|'append'
op|'('
name|'account_id'
op|')'
newline|'\n'
dedent|''
name|'groups'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'groups'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'groups'
newline|'\n'
nl|'\n'
DECL|member|authorize
dedent|''
name|'def'
name|'authorize'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns None if the request is authorized to continue or a standard\n        WSGI response callable if not.\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'1'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'account'
name|'or'
name|'not'
name|'account'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'user_groups'
op|'='
op|'('
name|'req'
op|'.'
name|'remote_user'
name|'or'
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'if'
string|"'.reseller_admin'"
name|'in'
name|'user_groups'
name|'and'
name|'account'
op|'!='
name|'self'
op|'.'
name|'reseller_prefix'
name|'and'
name|'account'
op|'['
name|'len'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|')'
op|']'
op|'!='
string|"'.'"
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'account'
name|'in'
name|'user_groups'
name|'and'
op|'('
name|'req'
op|'.'
name|'method'
name|'not'
name|'in'
op|'('
string|"'DELETE'"
op|','
string|"'PUT'"
op|')'
name|'or'
name|'container'
op|')'
op|':'
newline|'\n'
comment|'# If the user is admin for the account and is not trying to do an'
nl|'\n'
comment|'# account DELETE or PUT...'
nl|'\n'
indent|'            '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift_sync_key'"
op|')'
nl|'\n'
name|'and'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_sync_key'"
op|']'
op|'=='
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-sync-key'"
op|','
name|'None'
op|')'
op|')'
nl|'\n'
name|'and'
string|"'x-timestamp'"
name|'in'
name|'req'
op|'.'
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'OPTIONS'"
op|':'
newline|'\n'
comment|'#allow OPTIONS requests to proceed as normal'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'referrers'
op|','
name|'groups'
op|'='
name|'parse_acl'
op|'('
name|'getattr'
op|'('
name|'req'
op|','
string|"'acl'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'if'
name|'referrer_allowed'
op|'('
name|'req'
op|'.'
name|'referer'
op|','
name|'referrers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'obj'
name|'or'
string|"'.rlistings'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'req'
op|'.'
name|'remote_user'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'user_group'
name|'in'
name|'user_groups'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'user_group'
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|denied_response
dedent|''
name|'def'
name|'denied_response'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a standard WSGI response callable with the status of 403 or 401\n        depending on whether the REMOTE_USER is set or not.\n        """'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'remote_user'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'forbidden'"
op|')'
newline|'\n'
name|'return'
name|'HTTPForbidden'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'unauthorized'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle
dedent|''
dedent|''
name|'def'
name|'handle'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        WSGI entry point for auth requests (ones that match the\n        self.auth_prefix).\n        Wraps env in swob.Request object and passes it down.\n\n        :param env: WSGI environment dictionary\n        :param start_response: WSGI callable\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
name|'Request'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'path_info_pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'req'
op|'.'
name|'bytes_transferred'
op|'='
string|"'-'"
newline|'\n'
name|'req'
op|'.'
name|'client_disconnect'
op|'='
name|'False'
newline|'\n'
name|'if'
string|"'x-storage-token'"
name|'in'
name|'req'
op|'.'
name|'headers'
name|'and'
string|"'x-auth-token'"
name|'not'
name|'in'
name|'req'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-auth-token'"
op|']'
op|'='
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-storage-token'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'eventlet.posthooks'"
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                '
name|'env'
op|'['
string|"'eventlet.posthooks'"
op|']'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'('
name|'self'
op|'.'
name|'posthooklogger'
op|','
op|'('
name|'req'
op|','
op|')'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'handle_request'
op|'('
name|'req'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Lack of posthook support means that we have to log on the'
nl|'\n'
comment|'# start of the response, rather than after all the data has'
nl|'\n'
comment|'# been sent. This prevents logging client disconnects'
nl|'\n'
comment|'# differently than full transmissions.'
nl|'\n'
indent|'                '
name|'response'
op|'='
name|'self'
op|'.'
name|'handle_request'
op|'('
name|'req'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'posthooklogger'
op|'('
name|'env'
op|','
name|'req'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"EXCEPTION IN handle: %s: %s"'
op|'%'
op|'('
name|'format_exc'
op|'('
op|')'
op|','
name|'env'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'start_response'
op|'('
string|"'500 Server Error'"
op|','
nl|'\n'
op|'['
op|'('
string|"'Content-Type'"
op|','
string|"'text/plain'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
string|"'Internal server error.\\n'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|handle_request
dedent|''
dedent|''
name|'def'
name|'handle_request'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Entry point for auth requests (ones that match the self.auth_prefix).\n        Should return a WSGI-style callable (such as swob.Response).\n\n        :param req: swob.Request object\n        """'
newline|'\n'
name|'req'
op|'.'
name|'start_time'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|','
name|'account'
op|','
name|'user'
op|','
name|'_junk'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'1'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'version'
name|'in'
op|'('
string|"'v1'"
op|','
string|"'v1.0'"
op|','
string|"'auth'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'GET'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'='
name|'self'
op|'.'
name|'handle_get_token'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'response'
op|'='
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'response'
op|'='
name|'handler'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'req'
op|'.'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|handle_get_token
dedent|''
name|'def'
name|'handle_get_token'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handles the various `request for token and service end point(s)` calls.\n        There are various formats to support the various auth servers in the\n        past. Examples::\n\n            GET <auth-prefix>/v1/<act>/auth\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n            GET <auth-prefix>/auth\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n            GET <auth-prefix>/v1.0\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n\n        On successful authentication, the response will have X-Auth-Token and\n        X-Storage-Token set to the token to use with Swift and X-Storage-URL\n        set to the URL to the default Swift cluster to use.\n\n        :param req: The swob.Request to process.\n        :returns: swob.Response, 2xx on success with data set as explained\n                  above.\n        """'
newline|'\n'
comment|'# Validate the request info'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pathsegs'
op|'='
name|'split_path'
op|'('
name|'req'
op|'.'
name|'path_info'
op|','
number|'1'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'pathsegs'
op|'['
number|'0'
op|']'
op|'=='
string|"'v1'"
name|'and'
name|'pathsegs'
op|'['
number|'2'
op|']'
op|'=='
string|"'auth'"
op|':'
newline|'\n'
indent|'            '
name|'account'
op|'='
name|'pathsegs'
op|'['
number|'1'
op|']'
newline|'\n'
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
name|'or'
string|"':'"
name|'not'
name|'in'
name|'user'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'account2'
op|','
name|'user'
op|'='
name|'user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'account'
op|'!='
name|'account2'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-pass'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-key'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'pathsegs'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'auth'"
op|','
string|"'v1.0'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-user'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'user'
name|'or'
string|"':'"
name|'not'
name|'in'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'account'
op|','
name|'user'
op|'='
name|'user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-key'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-pass'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'all'
op|'('
op|'('
name|'account'
op|','
name|'user'
op|','
name|'key'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
comment|'# Authenticate user'
nl|'\n'
dedent|''
name|'account_user'
op|'='
name|'account'
op|'+'
string|"':'"
op|'+'
name|'user'
newline|'\n'
name|'if'
name|'account_user'
name|'not'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'key'"
op|']'
op|'!='
name|'key'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
comment|'# Get memcache client'
nl|'\n'
dedent|''
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'req'
op|'.'
name|'environ'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Memcache required'"
op|')'
newline|'\n'
comment|"# See if a token already exists and hasn't expired"
nl|'\n'
dedent|''
name|'token'
op|'='
name|'None'
newline|'\n'
name|'memcache_user_key'
op|'='
string|"'%s/user/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account_user'
op|')'
newline|'\n'
name|'candidate_token'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_user_key'
op|')'
newline|'\n'
name|'if'
name|'candidate_token'
op|':'
newline|'\n'
indent|'            '
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'candidate_token'
op|')'
newline|'\n'
name|'cached_auth_data'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_token_key'
op|')'
newline|'\n'
name|'if'
name|'cached_auth_data'
op|':'
newline|'\n'
indent|'                '
name|'expires'
op|','
name|'groups'
op|'='
name|'cached_auth_data'
newline|'\n'
name|'if'
name|'expires'
op|'>'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'token'
op|'='
name|'candidate_token'
newline|'\n'
comment|"# Create a new token if one didn't exist"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
comment|'# Generate new token'
nl|'\n'
indent|'            '
name|'token'
op|'='
string|"'%stk%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
name|'expires'
op|'='
name|'time'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'token_life'
newline|'\n'
name|'groups'
op|'='
op|'['
name|'account'
op|','
name|'account_user'
op|']'
newline|'\n'
name|'groups'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'groups'"
op|']'
op|')'
newline|'\n'
name|'if'
string|"'.admin'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'.'
name|'remove'
op|'('
string|"'.admin'"
op|')'
newline|'\n'
name|'account_id'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'groups'
op|'.'
name|'append'
op|'('
name|'account_id'
op|')'
newline|'\n'
dedent|''
name|'groups'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'groups'
op|')'
newline|'\n'
comment|'# Save token'
nl|'\n'
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'token'
op|')'
newline|'\n'
name|'memcache_client'
op|'.'
name|'set'
op|'('
name|'memcache_token_key'
op|','
op|'('
name|'expires'
op|','
name|'groups'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'float'
op|'('
name|'expires'
op|'-'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# Record the token with the user info for future use.'
nl|'\n'
name|'memcache_user_key'
op|'='
string|"'%s/user/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account_user'
op|')'
newline|'\n'
name|'memcache_client'
op|'.'
name|'set'
op|'('
name|'memcache_user_key'
op|','
name|'token'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'float'
op|'('
name|'expires'
op|'-'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'x-auth-token'"
op|':'
name|'token'
op|','
string|"'x-storage-token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'$HOST'"
op|','
name|'resp'
op|'.'
name|'host_url'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'storage_url_scheme'
op|'!='
string|"'default'"
op|':'
newline|'\n'
indent|'            '
name|'url'
op|'='
name|'self'
op|'.'
name|'storage_url_scheme'
op|'+'
string|"':'"
op|'+'
name|'url'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'x-storage-url'"
op|']'
op|'='
name|'url'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|member|posthooklogger
dedent|''
name|'def'
name|'posthooklogger'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'req'
op|'.'
name|'path'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'auth_prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
string|"'response'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'response'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'trans_time'
op|'='
string|"'%.4f'"
op|'%'
op|'('
name|'time'
op|'('
op|')'
op|'-'
name|'req'
op|'.'
name|'start_time'
op|')'
newline|'\n'
name|'the_request'
op|'='
name|'quote'
op|'('
name|'unquote'
op|'('
name|'req'
op|'.'
name|'path'
op|')'
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'query_string'
op|':'
newline|'\n'
indent|'            '
name|'the_request'
op|'='
name|'the_request'
op|'+'
string|"'?'"
op|'+'
name|'req'
op|'.'
name|'query_string'
newline|'\n'
comment|'# remote user for zeus'
nl|'\n'
dedent|''
name|'client'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-cluster-client-ip'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'client'
name|'and'
string|"'x-forwarded-for'"
name|'in'
name|'req'
op|'.'
name|'headers'
op|':'
newline|'\n'
comment|'# remote user for other lbs'
nl|'\n'
indent|'            '
name|'client'
op|'='
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-forwarded-for'"
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'logged_headers'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'log_headers'
op|':'
newline|'\n'
indent|'            '
name|'logged_headers'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
string|"'%s: %s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'status_int'
op|'='
name|'response'
op|'.'
name|'status_int'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'req'
op|','
string|"'client_disconnect'"
op|','
name|'False'
op|')'
name|'or'
name|'getattr'
op|'('
name|'response'
op|','
string|"'client_disconnect'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'status_int'
op|'='
name|'HTTP_CLIENT_CLOSED_REQUEST'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'info'
op|'('
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
name|'quote'
op|'('
name|'str'
op|'('
name|'x'
op|')'
op|')'
name|'for'
name|'x'
name|'in'
op|'('
name|'client'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'req'
op|'.'
name|'remote_addr'
name|'or'
string|"'-'"
op|','
name|'strftime'
op|'('
string|"'%d/%b/%Y/%H/%M/%S'"
op|','
name|'gmtime'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'req'
op|'.'
name|'method'
op|','
name|'the_request'
op|','
name|'req'
op|'.'
name|'environ'
op|'['
string|"'SERVER_PROTOCOL'"
op|']'
op|','
nl|'\n'
name|'status_int'
op|','
name|'req'
op|'.'
name|'referer'
name|'or'
string|"'-'"
op|','
name|'req'
op|'.'
name|'user_agent'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-token'"
op|','
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-admin-user'"
op|','
string|"'-'"
op|')'
op|')'
op|','
nl|'\n'
name|'getattr'
op|'('
name|'req'
op|','
string|"'bytes_transferred'"
op|','
number|'0'
op|')'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'getattr'
op|'('
name|'response'
op|','
string|"'bytes_transferred'"
op|','
number|'0'
op|')'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|','
string|"'-'"
op|')'
op|','
nl|'\n'
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift.trans_id'"
op|','
string|"'-'"
op|')'
op|','
name|'logged_headers'
name|'or'
string|"'-'"
op|','
nl|'\n'
name|'trans_time'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filter_factory
dedent|''
dedent|''
name|'def'
name|'filter_factory'
op|'('
name|'global_conf'
op|','
op|'**'
name|'local_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a WSGI filter app for use with paste.deploy."""'
newline|'\n'
name|'conf'
op|'='
name|'global_conf'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'update'
op|'('
name|'local_conf'
op|')'
newline|'\n'
nl|'\n'
DECL|function|auth_filter
name|'def'
name|'auth_filter'
op|'('
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'TempAuth'
op|'('
name|'app'
op|','
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'auth_filter'
newline|'\n'
dedent|''
endmarker|''
end_unit
