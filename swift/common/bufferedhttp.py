begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nMonkey Patch httplib.HTTPResponse to buffer reads of headers. This can improve\nperformance when making large numbers of small HTTP requests.  This module\nalso provides helper functions to make HTTP connections using\nBufferedHTTPResponse.\n\n.. warning::\n\n    If you use this, be sure that the libraries you are using do not access\n    the socket directly (xmlrpclib, I\'m looking at you :/), and instead\n    make all calls through httplib.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'constraints'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
op|'.'
name|'httplib'
name|'import'
name|'CONTINUE'
op|','
name|'HTTPConnection'
op|','
name|'HTTPMessage'
op|','
name|'HTTPResponse'
op|','
name|'HTTPSConnection'
op|','
name|'_UNKNOWN'
newline|'\n'
nl|'\n'
DECL|variable|httplib
name|'httplib'
op|'='
name|'eventlet'
op|'.'
name|'import_patched'
op|'('
string|"'httplib'"
op|')'
newline|'\n'
name|'httplib'
op|'.'
name|'_MAXHEADERS'
op|'='
name|'constraints'
op|'.'
name|'MAX_HEADER_COUNT'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BufferedHTTPResponse
name|'class'
name|'BufferedHTTPResponse'
op|'('
name|'HTTPResponse'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""HTTPResponse class that buffers reading of headers"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'debuglevel'
op|'='
number|'0'
op|','
name|'strict'
op|'='
number|'0'
op|','
nl|'\n'
name|'method'
op|'='
name|'None'
op|')'
op|':'
comment|'# pragma: no cover'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'='
name|'sock'
newline|'\n'
comment|'# sock is an eventlet.greenio.GreenSocket'
nl|'\n'
comment|'# sock.fd is a socket._socketobject'
nl|'\n'
comment|'# sock.fd._sock is a socket._socket object, which is what we want.'
nl|'\n'
name|'self'
op|'.'
name|'_real_socket'
op|'='
name|'sock'
op|'.'
name|'fd'
op|'.'
name|'_sock'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'sock'
op|'.'
name|'makefile'
op|'('
string|"'rb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'debuglevel'
op|'='
name|'debuglevel'
newline|'\n'
name|'self'
op|'.'
name|'strict'
op|'='
name|'strict'
newline|'\n'
name|'self'
op|'.'
name|'_method'
op|'='
name|'method'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# from the Status-Line of the response'
nl|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'_UNKNOWN'
comment|'# HTTP-Version'
newline|'\n'
name|'self'
op|'.'
name|'status'
op|'='
name|'_UNKNOWN'
comment|'# Status-Code'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'_UNKNOWN'
comment|'# Reason-Phrase'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'chunked'
op|'='
name|'_UNKNOWN'
comment|'# is "chunked" being used?'
newline|'\n'
name|'self'
op|'.'
name|'chunk_left'
op|'='
name|'_UNKNOWN'
comment|'# bytes left to read in current chunk'
newline|'\n'
name|'self'
op|'.'
name|'length'
op|'='
name|'_UNKNOWN'
comment|'# number of bytes left in response'
newline|'\n'
name|'self'
op|'.'
name|'will_close'
op|'='
name|'_UNKNOWN'
comment|'# conn will close at end of response'
newline|'\n'
name|'self'
op|'.'
name|'_readline_buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|expect_response
dedent|''
name|'def'
name|'expect_response'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'makefile'
op|'('
string|"'rb'"
op|','
number|'0'
op|')'
newline|'\n'
name|'version'
op|','
name|'status'
op|','
name|'reason'
op|'='
name|'self'
op|'.'
name|'_read_status'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status'
op|'!='
name|'CONTINUE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_read_status'
op|'='
name|'lambda'
op|':'
op|'('
name|'version'
op|','
name|'status'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'begin'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
number|'11'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'HTTPMessage'
op|'('
name|'self'
op|'.'
name|'fp'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'.'
name|'fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'amt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_readline_buffer'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'HTTPResponse'
op|'.'
name|'read'
op|'('
name|'self'
op|','
name|'amt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'amt'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Unbounded read: send anything we have buffered plus whatever'
nl|'\n'
comment|'# is left.'
nl|'\n'
indent|'            '
name|'buffered'
op|'='
name|'self'
op|'.'
name|'_readline_buffer'
newline|'\n'
name|'self'
op|'.'
name|'_readline_buffer'
op|'='
string|"''"
newline|'\n'
name|'return'
name|'buffered'
op|'+'
name|'HTTPResponse'
op|'.'
name|'read'
op|'('
name|'self'
op|','
name|'amt'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'amt'
op|'<='
name|'len'
op|'('
name|'self'
op|'.'
name|'_readline_buffer'
op|')'
op|':'
newline|'\n'
comment|'# Bounded read that we can satisfy entirely from our buffer'
nl|'\n'
indent|'            '
name|'res'
op|'='
name|'self'
op|'.'
name|'_readline_buffer'
op|'['
op|':'
name|'amt'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_readline_buffer'
op|'='
name|'self'
op|'.'
name|'_readline_buffer'
op|'['
name|'amt'
op|':'
op|']'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Bounded read that wants more bytes than we have'
nl|'\n'
indent|'            '
name|'smaller_amt'
op|'='
name|'amt'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'_readline_buffer'
op|')'
newline|'\n'
name|'buf'
op|'='
name|'self'
op|'.'
name|'_readline_buffer'
newline|'\n'
name|'self'
op|'.'
name|'_readline_buffer'
op|'='
string|"''"
newline|'\n'
name|'return'
name|'buf'
op|'+'
name|'HTTPResponse'
op|'.'
name|'read'
op|'('
name|'self'
op|','
name|'smaller_amt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|readline
dedent|''
dedent|''
name|'def'
name|'readline'
op|'('
name|'self'
op|','
name|'size'
op|'='
number|'1024'
op|')'
op|':'
newline|'\n'
comment|"# You'd think Python's httplib would provide this, but it doesn't."
nl|'\n'
comment|'# It does, however, provide a comment in the HTTPResponse class:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  # XXX It would be nice to have readline and __iter__ for this,'
nl|'\n'
comment|'#  # too.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Yes, it certainly would.'
nl|'\n'
indent|'        '
name|'while'
op|'('
string|"'\\n'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'_readline_buffer'
nl|'\n'
name|'and'
name|'len'
op|'('
name|'self'
op|'.'
name|'_readline_buffer'
op|')'
op|'<'
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'read_size'
op|'='
name|'size'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'_readline_buffer'
op|')'
newline|'\n'
name|'chunk'
op|'='
name|'HTTPResponse'
op|'.'
name|'read'
op|'('
name|'self'
op|','
name|'read_size'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_readline_buffer'
op|'+='
name|'chunk'
newline|'\n'
nl|'\n'
dedent|''
name|'line'
op|','
name|'newline'
op|','
name|'rest'
op|'='
name|'self'
op|'.'
name|'_readline_buffer'
op|'.'
name|'partition'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_readline_buffer'
op|'='
name|'rest'
newline|'\n'
name|'return'
name|'line'
op|'+'
name|'newline'
newline|'\n'
nl|'\n'
DECL|member|nuke_from_orbit
dedent|''
name|'def'
name|'nuke_from_orbit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Terminate the socket with extreme prejudice.\n\n        Closes the underlying socket regardless of whether or not anyone else\n        has references to it. Use this when you are certain that nobody else\n        you care about has a reference to this socket.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_real_socket'
op|':'
newline|'\n'
comment|'# this is idempotent; see sock_close in Modules/socketmodule.c in'
nl|'\n'
comment|'# the Python source for details.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_real_socket'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_real_socket'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'HTTPResponse'
op|'.'
name|'close'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_real_socket'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BufferedHTTPConnection
dedent|''
dedent|''
name|'class'
name|'BufferedHTTPConnection'
op|'('
name|'HTTPConnection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""HTTPConnection class that uses BufferedHTTPResponse"""'
newline|'\n'
DECL|variable|response_class
name|'response_class'
op|'='
name|'BufferedHTTPResponse'
newline|'\n'
nl|'\n'
DECL|member|connect
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_connected_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'HTTPConnection'
op|'.'
name|'connect'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|putrequest
dedent|''
name|'def'
name|'putrequest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'url'
op|','
name|'skip_host'
op|'='
number|'0'
op|','
name|'skip_accept_encoding'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'_path'
op|'='
name|'url'
newline|'\n'
name|'return'
name|'HTTPConnection'
op|'.'
name|'putrequest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'url'
op|','
name|'skip_host'
op|','
nl|'\n'
name|'skip_accept_encoding'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getexpect
dedent|''
name|'def'
name|'getexpect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'BufferedHTTPResponse'
op|'('
name|'self'
op|'.'
name|'sock'
op|','
name|'strict'
op|'='
name|'self'
op|'.'
name|'strict'
op|','
nl|'\n'
name|'method'
op|'='
name|'self'
op|'.'
name|'_method'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'expect_response'
op|'('
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|getresponse
dedent|''
name|'def'
name|'getresponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'HTTPConnection'
op|'.'
name|'getresponse'
op|'('
name|'self'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"HTTP PERF: %(time).5f seconds to %(method)s "'
nl|'\n'
string|'"%(host)s:%(port)s %(path)s)"'
op|','
nl|'\n'
op|'{'
string|"'time'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'_connected_time'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'self'
op|'.'
name|'_method'
op|','
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
string|"'path'"
op|':'
name|'self'
op|'.'
name|'_path'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|http_connect
dedent|''
dedent|''
name|'def'
name|'http_connect'
op|'('
name|'ipaddr'
op|','
name|'port'
op|','
name|'device'
op|','
name|'partition'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'None'
op|','
name|'query_string'
op|'='
name|'None'
op|','
name|'ssl'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to create an HTTPConnection object. If ssl is set True,\n    HTTPSConnection will be used. However, if ssl=False, BufferedHTTPConnection\n    will be used, which is buffered for backend Swift services.\n\n    :param ipaddr: IPv4 address to connect to\n    :param port: port to connect to\n    :param device: device of the node to query\n    :param partition: partition on the device\n    :param method: HTTP method to request (\'GET\', \'PUT\', \'POST\', etc.)\n    :param path: request path\n    :param headers: dictionary of headers\n    :param query_string: request query string\n    :param ssl: set True if SSL should be used (default: False)\n    :returns: HTTPConnection object\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'path'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'path'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error encoding to UTF-8: %s'"
op|')'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'device'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'device'
op|'='
name|'device'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error encoding to UTF-8: %s'"
op|')'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'path'
op|'='
name|'quote'
op|'('
string|"'/'"
op|'+'
name|'device'
op|'+'
string|"'/'"
op|'+'
name|'str'
op|'('
name|'partition'
op|')'
op|'+'
name|'path'
op|')'
newline|'\n'
name|'return'
name|'http_connect_raw'
op|'('
nl|'\n'
name|'ipaddr'
op|','
name|'port'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'query_string'
op|','
name|'ssl'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|http_connect_raw
dedent|''
name|'def'
name|'http_connect_raw'
op|'('
name|'ipaddr'
op|','
name|'port'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'query_string'
op|'='
name|'None'
op|','
name|'ssl'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to create an HTTPConnection object. If ssl is set True,\n    HTTPSConnection will be used. However, if ssl=False, BufferedHTTPConnection\n    will be used, which is buffered for backend Swift services.\n\n    :param ipaddr: IPv4 address to connect to\n    :param port: port to connect to\n    :param method: HTTP method to request (\'GET\', \'PUT\', \'POST\', etc.)\n    :param path: request path\n    :param headers: dictionary of headers\n    :param query_string: request query string\n    :param ssl: set True if SSL should be used (default: False)\n    :returns: HTTPConnection object\n    """'
newline|'\n'
name|'if'
name|'not'
name|'port'
op|':'
newline|'\n'
indent|'        '
name|'port'
op|'='
number|'443'
name|'if'
name|'ssl'
name|'else'
number|'80'
newline|'\n'
dedent|''
name|'if'
name|'ssl'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'HTTPSConnection'
op|'('
string|"'%s:%s'"
op|'%'
op|'('
name|'ipaddr'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'BufferedHTTPConnection'
op|'('
string|"'%s:%s'"
op|'%'
op|'('
name|'ipaddr'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'query_string'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'+='
string|"'?'"
op|'+'
name|'query_string'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'conn'
op|'.'
name|'putrequest'
op|'('
name|'method'
op|','
name|'path'
op|','
name|'skip_host'
op|'='
op|'('
name|'headers'
name|'and'
string|"'Host'"
name|'in'
name|'headers'
op|')'
op|')'
newline|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'header'
op|','
name|'value'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'putheader'
op|'('
name|'header'
op|','
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'endheaders'
op|'('
op|')'
newline|'\n'
name|'return'
name|'conn'
newline|'\n'
dedent|''
endmarker|''
end_unit
