begin_unit
comment|'# Copyright (c) 2010-2013 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Disk File Interface for Swift Object Server"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'from'
name|'gettext'
name|'import'
name|'gettext'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'os'
op|'.'
name|'path'
name|'import'
name|'basename'
op|','
name|'dirname'
op|','
name|'exists'
op|','
name|'getmtime'
op|','
name|'getsize'
op|','
name|'join'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkstemp'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
newline|'\n'
nl|'\n'
name|'from'
name|'xattr'
name|'import'
name|'getxattr'
op|','
name|'setxattr'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'constraints'
name|'import'
name|'check_mount'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'mkdirs'
op|','
name|'normalize_timestamp'
op|','
name|'storage_directory'
op|','
name|'hash_path'
op|','
name|'renamer'
op|','
name|'fallocate'
op|','
name|'fsync'
op|','
name|'fdatasync'
op|','
name|'drop_buffer_cache'
op|','
name|'ThreadPool'
op|','
name|'lock_path'
op|','
name|'write_pickle'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'DiskFileError'
op|','
name|'DiskFileNotExist'
op|','
name|'DiskFileCollision'
op|','
name|'DiskFileNoSpace'
op|','
name|'DiskFileDeviceUnavailable'
op|','
name|'PathNotDir'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'multi_range_iterator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PICKLE_PROTOCOL
name|'PICKLE_PROTOCOL'
op|'='
number|'2'
newline|'\n'
DECL|variable|ONE_WEEK
name|'ONE_WEEK'
op|'='
number|'604800'
newline|'\n'
DECL|variable|HASH_FILE
name|'HASH_FILE'
op|'='
string|"'hashes.pkl'"
newline|'\n'
DECL|variable|METADATA_KEY
name|'METADATA_KEY'
op|'='
string|"'user.swift.metadata'"
newline|'\n'
comment|'# These are system-set metadata keys that cannot be changed with a POST.'
nl|'\n'
comment|'# They should be lowercase.'
nl|'\n'
DECL|variable|DATAFILE_SYSTEM_META
name|'DATAFILE_SYSTEM_META'
op|'='
name|'set'
op|'('
string|"'content-length content-type deleted etag'"
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_metadata
name|'def'
name|'read_metadata'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to read the pickled metadata from an object file.\n\n    :param fd: file descriptor to load the metadata from\n\n    :returns: dictionary of metadata\n    """'
newline|'\n'
name|'metadata'
op|'='
string|"''"
newline|'\n'
name|'key'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'+='
name|'getxattr'
op|'('
name|'fd'
op|','
string|"'%s%s'"
op|'%'
op|'('
name|'METADATA_KEY'
op|','
op|'('
name|'key'
name|'or'
string|"''"
op|')'
op|')'
op|')'
newline|'\n'
name|'key'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_metadata
dedent|''
name|'def'
name|'write_metadata'
op|'('
name|'fd'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to write pickled metadata for an object file.\n\n    :param fd: file descriptor to write the metadata\n    :param metadata: metadata to write\n    """'
newline|'\n'
name|'metastr'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'metadata'
op|','
name|'PICKLE_PROTOCOL'
op|')'
newline|'\n'
name|'key'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'metastr'
op|':'
newline|'\n'
indent|'        '
name|'setxattr'
op|'('
name|'fd'
op|','
string|"'%s%s'"
op|'%'
op|'('
name|'METADATA_KEY'
op|','
name|'key'
name|'or'
string|"''"
op|')'
op|','
name|'metastr'
op|'['
op|':'
number|'254'
op|']'
op|')'
newline|'\n'
name|'metastr'
op|'='
name|'metastr'
op|'['
number|'254'
op|':'
op|']'
newline|'\n'
name|'key'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|quarantine_renamer
dedent|''
dedent|''
name|'def'
name|'quarantine_renamer'
op|'('
name|'device_path'
op|','
name|'corrupted_file_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    In the case that a file is corrupted, move it to a quarantined\n    area to allow replication to fix it.\n\n    :params device_path: The path to the device the corrupted file is on.\n    :params corrupted_file_path: The path to the file you want quarantined.\n\n    :returns: path (str) of directory the file was moved to\n    :raises OSError: re-raises non errno.EEXIST / errno.ENOTEMPTY\n                     exceptions from rename\n    """'
newline|'\n'
name|'from_dir'
op|'='
name|'dirname'
op|'('
name|'corrupted_file_path'
op|')'
newline|'\n'
name|'to_dir'
op|'='
name|'join'
op|'('
name|'device_path'
op|','
string|"'quarantined'"
op|','
string|"'objects'"
op|','
name|'basename'
op|'('
name|'from_dir'
op|')'
op|')'
newline|'\n'
name|'invalidate_hash'
op|'('
name|'dirname'
op|'('
name|'from_dir'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'renamer'
op|'('
name|'from_dir'
op|','
name|'to_dir'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'not'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EEXIST'
op|','
name|'errno'
op|'.'
name|'ENOTEMPTY'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'to_dir'
op|'='
string|'"%s-%s"'
op|'%'
op|'('
name|'to_dir'
op|','
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
name|'renamer'
op|'('
name|'from_dir'
op|','
name|'to_dir'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'to_dir'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_cleanup_listdir
dedent|''
name|'def'
name|'hash_cleanup_listdir'
op|'('
name|'hsh_path'
op|','
name|'reclaim_age'
op|'='
name|'ONE_WEEK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    List contents of a hash directory and clean up any old files.\n\n    :param hsh_path: object hash path\n    :param reclaim_age: age in seconds at which to remove tombstones\n    :returns: list of files remaining in the directory, reverse sorted\n    """'
newline|'\n'
name|'files'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'hsh_path'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'files'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'files'
op|'['
number|'0'
op|']'
op|'.'
name|'endswith'
op|'('
string|"'.ts'"
op|')'
op|':'
newline|'\n'
comment|'# remove tombstones older than reclaim_age'
nl|'\n'
indent|'            '
name|'ts'
op|'='
name|'files'
op|'['
number|'0'
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'float'
op|'('
name|'ts'
op|')'
op|')'
op|'>'
name|'reclaim_age'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'join'
op|'('
name|'hsh_path'
op|','
name|'files'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'files'
op|'.'
name|'remove'
op|'('
name|'files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'files'
op|':'
newline|'\n'
indent|'        '
name|'files'
op|'.'
name|'sort'
op|'('
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'data'
op|'='
name|'tomb'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'list'
op|'('
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'meta'
name|'and'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.meta'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'meta'
op|'='
name|'filename'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'data'
name|'and'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.data'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'filename'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'tomb'
name|'and'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'tomb'
op|'='
name|'filename'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'filename'
op|'<'
name|'tomb'
name|'or'
comment|'# any file older than tomb'
nl|'\n'
name|'filename'
op|'<'
name|'data'
name|'or'
comment|'# any file older than data'
nl|'\n'
op|'('
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.meta'"
op|')'
name|'and'
nl|'\n'
name|'filename'
op|'<'
name|'meta'
op|')'
op|')'
op|':'
comment|'# old meta'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'join'
op|'('
name|'hsh_path'
op|','
name|'filename'
op|')'
op|')'
newline|'\n'
name|'files'
op|'.'
name|'remove'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'files'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_suffix
dedent|''
name|'def'
name|'hash_suffix'
op|'('
name|'path'
op|','
name|'reclaim_age'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Performs reclamation and returns an md5 of all (remaining) files.\n\n    :param reclaim_age: age in seconds at which to remove tombstones\n    :raises PathNotDir: if given path is not a valid directory\n    :raises OSError: for non-ENOTDIR errors\n    """'
newline|'\n'
name|'md5'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'path_contents'
op|'='
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'err'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
name|'errno'
op|'.'
name|'ENOENT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PathNotDir'
op|'('
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'for'
name|'hsh'
name|'in'
name|'path_contents'
op|':'
newline|'\n'
indent|'        '
name|'hsh_path'
op|'='
name|'join'
op|'('
name|'path'
op|','
name|'hsh'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'files'
op|'='
name|'hash_cleanup_listdir'
op|'('
name|'hsh_path'
op|','
name|'reclaim_age'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                '
name|'partition_path'
op|'='
name|'dirname'
op|'('
name|'path'
op|')'
newline|'\n'
name|'objects_path'
op|'='
name|'dirname'
op|'('
name|'partition_path'
op|')'
newline|'\n'
name|'device_path'
op|'='
name|'dirname'
op|'('
name|'objects_path'
op|')'
newline|'\n'
name|'quar_path'
op|'='
name|'quarantine_renamer'
op|'('
name|'device_path'
op|','
name|'hsh_path'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Quarantined %s to %s because it is not a directory'"
op|')'
op|'%'
nl|'\n'
op|'('
name|'hsh_path'
op|','
name|'quar_path'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'hsh_path'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'filename'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'md5'
op|'.'
name|'update'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'md5'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|invalidate_hash
dedent|''
name|'def'
name|'invalidate_hash'
op|'('
name|'suffix_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Invalidates the hash for a suffix_dir in the partition\'s hashes file.\n\n    :param suffix_dir: absolute path to suffix dir whose hash needs\n                       invalidating\n    """'
newline|'\n'
nl|'\n'
name|'suffix'
op|'='
name|'basename'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
name|'partition_dir'
op|'='
name|'dirname'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'join'
op|'('
name|'partition_dir'
op|','
name|'HASH_FILE'
op|')'
newline|'\n'
name|'with'
name|'lock_path'
op|'('
name|'partition_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'='
name|'pickle'
op|'.'
name|'load'
op|'('
name|'fp'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'suffix'
name|'in'
name|'hashes'
name|'and'
name|'not'
name|'hashes'
op|'['
name|'suffix'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'hashes'
op|'['
name|'suffix'
op|']'
op|'='
name|'None'
newline|'\n'
name|'write_pickle'
op|'('
name|'hashes'
op|','
name|'hashes_file'
op|','
name|'partition_dir'
op|','
name|'PICKLE_PROTOCOL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_hashes
dedent|''
dedent|''
name|'def'
name|'get_hashes'
op|'('
name|'partition_dir'
op|','
name|'recalculate'
op|'='
name|'None'
op|','
name|'do_listdir'
op|'='
name|'False'
op|','
nl|'\n'
name|'reclaim_age'
op|'='
name|'ONE_WEEK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get a list of hashes for the suffix dir.  do_listdir causes it to mistrust\n    the hash cache for suffix existence at the (unexpectedly high) cost of a\n    listdir.  reclaim_age is just passed on to hash_suffix.\n\n    :param partition_dir: absolute path of partition to get hashes for\n    :param recalculate: list of suffixes which should be recalculated when got\n    :param do_listdir: force existence check for all hashes in the partition\n    :param reclaim_age: age at which to remove tombstones\n\n    :returns: tuple of (number of suffix dirs hashed, dictionary of hashes)\n    """'
newline|'\n'
nl|'\n'
name|'hashed'
op|'='
number|'0'
newline|'\n'
name|'hashes_file'
op|'='
name|'join'
op|'('
name|'partition_dir'
op|','
name|'HASH_FILE'
op|')'
newline|'\n'
name|'modified'
op|'='
name|'False'
newline|'\n'
name|'force_rewrite'
op|'='
name|'False'
newline|'\n'
name|'hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'mtime'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'if'
name|'recalculate'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'recalculate'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'hashes'
op|'='
name|'pickle'
op|'.'
name|'load'
op|'('
name|'fp'
op|')'
newline|'\n'
dedent|''
name|'mtime'
op|'='
name|'getmtime'
op|'('
name|'hashes_file'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'do_listdir'
op|'='
name|'True'
newline|'\n'
name|'force_rewrite'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'do_listdir'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'suff'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'partition_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'suff'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'.'
name|'setdefault'
op|'('
name|'suff'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'modified'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'hashes'
op|'.'
name|'update'
op|'('
op|'('
name|'hash_'
op|','
name|'None'
op|')'
name|'for'
name|'hash_'
name|'in'
name|'recalculate'
op|')'
newline|'\n'
name|'for'
name|'suffix'
op|','
name|'hash_'
name|'in'
name|'hashes'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hash_'
op|':'
newline|'\n'
indent|'            '
name|'suffix_dir'
op|'='
name|'join'
op|'('
name|'partition_dir'
op|','
name|'suffix'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'['
name|'suffix'
op|']'
op|'='
name|'hash_suffix'
op|'('
name|'suffix_dir'
op|','
name|'reclaim_age'
op|')'
newline|'\n'
name|'hashed'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'PathNotDir'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'hashes'
op|'['
name|'suffix'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error hashing suffix'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'modified'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'modified'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'lock_path'
op|'('
name|'partition_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'force_rewrite'
name|'or'
name|'not'
name|'exists'
op|'('
name|'hashes_file'
op|')'
name|'or'
name|'getmtime'
op|'('
name|'hashes_file'
op|')'
op|'=='
name|'mtime'
op|':'
newline|'\n'
indent|'                '
name|'write_pickle'
op|'('
nl|'\n'
name|'hashes'
op|','
name|'hashes_file'
op|','
name|'partition_dir'
op|','
name|'PICKLE_PROTOCOL'
op|')'
newline|'\n'
name|'return'
name|'hashed'
op|','
name|'hashes'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'get_hashes'
op|'('
name|'partition_dir'
op|','
name|'recalculate'
op|','
name|'do_listdir'
op|','
nl|'\n'
name|'reclaim_age'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hashed'
op|','
name|'hashes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskWriter
dedent|''
dedent|''
name|'class'
name|'DiskWriter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Encapsulation of the write context for servicing PUT REST API\n    requests. Serves as the context manager object for DiskFile\'s create()\n    method.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'disk_file'
op|','
name|'fd'
op|','
name|'tmppath'
op|','
name|'threadpool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'disk_file'
op|'='
name|'disk_file'
newline|'\n'
name|'self'
op|'.'
name|'fd'
op|'='
name|'fd'
newline|'\n'
name|'self'
op|'.'
name|'tmppath'
op|'='
name|'tmppath'
newline|'\n'
name|'self'
op|'.'
name|'upload_size'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'last_sync'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Write a chunk of data into the temporary file.\n\n        :param chunk: the chunk of data to write as a string object\n        """'
newline|'\n'
nl|'\n'
DECL|function|_write_entire_chunk
name|'def'
name|'_write_entire_chunk'
op|'('
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'chunk'
op|':'
newline|'\n'
indent|'                '
name|'written'
op|'='
name|'os'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
name|'chunk'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'upload_size'
op|'+='
name|'written'
newline|'\n'
name|'chunk'
op|'='
name|'chunk'
op|'['
name|'written'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'run_in_thread'
op|'('
name|'_write_entire_chunk'
op|','
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
comment|'# For large files sync every 512MB (by default) written'
nl|'\n'
name|'diff'
op|'='
name|'self'
op|'.'
name|'upload_size'
op|'-'
name|'self'
op|'.'
name|'last_sync'
newline|'\n'
name|'if'
name|'diff'
op|'>='
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'bytes_per_sync'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'force_run_in_thread'
op|'('
name|'fdatasync'
op|','
name|'self'
op|'.'
name|'fd'
op|')'
newline|'\n'
name|'drop_buffer_cache'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
name|'self'
op|'.'
name|'last_sync'
op|','
name|'diff'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_sync'
op|'='
name|'self'
op|'.'
name|'upload_size'
newline|'\n'
nl|'\n'
DECL|member|put
dedent|''
dedent|''
name|'def'
name|'put'
op|'('
name|'self'
op|','
name|'metadata'
op|','
name|'extension'
op|'='
string|"'.data'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Finalize writing the file on disk, and renames it from the temp file\n        to the real location.  This should be called after the data has been\n        written to the temp file.\n\n        :param metadata: dictionary of metadata to be written\n        :param extension: extension to be used when making the file\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'tmppath'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"tmppath is unusable."'
op|')'
newline|'\n'
dedent|''
name|'timestamp'
op|'='
name|'normalize_timestamp'
op|'('
name|'metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|')'
newline|'\n'
name|'metadata'
op|'['
string|"'name'"
op|']'
op|'='
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|function|finalize_put
name|'def'
name|'finalize_put'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Write the metadata before calling fsync() so that both data and'
nl|'\n'
comment|'# metadata are flushed to disk.'
nl|'\n'
indent|'            '
name|'write_metadata'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
name|'metadata'
op|')'
newline|'\n'
comment|'# We call fsync() before calling drop_cache() to lower the amount'
nl|'\n'
comment|'# of redundant work the drop cache code will perform on the pages'
nl|'\n'
comment|'# (now that after fsync the pages will be all clean).'
nl|'\n'
name|'fsync'
op|'('
name|'self'
op|'.'
name|'fd'
op|')'
newline|'\n'
comment|'# From the Department of the Redundancy Department, make sure'
nl|'\n'
comment|'# we call drop_cache() after fsync() to avoid redundant work'
nl|'\n'
comment|'# (pages all clean).'
nl|'\n'
name|'drop_buffer_cache'
op|'('
name|'self'
op|'.'
name|'fd'
op|','
number|'0'
op|','
name|'self'
op|'.'
name|'upload_size'
op|')'
newline|'\n'
name|'invalidate_hash'
op|'('
name|'dirname'
op|'('
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'datadir'
op|')'
op|')'
newline|'\n'
comment|'# After the rename completes, this object will be available for'
nl|'\n'
comment|'# other requests to reference.'
nl|'\n'
name|'renamer'
op|'('
name|'self'
op|'.'
name|'tmppath'
op|','
name|'join'
op|'('
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'datadir'
op|','
nl|'\n'
name|'timestamp'
op|'+'
name|'extension'
op|')'
op|')'
newline|'\n'
name|'hash_cleanup_listdir'
op|'('
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'datadir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'force_run_in_thread'
op|'('
name|'finalize_put'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disk_file'
op|'.'
name|'metadata'
op|'='
name|'metadata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskFile
dedent|''
dedent|''
name|'class'
name|'DiskFile'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Manage object files on disk.\n\n    :param path: path to devices on the node\n    :param device: device name\n    :param partition: partition on the device the object lives in\n    :param account: account name for the object\n    :param container: container name for the object\n    :param obj: object name for the object\n    :param keep_data_fp: if True, don\'t close the fp, otherwise close it\n    :param disk_chunk_size: size of chunks on file reads\n    :param bytes_per_sync: number of bytes between fdatasync calls\n    :param iter_hook: called when __iter__ returns a chunk\n    :param threadpool: thread pool in which to do blocking operations\n\n    :raises DiskFileCollision: on md5 collision\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'device'
op|','
name|'partition'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
nl|'\n'
name|'logger'
op|','
name|'keep_data_fp'
op|'='
name|'False'
op|','
name|'disk_chunk_size'
op|'='
number|'65536'
op|','
nl|'\n'
name|'bytes_per_sync'
op|'='
op|'('
number|'512'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
op|','
name|'iter_hook'
op|'='
name|'None'
op|','
nl|'\n'
name|'threadpool'
op|'='
name|'None'
op|','
name|'obj_dir'
op|'='
string|"'objects'"
op|','
name|'mount_check'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mount_check'
name|'and'
name|'not'
name|'check_mount'
op|'('
name|'path'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DiskFileDeviceUnavailable'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'disk_chunk_size'
op|'='
name|'disk_chunk_size'
newline|'\n'
name|'self'
op|'.'
name|'bytes_per_sync'
op|'='
name|'bytes_per_sync'
newline|'\n'
name|'self'
op|'.'
name|'iter_hook'
op|'='
name|'iter_hook'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
name|'name_hash'
op|'='
name|'hash_path'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'datadir'
op|'='
name|'join'
op|'('
nl|'\n'
name|'path'
op|','
name|'device'
op|','
name|'storage_directory'
op|'('
name|'obj_dir'
op|','
name|'partition'
op|','
name|'name_hash'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'device_path'
op|'='
name|'join'
op|'('
name|'path'
op|','
name|'device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'join'
op|'('
name|'path'
op|','
name|'device'
op|','
string|"'tmp'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'data_file'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'iter_etag'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'started_at_0'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'read_to_eof'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'quarantined_dir'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'keep_cache'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'suppress_file_closing'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'threadpool'
op|'='
name|'threadpool'
name|'or'
name|'ThreadPool'
op|'('
name|'nthreads'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'data_file'
op|','
name|'meta_file'
op|','
name|'ts_file'
op|'='
name|'self'
op|'.'
name|'_get_ondisk_file'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'data_file'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ts_file'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_construct_from_ts_file'
op|'('
name|'ts_file'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fp'
op|'='
name|'self'
op|'.'
name|'_construct_from_data_file'
op|'('
name|'data_file'
op|','
name|'meta_file'
op|')'
newline|'\n'
name|'if'
name|'keep_data_fp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fp'
op|'='
name|'fp'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ondisk_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_ondisk_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do the work to figure out if the data directory exists, and if so,\n        determine the on-disk files to use.\n\n        :returns: a tuple of data, meta and ts (tombstone) files, in one of\n                  three states:\n\n                  1. all three are None\n\n                     data directory does not exist, or there are no files in\n                     that directory\n\n                  2. ts_file is not None, data_file is None, meta_file is None\n\n                     object is considered deleted\n\n                  3. data_file is not None, ts_file is None\n\n                     object exists, and optionally has fast-POST metadata\n        """'
newline|'\n'
name|'data_file'
op|'='
name|'meta_file'
op|'='
name|'ts_file'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'files'
op|'='
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'datadir'
op|')'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
comment|'# The data directory does not exist, so the object cannot exist.'
nl|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'afile'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                '
name|'assert'
name|'ts_file'
name|'is'
name|'None'
op|','
string|'"On-disk file search loop"'
string|'" continuing after tombstone, %s, encountered"'
op|'%'
name|'ts_file'
newline|'\n'
name|'assert'
name|'data_file'
name|'is'
name|'None'
op|','
string|'"On-disk file search loop"'
string|'" continuing after data file, %s, encountered"'
op|'%'
name|'data_file'
newline|'\n'
name|'if'
name|'afile'
op|'.'
name|'endswith'
op|'('
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'meta_file'
op|'='
name|'None'
newline|'\n'
name|'ts_file'
op|'='
name|'join'
op|'('
name|'self'
op|'.'
name|'datadir'
op|','
name|'afile'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'afile'
op|'.'
name|'endswith'
op|'('
string|"'.meta'"
op|')'
name|'and'
name|'not'
name|'meta_file'
op|':'
newline|'\n'
indent|'                    '
name|'meta_file'
op|'='
name|'join'
op|'('
name|'self'
op|'.'
name|'datadir'
op|','
name|'afile'
op|')'
newline|'\n'
comment|'# NOTE: this does not exit this loop, since a fast-POST'
nl|'\n'
comment|'# operation just updates metadata, writing one or more'
nl|'\n'
comment|'# .meta files, the data file will have an older timestamp,'
nl|'\n'
comment|'# so we keep looking.'
nl|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'afile'
op|'.'
name|'endswith'
op|'('
string|"'.data'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'data_file'
op|'='
name|'join'
op|'('
name|'self'
op|'.'
name|'datadir'
op|','
name|'afile'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'assert'
op|'('
op|'('
name|'data_file'
name|'is'
name|'None'
name|'and'
name|'meta_file'
name|'is'
name|'None'
name|'and'
name|'ts_file'
name|'is'
name|'None'
op|')'
nl|'\n'
name|'or'
op|'('
name|'ts_file'
name|'is'
name|'not'
name|'None'
name|'and'
name|'data_file'
name|'is'
name|'None'
nl|'\n'
name|'and'
name|'meta_file'
name|'is'
name|'None'
op|')'
nl|'\n'
name|'or'
op|'('
name|'data_file'
name|'is'
name|'not'
name|'None'
name|'and'
name|'ts_file'
name|'is'
name|'None'
op|')'
op|')'
op|','
string|'"On-disk file search algorithm contract is broken: data_file:"'
string|'" %s, meta_file: %s, ts_file: %s"'
op|'%'
op|'('
name|'data_file'
op|','
name|'meta_file'
op|','
name|'ts_file'
op|')'
newline|'\n'
name|'return'
name|'data_file'
op|','
name|'meta_file'
op|','
name|'ts_file'
newline|'\n'
nl|'\n'
DECL|member|_construct_from_ts_file
dedent|''
name|'def'
name|'_construct_from_ts_file'
op|'('
name|'self'
op|','
name|'ts_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A tombstone means the object is considered deleted. We just need to\n        pull the metadata from the tombstone file which has the timestamp.\n        """'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'ts_file'
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'metadata'
op|'='
name|'read_metadata'
op|'('
name|'fp'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'metadata'
op|'['
string|"'deleted'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_verify_name
dedent|''
name|'def'
name|'_verify_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify the metadata\'s name value matches what we think the object is\n        named.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mname'
op|'='
name|'self'
op|'.'
name|'metadata'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mname'
op|'!='
name|'self'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Client path %(client)s does not match '"
nl|'\n'
string|"'path stored in object metadata %(meta)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'client'"
op|':'
name|'self'
op|'.'
name|'name'
op|','
string|"'meta'"
op|':'
name|'mname'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'DiskFileCollision'
op|'('
string|"'Client path does not match path '"
nl|'\n'
string|"'stored in object metadata'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_construct_from_data_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'_construct_from_data_file'
op|'('
name|'self'
op|','
name|'data_file'
op|','
name|'meta_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open the data file to fetch its metadata, and fetch the metadata from\n        the fast-POST .meta file as well if it exists, merging them properly.\n\n        :returns: the opened data file pointer\n        """'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'data_file'
op|','
string|"'rb'"
op|')'
newline|'\n'
name|'datafile_metadata'
op|'='
name|'read_metadata'
op|'('
name|'fp'
op|')'
newline|'\n'
name|'if'
name|'meta_file'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'meta_file'
op|')'
name|'as'
name|'mfp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'metadata'
op|'='
name|'read_metadata'
op|'('
name|'mfp'
op|')'
newline|'\n'
dedent|''
name|'sys_metadata'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'['
op|'('
name|'key'
op|','
name|'val'
op|')'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'datafile_metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'DATAFILE_SYSTEM_META'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'.'
name|'update'
op|'('
name|'sys_metadata'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'metadata'
op|'='
name|'datafile_metadata'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data_file'
op|'='
name|'data_file'
newline|'\n'
name|'return'
name|'fp'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an iterator over the data file."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'dropped_cache'
op|'='
number|'0'
newline|'\n'
name|'read'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'started_at_0'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'read_to_eof'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'tell'
op|'('
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'started_at_0'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'iter_etag'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
op|')'
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'run_in_thread'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'read'
op|','
name|'self'
op|'.'
name|'disk_chunk_size'
op|')'
newline|'\n'
name|'if'
name|'chunk'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'iter_etag'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'iter_etag'
op|'.'
name|'update'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'read'
op|'+='
name|'len'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'read'
op|'-'
name|'dropped_cache'
op|'>'
op|'('
number|'1024'
op|'*'
number|'1024'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_drop_cache'
op|'('
name|'self'
op|'.'
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'dropped_cache'
op|','
nl|'\n'
name|'read'
op|'-'
name|'dropped_cache'
op|')'
newline|'\n'
name|'dropped_cache'
op|'='
name|'read'
newline|'\n'
dedent|''
name|'yield'
name|'chunk'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'iter_hook'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'iter_hook'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'read_to_eof'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_drop_cache'
op|'('
name|'self'
op|'.'
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'dropped_cache'
op|','
nl|'\n'
name|'read'
op|'-'
name|'dropped_cache'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'suppress_file_closing'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|app_iter_range
dedent|''
dedent|''
dedent|''
name|'def'
name|'app_iter_range'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'stop'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an iterator over the data file for range (start, stop)"""'
newline|'\n'
name|'if'
name|'start'
name|'or'
name|'start'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'seek'
op|'('
name|'start'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'stop'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'stop'
op|'-'
name|'start'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'chunk'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'length'
op|'-='
name|'len'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'length'
op|'<'
number|'0'
op|':'
newline|'\n'
comment|'# Chop off the extra:'
nl|'\n'
indent|'                        '
name|'yield'
name|'chunk'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'chunk'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'suppress_file_closing'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|app_iter_ranges
dedent|''
dedent|''
dedent|''
name|'def'
name|'app_iter_ranges'
op|'('
name|'self'
op|','
name|'ranges'
op|','
name|'content_type'
op|','
name|'boundary'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an iterator over the data file for a set of ranges"""'
newline|'\n'
name|'if'
name|'not'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'yield'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'suppress_file_closing'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'multi_range_iterator'
op|'('
nl|'\n'
name|'ranges'
op|','
name|'content_type'
op|','
name|'boundary'
op|','
name|'size'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app_iter_range'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'chunk'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'suppress_file_closing'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_close_quarantine
dedent|''
dedent|''
dedent|''
name|'def'
name|'_handle_close_quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if file needs to be quarantined"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'get_data_file_size'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quarantine'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'iter_etag'
name|'and'
name|'self'
op|'.'
name|'started_at_0'
name|'and'
name|'self'
op|'.'
name|'read_to_eof'
name|'and'
string|"'ETag'"
name|'in'
name|'self'
op|'.'
name|'metadata'
name|'and'
name|'self'
op|'.'
name|'iter_etag'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|'!='
name|'self'
op|'.'
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'ETag'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quarantine'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|','
name|'verify_file'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Close the file. Will handle quarantining file if necessary.\n\n        :param verify_file: Defaults to True. If false, will not check\n                            file to see if it needs quarantining.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'verify_file'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_handle_close_quarantine'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
nl|'\n'
string|"'ERROR DiskFile %(data_file)s in '"
nl|'\n'
string|"'%(data_dir)s close failure: %(exc)s : %(stack)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'exc'"
op|':'
name|'e'
op|','
string|"'stack'"
op|':'
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_stack'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'data_file'"
op|':'
name|'self'
op|'.'
name|'data_file'
op|','
string|"'data_dir'"
op|':'
name|'self'
op|'.'
name|'datadir'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|is_deleted
dedent|''
dedent|''
dedent|''
name|'def'
name|'is_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the file is deleted.\n\n        :returns: True if the file doesn\'t exist or has been flagged as\n                  deleted.\n        """'
newline|'\n'
name|'return'
name|'not'
name|'self'
op|'.'
name|'data_file'
name|'or'
string|"'deleted'"
name|'in'
name|'self'
op|'.'
name|'metadata'
newline|'\n'
nl|'\n'
DECL|member|is_expired
dedent|''
name|'def'
name|'is_expired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the file is expired.\n\n        :returns: True if the file has an X-Delete-At in the past\n        """'
newline|'\n'
name|'return'
op|'('
string|"'X-Delete-At'"
name|'in'
name|'self'
op|'.'
name|'metadata'
name|'and'
nl|'\n'
name|'int'
op|'('
name|'self'
op|'.'
name|'metadata'
op|'['
string|"'X-Delete-At'"
op|']'
op|')'
op|'<='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Context manager to create a file. We create a temporary file first, and\n        then return a DiskWriter object to encapsulate the state.\n\n        :param size: optional initial size of file to explicitly allocate on\n                     disk\n        :raises DiskFileNoSpace: if a size is specified and allocation fails\n        """'
newline|'\n'
name|'if'
name|'not'
name|'exists'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mkdirs'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'fd'
op|','
name|'tmppath'
op|'='
name|'mkstemp'
op|'('
name|'dir'
op|'='
name|'self'
op|'.'
name|'tmpdir'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'size'
name|'is'
name|'not'
name|'None'
name|'and'
name|'size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fallocate'
op|'('
name|'fd'
op|','
name|'size'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'DiskFileNoSpace'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'DiskWriter'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'tmppath'
op|','
name|'self'
op|'.'
name|'threadpool'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tmppath'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|put_metadata
dedent|''
dedent|''
dedent|''
name|'def'
name|'put_metadata'
op|'('
name|'self'
op|','
name|'metadata'
op|','
name|'tombstone'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Short hand for putting metadata to .meta and .ts files.\n\n        :param metadata: dictionary of metadata to be written\n        :param tombstone: whether or not we are writing a tombstone\n        """'
newline|'\n'
name|'extension'
op|'='
string|"'.ts'"
name|'if'
name|'tombstone'
name|'else'
string|"'.meta'"
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|','
name|'extension'
op|'='
name|'extension'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Simple short hand for marking an object as deleted. Provides\n        a layer of abstraction.\n\n        :param timestamp: time stamp to mark the object deleted at\n        """'
newline|'\n'
name|'self'
op|'.'
name|'put_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'}'
op|','
name|'tombstone'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_drop_cache
dedent|''
name|'def'
name|'_drop_cache'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'offset'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Method for no-oping buffer cache drop method."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'keep_cache'
op|':'
newline|'\n'
indent|'            '
name|'drop_buffer_cache'
op|'('
name|'fd'
op|','
name|'offset'
op|','
name|'length'
op|')'
newline|'\n'
nl|'\n'
DECL|member|quarantine
dedent|''
dedent|''
name|'def'
name|'quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In the case that a file is corrupted, move it to a quarantined\n        area to allow replication to fix it.\n\n        :returns: if quarantine is successful, path to quarantined\n                  directory otherwise None\n        """'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'self'
op|'.'
name|'is_deleted'
op|'('
op|')'
name|'or'
name|'self'
op|'.'
name|'quarantined_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'quarantined_dir'
op|'='
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'run_in_thread'
op|'('
nl|'\n'
name|'quarantine_renamer'
op|','
name|'self'
op|'.'
name|'device_path'
op|','
name|'self'
op|'.'
name|'data_file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'quarantines'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'quarantined_dir'
newline|'\n'
nl|'\n'
DECL|member|get_data_file_size
dedent|''
dedent|''
name|'def'
name|'get_data_file_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the os.path.getsize for the file.  Raises an exception if this\n        file does not match the Content-Length stored in the metadata. Or if\n        self.data_file does not exist.\n\n        :returns: file size as an int\n        :raises DiskFileError: on file size mismatch.\n        :raises DiskFileNotExist: on file not existing (including deleted)\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'file_size'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'data_file'
op|':'
newline|'\n'
indent|'                '
name|'file_size'
op|'='
name|'self'
op|'.'
name|'threadpool'
op|'.'
name|'run_in_thread'
op|'('
nl|'\n'
name|'getsize'
op|','
name|'self'
op|'.'
name|'data_file'
op|')'
newline|'\n'
name|'if'
string|"'Content-Length'"
name|'in'
name|'self'
op|'.'
name|'metadata'
op|':'
newline|'\n'
indent|'                    '
name|'metadata_size'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'metadata'
op|'['
string|"'Content-Length'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'file_size'
op|'!='
name|'metadata_size'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'DiskFileError'
op|'('
nl|'\n'
string|"'Content-Length of %s does not match file size '"
nl|'\n'
string|"'of %s'"
op|'%'
op|'('
name|'metadata_size'
op|','
name|'file_size'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'file_size'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'DiskFileNotExist'
op|'('
string|"'Data File does not exist.'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
