begin_unit
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'ConfigParser'
name|'import'
name|'ConfigParser'
newline|'\n'
name|'import'
name|'textwrap'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'config_true_value'
op|','
name|'SWIFT_CONF_FILE'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'ring'
name|'import'
name|'Ring'
newline|'\n'
nl|'\n'
DECL|variable|LEGACY_POLICY_NAME
name|'LEGACY_POLICY_NAME'
op|'='
string|"'Policy-0'"
newline|'\n'
DECL|variable|VALID_CHARS
name|'VALID_CHARS'
op|'='
string|"'-'"
op|'+'
name|'string'
op|'.'
name|'letters'
op|'+'
name|'string'
op|'.'
name|'digits'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PolicyError
name|'class'
name|'PolicyError'
op|'('
name|'ValueError'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'index'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'+='
string|"', for index %r'"
op|'%'
name|'index'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'PolicyError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_policy_string
dedent|''
dedent|''
name|'def'
name|'_get_policy_string'
op|'('
name|'base'
op|','
name|'policy_index'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'policy_index'
op|'=='
number|'0'
name|'or'
name|'policy_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return_string'
op|'='
name|'base'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return_string'
op|'='
name|'base'
op|'+'
string|'"-%d"'
op|'%'
name|'int'
op|'('
name|'policy_index'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'return_string'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_policy_string
dedent|''
name|'def'
name|'get_policy_string'
op|'('
name|'base'
op|','
name|'policy_index'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to construct a string from a base and the policy\n    index.  Used to encode the policy index into either a file name\n    or a directory name by various modules.\n\n    :param base: the base string\n    :param policy_index: the storage policy index\n\n    :returns: base name with policy index added\n    """'
newline|'\n'
name|'if'
name|'POLICIES'
op|'.'
name|'get_by_index'
op|'('
name|'policy_index'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'PolicyError'
op|'('
string|'"No policy with index %r"'
op|'%'
name|'policy_index'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_get_policy_string'
op|'('
name|'base'
op|','
name|'policy_index'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StoragePolicy
dedent|''
name|'class'
name|'StoragePolicy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Represents a storage policy.\n    Not meant to be instantiated directly; use\n    :func:`~swift.common.storage_policy.reload_storage_policies` to load\n    POLICIES from ``swift.conf``.\n\n    The object_ring property is lazy loaded once the service\'s ``swift_dir``\n    is known via :meth:`~StoragePolicyCollection.get_object_ring`, but it may\n    be over-ridden via object_ring kwarg at create time for testing or\n    actively loaded with :meth:`~StoragePolicy.load_ring`.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'idx'
op|','
name|'name'
op|'='
string|"''"
op|','
name|'is_default'
op|'='
name|'False'
op|','
name|'is_deprecated'
op|'='
name|'False'
op|','
nl|'\n'
name|'object_ring'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'idx'
op|'='
name|'int'
op|'('
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|"'Invalid index'"
op|','
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'idx'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|"'Invalid index'"
op|','
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|"'Invalid name %r'"
op|'%'
name|'name'
op|','
name|'idx'
op|')'
newline|'\n'
comment|'# this is defensively restrictive, but could be expanded in the future'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'all'
op|'('
name|'c'
name|'in'
name|'VALID_CHARS'
name|'for'
name|'c'
name|'in'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|"'Names are used as HTTP headers, and can not '"
nl|'\n'
string|"'reliably contain any characters not in %r. '"
nl|'\n'
string|"'Invalid name %r'"
op|'%'
op|'('
name|'VALID_CHARS'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
name|'LEGACY_POLICY_NAME'
op|'.'
name|'upper'
op|'('
op|')'
name|'and'
name|'self'
op|'.'
name|'idx'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'The name %s is reserved for policy index 0. '"
string|"'Invalid name %r'"
op|'%'
op|'('
name|'LEGACY_POLICY_NAME'
op|','
name|'name'
op|')'
newline|'\n'
name|'raise'
name|'PolicyError'
op|'('
name|'msg'
op|','
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'is_deprecated'
op|'='
name|'config_true_value'
op|'('
name|'is_deprecated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'is_default'
op|'='
name|'config_true_value'
op|'('
name|'is_default'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'is_deprecated'
name|'and'
name|'self'
op|'.'
name|'is_default'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|"'Deprecated policy can not be default.  '"
nl|'\n'
string|"'Invalid config'"
op|','
name|'self'
op|'.'
name|'idx'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'ring_name'
op|'='
name|'_get_policy_string'
op|'('
string|"'object'"
op|','
name|'self'
op|'.'
name|'idx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'object_ring'
op|'='
name|'object_ring'
newline|'\n'
nl|'\n'
DECL|member|__int__
dedent|''
name|'def'
name|'__int__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'idx'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'idx'
op|','
name|'int'
op|'('
name|'other'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"StoragePolicy(%d, %r, is_default=%s, is_deprecated=%s)"'
op|')'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'idx'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'is_default'
op|','
name|'self'
op|'.'
name|'is_deprecated'
op|')'
newline|'\n'
nl|'\n'
DECL|member|load_ring
dedent|''
name|'def'
name|'load_ring'
op|'('
name|'self'
op|','
name|'swift_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Load the ring for this policy immediately.\n\n        :param swift_dir: path to rings\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'object_ring'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'object_ring'
op|'='
name|'Ring'
op|'('
name|'swift_dir'
op|','
name|'ring_name'
op|'='
name|'self'
op|'.'
name|'ring_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_options
dedent|''
name|'def'
name|'get_options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the valid conf file options for this policy."""'
newline|'\n'
name|'return'
op|'{'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'is_default'
op|','
nl|'\n'
string|"'deprecated'"
op|':'
name|'self'
op|'.'
name|'is_deprecated'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StoragePolicyCollection
dedent|''
dedent|''
name|'class'
name|'StoragePolicyCollection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class represents the collection of valid storage policies for the\n    cluster and is instantiated as :class:`StoragePolicy` objects are added to\n    the collection when ``swift.conf`` is parsed by\n    :func:`parse_storage_policies`.\n\n    When a StoragePolicyCollection is created, the following validation\n    is enforced:\n\n    * If a policy with index 0 is not declared and no other policies defined,\n      Swift will create one\n    * The policy index must be a non-negative integer\n    * If no policy is declared as the default and no other policies are\n      defined, the policy with index 0 is set as the default\n    * Policy indexes must be unique\n    * Policy names are required\n    * Policy names are case insensitive\n    * Policy names must contain only letters, digits or a dash\n    * Policy names must be unique\n    * The policy name \'Policy-0\' can only be used for the policy with index 0\n    * If any policies are defined, exactly one policy must be declared default\n    * Deprecated policies can not be declared the default\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pols'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'default'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'by_name'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'by_index'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_validate_policies'
op|'('
name|'pols'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_policy
dedent|''
name|'def'
name|'_add_policy'
op|'('
name|'self'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add pre-validated policies to internal indexes.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'by_name'
op|'['
name|'policy'
op|'.'
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|'='
name|'policy'
newline|'\n'
name|'self'
op|'.'
name|'by_index'
op|'['
name|'int'
op|'('
name|'policy'
op|')'
op|']'
op|'='
name|'policy'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'textwrap'
op|'.'
name|'dedent'
op|'('
string|'"""\n    StoragePolicyCollection([\n        %s\n    ])\n    """'
op|')'
op|'%'
string|"',\\n    '"
op|'.'
name|'join'
op|'('
name|'repr'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'self'
op|')'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'by_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'by_index'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'by_index'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_policies
dedent|''
name|'def'
name|'_validate_policies'
op|'('
name|'self'
op|','
name|'policies'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param policies: list of policies\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'policy'
name|'in'
name|'policies'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'int'
op|'('
name|'policy'
op|')'
name|'in'
name|'self'
op|'.'
name|'by_index'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'PolicyError'
op|'('
string|"'Duplicate index %s conflicts with %s'"
op|'%'
op|'('
nl|'\n'
name|'policy'
op|','
name|'self'
op|'.'
name|'get_by_index'
op|'('
name|'int'
op|'('
name|'policy'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'policy'
op|'.'
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'by_name'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'PolicyError'
op|'('
string|"'Duplicate name %s conflicts with %s'"
op|'%'
op|'('
nl|'\n'
name|'policy'
op|','
name|'self'
op|'.'
name|'get_by_name'
op|'('
name|'policy'
op|'.'
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'policy'
op|'.'
name|'is_default'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'default'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'default'
op|'='
name|'policy'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'PolicyError'
op|'('
nl|'\n'
string|"'Duplicate default %s conflicts with %s'"
op|'%'
op|'('
nl|'\n'
name|'policy'
op|','
name|'self'
op|'.'
name|'default'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_add_policy'
op|'('
name|'policy'
op|')'
newline|'\n'
nl|'\n'
comment|"# If a 0 policy wasn't explicitly given, or nothing was"
nl|'\n'
comment|'# provided, create the 0 policy now'
nl|'\n'
dedent|''
name|'if'
number|'0'
name|'not'
name|'in'
name|'self'
op|'.'
name|'by_index'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'self'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'PolicyError'
op|'('
string|"'You must specify a storage policy '"
nl|'\n'
string|"'section for policy index 0 in order '"
nl|'\n'
string|"'to define multiple policies'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_add_policy'
op|'('
name|'StoragePolicy'
op|'('
number|'0'
op|','
name|'name'
op|'='
name|'LEGACY_POLICY_NAME'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# at least one policy must be enabled'
nl|'\n'
dedent|''
name|'enabled_policies'
op|'='
op|'['
name|'p'
name|'for'
name|'p'
name|'in'
name|'self'
name|'if'
name|'not'
name|'p'
op|'.'
name|'is_deprecated'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'enabled_policies'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|'"Unable to find policy that\'s not deprecated!"'
op|')'
newline|'\n'
nl|'\n'
comment|'# if needed, specify default'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'default'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'self'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'PolicyError'
op|'('
string|'"Unable to find default policy"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'default'
op|'='
name|'self'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'.'
name|'is_default'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|get_by_name
dedent|''
dedent|''
name|'def'
name|'get_by_name'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Find a storage policy by its name.\n\n        :param name: name of the policy\n        :returns: storage policy, or None\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'by_name'
op|'.'
name|'get'
op|'('
name|'name'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_index
dedent|''
name|'def'
name|'get_by_index'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Find a storage policy by its index.\n\n        An index of None will be treated as 0.\n\n        :param index: numeric index of the storage policy\n        :returns: storage policy, or None if no such policy\n        """'
newline|'\n'
comment|'# makes it easier for callers to just pass in a header value'
nl|'\n'
name|'index'
op|'='
name|'int'
op|'('
name|'index'
op|')'
name|'if'
name|'index'
name|'else'
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'by_index'
op|'.'
name|'get'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_object_ring
dedent|''
name|'def'
name|'get_object_ring'
op|'('
name|'self'
op|','
name|'policy_idx'
op|','
name|'swift_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the ring object to use to handle a request based on its policy.\n\n        An index of None will be treated as 0.\n\n        :param policy_idx: policy index as defined in swift.conf\n        :param swift_dir: swift_dir used by the caller\n        :returns: appropriate ring object\n        """'
newline|'\n'
name|'policy'
op|'='
name|'self'
op|'.'
name|'get_by_index'
op|'('
name|'policy_idx'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'policy'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PolicyError'
op|'('
string|'"No policy with index %s"'
op|'%'
name|'policy_idx'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'policy'
op|'.'
name|'object_ring'
op|':'
newline|'\n'
indent|'            '
name|'policy'
op|'.'
name|'load_ring'
op|'('
name|'swift_dir'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'policy'
op|'.'
name|'object_ring'
newline|'\n'
nl|'\n'
DECL|member|get_policy_info
dedent|''
name|'def'
name|'get_policy_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Build info about policies for the /info endpoint\n\n        :returns: list of dicts containing relevant policy information\n        """'
newline|'\n'
name|'policy_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'pol'
name|'in'
name|'self'
op|':'
newline|'\n'
comment|'# delete from /info if deprecated'
nl|'\n'
indent|'            '
name|'if'
name|'pol'
op|'.'
name|'is_deprecated'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'policy_entry'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'policy_entry'
op|'['
string|"'name'"
op|']'
op|'='
name|'pol'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'pol'
op|'.'
name|'is_default'
op|':'
newline|'\n'
indent|'                '
name|'policy_entry'
op|'['
string|"'default'"
op|']'
op|'='
name|'pol'
op|'.'
name|'is_default'
newline|'\n'
dedent|''
name|'policy_info'
op|'.'
name|'append'
op|'('
name|'policy_entry'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'policy_info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_storage_policies
dedent|''
dedent|''
name|'def'
name|'parse_storage_policies'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parse storage policies in ``swift.conf`` - note that validation\n    is done when the :class:`StoragePolicyCollection` is instantiated.\n\n    :param conf: ConfigParser parser object for swift.conf\n    """'
newline|'\n'
name|'policies'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'section'
name|'in'
name|'conf'
op|'.'
name|'sections'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'section'
op|'.'
name|'startswith'
op|'('
string|"'storage-policy:'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'policy_index'
op|'='
name|'section'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
comment|'# map config option name to StoragePolicy parameter name'
nl|'\n'
name|'config_to_policy_option_map'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'name'"
op|','
nl|'\n'
string|"'default'"
op|':'
string|"'is_default'"
op|','
nl|'\n'
string|"'deprecated'"
op|':'
string|"'is_deprecated'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'policy_options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'config_option'
op|','
name|'value'
name|'in'
name|'conf'
op|'.'
name|'items'
op|'('
name|'section'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'policy_option'
op|'='
name|'config_to_policy_option_map'
op|'['
name|'config_option'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'PolicyError'
op|'('
string|"'Invalid option %r in '"
nl|'\n'
string|"'storage-policy section %r'"
op|'%'
op|'('
nl|'\n'
name|'config_option'
op|','
name|'section'
op|')'
op|')'
newline|'\n'
dedent|''
name|'policy_options'
op|'['
name|'policy_option'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'policy'
op|'='
name|'StoragePolicy'
op|'('
name|'policy_index'
op|','
op|'**'
name|'policy_options'
op|')'
newline|'\n'
name|'policies'
op|'.'
name|'append'
op|'('
name|'policy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'StoragePolicyCollection'
op|'('
name|'policies'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StoragePolicySingleton
dedent|''
name|'class'
name|'StoragePolicySingleton'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An instance of this class is the primary interface to storage policies\n    exposed as a module level global named ``POLICIES``.  This global\n    reference wraps ``_POLICIES`` which is normally instantiated by parsing\n    ``swift.conf`` and will result in an instance of\n    :class:`StoragePolicyCollection`.\n\n    You should never patch this instance directly, instead patch the module\n    level ``_POLICIES`` instance so that swift code which imported\n    ``POLICIES`` directly will reference the patched\n    :class:`StoragePolicyCollection`.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__iter__
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'_POLICIES'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'_POLICIES'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_POLICIES'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
dedent|''
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'_POLICIES'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
name|'_POLICIES'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reload_storage_policies
dedent|''
dedent|''
name|'def'
name|'reload_storage_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Reload POLICIES from ``swift.conf``.\n    """'
newline|'\n'
name|'global'
name|'_POLICIES'
newline|'\n'
name|'policy_conf'
op|'='
name|'ConfigParser'
op|'('
op|')'
newline|'\n'
name|'policy_conf'
op|'.'
name|'read'
op|'('
name|'SWIFT_CONF_FILE'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'_POLICIES'
op|'='
name|'parse_storage_policies'
op|'('
name|'policy_conf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'PolicyError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'SystemExit'
op|'('
string|"'ERROR: Invalid Storage Policy Configuration '"
nl|'\n'
string|"'in %s (%s)'"
op|'%'
op|'('
name|'SWIFT_CONF_FILE'
op|','
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# parse configuration and setup singleton'
nl|'\n'
DECL|variable|_POLICIES
dedent|''
dedent|''
name|'_POLICIES'
op|'='
name|'None'
newline|'\n'
name|'reload_storage_policies'
op|'('
op|')'
newline|'\n'
DECL|variable|POLICIES
name|'POLICIES'
op|'='
name|'StoragePolicySingleton'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit
