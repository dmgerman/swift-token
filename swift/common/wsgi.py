begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""WSGI tools for use with swift."""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'mimetools'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'textwrap'
name|'import'
name|'dedent'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'debug'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenio'
op|','
name|'GreenPool'
op|','
name|'sleep'
op|','
name|'wsgi'
op|','
name|'listen'
op|','
name|'Timeout'
newline|'\n'
name|'from'
name|'paste'
op|'.'
name|'deploy'
name|'import'
name|'loadwsgi'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'socket'
op|','
name|'ssl'
op|','
name|'os'
name|'as'
name|'green_os'
newline|'\n'
name|'from'
name|'six'
name|'import'
name|'BytesIO'
newline|'\n'
name|'from'
name|'six'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'urllib'
op|'.'
name|'parse'
name|'import'
name|'unquote'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
op|','
name|'constraints'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
name|'BindPortsCache'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Request'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'capture_stdio'
op|','
name|'disable_fallocate'
op|','
name|'drop_privileges'
op|','
name|'get_logger'
op|','
name|'NullLogger'
op|','
name|'config_true_value'
op|','
name|'validate_configuration'
op|','
name|'get_hub'
op|','
name|'config_auto_int_value'
op|','
name|'CloseableChain'
newline|'\n'
nl|'\n'
comment|'# Set maximum line size of message headers to be accepted.'
nl|'\n'
name|'wsgi'
op|'.'
name|'MAX_HEADER_LINE'
op|'='
name|'constraints'
op|'.'
name|'MAX_HEADER_SIZE'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'multiprocessing'
newline|'\n'
DECL|variable|CPU_COUNT
name|'CPU_COUNT'
op|'='
name|'multiprocessing'
op|'.'
name|'cpu_count'
op|'('
op|')'
name|'or'
number|'1'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ImportError'
op|','
name|'NotImplementedError'
op|')'
op|':'
newline|'\n'
DECL|variable|CPU_COUNT
indent|'    '
name|'CPU_COUNT'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NamedConfigLoader
dedent|''
name|'class'
name|'NamedConfigLoader'
op|'('
name|'loadwsgi'
op|'.'
name|'ConfigLoader'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Patch paste.deploy\'s ConfigLoader so each context object will know what\n    config section it came from.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_context
name|'def'
name|'get_context'
op|'('
name|'self'
op|','
name|'object_type'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'global_conf'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'super'
op|'('
name|'NamedConfigLoader'
op|','
name|'self'
op|')'
op|'.'
name|'get_context'
op|'('
nl|'\n'
name|'object_type'
op|','
name|'name'
op|'='
name|'name'
op|','
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
name|'context'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'return'
name|'context'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'loadwsgi'
op|'.'
name|'ConfigLoader'
op|'='
name|'NamedConfigLoader'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigDirLoader
name|'class'
name|'ConfigDirLoader'
op|'('
name|'NamedConfigLoader'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Read configuration from multiple files under the given path.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf_dir'
op|')'
op|':'
newline|'\n'
comment|'# parent class uses filename attribute when building error messages'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'conf_dir'
op|'='
name|'conf_dir'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'defaults'
op|'='
op|'{'
nl|'\n'
string|"'here'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'conf_dir'
op|')'
op|')'
op|','
nl|'\n'
string|"'__file__'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'conf_dir'
op|')'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'loadwsgi'
op|'.'
name|'NicerConfigParser'
op|'('
name|'conf_dir'
op|','
name|'defaults'
op|'='
name|'defaults'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'optionxform'
op|'='
name|'str'
comment|"# Don't lower-case keys"
newline|'\n'
name|'utils'
op|'.'
name|'read_conf_dir'
op|'('
name|'self'
op|'.'
name|'parser'
op|','
name|'conf_dir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_loadconfigdir
dedent|''
dedent|''
name|'def'
name|'_loadconfigdir'
op|'('
name|'object_type'
op|','
name|'uri'
op|','
name|'path'
op|','
name|'name'
op|','
name|'relative_to'
op|','
name|'global_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'relative_to'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'relative_to'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'loader'
op|'='
name|'ConfigDirLoader'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'global_conf'
op|':'
newline|'\n'
indent|'        '
name|'loader'
op|'.'
name|'update_defaults'
op|'('
name|'global_conf'
op|','
name|'overwrite'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'loader'
op|'.'
name|'get_context'
op|'('
name|'object_type'
op|','
name|'name'
op|','
name|'global_conf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# add config_dir parsing to paste.deploy'
nl|'\n'
dedent|''
name|'loadwsgi'
op|'.'
name|'_loaders'
op|'['
string|"'config_dir'"
op|']'
op|'='
name|'_loadconfigdir'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigString
name|'class'
name|'ConfigString'
op|'('
name|'NamedConfigLoader'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap a raw config string up for paste.deploy.\n\n    If you give one of these to our loadcontext (e.g. give it to our\n    appconfig) we\'ll intercept it and get it routed to the right loader.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config_string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'contents'
op|'='
name|'StringIO'
op|'('
name|'dedent'
op|'('
name|'config_string'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
string|'"string"'
newline|'\n'
name|'defaults'
op|'='
op|'{'
nl|'\n'
string|"'here'"
op|':'
string|'"string"'
op|','
nl|'\n'
string|"'__file__'"
op|':'
string|'"string"'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'loadwsgi'
op|'.'
name|'NicerConfigParser'
op|'('
string|'"string"'
op|','
name|'defaults'
op|'='
name|'defaults'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'optionxform'
op|'='
name|'str'
comment|"# Don't lower-case keys"
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'readfp'
op|'('
name|'self'
op|'.'
name|'contents'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_conf_type
dedent|''
dedent|''
name|'def'
name|'wrap_conf_type'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wrap a function whos first argument is a paste.deploy style config uri,\n    such that you can pass it an un-adorned raw filesystem path (or config\n    string) and the config directive (either config:, config_dir:, or\n    config_str:) will be added automatically based on the type of entity\n    (either a file or directory, or if no such entity on the file system -\n    just a string) before passing it through to the paste.deploy function.\n    """'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'conf_path'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'conf_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_type'
op|'='
string|"'config_dir'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'conf_type'
op|'='
string|"'config'"
newline|'\n'
dedent|''
name|'conf_uri'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'conf_type'
op|','
name|'conf_path'
op|')'
newline|'\n'
name|'return'
name|'f'
op|'('
name|'conf_uri'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|appconfig
dedent|''
name|'appconfig'
op|'='
name|'wrap_conf_type'
op|'('
name|'loadwsgi'
op|'.'
name|'appconfig'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|monkey_patch_mimetools
name|'def'
name|'monkey_patch_mimetools'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    mimetools.Message defaults content-type to "text/plain"\n    This changes it to default to None, so we can detect missing headers.\n    """'
newline|'\n'
nl|'\n'
name|'orig_parsetype'
op|'='
name|'mimetools'
op|'.'
name|'Message'
op|'.'
name|'parsetype'
newline|'\n'
nl|'\n'
DECL|function|parsetype
name|'def'
name|'parsetype'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'typeheader'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'type'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'maintype'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'subtype'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'plisttext'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'orig_parsetype'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'parsetype'
op|'.'
name|'patched'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'getattr'
op|'('
name|'mimetools'
op|'.'
name|'Message'
op|'.'
name|'parsetype'
op|','
string|"'patched'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mimetools'
op|'.'
name|'Message'
op|'.'
name|'parsetype'
op|'='
name|'parsetype'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_socket
dedent|''
dedent|''
name|'def'
name|'get_socket'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bind socket to bind ip:port in conf\n\n    :param conf: Configuration dict to read settings from\n\n    :returns : a socket object as returned from socket.listen or\n               ssl.wrap_socket if conf specifies cert_file\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'bind_port'
op|'='
name|'int'
op|'('
name|'conf'
op|'['
string|"'bind_port'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'KeyError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ConfigFilePortError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'bind_addr'
op|'='
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'bind_ip'"
op|','
string|"'0.0.0.0'"
op|')'
op|','
name|'bind_port'
op|')'
newline|'\n'
name|'address_family'
op|'='
op|'['
name|'addr'
op|'['
number|'0'
op|']'
name|'for'
name|'addr'
name|'in'
name|'socket'
op|'.'
name|'getaddrinfo'
op|'('
nl|'\n'
name|'bind_addr'
op|'['
number|'0'
op|']'
op|','
name|'bind_addr'
op|'['
number|'1'
op|']'
op|','
name|'socket'
op|'.'
name|'AF_UNSPEC'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
nl|'\n'
name|'if'
name|'addr'
op|'['
number|'0'
op|']'
name|'in'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'AF_INET6'
op|')'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'sock'
op|'='
name|'None'
newline|'\n'
name|'bind_timeout'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'bind_timeout'"
op|','
number|'30'
op|')'
op|')'
newline|'\n'
name|'retry_until'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'bind_timeout'
newline|'\n'
name|'warn_ssl'
op|'='
name|'False'
newline|'\n'
name|'while'
name|'not'
name|'sock'
name|'and'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'<'
name|'retry_until'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sock'
op|'='
name|'listen'
op|'('
name|'bind_addr'
op|','
name|'backlog'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'backlog'"
op|','
number|'4096'
op|')'
op|')'
op|','
nl|'\n'
name|'family'
op|'='
name|'address_family'
op|')'
newline|'\n'
name|'if'
string|"'cert_file'"
name|'in'
name|'conf'
op|':'
newline|'\n'
indent|'                '
name|'warn_ssl'
op|'='
name|'True'
newline|'\n'
name|'sock'
op|'='
name|'ssl'
op|'.'
name|'wrap_socket'
op|'('
name|'sock'
op|','
name|'certfile'
op|'='
name|'conf'
op|'['
string|"'cert_file'"
op|']'
op|','
nl|'\n'
name|'keyfile'
op|'='
name|'conf'
op|'['
string|"'key_file'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'!='
name|'errno'
op|'.'
name|'EADDRINUSE'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'sock'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Could not bind to %s:%s '"
nl|'\n'
string|"'after trying for %s seconds'"
op|')'
op|'%'
op|'('
nl|'\n'
name|'bind_addr'
op|'['
number|'0'
op|']'
op|','
name|'bind_addr'
op|'['
number|'1'
op|']'
op|','
name|'bind_timeout'
op|')'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_REUSEADDR'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# in my experience, sockets can hang around forever without keepalive'
nl|'\n'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_KEEPALIVE'
op|','
number|'1'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'socket'
op|','
string|"'TCP_KEEPIDLE'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'IPPROTO_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_KEEPIDLE'
op|','
number|'600'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'warn_ssl'
op|':'
newline|'\n'
indent|'        '
name|'ssl_warning_message'
op|'='
name|'_'
op|'('
string|"'WARNING: SSL should only be enabled for '"
nl|'\n'
string|"'testing purposes. Use external SSL '"
nl|'\n'
string|"'termination for a production deployment.'"
op|')'
newline|'\n'
name|'get_logger'
op|'('
name|'conf'
op|')'
op|'.'
name|'warning'
op|'('
name|'ssl_warning_message'
op|')'
newline|'\n'
name|'print'
op|'('
name|'ssl_warning_message'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RestrictedGreenPool
dedent|''
name|'class'
name|'RestrictedGreenPool'
op|'('
name|'GreenPool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Works the same as GreenPool, but if the size is specified as one, then the\n    spawn_n() method will invoke waitall() before returning to prevent the\n    caller from doing any other work (like calling accept()).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|'='
number|'1024'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RestrictedGreenPool'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'size'
op|'='
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rgp_do_wait'
op|'='
op|'('
name|'size'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spawn_n
dedent|''
name|'def'
name|'spawn_n'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RestrictedGreenPool'
op|','
name|'self'
op|')'
op|'.'
name|'spawn_n'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_rgp_do_wait'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|pipeline_property
dedent|''
dedent|''
dedent|''
name|'def'
name|'pipeline_property'
op|'('
name|'name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Create a property accessor for the given name.  The property will\n    dig through the bound instance on which it was accessed for an\n    attribute "app" and check that object for an attribute of the given\n    name.  If the "app" object does not have such an attribute, it will\n    look for an attribute "app" on THAT object and continue it\'s search\n    from there.  If the named attribute cannot be found accessing the\n    property will raise AttributeError.\n\n    If a default kwarg is provided you get that instead of the\n    AttributeError.  When found the attribute will be cached on instance\n    with the property accessor using the same name as the attribute\n    prefixed with a leading underscore.\n    """'
newline|'\n'
nl|'\n'
name|'cache_attr_name'
op|'='
string|"'_%s'"
op|'%'
name|'name'
newline|'\n'
nl|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cached_value'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'cache_attr_name'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cached_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cached_value'
newline|'\n'
dedent|''
name|'app'
op|'='
name|'self'
comment|'# first app is on self'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'app'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'app'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'app'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'setattr'
op|'('
name|'self'
op|','
name|'cache_attr_name'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'if'
string|"'default'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'kwargs'
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
string|"'No apps in pipeline have a '"
nl|'\n'
string|"'%s attribute'"
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PipelineWrapper
dedent|''
name|'class'
name|'PipelineWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides a number of utility methods for\n    modifying the composition of a wsgi pipeline.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'entry_point_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'index'
op|'('
name|'entry_point_name'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|startswith
dedent|''
dedent|''
name|'def'
name|'startswith'
op|'('
name|'self'
op|','
name|'entry_point_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tests if the pipeline starts with the given entry point name.\n\n        :param entry_point_name: entry point of middleware or app (Swift only)\n\n        :returns: True if entry_point_name is first in pipeline, False\n                  otherwise\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'first_ctx'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'filter_contexts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'first_ctx'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'app_context'
newline|'\n'
dedent|''
name|'return'
name|'first_ctx'
op|'.'
name|'entry_point_name'
op|'=='
name|'entry_point_name'
newline|'\n'
nl|'\n'
DECL|member|_format_for_display
dedent|''
name|'def'
name|'_format_for_display'
op|'('
name|'self'
op|','
name|'ctx'
op|')'
op|':'
newline|'\n'
comment|'# Contexts specified by pipeline= have .name set in NamedConfigLoader.'
nl|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'ctx'
op|','
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ctx'
op|'.'
name|'name'
newline|'\n'
comment|"# This should not happen: a foreign context. Let's not crash."
nl|'\n'
dedent|''
name|'return'
string|'"<unknown>"'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_for_display'
op|'('
name|'ctx'
op|')'
nl|'\n'
name|'for'
name|'ctx'
name|'in'
name|'self'
op|'.'
name|'context'
op|'.'
name|'filter_contexts'
op|']'
newline|'\n'
name|'parts'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_format_for_display'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'app_context'
op|')'
op|')'
newline|'\n'
name|'return'
string|'" "'
op|'.'
name|'join'
op|'('
name|'parts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_filter
dedent|''
name|'def'
name|'create_filter'
op|'('
name|'self'
op|','
name|'entry_point_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a context for a filter that can subsequently be added\n        to a pipeline context.\n\n        :param entry_point_name: entry point of the middleware (Swift only)\n\n        :returns: a filter context\n        """'
newline|'\n'
name|'spec'
op|'='
string|"'egg:swift#'"
op|'+'
name|'entry_point_name'
newline|'\n'
name|'ctx'
op|'='
name|'loadwsgi'
op|'.'
name|'loadcontext'
op|'('
name|'loadwsgi'
op|'.'
name|'FILTER'
op|','
name|'spec'
op|','
nl|'\n'
name|'global_conf'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'global_conf'
op|')'
newline|'\n'
name|'ctx'
op|'.'
name|'protocol'
op|'='
string|"'paste.filter_factory'"
newline|'\n'
name|'ctx'
op|'.'
name|'name'
op|'='
name|'entry_point_name'
newline|'\n'
name|'return'
name|'ctx'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'entry_point_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the first index of the given entry point name in the pipeline.\n\n        Raises ValueError if the given module is not in the pipeline.\n        """'
newline|'\n'
name|'for'
name|'i'
op|','
name|'ctx'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'filter_contexts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
op|'.'
name|'entry_point_name'
op|'=='
name|'entry_point_name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'i'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'ValueError'
op|'('
string|'"%s is not in pipeline"'
op|'%'
op|'('
name|'entry_point_name'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insert_filter
dedent|''
name|'def'
name|'insert_filter'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Inserts a filter module into the pipeline context.\n\n        :param ctx: the context to be inserted\n        :param index: (optional) index at which filter should be\n                      inserted in the list of pipeline filters. Default\n                      is 0, which means the start of the pipeline.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'filter_contexts'
op|'.'
name|'insert'
op|'('
name|'index'
op|','
name|'ctx'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loadcontext
dedent|''
dedent|''
name|'def'
name|'loadcontext'
op|'('
name|'object_type'
op|','
name|'uri'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'relative_to'
op|'='
name|'None'
op|','
nl|'\n'
name|'global_conf'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'uri'
op|','
name|'loadwsgi'
op|'.'
name|'ConfigLoader'
op|')'
op|':'
newline|'\n'
comment|"# bypass loadcontext's uri parsing and loader routing and"
nl|'\n'
comment|'# just directly return the context'
nl|'\n'
indent|'        '
name|'if'
name|'global_conf'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'.'
name|'update_defaults'
op|'('
name|'global_conf'
op|','
name|'overwrite'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'uri'
op|'.'
name|'get_context'
op|'('
name|'object_type'
op|','
name|'name'
op|','
name|'global_conf'
op|')'
newline|'\n'
dedent|''
name|'add_conf_type'
op|'='
name|'wrap_conf_type'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|')'
newline|'\n'
name|'return'
name|'loadwsgi'
op|'.'
name|'loadcontext'
op|'('
name|'object_type'
op|','
name|'add_conf_type'
op|'('
name|'uri'
op|')'
op|','
name|'name'
op|'='
name|'name'
op|','
nl|'\n'
name|'relative_to'
op|'='
name|'relative_to'
op|','
nl|'\n'
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_add_pipeline_properties
dedent|''
name|'def'
name|'_add_pipeline_properties'
op|'('
name|'app'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'property_name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'app'
op|','
name|'property_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'app'
op|'.'
name|'__class__'
op|','
name|'property_name'
op|','
nl|'\n'
name|'pipeline_property'
op|'('
name|'property_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loadapp
dedent|''
dedent|''
dedent|''
name|'def'
name|'loadapp'
op|'('
name|'conf_file'
op|','
name|'global_conf'
op|'='
name|'None'
op|','
name|'allow_modify_pipeline'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Loads a context from a config file, and if the context is a pipeline\n    then presents the app with the opportunity to modify the pipeline.\n    """'
newline|'\n'
name|'global_conf'
op|'='
name|'global_conf'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'ctx'
op|'='
name|'loadcontext'
op|'('
name|'loadwsgi'
op|'.'
name|'APP'
op|','
name|'conf_file'
op|','
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
name|'if'
name|'ctx'
op|'.'
name|'object_type'
op|'.'
name|'name'
op|'=='
string|"'pipeline'"
op|':'
newline|'\n'
comment|'# give app the opportunity to modify the pipeline context'
nl|'\n'
indent|'        '
name|'app'
op|'='
name|'ctx'
op|'.'
name|'app_context'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'modify_wsgi_pipeline'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'func'
name|'and'
name|'allow_modify_pipeline'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'('
name|'PipelineWrapper'
op|'('
name|'ctx'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ctx'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_server
dedent|''
name|'def'
name|'run_server'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'sock'
op|','
name|'global_conf'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# Ensure TZ environment variable exists to avoid stat('/etc/localtime') on"
nl|'\n'
comment|'# some platforms. This locks in reported times to the timezone in which'
nl|'\n'
comment|'# the server first starts running in locations that periodically change'
nl|'\n'
comment|'# timezones.'
nl|'\n'
indent|'    '
name|'os'
op|'.'
name|'environ'
op|'['
string|"'TZ'"
op|']'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|'"%z"'
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'wsgi'
op|'.'
name|'HttpProtocol'
op|'.'
name|'default_request_version'
op|'='
string|'"HTTP/1.0"'
newline|'\n'
comment|'# Turn off logging requests by the underlying WSGI software.'
nl|'\n'
name|'wsgi'
op|'.'
name|'HttpProtocol'
op|'.'
name|'log_request'
op|'='
name|'lambda'
op|'*'
name|'a'
op|':'
name|'None'
newline|'\n'
comment|'# Redirect logging other messages by the underlying WSGI software.'
nl|'\n'
name|'wsgi'
op|'.'
name|'HttpProtocol'
op|'.'
name|'log_message'
op|'='
name|'lambda'
name|'s'
op|','
name|'f'
op|','
op|'*'
name|'a'
op|':'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'ERROR WSGI: '"
op|'+'
name|'f'
op|'%'
name|'a'
op|')'
newline|'\n'
name|'wsgi'
op|'.'
name|'WRITE_TIMEOUT'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'client_timeout'"
op|')'
name|'or'
number|'60'
op|')'
newline|'\n'
nl|'\n'
name|'eventlet'
op|'.'
name|'hubs'
op|'.'
name|'use_hub'
op|'('
name|'get_hub'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# NOTE(sileht): monkey-patching thread is required by python-keystoneclient'
nl|'\n'
name|'eventlet'
op|'.'
name|'patcher'
op|'.'
name|'monkey_patch'
op|'('
name|'all'
op|'='
name|'False'
op|','
name|'socket'
op|'='
name|'True'
op|','
name|'thread'
op|'='
name|'True'
op|')'
newline|'\n'
name|'eventlet_debug'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'eventlet_debug'"
op|','
string|"'no'"
op|')'
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'debug'
op|'.'
name|'hub_exceptions'
op|'('
name|'eventlet_debug'
op|')'
newline|'\n'
name|'wsgi_logger'
op|'='
name|'NullLogger'
op|'('
op|')'
newline|'\n'
name|'if'
name|'eventlet_debug'
op|':'
newline|'\n'
comment|'# let eventlet.wsgi.server log to stderr'
nl|'\n'
indent|'        '
name|'wsgi_logger'
op|'='
name|'None'
newline|'\n'
comment|'# utils.LogAdapter stashes name in server; fallback on unadapted loggers'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'global_conf'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'logger'
op|','
string|"'server'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log_name'
op|'='
name|'logger'
op|'.'
name|'server'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log_name'
op|'='
name|'logger'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'global_conf'
op|'='
op|'{'
string|"'log_name'"
op|':'
name|'log_name'
op|'}'
newline|'\n'
dedent|''
name|'app'
op|'='
name|'loadapp'
op|'('
name|'conf'
op|'['
string|"'__file__'"
op|']'
op|','
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
name|'max_clients'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'max_clients'"
op|','
string|"'1024'"
op|')'
op|')'
newline|'\n'
name|'pool'
op|'='
name|'RestrictedGreenPool'
op|'('
name|'size'
op|'='
name|'max_clients'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Disable capitalizing headers in Eventlet if possible.  This is'
nl|'\n'
comment|'# necessary for the AWS SDK to work with swift3 middleware.'
nl|'\n'
indent|'        '
name|'argspec'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'wsgi'
op|'.'
name|'server'
op|')'
newline|'\n'
name|'if'
string|"'capitalize_response_headers'"
name|'in'
name|'argspec'
op|'.'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'wsgi'
op|'.'
name|'server'
op|'('
name|'sock'
op|','
name|'app'
op|','
name|'wsgi_logger'
op|','
name|'custom_pool'
op|'='
name|'pool'
op|','
nl|'\n'
name|'capitalize_response_headers'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'wsgi'
op|'.'
name|'server'
op|'('
name|'sock'
op|','
name|'app'
op|','
name|'wsgi_logger'
op|','
name|'custom_pool'
op|'='
name|'pool'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'err'
op|'['
number|'0'
op|']'
op|'!='
name|'errno'
op|'.'
name|'EINVAL'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WorkersStrategy
dedent|''
name|'class'
name|'WorkersStrategy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    WSGI server management strategy object for a single bind port and listen\n    socket shared by a configured number of forked-off workers.\n\n    Used in :py:func:`run_wsgi`.\n\n    :param dict conf: Server configuration dictionary.\n    :param logger: The server\'s :py:class:`~swift.common.utils.LogAdaptor`\n                   object.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'logger'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'worker_count'
op|'='
name|'config_auto_int_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'workers'"
op|')'
op|','
nl|'\n'
name|'CPU_COUNT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loop_timeout
dedent|''
name|'def'
name|'loop_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We want to keep from busy-waiting, but we also need a non-None value so\n        the main loop gets a chance to tell whether it should keep running or\n        not (e.g. SIGHUP received).\n\n        So we return 0.5.\n        """'
newline|'\n'
nl|'\n'
name|'return'
number|'0.5'
newline|'\n'
nl|'\n'
DECL|member|bind_ports
dedent|''
name|'def'
name|'bind_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Bind the one listen socket for this strategy and drop privileges\n        (since the parent process will never need to bind again).\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'='
name|'get_socket'
op|'('
name|'self'
op|'.'
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConfigFilePortError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'bind_port wasn\\'t properly set in the config file. '"
string|"'It must be explicitly set to a valid port number.'"
newline|'\n'
name|'return'
name|'msg'
newline|'\n'
dedent|''
name|'drop_privileges'
op|'('
name|'self'
op|'.'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'user'"
op|','
string|"'swift'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|no_fork_sock
dedent|''
name|'def'
name|'no_fork_sock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a server listen socket if the server should run in the\n        foreground (no fork).\n        """'
newline|'\n'
nl|'\n'
comment|'# Useful for profiling [no forks].'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'worker_count'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'sock'
newline|'\n'
nl|'\n'
DECL|member|new_worker_socks
dedent|''
dedent|''
name|'def'
name|'new_worker_socks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Yield a sequence of (socket, opqaue_data) tuples for each server which\n        should be forked-off and started.\n\n        The opaque_data item for each socket will passed into the\n        :py:meth:`log_sock_exit` and :py:meth:`register_worker_start` methods\n        where it will be ignored.\n        """'
newline|'\n'
nl|'\n'
name|'while'
name|'len'
op|'('
name|'self'
op|'.'
name|'children'
op|')'
op|'<'
name|'self'
op|'.'
name|'worker_count'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'sock'
op|','
name|'None'
newline|'\n'
nl|'\n'
DECL|member|post_fork_hook
dedent|''
dedent|''
name|'def'
name|'post_fork_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Perform any initialization in a forked-off child process prior to\n        starting the wsgi server.\n        """'
newline|'\n'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|log_sock_exit
dedent|''
name|'def'
name|'log_sock_exit'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'_unused'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log a server\'s exit.\n\n        :param socket sock: The listen socket for the worker just started.\n        :param _unused: The socket\'s opaque_data yielded by\n                        :py:meth:`new_worker_socks`.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Child %d exiting normally'"
op|'%'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_worker_start
dedent|''
name|'def'
name|'register_worker_start'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'_unused'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a new worker is started.\n\n        :param socket sock: The listen socket for the worker just started.\n        :param _unused: The socket\'s opaque_data yielded by new_worker_socks().\n        :param int pid: The new worker process\' PID\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Started child %s'"
op|'%'
name|'pid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'.'
name|'append'
op|'('
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_worker_exit
dedent|''
name|'def'
name|'register_worker_exit'
op|'('
name|'self'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a worker has exited.\n\n        :param int pid: The PID of the worker that exited.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'Removing dead child %s'"
op|'%'
name|'pid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'children'
op|'.'
name|'remove'
op|'('
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shutdown_sockets
dedent|''
name|'def'
name|'shutdown_sockets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shutdown any listen sockets.\n        """'
newline|'\n'
nl|'\n'
name|'greenio'
op|'.'
name|'shutdown_safe'
op|'('
name|'self'
op|'.'
name|'sock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PortPidState
dedent|''
dedent|''
name|'class'
name|'PortPidState'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A helper class for :py:class:`ServersPerPortStrategy` to track listen\n    sockets and PIDs for each port.\n\n    :param int servers_per_port: The configured number of servers per port.\n    :param logger: The server\'s :py:class:`~swift.common.utils.LogAdaptor`\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'servers_per_port'
op|','
name|'logger'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'servers_per_port'
op|'='
name|'servers_per_port'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|sock_for_port
dedent|''
name|'def'
name|'sock_for_port'
op|'('
name|'self'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param int port: The port whose socket is desired.\n        :returns: The bound listen socket for the given port.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'['
name|'port'
op|']'
op|'['
string|"'sock'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|port_for_sock
dedent|''
name|'def'
name|'port_for_sock'
op|'('
name|'self'
op|','
name|'sock'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param socket sock: A tracked bound listen socket\n        :returns: The port the socket is bound to.\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'port'
op|','
name|'sock_data'
name|'in'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'sock_data'
op|'['
string|"'sock'"
op|']'
op|'=='
name|'sock'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'port'
newline|'\n'
nl|'\n'
DECL|member|_pid_to_port_and_index
dedent|''
dedent|''
dedent|''
name|'def'
name|'_pid_to_port_and_index'
op|'('
name|'self'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'port'
op|','
name|'sock_data'
name|'in'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'server_idx'
op|','
name|'a_pid'
name|'in'
name|'enumerate'
op|'('
name|'sock_data'
op|'['
string|"'pids'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'pid'
op|'=='
name|'a_pid'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'port'
op|','
name|'server_idx'
newline|'\n'
nl|'\n'
DECL|member|port_index_pairs
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'port_index_pairs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :returns: A set of (port, server_idx) tuples for currently-tracked\n            ports, sockets, and PIDs.\n        """'
newline|'\n'
nl|'\n'
name|'current_port_index_pairs'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'port'
op|','
name|'pid_state'
name|'in'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'current_port_index_pairs'
op|'|='
name|'set'
op|'('
nl|'\n'
op|'('
name|'port'
op|','
name|'i'
op|')'
nl|'\n'
name|'for'
name|'i'
op|','
name|'pid'
name|'in'
name|'enumerate'
op|'('
name|'pid_state'
op|'['
string|"'pids'"
op|']'
op|')'
nl|'\n'
name|'if'
name|'pid'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'current_port_index_pairs'
newline|'\n'
nl|'\n'
DECL|member|track_port
dedent|''
name|'def'
name|'track_port'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'sock'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start tracking servers for the given port and listen socket.\n\n        :param int port: The port to start tracking\n        :param socket sock: The bound listen socket for the port.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'['
name|'port'
op|']'
op|'='
op|'{'
nl|'\n'
string|"'sock'"
op|':'
name|'sock'
op|','
nl|'\n'
string|"'pids'"
op|':'
op|'['
name|'None'
op|']'
op|'*'
name|'self'
op|'.'
name|'servers_per_port'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|not_tracking
dedent|''
name|'def'
name|'not_tracking'
op|'('
name|'self'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return True if the specified port is not being tracked.\n\n        :param int port: A port to check.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'port'
name|'not'
name|'in'
name|'self'
op|'.'
name|'sock_data_by_port'
newline|'\n'
nl|'\n'
DECL|member|all_socks
dedent|''
name|'def'
name|'all_socks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Yield all current listen sockets.\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'orphan_data'
name|'in'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'orphan_data'
op|'['
string|"'sock'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|forget_port
dedent|''
dedent|''
name|'def'
name|'forget_port'
op|'('
name|'self'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Idempotently forget a port, closing the listen socket at most once.\n        """'
newline|'\n'
nl|'\n'
name|'orphan_data'
op|'='
name|'self'
op|'.'
name|'sock_data_by_port'
op|'.'
name|'pop'
op|'('
name|'port'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'orphan_data'
op|':'
newline|'\n'
indent|'            '
name|'greenio'
op|'.'
name|'shutdown_safe'
op|'('
name|'orphan_data'
op|'['
string|"'sock'"
op|']'
op|')'
newline|'\n'
name|'orphan_data'
op|'['
string|"'sock'"
op|']'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Closing unnecessary sock for port %d'"
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_pid
dedent|''
dedent|''
name|'def'
name|'add_pid'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'index'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock_data_by_port'
op|'['
name|'port'
op|']'
op|'['
string|"'pids'"
op|']'
op|'['
name|'index'
op|']'
op|'='
name|'pid'
newline|'\n'
nl|'\n'
DECL|member|forget_pid
dedent|''
name|'def'
name|'forget_pid'
op|'('
name|'self'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Idempotently forget a PID.  It\'s okay if the PID is no longer in our\n        data structure (it could have been removed by the "orphan port" removal\n        in :py:meth:`new_worker_socks`).\n\n        :param int pid: The PID which exited.\n        """'
newline|'\n'
nl|'\n'
name|'port_server_idx'
op|'='
name|'self'
op|'.'
name|'_pid_to_port_and_index'
op|'('
name|'pid'
op|')'
newline|'\n'
name|'if'
name|'port_server_idx'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# This method can lose a race with the "orphan port" removal, when'
nl|'\n'
comment|"# a ring reload no longer contains a port.  So it's okay if we were"
nl|'\n'
comment|'# unable to find a (port, server_idx) pair.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'dead_port'
op|','
name|'server_idx'
op|'='
name|'port_server_idx'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'Removing dead child %d (PID: %s) for port %s'"
op|','
nl|'\n'
name|'server_idx'
op|','
name|'pid'
op|','
name|'dead_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock_data_by_port'
op|'['
name|'dead_port'
op|']'
op|'['
string|"'pids'"
op|']'
op|'['
name|'server_idx'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServersPerPortStrategy
dedent|''
dedent|''
name|'class'
name|'ServersPerPortStrategy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    WSGI server management strategy object for an object-server with one listen\n    port per unique local port in the storage policy rings.  The\n    `servers_per_port` integer config setting determines how many workers are\n    run per port.\n\n    Used in :py:func:`run_wsgi`.\n\n    :param dict conf: Server configuration dictionary.\n    :param logger: The server\'s :py:class:`~swift.common.utils.LogAdaptor`\n                   object.\n    :param int servers_per_port: The number of workers to run per port.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'logger'
op|','
name|'servers_per_port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
name|'self'
op|'.'
name|'servers_per_port'
op|'='
name|'servers_per_port'
newline|'\n'
name|'self'
op|'.'
name|'swift_dir'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'swift_dir'"
op|','
string|"'/etc/swift'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ring_check_interval'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'ring_check_interval'"
op|','
number|'15'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_pid_state'
op|'='
name|'PortPidState'
op|'('
name|'servers_per_port'
op|','
name|'logger'
op|')'
newline|'\n'
nl|'\n'
name|'bind_ip'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'bind_ip'"
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cache'
op|'='
name|'BindPortsCache'
op|'('
name|'self'
op|'.'
name|'swift_dir'
op|','
name|'bind_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reload_bind_ports
dedent|''
name|'def'
name|'_reload_bind_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bind_ports'
op|'='
name|'self'
op|'.'
name|'cache'
op|'.'
name|'all_bind_ports_for_node'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_bind_port
dedent|''
name|'def'
name|'_bind_port'
op|'('
name|'self'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_conf'
op|'='
name|'self'
op|'.'
name|'conf'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'new_conf'
op|'['
string|"'bind_port'"
op|']'
op|'='
name|'port'
newline|'\n'
name|'sock'
op|'='
name|'get_socket'
op|'('
name|'new_conf'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'track_port'
op|'('
name|'port'
op|','
name|'sock'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loop_timeout
dedent|''
name|'def'
name|'loop_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :returns: The time to wait for a child to exit before checking for\n                  reloaded rings (new ports).\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'ring_check_interval'
newline|'\n'
nl|'\n'
DECL|member|bind_ports
dedent|''
name|'def'
name|'bind_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Bind one listen socket per unique local storage policy ring port.  Then\n        do all the work of drop_privileges except the actual dropping of\n        privileges (each forked-off worker will do that post-fork in\n        :py:meth:`post_fork_hook`).\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_reload_bind_ports'
op|'('
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'self'
op|'.'
name|'bind_ports'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_bind_port'
op|'('
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# The workers strategy drops privileges here, which we obviously cannot'
nl|'\n'
comment|'# do if we want to support binding to low ports.  But we do want some'
nl|'\n'
comment|'# of the actions that drop_privileges did.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'setsid'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# In case you need to rmdir where you started the daemon:'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chdir'
op|'('
string|"'/'"
op|')'
newline|'\n'
comment|'# Ensure files are created with the correct privileges:'
nl|'\n'
name|'os'
op|'.'
name|'umask'
op|'('
number|'0o22'
op|')'
newline|'\n'
nl|'\n'
DECL|member|no_fork_sock
dedent|''
name|'def'
name|'no_fork_sock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This strategy does not support running in the foreground.\n        """'
newline|'\n'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|new_worker_socks
dedent|''
name|'def'
name|'new_worker_socks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Yield a sequence of (socket, server_idx) tuples for each server which\n        should be forked-off and started.\n\n        Any sockets for "orphaned" ports no longer in any ring will be closed\n        (causing their associated workers to gracefully exit) after all new\n        sockets have been yielded.\n\n        The server_idx item for each socket will passed into the\n        :py:meth:`log_sock_exit` and :py:meth:`register_worker_start` methods.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_reload_bind_ports'
op|'('
op|')'
newline|'\n'
name|'desired_port_index_pairs'
op|'='
name|'set'
op|'('
nl|'\n'
op|'('
name|'p'
op|','
name|'i'
op|')'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'bind_ports'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'servers_per_port'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'current_port_index_pairs'
op|'='
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'port_index_pairs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'desired_port_index_pairs'
op|'!='
name|'current_port_index_pairs'
op|':'
newline|'\n'
comment|'# Orphan ports are ports which had object-server processes running,'
nl|'\n'
comment|"# but which no longer appear in the ring.  We'll kill them after we"
nl|'\n'
comment|'# start missing workers.'
nl|'\n'
indent|'            '
name|'orphan_port_index_pairs'
op|'='
name|'current_port_index_pairs'
op|'-'
name|'desired_port_index_pairs'
newline|'\n'
nl|'\n'
comment|"# Fork off worker(s) for every port who's supposed to have"
nl|'\n'
comment|"# worker(s) but doesn't"
nl|'\n'
name|'missing_port_index_pairs'
op|'='
name|'desired_port_index_pairs'
op|'-'
name|'current_port_index_pairs'
newline|'\n'
name|'for'
name|'port'
op|','
name|'server_idx'
name|'in'
name|'sorted'
op|'('
name|'missing_port_index_pairs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'not_tracking'
op|'('
name|'port'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_bind_port'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'critical'
op|'('
string|"'Unable to bind to port %d: %s'"
op|','
nl|'\n'
name|'port'
op|','
name|'e'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'sock_for_port'
op|'('
name|'port'
op|')'
op|','
name|'server_idx'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'orphan_pair'
name|'in'
name|'orphan_port_index_pairs'
op|':'
newline|'\n'
comment|'# For any port in orphan_port_index_pairs, it is guaranteed'
nl|'\n'
comment|'# that there should be no listen socket for that port, so we'
nl|'\n'
comment|'# can close and forget them.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'forget_port'
op|'('
name|'orphan_pair'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_fork_hook
dedent|''
dedent|''
dedent|''
name|'def'
name|'post_fork_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called in each child process, prior to starting the actual wsgi server,\n        to drop privileges.\n        """'
newline|'\n'
nl|'\n'
name|'drop_privileges'
op|'('
name|'self'
op|'.'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'user'"
op|','
string|"'swift'"
op|')'
op|','
name|'call_setsid'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|log_sock_exit
dedent|''
name|'def'
name|'log_sock_exit'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'server_idx'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log a server\'s exit.\n        """'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'port_for_sock'
op|'('
name|'sock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Child %d (PID %d, port %d) exiting normally'"
op|','
nl|'\n'
name|'server_idx'
op|','
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_worker_start
dedent|''
name|'def'
name|'register_worker_start'
op|'('
name|'self'
op|','
name|'sock'
op|','
name|'server_idx'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a new worker is started.\n\n        :param socket sock: The listen socket for the worker just started.\n        :param server_idx: The socket\'s server_idx as yielded by\n                           :py:meth:`new_worker_socks`.\n        :param int pid: The new worker process\' PID\n        """'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'port_for_sock'
op|'('
name|'sock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Started child %d (PID %d) for port %d'"
op|','
nl|'\n'
name|'server_idx'
op|','
name|'pid'
op|','
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'add_pid'
op|'('
name|'port'
op|','
name|'server_idx'
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_worker_exit
dedent|''
name|'def'
name|'register_worker_exit'
op|'('
name|'self'
op|','
name|'pid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called when a worker has exited.\n\n        :param int pid: The PID of the worker that exited.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'forget_pid'
op|'('
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shutdown_sockets
dedent|''
name|'def'
name|'shutdown_sockets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shutdown any listen sockets.\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'sock'
name|'in'
name|'self'
op|'.'
name|'port_pid_state'
op|'.'
name|'all_socks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'greenio'
op|'.'
name|'shutdown_safe'
op|'('
name|'sock'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_wsgi
dedent|''
dedent|''
dedent|''
name|'def'
name|'run_wsgi'
op|'('
name|'conf_path'
op|','
name|'app_section'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Runs the server according to some strategy.  The default strategy runs a\n    specified number of workers in pre-fork model.  The object-server (only)\n    may use a servers-per-port strategy if its config has a servers_per_port\n    setting with a value greater than zero.\n\n    :param conf_path: Path to paste.deploy style configuration file/directory\n    :param app_section: App name from conf file to load config from\n    :returns: 0 if successful, nonzero otherwise\n    """'
newline|'\n'
comment|'# Load configuration, Set logger and Load request processor'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'log_name'
op|')'
op|'='
name|'_initrp'
op|'('
name|'conf_path'
op|','
name|'app_section'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConfigFileError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
name|'e'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'servers_per_port'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'servers_per_port'"
op|','
string|"'0'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE: for now servers_per_port is object-server-only; future work could'
nl|'\n'
comment|'# be done to test and allow it to be used for account and container'
nl|'\n'
comment|'# servers, but that has not been done yet.'
nl|'\n'
name|'if'
name|'servers_per_port'
name|'and'
name|'app_section'
op|'=='
string|"'object-server'"
op|':'
newline|'\n'
indent|'        '
name|'strategy'
op|'='
name|'ServersPerPortStrategy'
op|'('
nl|'\n'
name|'conf'
op|','
name|'logger'
op|','
name|'servers_per_port'
op|'='
name|'servers_per_port'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'strategy'
op|'='
name|'WorkersStrategy'
op|'('
name|'conf'
op|','
name|'logger'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'error_msg'
op|'='
name|'strategy'
op|'.'
name|'bind_ports'
op|'('
op|')'
newline|'\n'
name|'if'
name|'error_msg'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'.'
name|'error'
op|'('
name|'error_msg'
op|')'
newline|'\n'
name|'print'
op|'('
name|'error_msg'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
comment|'# Ensure the configuration and application can be loaded before proceeding.'
nl|'\n'
dedent|''
name|'global_conf'
op|'='
op|'{'
string|"'log_name'"
op|':'
name|'log_name'
op|'}'
newline|'\n'
name|'if'
string|"'global_conf_callback'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'global_conf_callback'"
op|']'
op|'('
name|'conf'
op|','
name|'global_conf'
op|')'
newline|'\n'
dedent|''
name|'loadapp'
op|'('
name|'conf_path'
op|','
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
nl|'\n'
comment|'# set utils.FALLOCATE_RESERVE if desired'
nl|'\n'
name|'reserve'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'fallocate_reserve'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'if'
name|'reserve'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
name|'reserve'
newline|'\n'
comment|'# redirect errors to logger and close stdio'
nl|'\n'
dedent|''
name|'capture_stdio'
op|'('
name|'logger'
op|')'
newline|'\n'
nl|'\n'
name|'no_fork_sock'
op|'='
name|'strategy'
op|'.'
name|'no_fork_sock'
op|'('
op|')'
newline|'\n'
name|'if'
name|'no_fork_sock'
op|':'
newline|'\n'
indent|'        '
name|'run_server'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'no_fork_sock'
op|','
name|'global_conf'
op|'='
name|'global_conf'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|function|kill_children
dedent|''
name|'def'
name|'kill_children'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Kills the entire process group."""'
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'SIGTERM received'"
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGTERM'
op|','
name|'signal'
op|'.'
name|'SIG_IGN'
op|')'
newline|'\n'
name|'running'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
name|'os'
op|'.'
name|'killpg'
op|'('
number|'0'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
nl|'\n'
DECL|function|hup
dedent|''
name|'def'
name|'hup'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shuts down the server, but allows running requests to complete"""'
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'SIGHUP received'"
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGHUP'
op|','
name|'signal'
op|'.'
name|'SIG_IGN'
op|')'
newline|'\n'
name|'running'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'running'
op|'='
op|'['
name|'True'
op|']'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGTERM'
op|','
name|'kill_children'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGHUP'
op|','
name|'hup'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'running'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'sock'
op|','
name|'sock_info'
name|'in'
name|'strategy'
op|'.'
name|'new_worker_socks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'os'
op|'.'
name|'fork'
op|'('
op|')'
newline|'\n'
name|'if'
name|'pid'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGHUP'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGTERM'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
name|'strategy'
op|'.'
name|'post_fork_hook'
op|'('
op|')'
newline|'\n'
name|'run_server'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'sock'
op|')'
newline|'\n'
name|'strategy'
op|'.'
name|'log_sock_exit'
op|'('
name|'sock'
op|','
name|'sock_info'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'strategy'
op|'.'
name|'register_worker_start'
op|'('
name|'sock'
op|','
name|'sock_info'
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
comment|'# The strategy may need to pay attention to something in addition to'
nl|'\n'
comment|'# child process exits (like new ports showing up in a ring).'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# NOTE: a timeout value of None will just instantiate the Timeout'
nl|'\n'
comment|'# object and not actually schedule it, which is equivalent to no'
nl|'\n'
comment|'# timeout for the green_os.wait().'
nl|'\n'
dedent|''
dedent|''
name|'loop_timeout'
op|'='
name|'strategy'
op|'.'
name|'loop_timeout'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'Timeout'
op|'('
name|'loop_timeout'
op|','
name|'exception'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'pid'
op|','
name|'status'
op|'='
name|'green_os'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'WIFEXITED'
op|'('
name|'status'
op|')'
name|'or'
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'strategy'
op|'.'
name|'register_worker_exit'
op|'('
name|'pid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'err'
op|'.'
name|'errno'
name|'not'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EINTR'
op|','
name|'errno'
op|'.'
name|'ECHILD'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'User quit'"
op|')'
newline|'\n'
name|'running'
op|'['
number|'0'
op|']'
op|'='
name|'False'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'strategy'
op|'.'
name|'shutdown_sockets'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'Exited'"
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigFileError
dedent|''
name|'class'
name|'ConfigFileError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigFilePortError
dedent|''
name|'class'
name|'ConfigFilePortError'
op|'('
name|'ConfigFileError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_initrp
dedent|''
name|'def'
name|'_initrp'
op|'('
name|'conf_path'
op|','
name|'app_section'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'appconfig'
op|'('
name|'conf_path'
op|','
name|'name'
op|'='
name|'app_section'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ConfigFileError'
op|'('
string|'"Error trying to load config from %s: %s"'
op|'%'
nl|'\n'
op|'('
name|'conf_path'
op|','
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'validate_configuration'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# pre-configure logger'
nl|'\n'
name|'log_name'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|','
name|'app_section'
op|')'
newline|'\n'
name|'if'
string|"'logger'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'logger'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'get_logger'
op|'('
name|'conf'
op|','
name|'log_name'
op|','
nl|'\n'
name|'log_to_console'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'verbose'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'log_route'
op|'='
string|"'wsgi'"
op|')'
newline|'\n'
nl|'\n'
comment|'# disable fallocate if desired'
nl|'\n'
dedent|''
name|'if'
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'disable_fallocate'"
op|','
string|"'no'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disable_fallocate'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'monkey_patch_mimetools'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'log_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|init_request_processor
dedent|''
name|'def'
name|'init_request_processor'
op|'('
name|'conf_path'
op|','
name|'app_section'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Loads common settings from conf\n    Sets the logger\n    Loads the request processor\n\n    :param conf_path: Path to paste.deploy style configuration file/directory\n    :param app_section: App name from conf file to load config from\n    :returns: the loaded application entry point\n    :raises ConfigFileError: Exception is raised for config file error\n    """'
newline|'\n'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'log_name'
op|')'
op|'='
name|'_initrp'
op|'('
name|'conf_path'
op|','
name|'app_section'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'app'
op|'='
name|'loadapp'
op|'('
name|'conf_path'
op|','
name|'global_conf'
op|'='
op|'{'
string|"'log_name'"
op|':'
name|'log_name'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'('
name|'app'
op|','
name|'conf'
op|','
name|'logger'
op|','
name|'log_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WSGIContext
dedent|''
name|'class'
name|'WSGIContext'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class provides a means to provide context (scope) for a middleware\n    filter to have access to the wsgi start_response results like the request\n    status and headers.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wsgi_app'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'wsgi_app'
newline|'\n'
nl|'\n'
DECL|member|_start_response
dedent|''
name|'def'
name|'_start_response'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Saves response info without sending it to the remote client.\n        Uses the same semantics as the usual WSGI start_response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_response_status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'_response_headers'
op|'='
name|'headers'
newline|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|'='
name|'exc_info'
newline|'\n'
nl|'\n'
DECL|member|_app_call
dedent|''
name|'def'
name|'_app_call'
op|'('
name|'self'
op|','
name|'env'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensures start_response has been called before returning.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_response_status'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_response_headers'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|'='
name|'None'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
comment|'# if start_response has been called, just return the iter'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_response_status'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'iter'
op|'('
name|'resp'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'first_chunk'
op|'='
name|'next'
op|'('
name|'resp'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'iter'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# We got a first_chunk'
newline|'\n'
indent|'            '
name|'return'
name|'CloseableChain'
op|'('
op|'['
name|'first_chunk'
op|']'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_status_int
dedent|''
dedent|''
name|'def'
name|'_get_status_int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the HTTP status int from the last called self._start_response\n        result.\n        """'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_response_header_value
dedent|''
name|'def'
name|'_response_header_value'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns str of value for given header key or None"'
newline|'\n'
name|'for'
name|'h_key'
op|','
name|'val'
name|'in'
name|'self'
op|'.'
name|'_response_headers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'h_key'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_env
dedent|''
dedent|''
name|'def'
name|'make_env'
op|'('
name|'env'
op|','
name|'method'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'agent'
op|'='
string|"'Swift'"
op|','
name|'query_string'
op|'='
name|'None'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a new fresh WSGI environment.\n\n    :param env: The WSGI environment to base the new environment on.\n    :param method: The new REQUEST_METHOD or None to use the\n                   original.\n    :param path: The new path_info or none to use the original. path\n                 should NOT be quoted. When building a url, a Webob\n                 Request (in accordance with wsgi spec) will quote\n                 env[\'PATH_INFO\'].  url += quote(environ[\'PATH_INFO\'])\n    :param query_string: The new query_string or none to use the original.\n                         When building a url, a Webob Request will append\n                         the query string directly to the url.\n                         url += \'?\' + env[\'QUERY_STRING\']\n    :param agent: The HTTP user agent to use; default \'Swift\'. You\n                  can put %(orig)s in the agent to have it replaced\n                  with the original env\'s HTTP_USER_AGENT, such as\n                  \'%(orig)s StaticWeb\'. You also set agent to None to\n                  use the original env\'s HTTP_USER_AGENT or \'\' to\n                  have no HTTP_USER_AGENT.\n    :param swift_source: Used to mark the request as originating out of\n                         middleware. Will be logged in proxy logs.\n    :returns: Fresh WSGI environment.\n    """'
newline|'\n'
name|'newenv'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
op|'('
string|"'HTTP_USER_AGENT'"
op|','
string|"'HTTP_HOST'"
op|','
string|"'PATH_INFO'"
op|','
nl|'\n'
string|"'QUERY_STRING'"
op|','
string|"'REMOTE_USER'"
op|','
string|"'REQUEST_METHOD'"
op|','
nl|'\n'
string|"'SCRIPT_NAME'"
op|','
string|"'SERVER_NAME'"
op|','
string|"'SERVER_PORT'"
op|','
nl|'\n'
string|"'HTTP_ORIGIN'"
op|','
string|"'HTTP_ACCESS_CONTROL_REQUEST_METHOD'"
op|','
nl|'\n'
string|"'SERVER_PROTOCOL'"
op|','
string|"'swift.cache'"
op|','
string|"'swift.source'"
op|','
nl|'\n'
string|"'swift.trans_id'"
op|','
string|"'swift.authorize_override'"
op|','
nl|'\n'
string|"'swift.authorize'"
op|','
string|"'HTTP_X_USER_ID'"
op|','
string|"'HTTP_X_PROJECT_ID'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'            '
name|'newenv'
op|'['
name|'name'
op|']'
op|'='
name|'env'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'REQUEST_METHOD'"
op|']'
op|'='
name|'method'
newline|'\n'
dedent|''
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
name|'path'
newline|'\n'
name|'newenv'
op|'['
string|"'SCRIPT_NAME'"
op|']'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'query_string'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'QUERY_STRING'"
op|']'
op|'='
name|'query_string'
newline|'\n'
dedent|''
name|'if'
name|'agent'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'HTTP_USER_AGENT'"
op|']'
op|'='
op|'('
nl|'\n'
name|'agent'
op|'%'
op|'{'
string|"'orig'"
op|':'
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_USER_AGENT'"
op|','
string|"''"
op|')'
op|'}'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'agent'
op|'=='
string|"''"
name|'and'
string|"'HTTP_USER_AGENT'"
name|'in'
name|'newenv'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'newenv'
op|'['
string|"'HTTP_USER_AGENT'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'swift_source'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'swift.source'"
op|']'
op|'='
name|'swift_source'
newline|'\n'
dedent|''
name|'newenv'
op|'['
string|"'wsgi.input'"
op|']'
op|'='
name|'BytesIO'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'SCRIPT_NAME'"
name|'not'
name|'in'
name|'newenv'
op|':'
newline|'\n'
indent|'        '
name|'newenv'
op|'['
string|"'SCRIPT_NAME'"
op|']'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'newenv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_subrequest
dedent|''
name|'def'
name|'make_subrequest'
op|'('
name|'env'
op|','
name|'method'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'body'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'agent'
op|'='
string|"'Swift'"
op|','
name|'swift_source'
op|'='
name|'None'
op|','
name|'make_env'
op|'='
name|'make_env'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Makes a new swob.Request based on the current env but with the\n    parameters specified.\n\n    :param env: The WSGI environment to base the new request on.\n    :param method: HTTP method of new request; default is from\n                   the original env.\n    :param path: HTTP path of new request; default is from the\n                 original env. path should be compatible with what you\n                 would send to Request.blank. path should be quoted and it\n                 can include a query string. for example:\n                 \'/a%20space?unicode_str%E8%AA%9E=y%20es\'\n    :param body: HTTP body of new request; empty by default.\n    :param headers: Extra HTTP headers of new request; None by\n                    default.\n    :param agent: The HTTP user agent to use; default \'Swift\'. You\n                  can put %(orig)s in the agent to have it replaced\n                  with the original env\'s HTTP_USER_AGENT, such as\n                  \'%(orig)s StaticWeb\'. You also set agent to None to\n                  use the original env\'s HTTP_USER_AGENT or \'\' to\n                  have no HTTP_USER_AGENT.\n    :param swift_source: Used to mark the request as originating out of\n                         middleware. Will be logged in proxy logs.\n    :param make_env: make_subrequest calls this make_env to help build the\n        swob.Request.\n    :returns: Fresh swob.Request object.\n    """'
newline|'\n'
name|'query_string'
op|'='
name|'None'
newline|'\n'
name|'path'
op|'='
name|'path'
name|'or'
string|"''"
newline|'\n'
name|'if'
name|'path'
name|'and'
string|"'?'"
name|'in'
name|'path'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|','
name|'query_string'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
string|"'?'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'newenv'
op|'='
name|'make_env'
op|'('
name|'env'
op|','
name|'method'
op|','
name|'path'
op|'='
name|'unquote'
op|'('
name|'path'
op|')'
op|','
name|'agent'
op|'='
name|'agent'
op|','
nl|'\n'
name|'query_string'
op|'='
name|'query_string'
op|','
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'body'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Request'
op|'.'
name|'blank'
op|'('
name|'path'
op|','
name|'environ'
op|'='
name|'newenv'
op|','
name|'body'
op|'='
name|'body'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Request'
op|'.'
name|'blank'
op|'('
name|'path'
op|','
name|'environ'
op|'='
name|'newenv'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_pre_authed_env
dedent|''
dedent|''
name|'def'
name|'make_pre_authed_env'
op|'('
name|'env'
op|','
name|'method'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'agent'
op|'='
string|"'Swift'"
op|','
nl|'\n'
name|'query_string'
op|'='
name|'None'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Same as :py:func:`make_env` but with preauthorization."""'
newline|'\n'
name|'newenv'
op|'='
name|'make_env'
op|'('
nl|'\n'
name|'env'
op|','
name|'method'
op|'='
name|'method'
op|','
name|'path'
op|'='
name|'path'
op|','
name|'agent'
op|'='
name|'agent'
op|','
name|'query_string'
op|'='
name|'query_string'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'newenv'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'lambda'
name|'req'
op|':'
name|'None'
newline|'\n'
name|'newenv'
op|'['
string|"'swift.authorize_override'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'newenv'
op|'['
string|"'REMOTE_USER'"
op|']'
op|'='
string|"'.wsgi.pre_authed'"
newline|'\n'
name|'return'
name|'newenv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_pre_authed_request
dedent|''
name|'def'
name|'make_pre_authed_request'
op|'('
name|'env'
op|','
name|'method'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'body'
op|'='
name|'None'
op|','
nl|'\n'
name|'headers'
op|'='
name|'None'
op|','
name|'agent'
op|'='
string|"'Swift'"
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Same as :py:func:`make_subrequest` but with preauthorization."""'
newline|'\n'
name|'return'
name|'make_subrequest'
op|'('
nl|'\n'
name|'env'
op|','
name|'method'
op|'='
name|'method'
op|','
name|'path'
op|'='
name|'path'
op|','
name|'body'
op|'='
name|'body'
op|','
name|'headers'
op|'='
name|'headers'
op|','
name|'agent'
op|'='
name|'agent'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|','
name|'make_env'
op|'='
name|'make_pre_authed_env'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
