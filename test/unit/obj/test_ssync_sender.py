begin_unit
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'exceptions'
op|','
name|'utils'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
name|'POLICIES'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'DiskFileNotExist'
op|','
name|'DiskFileError'
op|','
name|'DiskFileDeleted'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'Timestamp'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
name|'import'
name|'ssync_sender'
op|','
name|'diskfile'
op|','
name|'server'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
op|'.'
name|'reconstructor'
name|'import'
name|'RebuildingECDiskFileStream'
newline|'\n'
nl|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
name|'import'
name|'debug_logger'
op|','
name|'patch_policies'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeReplicator
name|'class'
name|'FakeReplicator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'testdir'
op|','
name|'policy'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'test-ssync-sender'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn_timeout'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'node_timeout'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'http_timeout'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'network_chunk_size'
op|'='
number|'65536'
newline|'\n'
name|'self'
op|'.'
name|'disk_chunk_size'
op|'='
number|'4096'
newline|'\n'
name|'conf'
op|'='
op|'{'
nl|'\n'
string|"'devices'"
op|':'
name|'testdir'
op|','
nl|'\n'
string|"'mount_check'"
op|':'
string|"'false'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
name|'if'
name|'policy'
name|'is'
name|'None'
name|'else'
name|'policy'
newline|'\n'
name|'self'
op|'.'
name|'_diskfile_router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_diskfile_mgr'
op|'='
name|'self'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NullBufferedHTTPConnection
dedent|''
dedent|''
name|'class'
name|'NullBufferedHTTPConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|putrequest
dedent|''
name|'def'
name|'putrequest'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|putheader
dedent|''
name|'def'
name|'putheader'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|endheaders
dedent|''
name|'def'
name|'endheaders'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|getresponse
dedent|''
name|'def'
name|'getresponse'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResponse
dedent|''
dedent|''
name|'class'
name|'FakeResponse'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chunk_body'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'status'
op|'='
number|'200'
newline|'\n'
name|'self'
op|'.'
name|'close_called'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'chunk_body'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
nl|'\n'
string|"'%x\\r\\n%s\\r\\n0\\r\\n\\r\\n'"
op|'%'
op|'('
name|'len'
op|'('
name|'chunk_body'
op|')'
op|','
name|'chunk_body'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'close_called'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeConnection
dedent|''
dedent|''
name|'class'
name|'FakeConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sent'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sent'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseTestSender
dedent|''
dedent|''
name|'class'
name|'BaseTestSender'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'tmp_test_ssync_sender'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'dev'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'daemon'
op|'='
name|'FakeReplicator'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
name|'ignore_errors'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_open_diskfile
dedent|''
name|'def'
name|'_make_open_diskfile'
op|'('
name|'self'
op|','
name|'device'
op|'='
string|"'dev'"
op|','
name|'partition'
op|'='
string|"'9'"
op|','
nl|'\n'
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
name|'obj'
op|'='
string|"'o'"
op|','
name|'body'
op|'='
string|"'test'"
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'None'
op|','
name|'policy'
op|'='
name|'None'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|','
name|'timestamp'
op|'='
name|'None'
op|','
name|'df_mgr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'POLICIES'
op|'.'
name|'legacy'
newline|'\n'
name|'object_parts'
op|'='
name|'account'
op|','
name|'container'
op|','
name|'obj'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
name|'if'
name|'timestamp'
name|'is'
name|'None'
name|'else'
name|'timestamp'
newline|'\n'
name|'if'
name|'df_mgr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'device'
op|','
name|'partition'
op|','
op|'*'
name|'object_parts'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'content_length'
op|'='
name|'len'
op|'('
name|'body'
op|')'
newline|'\n'
name|'etag'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'write'
op|'('
name|'body'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'str'
op|'('
name|'content_length'
op|')'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'etag'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'extra_metadata'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'.'
name|'update'
op|'('
name|'extra_metadata'
op|')'
newline|'\n'
dedent|''
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'return'
name|'df'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
op|')'
newline|'\n'
DECL|class|TestSender
name|'class'
name|'TestSender'
op|'('
name|'BaseTestSender'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_call_catches_MessageTimeout
indent|'    '
name|'def'
name|'test_call_catches_MessageTimeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|connect
indent|'        '
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|'('
number|'1'
op|','
string|"'test connect'"
op|')'
newline|'\n'
comment|"# Cancels Eventlet's raising of this since we're about to do it."
nl|'\n'
name|'exc'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exc'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ssync_sender'
op|'.'
name|'Sender'
op|','
string|"'connect'"
op|','
name|'connect'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'error_lines'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.2.3.4:5678/sda1/9 1 second: test connect'"
op|','
nl|'\n'
name|'error_lines'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_catches_ReplicationException
dedent|''
name|'def'
name|'test_call_catches_ReplicationException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|connect
indent|'        '
name|'def'
name|'connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exceptions'
op|'.'
name|'ReplicationException'
op|'('
string|"'test connect'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ssync_sender'
op|'.'
name|'Sender'
op|','
string|"'connect'"
op|','
name|'connect'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'error_lines'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.2.3.4:5678/sda1/9 test connect'"
op|','
nl|'\n'
name|'error_lines'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_catches_other_exceptions
dedent|''
name|'def'
name|'test_call_catches_other_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
string|"'cause exception'"
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'1.2.3.4:5678/sda1/9 EXCEPTION in replication.Sender:'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_catches_exception_handling_exception
dedent|''
dedent|''
name|'def'
name|'test_call_catches_exception_handling_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
name|'node'
op|'='
name|'None'
comment|'# Will cause inside exception handler to fail'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
string|"'cause exception'"
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'EXCEPTION in replication.Sender'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_calls_others
dedent|''
dedent|''
name|'def'
name|'test_call_calls_others'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_calls_others_returns_failure
dedent|''
name|'def'
name|'test_call_calls_others_returns_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'failures'
op|'='
number|'1'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connect
dedent|''
name|'def'
name|'test_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|','
name|'index'
op|'='
number|'0'
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
nl|'\n'
string|"'swift.obj.ssync_sender.bufferedhttp.BufferedHTTPConnection'"
nl|'\n'
op|')'
name|'as'
name|'mock_conn_class'
op|':'
newline|'\n'
indent|'            '
name|'mock_conn'
op|'='
name|'mock_conn_class'
op|'.'
name|'return_value'
newline|'\n'
name|'mock_resp'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'mock_resp'
op|'.'
name|'status'
op|'='
number|'200'
newline|'\n'
name|'mock_conn'
op|'.'
name|'getresponse'
op|'.'
name|'return_value'
op|'='
name|'mock_resp'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'mock_conn_class'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'1.2.3.4:5678'"
op|')'
newline|'\n'
name|'expectations'
op|'='
op|'{'
nl|'\n'
string|"'putrequest'"
op|':'
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'SSYNC'"
op|','
string|"'/sda1/9'"
op|')'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'putheader'"
op|':'
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'Transfer-Encoding'"
op|','
string|"'chunked'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'X-Backend-Storage-Policy-Index'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'X-Backend-Ssync-Frag-Index'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'X-Backend-Ssync-Node-Index'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'endheaders'"
op|':'
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'method_name'
op|','
name|'expected_calls'
name|'in'
name|'expectations'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_method'
op|'='
name|'getattr'
op|'('
name|'mock_conn'
op|','
name|'method_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected_calls'
op|','
name|'mock_method'
op|'.'
name|'mock_calls'
op|','
nl|'\n'
string|'\'connection method "%s" got %r not %r\''
op|'%'
op|'('
nl|'\n'
name|'method_name'
op|','
name|'mock_method'
op|'.'
name|'mock_calls'
op|','
nl|'\n'
name|'expected_calls'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call
dedent|''
dedent|''
name|'def'
name|'test_call'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|patch_sender
indent|'        '
name|'def'
name|'patch_sender'
op|'('
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'missing_check'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'available_map'
op|'='
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|','
nl|'\n'
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0def'"
op|','
nl|'\n'
string|"'1380144472.22222'"
op|')'
op|','
nl|'\n'
op|'('
string|"'9d41d8cd98f00b204e9800998ecf1def'"
op|','
nl|'\n'
string|"'1380144474.44444'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# no suffixes -> no work done'
nl|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
op|']'
op|','
name|'remote_check_objs'
op|'='
name|'None'
op|')'
newline|'\n'
name|'patch_sender'
op|'('
name|'sender'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'available_map'
op|'='
name|'available_map'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'candidates'
op|')'
newline|'\n'
nl|'\n'
comment|'# all objs in sync'
nl|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
string|"'ignored'"
op|']'
op|','
name|'remote_check_objs'
op|'='
name|'None'
op|')'
newline|'\n'
name|'patch_sender'
op|'('
name|'sender'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'available_map'
op|'='
name|'available_map'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'available_map'
op|','
name|'candidates'
op|')'
newline|'\n'
nl|'\n'
comment|"# one obj not in sync, sync'ing faked, all objs should be in return set"
nl|'\n'
name|'wanted'
op|'='
string|"'9d41d8cd98f00b204e9800998ecf0def'"
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
string|"'ignored'"
op|']'
op|','
nl|'\n'
name|'remote_check_objs'
op|'='
name|'None'
op|')'
newline|'\n'
name|'patch_sender'
op|'('
name|'sender'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'wanted'
op|']'
newline|'\n'
name|'sender'
op|'.'
name|'available_map'
op|'='
name|'available_map'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'available_map'
op|','
name|'candidates'
op|')'
newline|'\n'
nl|'\n'
comment|"# one obj not in sync, remote check only so that obj is not sync'd"
nl|'\n'
comment|'# and should not be in the return set'
nl|'\n'
name|'wanted'
op|'='
string|"'9d41d8cd98f00b204e9800998ecf0def'"
newline|'\n'
name|'remote_check_objs'
op|'='
name|'set'
op|'('
name|'available_map'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
string|"'ignored'"
op|']'
op|','
nl|'\n'
name|'remote_check_objs'
op|'='
name|'remote_check_objs'
op|')'
newline|'\n'
name|'patch_sender'
op|'('
name|'sender'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'wanted'
op|']'
newline|'\n'
name|'sender'
op|'.'
name|'available_map'
op|'='
name|'available_map'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'expected_map'
op|'='
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|','
nl|'\n'
op|'('
string|"'9d41d8cd98f00b204e9800998ecf1def'"
op|','
nl|'\n'
string|"'1380144474.44444'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_map'
op|','
name|'candidates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_and_missing_check
dedent|''
name|'def'
name|'test_call_and_missing_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
name|'and'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'candidates'
op|','
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'failures'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_and_missing_check_with_obj_list
dedent|''
name|'def'
name|'test_call_and_missing_check_with_obj_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
name|'and'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'None'
op|','
name|'job'
op|','
op|'['
string|"'abc'"
op|']'
op|','
nl|'\n'
op|'['
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'candidates'
op|','
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'failures'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_call_and_missing_check_with_obj_list_but_required
dedent|''
name|'def'
name|'test_call_and_missing_check_with_obj_list_but_required'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
name|'and'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'None'
op|','
name|'job'
op|','
op|'['
string|"'abc'"
op|']'
op|','
nl|'\n'
op|'['
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connect_send_timeout
dedent|''
name|'def'
name|'test_connect_send_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'conn_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|putrequest
name|'def'
name|'putrequest'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'ssync_sender'
op|'.'
name|'bufferedhttp'
op|'.'
name|'BufferedHTTPConnection'
op|','
nl|'\n'
string|"'putrequest'"
op|','
name|'putrequest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'1.2.3.4:5678/sda1/9 0.01 seconds: connect send'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connect_receive_timeout
dedent|''
dedent|''
name|'def'
name|'test_connect_receive_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.02'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|','
name|'index'
op|'='
number|'0'
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
nl|'\n'
DECL|class|FakeBufferedHTTPConnection
name|'class'
name|'FakeBufferedHTTPConnection'
op|'('
name|'NullBufferedHTTPConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|getresponse
indent|'            '
name|'def'
name|'getresponse'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'ssync_sender'
op|'.'
name|'bufferedhttp'
op|','
string|"'BufferedHTTPConnection'"
op|','
nl|'\n'
name|'FakeBufferedHTTPConnection'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'1.2.3.4:5678/sda1/9 0.02 seconds: connect receive'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connect_bad_status
dedent|''
dedent|''
name|'def'
name|'test_connect_bad_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.02'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'replication_ip'
op|'='
string|"'1.2.3.4'"
op|','
name|'replication_port'
op|'='
number|'5678'
op|','
nl|'\n'
name|'device'
op|'='
string|"'sda1'"
op|','
name|'index'
op|'='
number|'0'
op|')'
newline|'\n'
name|'job'
op|'='
name|'dict'
op|'('
name|'partition'
op|'='
string|"'9'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeBufferedHTTPConnection
name|'class'
name|'FakeBufferedHTTPConnection'
op|'('
name|'NullBufferedHTTPConnection'
op|')'
op|':'
newline|'\n'
DECL|member|getresponse
indent|'            '
name|'def'
name|'getresponse'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'response'
op|'.'
name|'status'
op|'='
number|'503'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'missing_check_fn'
op|'='
string|"'swift.obj.ssync_sender.Sender.missing_check'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'missing_check_fn'
op|')'
name|'as'
name|'mock_missing_check'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'ssync_sender'
op|'.'
name|'bufferedhttp'
op|','
string|"'BufferedHTTPConnection'"
op|','
nl|'\n'
name|'FakeBufferedHTTPConnection'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
string|"'abc'"
op|']'
op|')'
newline|'\n'
name|'success'
op|','
name|'candidates'
op|'='
name|'self'
op|'.'
name|'sender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'success'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'candidates'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'1.2.3.4:5678/sda1/9 Expected status 200; got 503'"
op|')'
op|')'
newline|'\n'
comment|'# sanity check that Sender did not proceed to missing_check exchange'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_missing_check'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_newline_in_buffer
dedent|''
name|'def'
name|'test_readline_newline_in_buffer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response_buffer'
op|'='
string|"'Has a newline already.\\r\\nOkay.'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'Has a newline already.\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response_buffer'
op|','
string|"'Okay.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_buffer_exceeds_network_chunk_size_somehow
dedent|''
name|'def'
name|'test_readline_buffer_exceeds_network_chunk_size_somehow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'network_chunk_size'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response_buffer'
op|'='
string|"'1234567890'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response_buffer'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_at_start_of_chunk
dedent|''
name|'def'
name|'test_readline_at_start_of_chunk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'2\\r\\nx\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'x\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_chunk_with_extension
dedent|''
name|'def'
name|'test_readline_chunk_with_extension'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
nl|'\n'
string|"'2 ; chunk=extension\\r\\nx\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'x\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_broken_chunk
dedent|''
name|'def'
name|'test_readline_broken_chunk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'q\\r\\nx\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exceptions'
op|'.'
name|'ReplicationException'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'close_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_terminated_chunk
dedent|''
name|'def'
name|'test_readline_terminated_chunk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'b\\r\\nnot enough'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exceptions'
op|'.'
name|'ReplicationException'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'close_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_all
dedent|''
name|'def'
name|'test_readline_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'2\\r\\nx\\n\\r\\n0\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'x\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_all_trailing_not_newline_termed
dedent|''
name|'def'
name|'test_readline_all_trailing_not_newline_termed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'.'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
nl|'\n'
string|"'2\\r\\nx\\n\\r\\n3\\r\\n123\\r\\n0\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'x\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"'123'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_timeout
dedent|''
name|'def'
name|'test_missing_check_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'d'
op|':'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_has_empty_suffixes
dedent|''
name|'def'
name|'test_missing_check_has_empty_suffixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'!='
string|"'dev'"
name|'or'
name|'partition'
op|'!='
string|"'9'"
name|'or'
nl|'\n'
name|'policy'
op|'!='
name|'POLICIES'
op|'.'
name|'legacy'
name|'or'
nl|'\n'
name|'suffixes'
op|'!='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
comment|'# Just here to make this a generator'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_has_suffixes
dedent|''
name|'def'
name|'test_missing_check_has_suffixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/def/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0def'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0def'"
op|','
nl|'\n'
string|"'1380144472.22222'"
op|')'
newline|'\n'
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/def/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf1def'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf1def'"
op|','
nl|'\n'
string|"'1380144474.44444'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0abc 1380144470.00000\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0def 1380144472.22222\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf1def 1380144474.44444\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'candidates'
op|'='
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
string|"'1380144470.00000'"
op|')'
op|','
nl|'\n'
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0def'"
op|','
string|"'1380144472.22222'"
op|')'
op|','
nl|'\n'
op|'('
string|"'9d41d8cd98f00b204e9800998ecf1def'"
op|','
string|"'1380144474.44444'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
name|'dict'
op|'('
name|'candidates'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_far_end_disconnect
dedent|''
name|'def'
name|'test_missing_check_far_end_disconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
name|'chunk_body'
op|'='
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Early disconnect'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0abc 1380144470.00000\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
nl|'\n'
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_far_end_disconnect2
dedent|''
name|'def'
name|'test_missing_check_far_end_disconnect2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
string|"':MISSING_CHECK: START\\r\\n'"
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Early disconnect'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0abc 1380144470.00000\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
nl|'\n'
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_far_end_unexpected
dedent|''
name|'def'
name|'test_missing_check_far_end_unexpected'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
name|'chunk_body'
op|'='
string|"'OH HAI\\r\\n'"
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|'"Unexpected response: \'OH HAI\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0abc 1380144470.00000\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
nl|'\n'
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_send_list
dedent|''
name|'def'
name|'test_missing_check_send_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"'0123abc\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'17\\r\\n:MISSING_CHECK: START\\r\\n\\r\\n'"
nl|'\n'
string|"'33\\r\\n9d41d8cd98f00b204e9800998ecf0abc 1380144470.00000\\r\\n\\r\\n'"
nl|'\n'
string|"'15\\r\\n:MISSING_CHECK: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|','
op|'['
string|"'0123abc'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
nl|'\n'
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_check_extra_line_parts
dedent|''
name|'def'
name|'test_missing_check_extra_line_parts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# check that sender tolerates extra parts in missing check'
nl|'\n'
comment|'# line responses to allow for protocol upgrades'
nl|'\n'
DECL|function|yield_hashes
indent|'        '
name|'def'
name|'yield_hashes'
op|'('
name|'device'
op|','
name|'partition'
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'=='
string|"'dev'"
name|'and'
name|'partition'
op|'=='
string|"'9'"
name|'and'
nl|'\n'
name|'policy'
op|'=='
name|'POLICIES'
op|'.'
name|'legacy'
name|'and'
nl|'\n'
name|'suffixes'
op|'=='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
nl|'\n'
string|"'/srv/node/dev/objects/9/abc/'"
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'No match for %r %r %r %r'"
op|'%'
op|'('
name|'device'
op|','
name|'partition'
op|','
nl|'\n'
name|'policy'
op|','
name|'suffixes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'dev'"
op|','
nl|'\n'
string|"'partition'"
op|':'
string|"'9'"
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':MISSING_CHECK: START\\r\\n'"
nl|'\n'
string|"'0123abc extra response parts\\r\\n'"
nl|'\n'
string|"':MISSING_CHECK: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'='
name|'yield_hashes'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'missing_check'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|','
op|'['
string|"'0123abc'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'available_map'
op|','
nl|'\n'
name|'dict'
op|'('
op|'['
op|'('
string|"'9d41d8cd98f00b204e9800998ecf0abc'"
op|','
nl|'\n'
string|"'1380144470.00000'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_timeout
dedent|''
name|'def'
name|'test_updates_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'d'
op|':'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_empty_send_list
dedent|''
name|'def'
name|'test_updates_empty_send_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_unexpected_response_lines1
dedent|''
name|'def'
name|'test_updates_unexpected_response_lines1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"'abc\\r\\n'"
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|'"Unexpected response: \'abc\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_unexpected_response_lines2
dedent|''
name|'def'
name|'test_updates_unexpected_response_lines2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"'abc\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|'"Unexpected response: \'abc\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_is_deleted
dedent|''
name|'def'
name|'test_updates_is_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
string|"'dev'"
newline|'\n'
name|'part'
op|'='
string|"'9'"
newline|'\n'
name|'object_parts'
op|'='
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
name|'device'
op|','
name|'part'
op|','
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'object_hash'
op|'='
name|'utils'
op|'.'
name|'hash_path'
op|'('
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'delete_timestamp'
op|'='
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'delete_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'part'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'node'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'object_hash'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'/a/c/o'"
op|','
name|'delete_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'.'
name|'mock_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|"# note that the delete line isn't actually sent since we mock"
nl|'\n'
comment|'# send_delete; send_delete is tested separately.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_send_delete
dedent|''
name|'def'
name|'test_update_send_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
string|"'dev'"
newline|'\n'
name|'part'
op|'='
string|"'9'"
newline|'\n'
name|'object_parts'
op|'='
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
name|'device'
op|','
name|'part'
op|','
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'object_hash'
op|'='
name|'utils'
op|'.'
name|'hash_path'
op|'('
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'delete_timestamp'
op|'='
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'delete_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'part'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'node'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'object_hash'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'30\\r\\n'"
nl|'\n'
string|"'DELETE /a/c/o\\r\\n'"
nl|'\n'
string|"'X-Timestamp: %s\\r\\n\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
nl|'\n'
op|'%'
name|'delete_timestamp'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_put
dedent|''
name|'def'
name|'test_updates_put'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
string|"'dev'"
newline|'\n'
name|'part'
op|'='
string|"'9'"
newline|'\n'
name|'object_parts'
op|'='
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
name|'device'
op|','
name|'part'
op|','
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'object_hash'
op|'='
name|'utils'
op|'.'
name|'hash_path'
op|'('
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'part'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'legacy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'node'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'object_hash'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'.'
name|'mock_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'.'
name|'mock_calls'
op|')'
op|')'
newline|'\n'
name|'args'
op|','
name|'_kwargs'
op|'='
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'.'
name|'call_args'
newline|'\n'
name|'path'
op|','
name|'df'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'path'
op|','
string|"'/a/c/o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'df'
op|','
name|'diskfile'
op|'.'
name|'DiskFile'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# note that the put line isn't actually sent since we mock send_put;"
nl|'\n'
comment|'# send_put is tested separately.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_storage_policy_index
dedent|''
name|'def'
name|'test_updates_storage_policy_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
string|"'dev'"
newline|'\n'
name|'part'
op|'='
string|"'9'"
newline|'\n'
name|'object_parts'
op|'='
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
name|'device'
op|','
name|'part'
op|','
op|'*'
name|'object_parts'
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'object_hash'
op|'='
name|'utils'
op|'.'
name|'hash_path'
op|'('
op|'*'
name|'object_parts'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'part'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'node'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
name|'object_hash'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
name|'args'
op|','
name|'_kwargs'
op|'='
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'.'
name|'call_args'
newline|'\n'
name|'path'
op|','
name|'df'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'path'
op|','
string|"'/a/c/o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'df'
op|','
name|'diskfile'
op|'.'
name|'DiskFile'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'dev/objects/9/'"
op|','
nl|'\n'
name|'object_hash'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|','
name|'object_hash'
op|')'
op|','
nl|'\n'
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_timeout_start
dedent|''
name|'def'
name|'test_updates_read_response_timeout_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'orig_readline'
op|'='
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
newline|'\n'
nl|'\n'
DECL|function|delayed_readline
name|'def'
name|'delayed_readline'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'return'
name|'orig_readline'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'='
name|'delayed_readline'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'http_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_disconnect_start
dedent|''
name|'def'
name|'test_updates_read_response_disconnect_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
name|'chunk_body'
op|'='
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Early disconnect'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_unexp_start
dedent|''
name|'def'
name|'test_updates_read_response_unexp_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"'anything else\\r\\n'"
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|'"Unexpected response: \'anything else\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_timeout_end
dedent|''
name|'def'
name|'test_updates_read_response_timeout_end'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'orig_readline'
op|'='
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
newline|'\n'
nl|'\n'
DECL|function|delayed_readline
name|'def'
name|'delayed_readline'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'='
name|'orig_readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'rv'
op|'=='
string|"':UPDATES: END\\r\\n'"
op|':'
newline|'\n'
indent|'                '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'readline'
op|'='
name|'delayed_readline'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'http_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exceptions'
op|'.'
name|'MessageTimeout'
op|','
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_disconnect_end
dedent|''
name|'def'
name|'test_updates_read_response_disconnect_end'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Early disconnect'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates_read_response_unexp_end
dedent|''
name|'def'
name|'test_updates_read_response_unexp_end'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'response'
op|'='
name|'FakeResponse'
op|'('
nl|'\n'
name|'chunk_body'
op|'='
op|'('
nl|'\n'
string|"':UPDATES: START\\r\\n'"
nl|'\n'
string|"'anything else\\r\\n'"
nl|'\n'
string|"':UPDATES: END\\r\\n'"
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'updates'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'ReplicationException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|'"Unexpected response: \'anything else\'"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'11\\r\\n:UPDATES: START\\r\\n\\r\\n'"
nl|'\n'
string|"'f\\r\\n:UPDATES: END\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_delete_timeout
dedent|''
name|'def'
name|'test_send_delete_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'d'
op|':'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'('
string|"'/a/c/o'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'Timestamp'
op|'('
string|"'1381679759.90941'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'MessageTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'0.01 seconds: send_delete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_delete
dedent|''
name|'def'
name|'test_send_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_delete'
op|'('
string|"'/a/c/o'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'Timestamp'
op|'('
string|"'1381679759.90941'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'30\\r\\n'"
nl|'\n'
string|"'DELETE /a/c/o\\r\\n'"
nl|'\n'
string|"'X-Timestamp: 1381679759.90941\\r\\n'"
nl|'\n'
string|"'\\r\\n\\r\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_put_initial_timeout
dedent|''
name|'def'
name|'test_send_put_initial_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'_disk_chunk_size'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'d'
op|':'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'('
string|"'/a/c/o'"
op|','
name|'df'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'MessageTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'0.01 seconds: send_put'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_put_chunk_timeout
dedent|''
name|'def'
name|'test_send_put_chunk_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
nl|'\n'
name|'one_shot'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
nl|'\n'
DECL|function|mock_send
name|'def'
name|'mock_send'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'one_shot'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'mock_send'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'('
string|"'/a/c/o'"
op|','
name|'df'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exceptions'
op|'.'
name|'MessageTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'0.01 seconds: send_put chunk'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_put
dedent|''
name|'def'
name|'test_send_put'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'body'
op|'='
string|"'test'"
newline|'\n'
name|'extra_metadata'
op|'='
op|'{'
string|"'Some-Other-Header'"
op|':'
string|"'value'"
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
name|'body'
op|'='
name|'body'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'extra_metadata'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'body'"
op|']'
op|'='
name|'body'
newline|'\n'
name|'expected'
op|'['
string|"'chunk_size'"
op|']'
op|'='
name|'len'
op|'('
name|'body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'send_put'
op|'('
string|"'/a/c/o'"
op|','
name|'df'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
nl|'\n'
string|"'82\\r\\n'"
nl|'\n'
string|"'PUT /a/c/o\\r\\n'"
nl|'\n'
string|"'Content-Length: %(Content-Length)s\\r\\n'"
nl|'\n'
string|"'ETag: %(ETag)s\\r\\n'"
nl|'\n'
string|"'Some-Other-Header: value\\r\\n'"
nl|'\n'
string|"'X-Timestamp: %(X-Timestamp)s\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'\\r\\n'"
nl|'\n'
string|"'%(chunk_size)s\\r\\n'"
nl|'\n'
string|"'%(body)s\\r\\n'"
op|'%'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disconnect_timeout
dedent|''
name|'def'
name|'test_disconnect_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'lambda'
name|'d'
op|':'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'daemon'
op|'.'
name|'node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'closed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disconnect
dedent|''
name|'def'
name|'test_disconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'='
name|'FakeConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'sent'
op|')'
op|','
string|"'0\\r\\n\\r\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'closed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBaseSsync
dedent|''
dedent|''
name|'class'
name|'TestBaseSsync'
op|'('
name|'BaseTestSender'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Provides a framework to test end to end interactions between sender and\n    receiver. The basis for each test is actual diskfile state on either side.\n    The connection between sender and receiver is wrapped to capture ssync\n    traffic for subsequent verification of the protocol. Assertions are made\n    about the final state of the sender and receiver diskfiles.\n    """'
newline|'\n'
nl|'\n'
DECL|member|make_connect_wrapper
name|'def'
name|'make_connect_wrapper'
op|'('
name|'self'
op|','
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make a wrapper function for the ssync_sender.Sender.connect() method\n        that will in turn wrap the HTTConnection.send() and the\n        Sender.readline() so that ssync protocol messages can be captured.\n        """'
newline|'\n'
name|'orig_connect'
op|'='
name|'sender'
op|'.'
name|'connect'
newline|'\n'
name|'trace'
op|'='
name|'dict'
op|'('
name|'messages'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|add_trace
name|'def'
name|'add_trace'
op|'('
name|'type'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
comment|'# record a protocol event for later analysis'
nl|'\n'
indent|'            '
name|'if'
name|'msg'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'trace'
op|'['
string|"'messages'"
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'type'
op|','
name|'msg'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|make_send_wrapper
dedent|''
dedent|''
name|'def'
name|'make_send_wrapper'
op|'('
name|'send'
op|')'
op|':'
newline|'\n'
DECL|function|wrapped_send
indent|'            '
name|'def'
name|'wrapped_send'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'_msg'
op|'='
name|'msg'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'_msg'
op|'='
name|'_msg'
op|'.'
name|'rsplit'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'add_trace'
op|'('
string|"'tx'"
op|','
name|'_msg'
op|')'
newline|'\n'
name|'send'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped_send'
newline|'\n'
nl|'\n'
DECL|function|make_readline_wrapper
dedent|''
name|'def'
name|'make_readline_wrapper'
op|'('
name|'readline'
op|')'
op|':'
newline|'\n'
DECL|function|wrapped_readline
indent|'            '
name|'def'
name|'wrapped_readline'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'readline'
op|'('
op|')'
newline|'\n'
name|'add_trace'
op|'('
string|"'rx'"
op|','
name|'data'
op|')'
newline|'\n'
name|'bytes_read'
op|'='
name|'trace'
op|'.'
name|'setdefault'
op|'('
string|"'readline_bytes'"
op|','
number|'0'
op|')'
newline|'\n'
name|'trace'
op|'['
string|"'readline_bytes'"
op|']'
op|'='
name|'bytes_read'
op|'+'
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
dedent|''
name|'return'
name|'wrapped_readline'
newline|'\n'
nl|'\n'
DECL|function|wrapped_connect
dedent|''
name|'def'
name|'wrapped_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'orig_connect'
op|'('
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'='
name|'make_send_wrapper'
op|'('
nl|'\n'
name|'sender'
op|'.'
name|'connection'
op|'.'
name|'send'
op|')'
newline|'\n'
name|'sender'
op|'.'
name|'readline'
op|'='
name|'make_readline_wrapper'
op|'('
name|'sender'
op|'.'
name|'readline'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped_connect'
op|','
name|'trace'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'device'
op|'='
string|"'dev'"
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
string|"'9'"
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
comment|'# sender side setup'
nl|'\n'
name|'self'
op|'.'
name|'tx_testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'tmp_test_ssync_sender'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tx_testdir'
op|','
name|'self'
op|'.'
name|'device'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'daemon'
op|'='
name|'FakeReplicator'
op|'('
name|'self'
op|'.'
name|'tx_testdir'
op|')'
newline|'\n'
nl|'\n'
comment|'# rx side setup'
nl|'\n'
name|'self'
op|'.'
name|'rx_testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'tmp_test_ssync_receiver'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'rx_testdir'
op|','
name|'self'
op|'.'
name|'device'
op|')'
op|')'
newline|'\n'
name|'conf'
op|'='
op|'{'
nl|'\n'
string|"'devices'"
op|':'
name|'self'
op|'.'
name|'rx_testdir'
op|','
nl|'\n'
string|"'mount_check'"
op|':'
string|"'false'"
op|','
nl|'\n'
string|"'replication_one_per_device'"
op|':'
string|"'false'"
op|','
nl|'\n'
string|"'log_requests'"
op|':'
string|"'false'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'rx_controller'
op|'='
name|'server'
op|'.'
name|'ObjectController'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
nl|'\n'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rx_ip'
op|'='
string|"'127.0.0.1'"
newline|'\n'
name|'sock'
op|'='
name|'eventlet'
op|'.'
name|'listen'
op|'('
op|'('
name|'self'
op|'.'
name|'rx_ip'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rx_server'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
nl|'\n'
name|'eventlet'
op|'.'
name|'wsgi'
op|'.'
name|'server'
op|','
name|'sock'
op|','
name|'self'
op|'.'
name|'rx_controller'
op|','
name|'utils'
op|'.'
name|'NullLogger'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rx_port'
op|'='
name|'sock'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'rx_node'
op|'='
op|'{'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'rx_ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'rx_port'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rx_server'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
name|'ignore_errors'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_ondisk_files
dedent|''
name|'def'
name|'_create_ondisk_files'
op|'('
name|'self'
op|','
name|'df_mgr'
op|','
name|'obj_name'
op|','
name|'policy'
op|','
name|'timestamp'
op|','
nl|'\n'
name|'frag_indexes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'frag_indexes'
op|'='
op|'['
name|'None'
op|']'
name|'if'
name|'frag_indexes'
name|'is'
name|'None'
name|'else'
name|'frag_indexes'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'plain/text'"
op|'}'
newline|'\n'
name|'diskfiles'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'frag_index'
name|'in'
name|'frag_indexes'
op|':'
newline|'\n'
indent|'            '
name|'object_data'
op|'='
string|"'/a/c/%s___%s'"
op|'%'
op|'('
name|'obj_name'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'if'
name|'frag_index'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
op|'='
name|'str'
op|'('
name|'frag_index'
op|')'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_make_open_diskfile'
op|'('
nl|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'device'
op|','
name|'partition'
op|'='
name|'self'
op|'.'
name|'partition'
op|','
name|'account'
op|'='
string|"'a'"
op|','
nl|'\n'
name|'container'
op|'='
string|"'c'"
op|','
name|'obj'
op|'='
name|'obj_name'
op|','
name|'body'
op|'='
name|'object_data'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'metadata'
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'frag_index'
op|','
name|'df_mgr'
op|'='
name|'df_mgr'
op|')'
newline|'\n'
comment|'# sanity checks'
nl|'\n'
name|'listing'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'listing'
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'listing'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'filename'
op|'.'
name|'startswith'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|')'
op|')'
newline|'\n'
dedent|''
name|'diskfiles'
op|'.'
name|'append'
op|'('
name|'df'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'diskfiles'
newline|'\n'
nl|'\n'
DECL|member|_open_tx_diskfile
dedent|''
name|'def'
name|'_open_tx_diskfile'
op|'('
name|'self'
op|','
name|'obj_name'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'device'
op|','
name|'self'
op|'.'
name|'partition'
op|','
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
name|'obj_name'
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'return'
name|'df'
newline|'\n'
nl|'\n'
DECL|member|_open_rx_diskfile
dedent|''
name|'def'
name|'_open_rx_diskfile'
op|'('
name|'self'
op|','
name|'obj_name'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'rx_controller'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'device'
op|','
name|'self'
op|'.'
name|'partition'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
name|'obj_name'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'return'
name|'df'
newline|'\n'
nl|'\n'
DECL|member|_verify_diskfile_sync
dedent|''
name|'def'
name|'_verify_diskfile_sync'
op|'('
name|'self'
op|','
name|'tx_df'
op|','
name|'rx_df'
op|','
name|'frag_index'
op|','
name|'same_etag'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|"# verify that diskfiles' metadata match"
nl|'\n'
comment|'# sanity check, they are not the same ondisk files!'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'tx_df'
op|'.'
name|'_datadir'
op|','
name|'rx_df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'rx_metadata'
op|'='
name|'dict'
op|'('
name|'rx_df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'tx_df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'=='
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
newline|'\n'
comment|'# if tx_df had a frag_index then rx_df should also have one'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'k'
name|'in'
name|'rx_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'frag_index'
op|','
name|'int'
op|'('
name|'rx_metadata'
op|'.'
name|'pop'
op|'('
name|'k'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'k'
op|'=='
string|"'ETag'"
name|'and'
name|'not'
name|'same_etag'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'v'
op|','
name|'rx_metadata'
op|'.'
name|'pop'
op|'('
name|'k'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'v'
op|','
name|'rx_metadata'
op|'.'
name|'pop'
op|'('
name|'k'
op|')'
op|','
name|'k'
op|')'
newline|'\n'
comment|'# ugh, ssync duplicates ETag with Etag so have to clear it out here'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'Etag'"
name|'in'
name|'rx_metadata'
op|':'
newline|'\n'
indent|'            '
name|'rx_metadata'
op|'.'
name|'pop'
op|'('
string|"'Etag'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rx_metadata'
op|')'
newline|'\n'
name|'expected_body'
op|'='
string|"'%s___%s'"
op|'%'
op|'('
name|'tx_df'
op|'.'
name|'_name'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'actual_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'chunk'
name|'for'
name|'chunk'
name|'in'
name|'rx_df'
op|'.'
name|'reader'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_body'
op|','
name|'actual_body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_analyze_trace
dedent|''
name|'def'
name|'_analyze_trace'
op|'('
name|'self'
op|','
name|'trace'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Parse protocol trace captured by fake connection, making some\n        assertions along the way, and return results  as a dict of form:\n        results = {\'tx_missing\': <list of messages>,\n                   \'rx_missing\': <list of messages>,\n                   \'tx_updates\': <list of subreqs>,\n                   \'rx_updates\': <list of messages>}\n\n        Each subreq is a dict with keys: \'method\', \'path\', \'headers\', \'body\'\n        """'
newline|'\n'
DECL|function|tx_missing
name|'def'
name|'tx_missing'
op|'('
name|'results'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'tx'"
op|','
name|'line'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'results'
op|'['
string|"'tx_missing'"
op|']'
op|'.'
name|'append'
op|'('
name|'line'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|rx_missing
dedent|''
name|'def'
name|'rx_missing'
op|'('
name|'results'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'rx'"
op|','
name|'line'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'line'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'['
string|"'rx_missing'"
op|']'
op|'.'
name|'append'
op|'('
name|'part'
op|')'
newline|'\n'
nl|'\n'
DECL|function|tx_updates
dedent|''
dedent|''
name|'def'
name|'tx_updates'
op|'('
name|'results'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'tx'"
op|','
name|'line'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'subrequests'
op|'='
name|'results'
op|'['
string|"'tx_updates'"
op|']'
newline|'\n'
name|'if'
name|'line'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
op|'('
string|"'PUT'"
op|','
string|"'DELETE'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'='
name|'line'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|')'
newline|'\n'
name|'method'
op|','
name|'path'
op|'='
name|'parts'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'subreq'
op|'='
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'path'"
op|':'
name|'path'
op|','
string|"'req'"
op|':'
name|'line'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'headers'"
op|':'
name|'parts'
op|'['
number|'1'
op|':'
op|']'
op|'}'
newline|'\n'
name|'subrequests'
op|'.'
name|'append'
op|'('
name|'subreq'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'subrequests'
op|')'
newline|'\n'
name|'body'
op|'='
op|'('
name|'subrequests'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|'.'
name|'setdefault'
op|'('
string|"'body'"
op|','
string|"''"
op|')'
newline|'\n'
name|'body'
op|'+='
name|'line'
op|'['
number|'1'
op|']'
newline|'\n'
name|'subrequests'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'body'"
op|']'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|function|rx_updates
dedent|''
dedent|''
name|'def'
name|'rx_updates'
op|'('
name|'results'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'rx'"
op|','
name|'line'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'results'
op|'.'
name|'setdefault'
op|'['
string|"'rx_updates'"
op|']'
op|'.'
name|'append'
op|'('
name|'line'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|unexpected
dedent|''
name|'def'
name|'unexpected'
op|'('
name|'results'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'setdefault'
op|'('
string|"'unexpected'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
comment|'# each trace line is a tuple of ([tx|rx], msg)'
nl|'\n'
dedent|''
name|'handshakes'
op|'='
name|'iter'
op|'('
op|'['
op|'('
op|'('
string|"'tx'"
op|','
string|"':MISSING_CHECK: START'"
op|')'
op|','
name|'tx_missing'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'tx'"
op|','
string|"':MISSING_CHECK: END'"
op|')'
op|','
name|'unexpected'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'rx'"
op|','
string|"':MISSING_CHECK: START'"
op|')'
op|','
name|'rx_missing'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'rx'"
op|','
string|"':MISSING_CHECK: END'"
op|')'
op|','
name|'unexpected'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'tx'"
op|','
string|"':UPDATES: START'"
op|')'
op|','
name|'tx_updates'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'tx'"
op|','
string|"':UPDATES: END'"
op|')'
op|','
name|'unexpected'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'rx'"
op|','
string|"':UPDATES: START'"
op|')'
op|','
name|'rx_updates'
op|')'
op|','
nl|'\n'
op|'('
op|'('
string|"'rx'"
op|','
string|"':UPDATES: END'"
op|')'
op|','
name|'unexpected'
op|')'
op|']'
op|')'
newline|'\n'
name|'expect_handshake'
op|'='
name|'next'
op|'('
name|'handshakes'
op|')'
newline|'\n'
name|'phases'
op|'='
op|'('
string|"'tx_missing'"
op|','
string|"'rx_missing'"
op|','
string|"'tx_updates'"
op|','
string|"'rx_updates'"
op|')'
newline|'\n'
name|'results'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|','
op|'['
op|']'
op|')'
name|'for'
name|'k'
name|'in'
name|'phases'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'unexpected'
newline|'\n'
name|'lines'
op|'='
name|'list'
op|'('
name|'trace'
op|'.'
name|'get'
op|'('
string|"'messages'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'lines'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'while'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'lines'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'=='
name|'expect_handshake'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'='
name|'expect_handshake'
op|'['
number|'1'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'expect_handshake'
op|'='
name|'next'
op|'('
name|'handshakes'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
comment|'# should be the last line'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'lines'
op|','
string|"'Unexpected trailing lines %s'"
op|'%'
name|'lines'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'handler'
op|'('
name|'results'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# check all handshakes occurred'
nl|'\n'
indent|'            '
name|'missed'
op|'='
name|'next'
op|'('
name|'handshakes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Handshake %s not found'"
op|'%'
name|'str'
op|'('
name|'missed'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# check no message outside of a phase'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'.'
name|'get'
op|'('
string|"'unexpected'"
op|')'
op|','
nl|'\n'
string|"'Message outside of a phase: %s'"
op|'%'
name|'results'
op|'.'
name|'get'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|_verify_ondisk_files
dedent|''
name|'def'
name|'_verify_ondisk_files'
op|'('
name|'self'
op|','
name|'tx_objs'
op|','
name|'policy'
op|','
name|'tx_frag_index'
op|'='
name|'None'
op|','
nl|'\n'
name|'rx_frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify tx and rx files that should be in sync.\n        :param tx_objs: sender diskfiles\n        :param policy: storage policy instance\n        :param tx_frag_index: the fragment index of tx diskfiles that should\n                              have been used as a source for sync\'ing\n        :param rx_frag_index: the fragment index of expected rx diskfiles\n        """'
newline|'\n'
name|'for'
name|'o_name'
op|','
name|'diskfiles'
name|'in'
name|'tx_objs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'tx_df'
name|'in'
name|'diskfiles'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'tx_frag_index'
name|'is'
name|'None'
name|'or'
name|'tx_df'
op|'.'
name|'_frag_index'
op|'=='
name|'tx_frag_index'
op|':'
newline|'\n'
comment|"# this diskfile should have been sync'd,"
nl|'\n'
comment|'# check rx file is ok'
nl|'\n'
indent|'                    '
name|'rx_df'
op|'='
name|'self'
op|'.'
name|'_open_rx_diskfile'
op|'('
nl|'\n'
name|'o_name'
op|','
name|'policy'
op|','
name|'rx_frag_index'
op|')'
newline|'\n'
comment|'# for EC revert job or replication etags should match'
nl|'\n'
name|'match_etag'
op|'='
op|'('
name|'tx_frag_index'
op|'=='
name|'rx_frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_diskfile_sync'
op|'('
nl|'\n'
name|'tx_df'
op|','
name|'rx_df'
op|','
name|'rx_frag_index'
op|','
name|'match_etag'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# this diskfile should not have been sync'd,"
nl|'\n'
comment|'# check no rx file,'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'self'
op|'.'
name|'_open_rx_diskfile'
op|','
nl|'\n'
name|'o_name'
op|','
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'tx_df'
op|'.'
name|'_frag_index'
op|')'
newline|'\n'
comment|'# check tx file still intact - ssync does not do any cleanup!'
nl|'\n'
dedent|''
name|'tx_df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_tombstones
dedent|''
dedent|''
dedent|''
name|'def'
name|'_verify_tombstones'
op|'('
name|'self'
op|','
name|'tx_objs'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
comment|'# verify tx and rx tombstones that should be in sync'
nl|'\n'
indent|'        '
name|'for'
name|'o_name'
op|','
name|'diskfiles'
name|'in'
name|'tx_objs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'tx_df_'
name|'in'
name|'diskfiles'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_open_tx_diskfile'
op|'('
name|'o_name'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'DiskFileDeleted expected'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'tx_delete_time'
op|'='
name|'exc'
op|'.'
name|'timestamp'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_open_rx_diskfile'
op|'('
name|'o_name'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'DiskFileDeleted expected'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'rx_delete_time'
op|'='
name|'exc'
op|'.'
name|'timestamp'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tx_delete_time'
op|','
name|'rx_delete_time'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestSsyncEC
name|'class'
name|'TestSsyncEC'
op|'('
name|'TestBaseSsync'
op|')'
op|':'
newline|'\n'
DECL|member|test_handoff_fragment_revert
indent|'    '
name|'def'
name|'test_handoff_fragment_revert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test that a sync_revert type job does send the correct frag archives'
nl|'\n'
comment|'# to the receiver'
nl|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'rx_node_index'
op|'='
number|'0'
newline|'\n'
name|'tx_node_index'
op|'='
number|'1'
newline|'\n'
comment|'# for a revert job we iterate over frag index that belongs on'
nl|'\n'
comment|'# remote node'
nl|'\n'
name|'frag_index'
op|'='
name|'rx_node_index'
newline|'\n'
nl|'\n'
comment|'# create sender side diskfiles...'
nl|'\n'
name|'tx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'rx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_tombstones'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_df_mgr'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'rx_df_mgr'
op|'='
name|'self'
op|'.'
name|'rx_controller'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# o1 has primary and handoff fragment archives'
nl|'\n'
name|'t1'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o1'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o1'"
op|','
name|'policy'
op|','
name|'t1'
op|','
op|'('
name|'rx_node_index'
op|','
name|'tx_node_index'
op|')'
op|')'
newline|'\n'
comment|'# o2 only has primary'
nl|'\n'
name|'t2'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o2'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o2'"
op|','
name|'policy'
op|','
name|'t2'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o3 only has handoff'
nl|'\n'
name|'t3'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o3'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o3'"
op|','
name|'policy'
op|','
name|'t3'
op|','
op|'('
name|'rx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o4 primary and handoff fragment archives on tx, handoff in sync on rx'
nl|'\n'
name|'t4'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|','
op|'('
name|'tx_node_index'
op|','
name|'rx_node_index'
op|','
op|')'
op|')'
newline|'\n'
name|'rx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'rx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|','
op|'('
name|'rx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o5 is a tombstone, missing on receiver'
nl|'\n'
name|'t5'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o5'"
op|','
name|'policy'
op|','
name|'t5'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t5'
op|')'
newline|'\n'
nl|'\n'
name|'suffixes'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'diskfiles'
name|'in'
op|'('
name|'tx_objs'
op|'.'
name|'values'
op|'('
op|')'
op|'+'
name|'tx_tombstones'
op|'.'
name|'values'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'df'
name|'in'
name|'diskfiles'
op|':'
newline|'\n'
indent|'                '
name|'suffixes'
op|'.'
name|'add'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create ssync sender instance...'
nl|'\n'
dedent|''
dedent|''
name|'job'
op|'='
op|'{'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'policy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|'}'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'rx_node'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'update'
op|'('
op|'{'
string|"'index'"
op|':'
name|'rx_node_index'
op|'}'
op|')'
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|')'
newline|'\n'
comment|'# wrap connection from tx to rx to capture ssync messages...'
nl|'\n'
name|'sender'
op|'.'
name|'connect'
op|','
name|'trace'
op|'='
name|'self'
op|'.'
name|'make_connect_wrapper'
op|'('
name|'sender'
op|')'
newline|'\n'
nl|'\n'
comment|'# run the sync protocol...'
nl|'\n'
name|'sender'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# verify protocol'
nl|'\n'
name|'results'
op|'='
name|'self'
op|'.'
name|'_analyze_trace'
op|'('
name|'trace'
op|')'
newline|'\n'
comment|'# sender has handoff frags for o1, o3 and o4 and ts for o5'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
comment|'# receiver is missing frags for o1, o3 and ts for o5'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'rx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_updates'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'rx_updates'"
op|']'
op|')'
newline|'\n'
name|'sync_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'subreq'
name|'in'
name|'results'
op|'.'
name|'get'
op|'('
string|"'tx_updates'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'PUT'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index: %s'"
op|'%'
name|'rx_node_index'
nl|'\n'
name|'in'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'headers'"
op|')'
op|')'
newline|'\n'
name|'expected_body'
op|'='
string|"'%s___%s'"
op|'%'
op|'('
name|'subreq'
op|'['
string|"'path'"
op|']'
op|','
name|'rx_node_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_body'
op|','
name|'subreq'
op|'['
string|"'body'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'DELETE'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/a/c/o5'"
op|','
name|'subreq'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'sync_paths'
op|'.'
name|'append'
op|'('
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'path'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'/a/c/o1'"
op|','
string|"'/a/c/o3'"
op|','
string|"'/a/c/o5'"
op|']'
op|','
name|'sorted'
op|'('
name|'sync_paths'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify on disk files...'
nl|'\n'
name|'self'
op|'.'
name|'_verify_ondisk_files'
op|'('
nl|'\n'
name|'tx_objs'
op|','
name|'policy'
op|','
name|'frag_index'
op|','
name|'rx_node_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_tombstones'
op|'('
name|'tx_tombstones'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fragment_sync
dedent|''
name|'def'
name|'test_fragment_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# check that a sync_only type job does call reconstructor to build a'
nl|'\n'
comment|'# diskfile to send, and continues making progress despite an error'
nl|'\n'
comment|'# when building one diskfile'
nl|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'rx_node_index'
op|'='
number|'0'
newline|'\n'
name|'tx_node_index'
op|'='
number|'1'
newline|'\n'
comment|'# for a sync job we iterate over frag index that belongs on local node'
nl|'\n'
name|'frag_index'
op|'='
name|'tx_node_index'
newline|'\n'
nl|'\n'
comment|'# create sender side diskfiles...'
nl|'\n'
name|'tx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_tombstones'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'rx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_df_mgr'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'rx_df_mgr'
op|'='
name|'self'
op|'.'
name|'rx_controller'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# o1 only has primary'
nl|'\n'
name|'t1'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o1'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o1'"
op|','
name|'policy'
op|','
name|'t1'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o2 only has primary'
nl|'\n'
name|'t2'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o2'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o2'"
op|','
name|'policy'
op|','
name|'t2'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o3 only has primary'
nl|'\n'
name|'t3'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o3'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o3'"
op|','
name|'policy'
op|','
name|'t3'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o4 primary fragment archives on tx, handoff in sync on rx'
nl|'\n'
name|'t4'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
name|'rx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'rx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|','
op|'('
name|'rx_node_index'
op|','
op|')'
op|')'
newline|'\n'
comment|'# o5 is a tombstone, missing on receiver'
nl|'\n'
name|'t5'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o5'"
op|','
name|'policy'
op|','
name|'t5'
op|','
op|'('
name|'tx_node_index'
op|','
op|')'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t5'
op|')'
newline|'\n'
nl|'\n'
name|'suffixes'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'diskfiles'
name|'in'
op|'('
name|'tx_objs'
op|'.'
name|'values'
op|'('
op|')'
op|'+'
name|'tx_tombstones'
op|'.'
name|'values'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'df'
name|'in'
name|'diskfiles'
op|':'
newline|'\n'
indent|'                '
name|'suffixes'
op|'.'
name|'add'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'reconstruct_fa_calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_reconstruct_fa
name|'def'
name|'fake_reconstruct_fa'
op|'('
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reconstruct_fa_calls'
op|'.'
name|'append'
op|'('
op|'('
name|'job'
op|','
name|'node'
op|','
name|'policy'
op|','
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'reconstruct_fa_calls'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
comment|'# simulate second reconstruct failing'
nl|'\n'
indent|'                '
name|'raise'
name|'DiskFileError'
newline|'\n'
dedent|''
name|'content'
op|'='
string|"'%s___%s'"
op|'%'
op|'('
name|'metadata'
op|'['
string|"'name'"
op|']'
op|','
name|'rx_node_index'
op|')'
newline|'\n'
name|'return'
name|'RebuildingECDiskFileStream'
op|'('
nl|'\n'
name|'metadata'
op|','
name|'rx_node_index'
op|','
name|'iter'
op|'('
op|'['
name|'content'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create ssync sender instance...'
nl|'\n'
dedent|''
name|'job'
op|'='
op|'{'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'policy'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'sync_diskfile_builder'"
op|':'
name|'fake_reconstruct_fa'
op|'}'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'rx_node'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'update'
op|'('
op|'{'
string|"'index'"
op|':'
name|'rx_node_index'
op|'}'
op|')'
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|')'
newline|'\n'
comment|'# wrap connection from tx to rx to capture ssync messages...'
nl|'\n'
name|'sender'
op|'.'
name|'connect'
op|','
name|'trace'
op|'='
name|'self'
op|'.'
name|'make_connect_wrapper'
op|'('
name|'sender'
op|')'
newline|'\n'
nl|'\n'
comment|'# run the sync protocol...'
nl|'\n'
name|'sender'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# verify protocol'
nl|'\n'
name|'results'
op|'='
name|'self'
op|'.'
name|'_analyze_trace'
op|'('
name|'trace'
op|')'
newline|'\n'
comment|'# sender has primary for o1, o2 and o3, o4 and ts for o5'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'5'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
comment|'# receiver is missing o1, o2 and o3 and ts for o5'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'rx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
comment|'# sender can only construct 2 out of 3 missing frags'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_updates'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'reconstruct_fa_calls'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'rx_updates'"
op|']'
op|')'
newline|'\n'
name|'actual_sync_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'subreq'
name|'in'
name|'results'
op|'.'
name|'get'
op|'('
string|"'tx_updates'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'PUT'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index: %s'"
op|'%'
name|'rx_node_index'
nl|'\n'
name|'in'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'headers'"
op|')'
op|')'
newline|'\n'
name|'expected_body'
op|'='
string|"'%s___%s'"
op|'%'
op|'('
name|'subreq'
op|'['
string|"'path'"
op|']'
op|','
name|'rx_node_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_body'
op|','
name|'subreq'
op|'['
string|"'body'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'DELETE'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/a/c/o5'"
op|','
name|'subreq'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'actual_sync_paths'
op|'.'
name|'append'
op|'('
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'path'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# remove the failed df from expected synced df's"
nl|'\n'
dedent|''
name|'expect_sync_paths'
op|'='
op|'['
string|"'/a/c/o1'"
op|','
string|"'/a/c/o2'"
op|','
string|"'/a/c/o3'"
op|','
string|"'/a/c/o5'"
op|']'
newline|'\n'
name|'failed_path'
op|'='
name|'reconstruct_fa_calls'
op|'['
number|'1'
op|']'
op|'['
number|'3'
op|']'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'expect_sync_paths'
op|'.'
name|'remove'
op|'('
name|'failed_path'
op|')'
newline|'\n'
name|'failed_obj'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'obj'
op|','
name|'diskfiles'
name|'in'
name|'tx_objs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'diskfiles'
op|'['
number|'0'
op|']'
op|'.'
name|'_name'
op|'=='
name|'failed_path'
op|':'
newline|'\n'
indent|'                '
name|'failed_obj'
op|'='
name|'obj'
newline|'\n'
comment|'# sanity check'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'tx_objs'
op|'.'
name|'pop'
op|'('
name|'failed_obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify on disk files...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expect_sync_paths'
op|')'
op|','
name|'sorted'
op|'('
name|'actual_sync_paths'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_ondisk_files'
op|'('
nl|'\n'
name|'tx_objs'
op|','
name|'policy'
op|','
name|'frag_index'
op|','
name|'rx_node_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_tombstones'
op|'('
name|'tx_tombstones'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
newline|'\n'
DECL|class|TestSsyncReplication
name|'class'
name|'TestSsyncReplication'
op|'('
name|'TestBaseSsync'
op|')'
op|':'
newline|'\n'
DECL|member|test_sync
indent|'    '
name|'def'
name|'test_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'rx_node_index'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# create sender side diskfiles...'
nl|'\n'
name|'tx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'rx_objs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_tombstones'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'rx_tombstones'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'tx_df_mgr'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'rx_df_mgr'
op|'='
name|'self'
op|'.'
name|'rx_controller'
op|'.'
name|'_diskfile_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# o1 and o2 are on tx only'
nl|'\n'
name|'t1'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o1'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'tx_df_mgr'
op|','
string|"'o1'"
op|','
name|'policy'
op|','
name|'t1'
op|')'
newline|'\n'
name|'t2'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o2'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'tx_df_mgr'
op|','
string|"'o2'"
op|','
name|'policy'
op|','
name|'t2'
op|')'
newline|'\n'
comment|'# o3 is on tx and older copy on rx'
nl|'\n'
name|'t3a'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'rx_objs'
op|'['
string|"'o3'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'tx_df_mgr'
op|','
string|"'o3'"
op|','
name|'policy'
op|','
name|'t3a'
op|')'
newline|'\n'
name|'t3b'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o3'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'tx_df_mgr'
op|','
string|"'o3'"
op|','
name|'policy'
op|','
name|'t3b'
op|')'
newline|'\n'
comment|'# o4 in sync on rx and tx'
nl|'\n'
name|'t4'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'tx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|')'
newline|'\n'
name|'rx_objs'
op|'['
string|"'o4'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'rx_df_mgr'
op|','
string|"'o4'"
op|','
name|'policy'
op|','
name|'t4'
op|')'
newline|'\n'
comment|'# o5 is a tombstone, missing on receiver'
nl|'\n'
name|'t5'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o5'"
op|','
name|'policy'
op|','
name|'t5'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o5'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t5'
op|')'
newline|'\n'
comment|'# o6 is a tombstone, in sync on tx and rx'
nl|'\n'
name|'t6'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o6'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o6'"
op|','
name|'policy'
op|','
name|'t6'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o6'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t6'
op|')'
newline|'\n'
name|'rx_tombstones'
op|'['
string|"'o6'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'rx_df_mgr'
op|','
string|"'o6'"
op|','
name|'policy'
op|','
name|'t6'
op|')'
newline|'\n'
name|'rx_tombstones'
op|'['
string|"'o6'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t6'
op|')'
newline|'\n'
comment|'# o7 is a tombstone on tx, older data on rx'
nl|'\n'
name|'t7a'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'rx_objs'
op|'['
string|"'o7'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
name|'rx_df_mgr'
op|','
string|"'o7'"
op|','
name|'policy'
op|','
name|'t7a'
op|')'
newline|'\n'
name|'t7b'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o7'"
op|']'
op|'='
name|'self'
op|'.'
name|'_create_ondisk_files'
op|'('
nl|'\n'
name|'tx_df_mgr'
op|','
string|"'o7'"
op|','
name|'policy'
op|','
name|'t7b'
op|')'
newline|'\n'
name|'tx_tombstones'
op|'['
string|"'o7'"
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'delete'
op|'('
name|'t7b'
op|')'
newline|'\n'
nl|'\n'
name|'suffixes'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'diskfiles'
name|'in'
op|'('
name|'tx_objs'
op|'.'
name|'values'
op|'('
op|')'
op|'+'
name|'tx_tombstones'
op|'.'
name|'values'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'df'
name|'in'
name|'diskfiles'
op|':'
newline|'\n'
indent|'                '
name|'suffixes'
op|'.'
name|'add'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create ssync sender instance...'
nl|'\n'
dedent|''
dedent|''
name|'job'
op|'='
op|'{'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'policy'
op|'}'
newline|'\n'
name|'node'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'rx_node'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'update'
op|'('
op|'{'
string|"'index'"
op|':'
name|'rx_node_index'
op|'}'
op|')'
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|')'
newline|'\n'
comment|'# wrap connection from tx to rx to capture ssync messages...'
nl|'\n'
name|'sender'
op|'.'
name|'connect'
op|','
name|'trace'
op|'='
name|'self'
op|'.'
name|'make_connect_wrapper'
op|'('
name|'sender'
op|')'
newline|'\n'
nl|'\n'
comment|'# run the sync protocol...'
nl|'\n'
name|'success'
op|','
name|'in_sync_objs'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'7'
op|','
name|'len'
op|'('
name|'in_sync_objs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'success'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify protocol'
nl|'\n'
name|'results'
op|'='
name|'self'
op|'.'
name|'_analyze_trace'
op|'('
name|'trace'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'7'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'5'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'rx_missing'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'5'
op|','
name|'len'
op|'('
name|'results'
op|'['
string|"'tx_updates'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'rx_updates'"
op|']'
op|')'
newline|'\n'
name|'sync_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'subreq'
name|'in'
name|'results'
op|'.'
name|'get'
op|'('
string|"'tx_updates'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'PUT'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'subreq'
op|'['
string|"'path'"
op|']'
name|'in'
op|'('
string|"'/a/c/o1'"
op|','
string|"'/a/c/o2'"
op|','
string|"'/a/c/o3'"
op|')'
op|')'
newline|'\n'
name|'expected_body'
op|'='
string|"'%s___None'"
op|'%'
name|'subreq'
op|'['
string|"'path'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_body'
op|','
name|'subreq'
op|'['
string|"'body'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
op|'=='
string|"'DELETE'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'subreq'
op|'['
string|"'path'"
op|']'
name|'in'
op|'('
string|"'/a/c/o5'"
op|','
string|"'/a/c/o7'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'sync_paths'
op|'.'
name|'append'
op|'('
name|'subreq'
op|'.'
name|'get'
op|'('
string|"'path'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'['
string|"'/a/c/o1'"
op|','
string|"'/a/c/o2'"
op|','
string|"'/a/c/o3'"
op|','
string|"'/a/c/o5'"
op|','
string|"'/a/c/o7'"
op|']'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'sync_paths'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify on disk files...'
nl|'\n'
name|'self'
op|'.'
name|'_verify_ondisk_files'
op|'('
name|'tx_objs'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_tombstones'
op|'('
name|'tx_tombstones'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nothing_to_sync
dedent|''
name|'def'
name|'test_nothing_to_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'POLICIES'
op|'.'
name|'default'
op|'}'
newline|'\n'
name|'node'
op|'='
op|'{'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'rx_ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'rx_port'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'device'
op|','
nl|'\n'
string|"'index'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'sender'
op|'='
name|'ssync_sender'
op|'.'
name|'Sender'
op|'('
name|'self'
op|'.'
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
op|'['
string|"'abc'"
op|']'
op|')'
newline|'\n'
comment|'# wrap connection from tx to rx to capture ssync messages...'
nl|'\n'
name|'sender'
op|'.'
name|'connect'
op|','
name|'trace'
op|'='
name|'self'
op|'.'
name|'make_connect_wrapper'
op|'('
name|'sender'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|','
name|'in_sync_objs'
op|'='
name|'sender'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'in_sync_objs'
op|')'
newline|'\n'
name|'results'
op|'='
name|'self'
op|'.'
name|'_analyze_trace'
op|'('
name|'trace'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'tx_missing'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'rx_missing'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'tx_updates'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'results'
op|'['
string|"'rx_updates'"
op|']'
op|')'
newline|'\n'
comment|'# Minimal receiver response as read by sender:'
nl|'\n'
comment|'#               2  <-- initial \\r\\n to start ssync exchange'
nl|'\n'
comment|'# +            23  <-- :MISSING CHECK START\\r\\n'
nl|'\n'
comment|'# +             2  <-- \\r\\n (minimal missing check response)'
nl|'\n'
comment|'# +            21  <-- :MISSING CHECK END\\r\\n'
nl|'\n'
comment|'# +            17  <-- :UPDATES START\\r\\n'
nl|'\n'
comment|'# +            15  <-- :UPDATES END\\r\\n'
nl|'\n'
comment|'#    TOTAL =   80'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'80'
op|','
name|'trace'
op|'.'
name|'get'
op|'('
string|"'readline_bytes'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
