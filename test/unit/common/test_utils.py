begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for swift.common.utils"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
name|'import'
name|'temptree'
newline|'\n'
nl|'\n'
name|'import'
name|'ctypes'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'textwrap'
name|'import'
name|'dedent'
newline|'\n'
nl|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'fcntl'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'nested'
newline|'\n'
nl|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
op|','
name|'Empty'
newline|'\n'
name|'from'
name|'getpass'
name|'import'
name|'getuser'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'functools'
name|'import'
name|'partial'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'TemporaryFile'
op|','
name|'NamedTemporaryFile'
op|','
name|'mkdtemp'
newline|'\n'
name|'from'
name|'netifaces'
name|'import'
name|'AF_INET6'
newline|'\n'
name|'from'
name|'mock'
name|'import'
name|'MagicMock'
op|','
name|'patch'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
op|'('
name|'Timeout'
op|','
name|'MessageTimeout'
op|','
nl|'\n'
name|'ConnectionTimeout'
op|','
name|'LockTimeout'
op|')'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockOs
name|'class'
name|'MockOs'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pass_funcs'
op|'='
op|'['
op|']'
op|','
name|'called_funcs'
op|'='
op|'['
op|']'
op|','
name|'raise_funcs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed_fds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'pass_funcs'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'self'
op|'.'
name|'pass_func'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'called_funcs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'called_funcs'
op|':'
newline|'\n'
indent|'            '
name|'c_func'
op|'='
name|'partial'
op|'('
name|'self'
op|'.'
name|'called_func'
op|','
name|'func'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'c_func'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'func'
name|'in'
name|'raise_funcs'
op|':'
newline|'\n'
indent|'            '
name|'r_func'
op|'='
name|'partial'
op|'('
name|'self'
op|'.'
name|'raise_func'
op|','
name|'func'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'r_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pass_func
dedent|''
dedent|''
name|'def'
name|'pass_func'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'setgroups'
op|'='
name|'chdir'
op|'='
name|'setsid'
op|'='
name|'setgid'
op|'='
name|'setuid'
op|'='
name|'umask'
op|'='
name|'pass_func'
newline|'\n'
nl|'\n'
DECL|member|called_func
name|'def'
name|'called_func'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called_funcs'
op|'['
name|'name'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|raise_func
dedent|''
name|'def'
name|'raise_func'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called_funcs'
op|'['
name|'name'
op|']'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'OSError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dup2
dedent|''
name|'def'
name|'dup2'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed_fds'
op|'.'
name|'append'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|geteuid
dedent|''
name|'def'
name|'geteuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Pretend we are running as root.'''"
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|'# I only over-ride portions of the os module'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
op|'.'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'os'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockUdpSocket
dedent|''
dedent|''
dedent|''
name|'class'
name|'MockUdpSocket'
op|'('
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sent'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|sendto
dedent|''
name|'def'
name|'sendto'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sent'
op|'.'
name|'append'
op|'('
op|'('
name|'data'
op|','
name|'target'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockSys
dedent|''
dedent|''
name|'class'
name|'MockSys'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdin'
op|'='
name|'TemporaryFile'
op|'('
string|"'w'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdout'
op|'='
name|'TemporaryFile'
op|'('
string|"'r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stderr'
op|'='
name|'TemporaryFile'
op|'('
string|"'r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__stderr__'
op|'='
name|'self'
op|'.'
name|'stderr'
newline|'\n'
name|'self'
op|'.'
name|'stdio_fds'
op|'='
op|'['
name|'self'
op|'.'
name|'stdin'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'stderr'
op|'.'
name|'fileno'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reset_loggers
dedent|''
dedent|''
name|'def'
name|'reset_loggers'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'handler4logger'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'logger'
op|','
name|'handler'
name|'in'
name|'utils'
op|'.'
name|'get_logger'
op|'.'
name|'handler4logger'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'thread_locals'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
dedent|''
name|'delattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'handler4logger'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'console_handler4logger'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'logger'
op|','
name|'h'
name|'in'
name|'utils'
op|'.'
name|'get_logger'
op|'.'
name|'console_handler4logger'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'thread_locals'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'h'
op|')'
newline|'\n'
dedent|''
name|'delattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'console_handler4logger'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUtils
dedent|''
dedent|''
name|'class'
name|'TestUtils'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for swift.common.utils """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'HASH_PATH_SUFFIX'
op|'='
string|"'endcap'"
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
string|"'startcap'"
newline|'\n'
nl|'\n'
DECL|member|test_normalize_timestamp
dedent|''
name|'def'
name|'test_normalize_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swift.common.utils.normalize_timestamp'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593.48174'"
op|')'
op|','
nl|'\n'
string|'"1253327593.48174"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593.48174'
op|')'
op|','
nl|'\n'
string|'"1253327593.48174"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593.48'"
op|')'
op|','
nl|'\n'
string|'"1253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593.48'
op|')'
op|','
nl|'\n'
string|'"1253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'253327593.48'"
op|')'
op|','
nl|'\n'
string|'"0253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'253327593.48'
op|')'
op|','
nl|'\n'
string|'"0253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593'"
op|')'
op|','
nl|'\n'
string|'"1253327593.00000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593'
op|')'
op|','
nl|'\n'
string|'"1253327593.00000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'normalize_timestamp'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'normalize_timestamp'
op|','
string|"'abc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_backwards
dedent|''
name|'def'
name|'test_backwards'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swift.common.utils.backward'
nl|'\n'
nl|'\n'
comment|'# The lines are designed so that the function would encounter'
nl|'\n'
comment|'# all of the boundary conditions and typical conditions.'
nl|'\n'
comment|"# Block boundaries are marked with '<>' characters"
nl|'\n'
indent|'        '
name|'blocksize'
op|'='
number|'25'
newline|'\n'
name|'lines'
op|'='
op|'['
string|"'123456789x12345678><123456789\\n'"
op|','
comment|'# block larger than rest'
nl|'\n'
string|"'123456789x123>\\n'"
op|','
comment|'# block ends just before \\n character'
nl|'\n'
string|"'123423456789\\n'"
op|','
nl|'\n'
string|"'123456789x\\n'"
op|','
comment|'# block ends at the end of line'
nl|'\n'
string|"'<123456789x123456789x123\\n'"
op|','
nl|'\n'
string|"'<6789x123\\n'"
op|','
comment|'# block ends at the beginning of the line'
nl|'\n'
string|"'6789x1234\\n'"
op|','
nl|'\n'
string|"'1234><234\\n'"
op|','
comment|'# block ends typically in the middle of line'
nl|'\n'
string|"'123456789x123456789\\n'"
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'TemporaryFile'
op|'('
string|"'r+w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'count'
op|'='
name|'len'
op|'('
name|'lines'
op|')'
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'utils'
op|'.'
name|'backward'
op|'('
name|'f'
op|','
name|'blocksize'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'line'
op|','
name|'lines'
op|'['
name|'count'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'count'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Empty file case'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'TemporaryFile'
op|'('
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'list'
op|'('
name|'utils'
op|'.'
name|'backward'
op|'('
name|'f'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mkdirs
dedent|''
dedent|''
name|'def'
name|'test_mkdirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'testroot'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
string|"'mkdirs'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'testroot'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testroot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testroot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'testroot'
op|','
string|"'one/two/three'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'open'
op|'('
name|'testroot'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'utils'
op|'.'
name|'mkdirs'
op|','
name|'testdir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'testroot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_split_path
dedent|''
name|'def'
name|'test_split_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swift.common.utils.split_account_path'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a'"
op|')'
op|','
op|'['
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/'"
op|')'
op|','
op|'['
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a//'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c'"
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/o'"
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c/o/r'"
op|','
number|'3'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/o/r'"
op|','
number|'3'
op|','
number|'3'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o/r'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'5'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/'"
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/'"
op|','
number|'2'
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'o\\nn e'"
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid path: o%0An%20e'"
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'o\\nn e'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid path: o%0An%20e'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_device_partition
dedent|''
dedent|''
name|'def'
name|'test_validate_device_partition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swift.common.utils.validate_device_partition'
nl|'\n'
indent|'        '
name|'utils'
op|'.'
name|'validate_device_partition'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"''"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'foo'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'foo/bar'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'foo'"
op|','
string|"'foo/bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'.'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'..'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'foo'"
op|','
string|"'.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_device_partition'
op|','
string|"'foo'"
op|','
string|"'..'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'validate_device_partition'
op|'('
string|"'o\\nn e'"
op|','
string|"'foo'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid device: o%0An%20e'"
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'validate_device_partition'
op|'('
string|"'foo'"
op|','
string|"'o\\nn e'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid partition: o%0An%20e'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_NullLogger
dedent|''
dedent|''
name|'def'
name|'test_NullLogger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swift.common.utils.NullLogger'
nl|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'nl'
op|'='
name|'utils'
op|'.'
name|'NullLogger'
op|'('
op|')'
newline|'\n'
name|'nl'
op|'.'
name|'write'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_LoggerFileObject
dedent|''
name|'def'
name|'test_LoggerFileObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'orig_stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'lfo'
op|'='
name|'utils'
op|'.'
name|'LoggerFileObject'
op|'('
name|'logger'
op|')'
newline|'\n'
name|'print'
string|"'test1'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'lfo'
newline|'\n'
name|'print'
string|"'test2'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'lfo'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'test4'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'orig_stdout'
newline|'\n'
name|'print'
string|"'test5'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
op|')'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'test6'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'orig_stderr'
newline|'\n'
name|'print'
string|"'test8'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'writelines'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'write'
op|'('
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\nSTDOUT: d\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\nSTDOUT: d\\n'"
op|')'
newline|'\n'
name|'got_exc'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'lfo'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'got_exc'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'got_exc'
op|')'
newline|'\n'
name|'got_exc'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'lfo'
op|'.'
name|'xreadlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'got_exc'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'got_exc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'read'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'read'
op|','
number|'1024'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'readline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'readline'
op|','
number|'1024'
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_options
dedent|''
name|'def'
name|'test_parse_options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Get a file that is definitely on disk'
nl|'\n'
indent|'        '
name|'with'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'f'
op|'.'
name|'name'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conf'
op|','
name|'conf_file'
op|')'
newline|'\n'
comment|'# assert defaults'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'once'"
name|'not'
name|'in'
name|'options'
op|')'
newline|'\n'
comment|'# assert verbose as option'
nl|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'-v'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
comment|'# check once option'
nl|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
op|','
nl|'\n'
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'--once'"
op|']'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
name|'test_args'
op|','
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
comment|'# check options as arg parsing'
nl|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'once'"
op|','
string|"'plugin_name'"
op|','
string|"'verbose'"
op|']'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
name|'test_args'
op|','
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'extra_args'"
op|']'
op|','
op|'['
string|"'plugin_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_options_errors
dedent|''
dedent|''
name|'def'
name|'test_parse_options_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'orig_stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'stdo'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'stde'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'stdo'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'stde'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'parse_options'
op|','
name|'once'
op|'='
name|'True'
op|','
nl|'\n'
name|'test_args'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'missing config'"
name|'in'
name|'stdo'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify conf file must exist, context manager will delete temp file'
nl|'\n'
name|'with'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'f'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'parse_options'
op|','
name|'once'
op|'='
name|'True'
op|','
nl|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'unable to locate'"
name|'in'
name|'stdo'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset stdio'
nl|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'orig_stdout'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'orig_stderr'
newline|'\n'
nl|'\n'
DECL|member|test_get_logger
dedent|''
name|'def'
name|'test_get_logger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
string|"'server'"
op|','
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'test1\\n'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'test1\\n'"
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_level'"
op|':'
string|"'DEBUG'"
op|'}'
op|','
string|"'server'"
op|','
nl|'\n'
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'test1\\ntest3\\n'"
op|')'
newline|'\n'
comment|"# Doesn't really test that the log facility is truly being used all the"
nl|'\n'
comment|'# way to syslog; but exercises the code.'
nl|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_facility'"
op|':'
string|"'LOG_LOCAL3'"
op|'}'
op|','
string|"'server'"
op|','
nl|'\n'
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test4'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'test1\\ntest3\\ntest4\\n'"
op|')'
newline|'\n'
comment|"# make sure debug doesn't log by default"
nl|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'test1\\ntest3\\ntest4\\n'"
op|')'
newline|'\n'
comment|'# make sure notice lvl logs by default'
nl|'\n'
name|'logger'
op|'.'
name|'notice'
op|'('
string|"'test6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'test1\\ntest3\\ntest4\\ntest6\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_logger_sysloghandler_plumbing
dedent|''
name|'def'
name|'test_get_logger_sysloghandler_plumbing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_sysloghandler'
op|'='
name|'utils'
op|'.'
name|'SysLogHandler'
newline|'\n'
name|'syslog_handler_args'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|syslog_handler_catcher
name|'def'
name|'syslog_handler_catcher'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'syslog_handler_args'
op|'.'
name|'append'
op|'('
op|'('
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'orig_sysloghandler'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'syslog_handler_catcher'
op|'.'
name|'LOG_LOCAL0'
op|'='
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL0'
newline|'\n'
name|'syslog_handler_catcher'
op|'.'
name|'LOG_LOCAL3'
op|'='
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL3'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'SysLogHandler'
op|'='
name|'syslog_handler_catcher'
newline|'\n'
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_facility'"
op|':'
string|"'LOG_LOCAL3'"
op|','
nl|'\n'
op|'}'
op|','
string|"'server'"
op|','
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'expected_args'
op|'='
op|'['
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'address'"
op|':'
string|"'/dev/log'"
op|','
nl|'\n'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL3'
op|'}'
op|')'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/dev/log'"
op|')'
name|'or'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
string|"'/dev/log'"
op|')'
name|'or'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
string|"'/dev/log'"
op|')'
op|':'
newline|'\n'
comment|'# Since socket on OSX is in /var/run/syslog, there will be'
nl|'\n'
comment|'# a fallback to UDP.'
nl|'\n'
indent|'                '
name|'expected_args'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL3'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected_args'
op|','
name|'syslog_handler_args'
op|')'
newline|'\n'
nl|'\n'
name|'syslog_handler_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_facility'"
op|':'
string|"'LOG_LOCAL3'"
op|','
nl|'\n'
string|"'log_address'"
op|':'
string|"'/foo/bar'"
op|','
nl|'\n'
op|'}'
op|','
string|"'server'"
op|','
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'address'"
op|':'
string|"'/foo/bar'"
op|','
nl|'\n'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL3'
op|'}'
op|')'
op|','
nl|'\n'
comment|"# Second call is because /foo/bar didn't exist (and wasn't a"
nl|'\n'
comment|'# UNIX domain socket).'
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL3'
op|'}'
op|')'
op|']'
op|','
nl|'\n'
name|'syslog_handler_args'
op|')'
newline|'\n'
nl|'\n'
comment|'# Using UDP with default port'
nl|'\n'
name|'syslog_handler_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_udp_host'"
op|':'
string|"'syslog.funtimes.com'"
op|','
nl|'\n'
op|'}'
op|','
string|"'server'"
op|','
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'address'"
op|':'
op|'('
string|"'syslog.funtimes.com'"
op|','
nl|'\n'
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SYSLOG_UDP_PORT'
op|')'
op|','
nl|'\n'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL0'
op|'}'
op|')'
op|']'
op|','
nl|'\n'
name|'syslog_handler_args'
op|')'
newline|'\n'
nl|'\n'
comment|'# Using UDP with non-default port'
nl|'\n'
name|'syslog_handler_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_udp_host'"
op|':'
string|"'syslog.funtimes.com'"
op|','
nl|'\n'
string|"'log_udp_port'"
op|':'
string|"'2123'"
op|','
nl|'\n'
op|'}'
op|','
string|"'server'"
op|','
name|'log_route'
op|'='
string|"'server'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
nl|'\n'
op|'('
op|'('
op|')'
op|','
op|'{'
string|"'address'"
op|':'
op|'('
string|"'syslog.funtimes.com'"
op|','
number|'2123'
op|')'
op|','
nl|'\n'
string|"'facility'"
op|':'
name|'orig_sysloghandler'
op|'.'
name|'LOG_LOCAL0'
op|'}'
op|')'
op|']'
op|','
nl|'\n'
name|'syslog_handler_args'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'SysLogHandler'
op|'='
name|'orig_sysloghandler'
newline|'\n'
nl|'\n'
DECL|member|test_clean_logger_exception
dedent|''
dedent|''
name|'def'
name|'test_clean_logger_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup stream logging'
nl|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
nl|'\n'
DECL|function|strip_value
name|'def'
name|'strip_value'
op|'('
name|'sio'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'sio'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'v'
newline|'\n'
nl|'\n'
DECL|function|log_exception
dedent|''
name|'def'
name|'log_exception'
op|'('
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exc'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'exception'
op|'('
string|"'blah'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# establish base case'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"'test\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"'test\\ntest\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# test OSError'
nl|'\n'
name|'for'
name|'en'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EIO'
op|','
name|'errno'
op|'.'
name|'ENOSPC'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log_exception'
op|'('
name|'OSError'
op|'('
name|'en'
op|','
string|"'my %s error message'"
op|'%'
name|'en'
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my %s error message'"
op|'%'
name|'en'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# unfiltered'
nl|'\n'
dedent|''
name|'log_exception'
op|'('
name|'OSError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'in'
name|'strip_value'
op|'('
name|'sio'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# test socket.error'
nl|'\n'
name|'log_exception'
op|'('
name|'socket'
op|'.'
name|'error'
op|'('
name|'errno'
op|'.'
name|'ECONNREFUSED'
op|','
nl|'\n'
string|"'my error message'"
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'errno.ECONNREFUSED message test'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Connection refused'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'log_exception'
op|'('
name|'socket'
op|'.'
name|'error'
op|'('
name|'errno'
op|'.'
name|'EHOSTUNREACH'
op|','
nl|'\n'
string|"'my error message'"
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Host unreachable'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'log_exception'
op|'('
name|'socket'
op|'.'
name|'error'
op|'('
name|'errno'
op|'.'
name|'ETIMEDOUT'
op|','
string|"'my error message'"
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Connection timeout'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# unfiltered'
nl|'\n'
name|'log_exception'
op|'('
name|'socket'
op|'.'
name|'error'
op|'('
number|'0'
op|','
string|"'my error message'"
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# test eventlet.Timeout'
nl|'\n'
name|'connection_timeout'
op|'='
name|'ConnectionTimeout'
op|'('
number|'42'
op|','
string|"'my error message'"
op|')'
newline|'\n'
name|'log_exception'
op|'('
name|'connection_timeout'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'ConnectionTimeout'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'(42s)'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'connection_timeout'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'message_timeout'
op|'='
name|'MessageTimeout'
op|'('
number|'42'
op|','
string|"'my error message'"
op|')'
newline|'\n'
name|'log_exception'
op|'('
name|'message_timeout'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'MessageTimeout'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'(42s)'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'message_timeout'
op|'.'
name|'cancel'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# test unhandled'
nl|'\n'
name|'log_exception'
op|'('
name|'Exception'
op|'('
string|"'my error message'"
op|')'
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'Traceback'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swift_log_formatter
dedent|''
dedent|''
name|'def'
name|'test_swift_log_formatter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup stream logging'
nl|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|')'
newline|'\n'
name|'handler'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'handler'
op|'.'
name|'setFormatter'
op|'('
name|'utils'
op|'.'
name|'SwiftLogFormatter'
op|'('
op|')'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
nl|'\n'
DECL|function|strip_value
name|'def'
name|'strip_value'
op|'('
name|'sio'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'sio'
op|'.'
name|'truncate'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'v'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'logger'
op|'.'
name|'txn_id'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'my error message'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'txn'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'txn_id'
op|'='
string|"'12345'"
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'txn'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'12345'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# test no txn on info message'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'txn_id'
op|','
string|"'12345'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'txn'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'12345'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# test txn already in message'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'txn_id'
op|','
string|"'12345'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test 12345 test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"'test 12345 test\\n'"
op|')'
newline|'\n'
comment|'# Test multi line collapsing'
nl|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'my\\nerror\\nmessage'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my#012error#012message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# test client_ip'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'logger'
op|'.'
name|'client_ip'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'my error message'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'my error message'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'client_ip'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'client_ip'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'logger'
op|'.'
name|'error'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'client_ip'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'1.2.3.4'"
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# test no client_ip on info message'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'client_ip'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'log_msg'
op|'='
name|'strip_value'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'client_ip'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'1.2.3.4'"
name|'not'
name|'in'
name|'log_msg'
op|')'
newline|'\n'
comment|'# test client_ip (and txn) already in message'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'client_ip'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test 1.2.3.4 test 12345'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_value'
op|'('
name|'sio'
op|')'
op|','
string|"'test 1.2.3.4 test 12345\\n'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_storage_directory
dedent|''
dedent|''
name|'def'
name|'test_storage_directory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'storage_directory'
op|'('
string|"'objects'"
op|','
string|"'1'"
op|','
string|"'ABCDEF'"
op|')'
op|','
nl|'\n'
string|"'objects/1/DEF/ABCDEF'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_whataremyips
dedent|''
name|'def'
name|'test_whataremyips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'myips'
op|'='
name|'utils'
op|'.'
name|'whataremyips'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'myips'
op|')'
op|'>'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'127.0.0.1'"
name|'in'
name|'myips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_whataremyips_error
dedent|''
name|'def'
name|'test_whataremyips_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|my_interfaces
indent|'        '
name|'def'
name|'my_interfaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
string|"'eth0'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|my_ifaddress_error
dedent|''
name|'def'
name|'my_ifaddress_error'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'nested'
op|'('
nl|'\n'
name|'patch'
op|'('
string|"'netifaces.interfaces'"
op|','
name|'my_interfaces'
op|')'
op|','
nl|'\n'
name|'patch'
op|'('
string|"'netifaces.ifaddresses'"
op|','
name|'my_ifaddress_error'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'whataremyips'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_whataremyips_ipv6
dedent|''
dedent|''
name|'def'
name|'test_whataremyips_ipv6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_ipv6_address'
op|'='
string|"'2001:6b0:dead:beef:2::32'"
newline|'\n'
name|'test_interface'
op|'='
string|"'eth0'"
newline|'\n'
nl|'\n'
DECL|function|my_ipv6_interfaces
name|'def'
name|'my_ipv6_interfaces'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
string|"'eth0'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|my_ipv6_ifaddresses
dedent|''
name|'def'
name|'my_ipv6_ifaddresses'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
name|'AF_INET6'
op|':'
nl|'\n'
op|'['
op|'{'
string|"'netmask'"
op|':'
string|"'ffff:ffff:ffff:ffff::'"
op|','
nl|'\n'
string|"'addr'"
op|':'
string|"'%s%%%s'"
op|'%'
op|'('
name|'test_ipv6_address'
op|','
name|'test_interface'
op|')'
op|'}'
op|']'
op|'}'
newline|'\n'
dedent|''
name|'with'
name|'nested'
op|'('
nl|'\n'
name|'patch'
op|'('
string|"'netifaces.interfaces'"
op|','
name|'my_ipv6_interfaces'
op|')'
op|','
nl|'\n'
name|'patch'
op|'('
string|"'netifaces.ifaddresses'"
op|','
name|'my_ipv6_ifaddresses'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'myips'
op|'='
name|'utils'
op|'.'
name|'whataremyips'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'myips'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'myips'
op|'['
number|'0'
op|']'
op|','
name|'test_ipv6_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_path
dedent|''
dedent|''
name|'def'
name|'test_hash_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_prefix'
op|'='
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
string|"''"
newline|'\n'
comment|'# Yes, these tests are deliberately very fragile. We want to make sure'
nl|'\n'
comment|'# that if someones changes the results hash_path produces, they know it'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|')'
op|','
nl|'\n'
string|"'1c84525acb02107ea475dcd3d09c2c58'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|')'
op|','
nl|'\n'
string|"'33379ecb053aa5c9e356c68997cbb59e'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
op|','
nl|'\n'
string|"'06fbf0b514e5199dfc4e00f42eb5ea83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'raw_digest'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'06fbf0b514e5199dfc4e00f42eb5ea83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'raw_digest'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'\\x06\\xfb\\xf0\\xb5\\x14\\xe5\\x19\\x9d\\xfcN'"
nl|'\n'
string|"'\\x00\\xf4.\\xb5\\xea\\x83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'hash_path'
op|','
string|"'a'"
op|','
name|'object'
op|'='
string|"'o'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
string|"'abcdef'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'raw_digest'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'363f9b535bfb7d17a43a46a358afca0e'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
name|'_prefix'
newline|'\n'
nl|'\n'
DECL|member|test_load_libc_function
dedent|''
dedent|''
name|'def'
name|'test_load_libc_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'load_libc_function'
op|'('
string|"'printf'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'load_libc_function'
op|'('
string|"'some_not_real_function'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readconf
dedent|''
name|'def'
name|'test_readconf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
string|"'''[section1]\nfoo = bar\n\n[section2]\nlog_name = yarr'''"
newline|'\n'
comment|'# setup a real file'
nl|'\n'
name|'fd'
op|','
name|'temppath'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'dir'
op|'='
string|"'/tmp'"
op|')'
newline|'\n'
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'wb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'make_filename'
op|'='
name|'lambda'
op|':'
name|'temppath'
newline|'\n'
comment|'# setup a file stream'
nl|'\n'
name|'make_fp'
op|'='
name|'lambda'
op|':'
name|'StringIO'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'for'
name|'conf_object_maker'
name|'in'
op|'('
name|'make_filename'
op|','
name|'make_fp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'conffile'
op|','
nl|'\n'
string|"'log_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'section1'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
string|"'section2'"
op|':'
op|'{'
string|"'log_name'"
op|':'
string|"'yarr'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|','
string|"'section1'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'conffile'
op|','
string|"'log_name'"
op|':'
string|"'section1'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|','
nl|'\n'
string|"'section2'"
op|')'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'yarr'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|','
string|"'section1'"
op|','
nl|'\n'
name|'log_name'
op|'='
string|"'foo'"
op|')'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|','
string|"'section1'"
op|','
nl|'\n'
name|'defaults'
op|'='
op|'{'
string|"'bar'"
op|':'
string|"'baz'"
op|'}'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'conffile'
op|','
string|"'log_name'"
op|':'
string|"'section1'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'bar'"
op|':'
string|"'baz'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'readconf'
op|','
name|'temppath'
op|','
string|"'section3'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'temppath'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'readconf'
op|','
name|'temppath'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_readconf_raw
dedent|''
name|'def'
name|'test_readconf_raw'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
string|"'''[section1]\nfoo = bar\n\n[section2]\nlog_name = %(yarr)s'''"
newline|'\n'
comment|'# setup a real file'
nl|'\n'
name|'fd'
op|','
name|'temppath'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'dir'
op|'='
string|"'/tmp'"
op|')'
newline|'\n'
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'wb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'make_filename'
op|'='
name|'lambda'
op|':'
name|'temppath'
newline|'\n'
comment|'# setup a file stream'
nl|'\n'
name|'make_fp'
op|'='
name|'lambda'
op|':'
name|'StringIO'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'for'
name|'conf_object_maker'
name|'in'
op|'('
name|'make_filename'
op|','
name|'make_fp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conffile'
op|'='
name|'conf_object_maker'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conffile'
op|','
name|'raw'
op|'='
name|'True'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'__file__'"
op|':'
name|'conffile'
op|','
nl|'\n'
string|"'log_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'section1'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
string|"'section2'"
op|':'
op|'{'
string|"'log_name'"
op|':'
string|"'%(yarr)s'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'unlink'
op|'('
name|'temppath'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'readconf'
op|','
name|'temppath'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_readconf_dir
dedent|''
name|'def'
name|'test_readconf_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_dir'
op|'='
op|'{'
nl|'\n'
string|"'server.conf.d/01.conf'"
op|':'
string|'"""\n            [DEFAULT]\n            port = 8080\n            foo = bar\n\n            [section1]\n            name=section1\n            """'
op|','
nl|'\n'
string|"'server.conf.d/section2.conf'"
op|':'
string|'"""\n            [DEFAULT]\n            port = 8081\n            bar = baz\n\n            [section2]\n            name=section2\n            """'
op|','
nl|'\n'
string|"'other-server.conf.d/01.conf'"
op|':'
string|'"""\n            [DEFAULT]\n            port = 8082\n\n            [section3]\n            name=section3\n            """'
nl|'\n'
op|'}'
newline|'\n'
comment|'# strip indent from test config contents'
nl|'\n'
name|'config_dir'
op|'='
name|'dict'
op|'('
op|'('
name|'f'
op|','
name|'dedent'
op|'('
name|'c'
op|')'
op|')'
name|'for'
op|'('
name|'f'
op|','
name|'c'
op|')'
name|'in'
name|'config_dir'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'temptree'
op|'('
op|'*'
name|'zip'
op|'('
op|'*'
name|'config_dir'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
name|'as'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'conf_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'server.conf.d'"
op|')'
newline|'\n'
name|'conf'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conf_dir'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'__file__'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'server.conf.d'"
op|')'
op|','
nl|'\n'
string|"'log_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'section1'"
op|':'
op|'{'
nl|'\n'
string|"'port'"
op|':'
string|"'8081'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bar'"
op|','
nl|'\n'
string|"'bar'"
op|':'
string|"'baz'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'section1'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'section2'"
op|':'
op|'{'
nl|'\n'
string|"'port'"
op|':'
string|"'8081'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bar'"
op|','
nl|'\n'
string|"'bar'"
op|':'
string|"'baz'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'section2'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conf'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_readconf_dir_ignores_hidden_and_nondotconf_files
dedent|''
name|'def'
name|'test_readconf_dir_ignores_hidden_and_nondotconf_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_dir'
op|'='
op|'{'
nl|'\n'
string|"'server.conf.d/01.conf'"
op|':'
string|'"""\n            [section1]\n            port = 8080\n            """'
op|','
nl|'\n'
string|"'server.conf.d/.01.conf.swp'"
op|':'
string|'"""\n            [section]\n            port = 8081\n            """'
op|','
nl|'\n'
string|"'server.conf.d/01.conf-bak'"
op|':'
string|'"""\n            [section]\n            port = 8082\n            """'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# strip indent from test config contents'
nl|'\n'
name|'config_dir'
op|'='
name|'dict'
op|'('
op|'('
name|'f'
op|','
name|'dedent'
op|'('
name|'c'
op|')'
op|')'
name|'for'
op|'('
name|'f'
op|','
name|'c'
op|')'
name|'in'
name|'config_dir'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'temptree'
op|'('
op|'*'
name|'zip'
op|'('
op|'*'
name|'config_dir'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
name|'as'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'conf_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'server.conf.d'"
op|')'
newline|'\n'
name|'conf'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
name|'conf_dir'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'__file__'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'server.conf.d'"
op|')'
op|','
nl|'\n'
string|"'log_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'section1'"
op|':'
op|'{'
nl|'\n'
string|"'port'"
op|':'
string|"'8080'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conf'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_drop_privileges
dedent|''
name|'def'
name|'test_drop_privileges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user'
op|'='
name|'getuser'
op|'('
op|')'
newline|'\n'
comment|'# over-ride os with mock'
nl|'\n'
name|'required_func_calls'
op|'='
op|'('
string|"'setgroups'"
op|','
string|"'setgid'"
op|','
string|"'setuid'"
op|','
string|"'setsid'"
op|','
nl|'\n'
string|"'chdir'"
op|','
string|"'umask'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
name|'called_funcs'
op|'='
name|'required_func_calls'
op|')'
newline|'\n'
comment|'# exercise the code'
nl|'\n'
name|'utils'
op|'.'
name|'drop_privileges'
op|'('
name|'user'
op|')'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'required_func_calls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'called_funcs'
op|'['
name|'func'
op|']'
op|')'
newline|'\n'
dedent|''
name|'import'
name|'pwd'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'pwd'
op|'.'
name|'getpwnam'
op|'('
name|'user'
op|')'
op|'['
number|'5'
op|']'
op|','
name|'utils'
op|'.'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'HOME'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test same args, OSError trying to get session leader'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
name|'called_funcs'
op|'='
name|'required_func_calls'
op|','
nl|'\n'
name|'raise_funcs'
op|'='
op|'('
string|"'setsid'"
op|','
op|')'
op|')'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'required_func_calls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'called_funcs'
op|'.'
name|'get'
op|'('
name|'func'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
dedent|''
name|'utils'
op|'.'
name|'drop_privileges'
op|'('
name|'user'
op|')'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'required_func_calls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'called_funcs'
op|'['
name|'func'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_capture_stdio
dedent|''
dedent|''
name|'def'
name|'test_capture_stdio'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# stubs'
nl|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
string|"'dummy'"
op|')'
newline|'\n'
nl|'\n'
comment|'# mock utils system modules'
nl|'\n'
name|'_orig_sys'
op|'='
name|'utils'
op|'.'
name|'sys'
newline|'\n'
name|'_orig_os'
op|'='
name|'utils'
op|'.'
name|'os'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# basic test'
nl|'\n'
name|'utils'
op|'.'
name|'capture_stdio'
op|'('
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdio_fds'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|','
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test same args, but exc when trying to close stdio'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
name|'raise_funcs'
op|'='
op|'('
string|"'dup2'"
op|','
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# test unable to close stdio'
nl|'\n'
name|'utils'
op|'.'
name|'capture_stdio'
op|'('
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|','
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test some other args'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# test console log'
nl|'\n'
name|'utils'
op|'.'
name|'capture_stdio'
op|'('
name|'logger'
op|','
name|'capture_stdout'
op|'='
name|'False'
op|','
nl|'\n'
name|'capture_stderr'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
comment|'# when logging to console, stderr remains open'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdio_fds'
op|'['
op|':'
number|'2'
op|']'
op|')'
newline|'\n'
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# stdio not captured'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'LoggerFileObject'
op|')'
op|')'
newline|'\n'
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'sys'
op|'='
name|'_orig_sys'
newline|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'_orig_os'
newline|'\n'
nl|'\n'
DECL|function|test_get_logger_console
dedent|''
dedent|''
name|'def'
name|'test_get_logger_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|')'
newline|'\n'
name|'console_handlers'
op|'='
op|'['
name|'h'
name|'for'
name|'h'
name|'in'
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'handlers'
name|'if'
nl|'\n'
name|'isinstance'
op|'('
name|'h'
op|','
name|'logging'
op|'.'
name|'StreamHandler'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'console_handlers'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
name|'console_handlers'
op|'='
op|'['
name|'h'
name|'for'
name|'h'
name|'in'
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'handlers'
name|'if'
nl|'\n'
name|'isinstance'
op|'('
name|'h'
op|','
name|'logging'
op|'.'
name|'StreamHandler'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console_handlers'
op|')'
newline|'\n'
comment|"# make sure you can't have two console handlers"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'console_handlers'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'old_handler'
op|'='
name|'console_handlers'
op|'['
number|'0'
op|']'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
name|'console_handlers'
op|'='
op|'['
name|'h'
name|'for'
name|'h'
name|'in'
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'handlers'
name|'if'
nl|'\n'
name|'isinstance'
op|'('
name|'h'
op|','
name|'logging'
op|'.'
name|'StreamHandler'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'console_handlers'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'new_handler'
op|'='
name|'console_handlers'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'new_handler'
op|','
name|'old_handler'
op|')'
newline|'\n'
name|'reset_loggers'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ratelimit_sleep
dedent|''
name|'def'
name|'test_ratelimit_sleep'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'running_time'
op|'='
number|'0'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'100'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'running_time'
op|'='
name|'utils'
op|'.'
name|'ratelimit_sleep'
op|'('
name|'running_time'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'abs'
op|'('
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|')'
op|'*'
number|'100'
op|')'
op|'<'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'running_time'
op|'='
number|'0'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'50'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'running_time'
op|'='
name|'utils'
op|'.'
name|'ratelimit_sleep'
op|'('
name|'running_time'
op|','
number|'200'
op|')'
newline|'\n'
comment|"# make sure it's accurate to 10th of a second"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'abs'
op|'('
number|'25'
op|'-'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|')'
op|'*'
number|'100'
op|')'
op|'<'
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ratelimit_sleep_with_incr
dedent|''
name|'def'
name|'test_ratelimit_sleep_with_incr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'running_time'
op|'='
number|'0'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'vals'
op|'='
op|'['
number|'5'
op|','
number|'17'
op|','
number|'0'
op|','
number|'3'
op|','
number|'11'
op|','
number|'30'
op|','
nl|'\n'
number|'40'
op|','
number|'4'
op|','
number|'13'
op|','
number|'2'
op|','
op|'-'
number|'1'
op|']'
op|'*'
number|'2'
comment|'# adds up to 250 (with no -1)'
newline|'\n'
name|'total'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'vals'
op|':'
newline|'\n'
indent|'            '
name|'running_time'
op|'='
name|'utils'
op|'.'
name|'ratelimit_sleep'
op|'('
name|'running_time'
op|','
nl|'\n'
number|'500'
op|','
name|'incr_by'
op|'='
name|'i'
op|')'
newline|'\n'
name|'total'
op|'+='
name|'i'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'abs'
op|'('
number|'50'
op|'-'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|')'
op|'*'
number|'100'
op|')'
op|'<'
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_urlparse
dedent|''
name|'def'
name|'test_urlparse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'http://127.0.0.1/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'scheme'
op|','
string|"'http'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'hostname'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'path'
op|','
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'http://127.0.0.1:8080/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'port'
op|','
number|'8080'
op|')'
newline|'\n'
nl|'\n'
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'https://127.0.0.1/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'scheme'
op|','
string|"'https'"
op|')'
newline|'\n'
nl|'\n'
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'http://[::1]/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'hostname'
op|','
string|"'::1'"
op|')'
newline|'\n'
nl|'\n'
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'http://[::1]:8080/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'hostname'
op|','
string|"'::1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'port'
op|','
number|'8080'
op|')'
newline|'\n'
nl|'\n'
name|'parsed'
op|'='
name|'utils'
op|'.'
name|'urlparse'
op|'('
string|"'www.example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parsed'
op|'.'
name|'hostname'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ratelimit_sleep_with_sleep
dedent|''
name|'def'
name|'test_ratelimit_sleep_with_sleep'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'running_time'
op|'='
number|'0'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'sleeps'
op|'='
op|'['
number|'0'
op|']'
op|'*'
number|'7'
op|'+'
op|'['
number|'.2'
op|']'
op|'*'
number|'3'
op|'+'
op|'['
number|'0'
op|']'
op|'*'
number|'30'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'sleeps'
op|':'
newline|'\n'
indent|'            '
name|'running_time'
op|'='
name|'utils'
op|'.'
name|'ratelimit_sleep'
op|'('
name|'running_time'
op|','
number|'40'
op|','
nl|'\n'
name|'rate_buffer'
op|'='
number|'1'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
name|'i'
op|')'
newline|'\n'
comment|"# make sure it's accurate to 10th of a second"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'abs'
op|'('
number|'100'
op|'-'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|')'
op|'*'
number|'100'
op|')'
op|'<'
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_search_tree
dedent|''
name|'def'
name|'test_search_tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# file match & ext miss'
nl|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
string|"'asdf.conf'"
op|','
string|"'blarg.conf'"
op|','
string|"'asdf.cfg'"
op|']'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'asdf'
op|'='
name|'utils'
op|'.'
name|'search_tree'
op|'('
name|'t'
op|','
string|"'a*'"
op|','
string|"'.conf'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'asdf'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'asdf'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'asdf.conf'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# multi-file match & glob miss & sort'
nl|'\n'
dedent|''
name|'with'
name|'temptree'
op|'('
op|'['
string|"'application.bin'"
op|','
string|"'apple.bin'"
op|','
string|"'apropos.bin'"
op|']'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'app_bins'
op|'='
name|'utils'
op|'.'
name|'search_tree'
op|'('
name|'t'
op|','
string|"'app*'"
op|','
string|"'bin'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'app_bins'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'app_bins'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'apple.bin'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'app_bins'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'application.bin'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# test file in folder & ext miss & glob miss'
nl|'\n'
dedent|''
name|'files'
op|'='
op|'('
nl|'\n'
string|"'sub/file1.ini'"
op|','
nl|'\n'
string|"'sub/file2.conf'"
op|','
nl|'\n'
string|"'sub.bin'"
op|','
nl|'\n'
string|"'bus.ini'"
op|','
nl|'\n'
string|"'bus/file3.ini'"
op|','
nl|'\n'
op|')'
newline|'\n'
name|'with'
name|'temptree'
op|'('
name|'files'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'sub_ini'
op|'='
name|'utils'
op|'.'
name|'search_tree'
op|'('
name|'t'
op|','
string|"'sub*'"
op|','
string|"'.ini'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'sub_ini'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sub_ini'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'sub/file1.ini'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# test multi-file in folder & sub-folder & ext miss & glob miss'
nl|'\n'
dedent|''
name|'files'
op|'='
op|'('
nl|'\n'
string|"'folder_file.txt'"
op|','
nl|'\n'
string|"'folder/1.txt'"
op|','
nl|'\n'
string|"'folder/sub/2.txt'"
op|','
nl|'\n'
string|"'folder2/3.txt'"
op|','
nl|'\n'
string|"'Folder3/4.txt'"
nl|'\n'
string|"'folder.rc'"
op|','
nl|'\n'
op|')'
newline|'\n'
name|'with'
name|'temptree'
op|'('
name|'files'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'folder_texts'
op|'='
name|'utils'
op|'.'
name|'search_tree'
op|'('
name|'t'
op|','
string|"'folder*'"
op|','
string|"'.txt'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'folder_texts'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'f1'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'folder_file.txt'"
op|')'
newline|'\n'
name|'f2'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'folder/1.txt'"
op|')'
newline|'\n'
name|'f3'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'folder/sub/2.txt'"
op|')'
newline|'\n'
name|'f4'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'folder2/3.txt'"
op|')'
newline|'\n'
name|'for'
name|'f'
name|'in'
op|'['
name|'f1'
op|','
name|'f2'
op|','
name|'f3'
op|','
name|'f4'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'f'
name|'in'
name|'folder_texts'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_search_tree_with_directory_ext_match
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_search_tree_with_directory_ext_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'files'
op|'='
op|'('
nl|'\n'
string|"'object-server/object-server.conf-base'"
op|','
nl|'\n'
string|"'object-server/1.conf.d/base.conf'"
op|','
nl|'\n'
string|"'object-server/1.conf.d/1.conf'"
op|','
nl|'\n'
string|"'object-server/2.conf.d/base.conf'"
op|','
nl|'\n'
string|"'object-server/2.conf.d/2.conf'"
op|','
nl|'\n'
string|"'object-server/3.conf.d/base.conf'"
op|','
nl|'\n'
string|"'object-server/3.conf.d/3.conf'"
op|','
nl|'\n'
string|"'object-server/4.conf.d/base.conf'"
op|','
nl|'\n'
string|"'object-server/4.conf.d/4.conf'"
op|','
nl|'\n'
op|')'
newline|'\n'
name|'with'
name|'temptree'
op|'('
name|'files'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'conf_dirs'
op|'='
name|'utils'
op|'.'
name|'search_tree'
op|'('
name|'t'
op|','
string|"'object-server'"
op|','
string|"'.conf'"
op|','
nl|'\n'
name|'dir_ext'
op|'='
string|"'conf.d'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'conf_dirs'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'object-server/%d.conf.d'"
op|'%'
op|'('
name|'i'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'conf_dir'
name|'in'
name|'conf_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_write_file
dedent|''
dedent|''
name|'def'
name|'test_write_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'file_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'write_file'
op|'('
name|'file_name'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'file_name'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'contents'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'contents'
op|','
string|"'test'"
op|')'
newline|'\n'
comment|'# and also subdirs'
nl|'\n'
name|'file_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'subdir/test2'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'write_file'
op|'('
name|'file_name'
op|','
string|"'test2'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'file_name'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'contents'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'contents'
op|','
string|"'test2'"
op|')'
newline|'\n'
comment|"# but can't over-write files"
nl|'\n'
name|'file_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'subdir/test2/test3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'utils'
op|'.'
name|'write_file'
op|','
name|'file_name'
op|','
nl|'\n'
string|"'test3'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_remove_file
dedent|''
dedent|''
name|'def'
name|'test_remove_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'t'
op|':'
newline|'\n'
indent|'            '
name|'file_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'t'
op|','
string|"'blah.pid'"
op|')'
newline|'\n'
comment|'# assert no raise'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file_name'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'remove_file'
op|'('
name|'file_name'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'file_name'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
string|"'1'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'remove_file'
op|'('
name|'file_name'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_human_readable
dedent|''
dedent|''
name|'def'
name|'test_human_readable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'0'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1'
op|')'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'10'
op|')'
op|','
string|"'10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'100'
op|')'
op|','
string|"'100'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'999'
op|')'
op|','
string|"'999'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1024'
op|')'
op|','
string|"'1Ki'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1535'
op|')'
op|','
string|"'1Ki'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1536'
op|')'
op|','
string|"'2Ki'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1047552'
op|')'
op|','
string|"'1023Ki'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1048063'
op|')'
op|','
string|"'1023Ki'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1048064'
op|')'
op|','
string|"'1Mi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1048576'
op|')'
op|','
string|"'1Mi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1073741824'
op|')'
op|','
string|"'1Gi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1099511627776'
op|')'
op|','
string|"'1Ti'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1125899906842624'
op|')'
op|','
string|"'1Pi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1152921504606846976'
op|')'
op|','
string|"'1Ei'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1180591620717411303424'
op|')'
op|','
string|"'1Zi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1208925819614629174706176'
op|')'
op|','
nl|'\n'
string|"'1Yi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'human_readable'
op|'('
number|'1237940039285380274899124224'
op|')'
op|','
nl|'\n'
string|"'1024Yi'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_validate_sync_to
dedent|''
name|'def'
name|'test_validate_sync_to'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'goodurl'
name|'in'
op|'('
string|"'http://1.1.1.1/v1/a/c/o'"
op|','
nl|'\n'
string|"'http://1.1.1.1:8080/a/c/o'"
op|','
nl|'\n'
string|"'http://2.2.2.2/a/c/o'"
op|','
nl|'\n'
string|"'https://1.1.1.1/v1/a/c/o'"
op|','
nl|'\n'
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'validate_sync_to'
op|'('
name|'goodurl'
op|','
nl|'\n'
op|'['
string|"'1.1.1.1'"
op|','
string|"'2.2.2.2'"
op|']'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'badurl'
name|'in'
op|'('
string|"'http://1.1.1.1'"
op|','
nl|'\n'
string|"'httpq://1.1.1.1/v1/a/c/o'"
op|','
nl|'\n'
string|"'http://1.1.1.1/v1/a/c/o?query'"
op|','
nl|'\n'
string|"'http://1.1.1.1/v1/a/c/o#frag'"
op|','
nl|'\n'
string|"'http://1.1.1.1/v1/a/c/o?query#frag'"
op|','
nl|'\n'
string|"'http://1.1.1.1/v1/a/c/o?query=param'"
op|','
nl|'\n'
string|"'http://1.1.1.1/v1/a/c/o?query=param#frag'"
op|','
nl|'\n'
string|"'http://1.1.1.2/v1/a/c/o'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_sync_to'
op|'('
name|'badurl'
op|','
op|'['
string|"'1.1.1.1'"
op|','
string|"'2.2.2.2'"
op|']'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_TRUE_VALUES
dedent|''
dedent|''
name|'def'
name|'test_TRUE_VALUES'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'v'
name|'in'
name|'utils'
op|'.'
name|'TRUE_VALUES'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'v'
op|','
name|'v'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_config_true_value
dedent|''
dedent|''
name|'def'
name|'test_config_true_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_trues'
op|'='
name|'utils'
op|'.'
name|'TRUE_VALUES'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'TRUE_VALUES'
op|'='
string|"'hello world'"
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'for'
name|'val'
name|'in'
string|"'hello world HELLO WORLD'"
op|'.'
name|'split'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'config_true_value'
op|'('
name|'val'
op|')'
name|'is'
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'config_true_value'
op|'('
name|'True'
op|')'
name|'is'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'config_true_value'
op|'('
string|"'foo'"
op|')'
name|'is'
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'config_true_value'
op|'('
name|'False'
op|')'
name|'is'
name|'False'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'TRUE_VALUES'
op|'='
name|'orig_trues'
newline|'\n'
nl|'\n'
DECL|function|test_config_auto_int_value
dedent|''
dedent|''
name|'def'
name|'test_config_auto_int_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expectations'
op|'='
op|'{'
nl|'\n'
comment|'# (value, default) : expected,'
nl|'\n'
op|'('
string|"'1'"
op|','
number|'0'
op|')'
op|':'
number|'1'
op|','
nl|'\n'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|':'
number|'1'
op|','
nl|'\n'
op|'('
string|"'asdf'"
op|','
number|'0'
op|')'
op|':'
name|'ValueError'
op|','
nl|'\n'
op|'('
string|"'auto'"
op|','
number|'1'
op|')'
op|':'
number|'1'
op|','
nl|'\n'
op|'('
string|"'AutO'"
op|','
number|'1'
op|')'
op|':'
number|'1'
op|','
nl|'\n'
op|'('
string|"'Aut0'"
op|','
number|'1'
op|')'
op|':'
name|'ValueError'
op|','
nl|'\n'
op|'('
name|'None'
op|','
number|'1'
op|')'
op|':'
number|'1'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'value'
op|','
name|'default'
op|')'
op|','
name|'expected'
name|'in'
name|'expectations'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'rv'
op|'='
name|'utils'
op|'.'
name|'config_auto_int_value'
op|'('
name|'value'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'__class__'
name|'is'
name|'not'
name|'expected'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'rv'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_streq_const_time
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_streq_const_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'streq_const_time'
op|'('
string|"'abc123'"
op|','
string|"'abc123'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'streq_const_time'
op|'('
string|"'a'"
op|','
string|"'aaaaa'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'streq_const_time'
op|'('
string|"'ABC123'"
op|','
string|"'abc123'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_quorum_size
dedent|''
name|'def'
name|'test_quorum_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_sizes'
op|'='
op|'{'
number|'1'
op|':'
number|'1'
op|','
nl|'\n'
number|'2'
op|':'
number|'2'
op|','
nl|'\n'
number|'3'
op|':'
number|'2'
op|','
nl|'\n'
number|'4'
op|':'
number|'3'
op|','
nl|'\n'
number|'5'
op|':'
number|'3'
op|'}'
newline|'\n'
name|'got_sizes'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'n'
op|','
name|'utils'
op|'.'
name|'quorum_size'
op|'('
name|'n'
op|')'
op|')'
name|'for'
name|'n'
name|'in'
name|'expected_sizes'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_sizes'
op|','
name|'got_sizes'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_rsync_ip_ipv4_localhost
dedent|''
name|'def'
name|'test_rsync_ip_ipv4_localhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'rsync_ip'
op|'('
string|"'127.0.0.1'"
op|')'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_rsync_ip_ipv6_random_ip
dedent|''
name|'def'
name|'test_rsync_ip_ipv6_random_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'rsync_ip'
op|'('
string|"'fe80:0000:0000:0000:0202:b3ff:fe1e:8329'"
op|')'
op|','
nl|'\n'
string|"'[fe80:0000:0000:0000:0202:b3ff:fe1e:8329]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_rsync_ip_ipv6_ipv4_compatible
dedent|''
name|'def'
name|'test_rsync_ip_ipv6_ipv4_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'rsync_ip'
op|'('
string|"'::ffff:192.0.2.128'"
op|')'
op|','
string|"'[::ffff:192.0.2.128]'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fallocate_reserve
dedent|''
name|'def'
name|'test_fallocate_reserve'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|StatVFS
indent|'        '
name|'class'
name|'StatVFS'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|f_frsize
indent|'            '
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
DECL|variable|f_bavail
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fstatvfs
dedent|''
name|'def'
name|'fstatvfs'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'StatVFS'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_FALLOCATE_RESERVE'
op|'='
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
newline|'\n'
name|'orig_fstatvfs'
op|'='
name|'utils'
op|'.'
name|'os'
op|'.'
name|'fstatvfs'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fallocate'
op|'='
name|'utils'
op|'.'
name|'FallocateWrapper'
op|'('
name|'noop'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'os'
op|'.'
name|'fstatvfs'
op|'='
name|'fstatvfs'
newline|'\n'
comment|'# Want 1023 reserved, have 1024 * 1 free, so succeeds'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1023'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# Want 1023 reserved, have 512 * 2 free, so succeeds'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1023'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'512'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# Want 1024 reserved, have 1024 * 1 free, so fails'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1024 <= 1024'"
op|')'
newline|'\n'
comment|'# Want 1024 reserved, have 512 * 2 free, so fails'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'512'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'2'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1024 <= 1024'"
op|')'
newline|'\n'
comment|'# Want 2048 reserved, have 1024 * 1 free, so fails'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'2048'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1024 <= 2048'"
op|')'
newline|'\n'
comment|'# Want 2048 reserved, have 512 * 2 free, so fails'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'2048'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'512'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'2'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1024 <= 2048'"
op|')'
newline|'\n'
comment|'# Want 1023 reserved, have 1024 * 1 free, but file size is 1, so'
nl|'\n'
comment|'# fails'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1023'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1023 <= 1023'"
op|')'
newline|'\n'
comment|'# Want 1022 reserved, have 1024 * 1 free, and file size is 1, so'
nl|'\n'
comment|'# succeeds'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1022'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'1'
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# Want 1023 reserved, have 1024 * 1 free, and file size is 0, so'
nl|'\n'
comment|'# succeeds'
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1023'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# Want 1024 reserved, have 1024 * 1 free, and even though'
nl|'\n'
comment|"# file size is 0, since we're under the reserve, fails"
nl|'\n'
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_frsize'
op|'='
number|'1024'
newline|'\n'
name|'StatVFS'
op|'.'
name|'f_bavail'
op|'='
number|'1'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'FALLOCATE_RESERVE fail 1024 <= 1024'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'FALLOCATE_RESERVE'
op|'='
name|'orig_FALLOCATE_RESERVE'
newline|'\n'
name|'utils'
op|'.'
name|'os'
op|'.'
name|'fstatvfs'
op|'='
name|'orig_fstatvfs'
newline|'\n'
nl|'\n'
DECL|function|test_fallocate_func
dedent|''
dedent|''
name|'def'
name|'test_fallocate_func'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|FallocateWrapper
indent|'        '
name|'class'
name|'FallocateWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'last_call'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'last_call'
op|'='
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_call'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'self'
op|'.'
name|'last_call'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'value'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'orig__sys_fallocate'
op|'='
name|'utils'
op|'.'
name|'_sys_fallocate'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'='
name|'FallocateWrapper'
op|'('
op|')'
newline|'\n'
comment|'# Ensure fallocate calls _sys_fallocate even with 0 bytes'
nl|'\n'
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|'='
name|'None'
newline|'\n'
name|'utils'
op|'.'
name|'fallocate'
op|'('
number|'1234'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|','
nl|'\n'
op|'['
number|'1234'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# Ensure fallocate calls _sys_fallocate even with negative bytes'
nl|'\n'
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|'='
name|'None'
newline|'\n'
name|'utils'
op|'.'
name|'fallocate'
op|'('
number|'1234'
op|','
op|'-'
number|'5678'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|','
nl|'\n'
op|'['
number|'1234'
op|','
number|'1'
op|','
number|'0'
op|','
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# Ensure fallocate calls _sys_fallocate properly with positive'
nl|'\n'
comment|'# bytes'
nl|'\n'
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|'='
name|'None'
newline|'\n'
name|'utils'
op|'.'
name|'fallocate'
op|'('
number|'1234'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|','
nl|'\n'
op|'['
number|'1234'
op|','
number|'1'
op|','
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|'='
name|'None'
newline|'\n'
name|'utils'
op|'.'
name|'fallocate'
op|'('
number|'1234'
op|','
number|'10'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'.'
name|'last_call'
op|','
nl|'\n'
op|'['
number|'1234'
op|','
number|'1'
op|','
number|'0'
op|','
number|'10'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'_sys_fallocate'
op|'='
name|'orig__sys_fallocate'
newline|'\n'
nl|'\n'
DECL|function|test_generate_trans_id
dedent|''
dedent|''
name|'def'
name|'test_generate_trans_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_time'
op|'='
number|'1366428370.5163341'
newline|'\n'
name|'with'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|'.'
name|'time'
op|','
string|"'time'"
op|','
name|'return_value'
op|'='
name|'fake_time'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'trans_id'
op|'='
name|'utils'
op|'.'
name|'generate_trans_id'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'trans_id'
op|')'
op|','
number|'34'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'trans_id'
op|'['
op|':'
number|'2'
op|']'
op|','
string|"'tx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'trans_id'
op|'['
number|'23'
op|']'
op|','
string|"'-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'trans_id'
op|'['
number|'24'
op|':'
op|']'
op|','
number|'16'
op|')'
op|','
name|'int'
op|'('
name|'fake_time'
op|')'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|'.'
name|'time'
op|','
string|"'time'"
op|','
name|'return_value'
op|'='
name|'fake_time'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'trans_id'
op|'='
name|'utils'
op|'.'
name|'generate_trans_id'
op|'('
string|"'-suffix'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'trans_id'
op|')'
op|','
number|'41'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'trans_id'
op|'['
op|':'
number|'2'
op|']'
op|','
string|"'tx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'trans_id'
op|'['
number|'34'
op|':'
op|']'
op|','
string|"'-suffix'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'trans_id'
op|'['
number|'23'
op|']'
op|','
string|"'-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'trans_id'
op|'['
number|'24'
op|':'
number|'34'
op|']'
op|','
number|'16'
op|')'
op|','
name|'int'
op|'('
name|'fake_time'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_trans_id_time
dedent|''
dedent|''
name|'def'
name|'test_get_trans_id_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
string|"'tx8c8bc884cdaf499bb29429aa9c46946e'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
name|'None'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
string|"'tx1df4ff4f55ea45f7b2ec2-0051720c06'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
number|'1366428678'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'time'
op|'.'
name|'asctime'
op|'('
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'ts'
op|')'
op|')'
op|'+'
string|"' UTC'"
op|','
nl|'\n'
string|"'Sat Apr 20 03:31:18 2013 UTC'"
op|')'
newline|'\n'
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
nl|'\n'
string|"'tx1df4ff4f55ea45f7b2ec2-0051720c06-suffix'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
number|'1366428678'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'time'
op|'.'
name|'asctime'
op|'('
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'ts'
op|')'
op|')'
op|'+'
string|"' UTC'"
op|','
nl|'\n'
string|"'Sat Apr 20 03:31:18 2013 UTC'"
op|')'
newline|'\n'
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
name|'None'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
string|"'garbage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
name|'None'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'utils'
op|'.'
name|'get_trans_id_time'
op|'('
string|"'tx1df4ff4f55ea45f7b2ec2-almostright'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ts'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_tpool_reraise
dedent|''
name|'def'
name|'test_tpool_reraise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|'.'
name|'tpool'
op|','
string|"'execute'"
op|','
name|'lambda'
name|'f'
op|':'
name|'f'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'tpool_reraise'
op|'('
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'test1'"
op|')'
op|')'
op|','
string|"'test1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'Exception'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'tpool_reraise'
op|','
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'Exception'
op|'('
string|"'test2'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'BaseException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'tpool_reraise'
op|','
nl|'\n'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'BaseException'
op|'('
string|"'test3'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_lock_file
dedent|''
dedent|''
name|'def'
name|'test_lock_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flags'
op|'='
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_RDWR'
newline|'\n'
name|'with'
name|'NamedTemporaryFile'
op|'('
name|'delete'
op|'='
name|'False'
op|')'
name|'as'
name|'nt'
op|':'
newline|'\n'
indent|'            '
name|'nt'
op|'.'
name|'write'
op|'('
string|'"test string"'
op|')'
newline|'\n'
name|'nt'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'nt'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'lock_file'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'unlink'
op|'='
name|'False'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"test string"'
op|')'
newline|'\n'
comment|"# we have a lock, now let's try to get a newer one"
nl|'\n'
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'fcntl'
op|'.'
name|'flock'
op|','
name|'fd'
op|','
nl|'\n'
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'lock_file'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'unlink'
op|'='
name|'False'
op|','
name|'append'
op|'='
name|'True'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"test string"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|'"\\nanother string"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"test string\\nanother string"'
op|')'
newline|'\n'
nl|'\n'
comment|"# we have a lock, now let's try to get a newer one"
nl|'\n'
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'fcntl'
op|'.'
name|'flock'
op|','
name|'fd'
op|','
nl|'\n'
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'lock_file'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'timeout'
op|'='
number|'3'
op|','
name|'unlink'
op|'='
name|'False'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'utils'
op|'.'
name|'lock_file'
op|'('
nl|'\n'
name|'nt'
op|'.'
name|'name'
op|','
name|'timeout'
op|'='
number|'1'
op|','
name|'unlink'
op|'='
name|'False'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'False'
op|','
string|'"Expected LockTimeout exception"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'utils'
op|'.'
name|'lock_file'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'unlink'
op|'='
name|'True'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|'"test string\\nanother string"'
op|')'
newline|'\n'
comment|"# we have a lock, now let's try to get a newer one"
nl|'\n'
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'nt'
op|'.'
name|'name'
op|','
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'IOError'
op|','
name|'fcntl'
op|'.'
name|'flock'
op|','
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'os'
op|'.'
name|'remove'
op|','
name|'nt'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_path_does_not_exist
dedent|''
dedent|''
name|'def'
name|'test_ismount_path_does_not_exist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|"'bar'"
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_path_not_mount
dedent|''
dedent|''
name|'def'
name|'test_ismount_path_not_mount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
name|'tmpdir'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_path_error
dedent|''
dedent|''
name|'def'
name|'test_ismount_path_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_mock_os_lstat
indent|'        '
name|'def'
name|'_mock_os_lstat'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
number|'13'
op|','
string|'"foo"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|'"os.lstat"'
op|','
name|'_mock_os_lstat'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'utils'
op|'.'
name|'ismount'
op|','
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_path_is_symlink
dedent|''
dedent|''
name|'def'
name|'test_ismount_path_is_symlink'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'link'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"tmp"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'symlink'
op|'('
string|'"/tmp"'
op|','
name|'link'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
name|'link'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_path_is_root
dedent|''
dedent|''
name|'def'
name|'test_ismount_path_is_root'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
string|"'/'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_parent_path_error
dedent|''
name|'def'
name|'test_ismount_parent_path_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'_os_lstat'
op|'='
name|'os'
op|'.'
name|'lstat'
newline|'\n'
nl|'\n'
DECL|function|_mock_os_lstat
name|'def'
name|'_mock_os_lstat'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'".."'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
number|'13'
op|','
string|'"foo"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'_os_lstat'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|'"os.lstat"'
op|','
name|'_mock_os_lstat'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'utils'
op|'.'
name|'ismount'
op|','
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_successes_dev
dedent|''
dedent|''
name|'def'
name|'test_ismount_successes_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'_os_lstat'
op|'='
name|'os'
op|'.'
name|'lstat'
newline|'\n'
nl|'\n'
DECL|class|MockStat
name|'class'
name|'MockStat'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'mode'
op|','
name|'dev'
op|','
name|'ino'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'st_mode'
op|'='
name|'mode'
newline|'\n'
name|'self'
op|'.'
name|'st_dev'
op|'='
name|'dev'
newline|'\n'
name|'self'
op|'.'
name|'st_ino'
op|'='
name|'ino'
newline|'\n'
nl|'\n'
DECL|function|_mock_os_lstat
dedent|''
dedent|''
name|'def'
name|'_mock_os_lstat'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'".."'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'parent'
op|'='
name|'_os_lstat'
op|'('
name|'path'
op|')'
newline|'\n'
name|'return'
name|'MockStat'
op|'('
name|'parent'
op|'.'
name|'st_mode'
op|','
name|'parent'
op|'.'
name|'st_dev'
op|'+'
number|'1'
op|','
nl|'\n'
name|'parent'
op|'.'
name|'st_ino'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'_os_lstat'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|'"os.lstat"'
op|','
name|'_mock_os_lstat'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
name|'tmpdir'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ismount_successes_ino
dedent|''
dedent|''
name|'def'
name|'test_ismount_successes_ino'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'_os_lstat'
op|'='
name|'os'
op|'.'
name|'lstat'
newline|'\n'
nl|'\n'
DECL|class|MockStat
name|'class'
name|'MockStat'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'mode'
op|','
name|'dev'
op|','
name|'ino'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'st_mode'
op|'='
name|'mode'
newline|'\n'
name|'self'
op|'.'
name|'st_dev'
op|'='
name|'dev'
newline|'\n'
name|'self'
op|'.'
name|'st_ino'
op|'='
name|'ino'
newline|'\n'
nl|'\n'
DECL|function|_mock_os_lstat
dedent|''
dedent|''
name|'def'
name|'_mock_os_lstat'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'".."'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'_os_lstat'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'parent_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|'".."'
op|')'
newline|'\n'
name|'child'
op|'='
name|'_os_lstat'
op|'('
name|'path'
op|')'
newline|'\n'
name|'parent'
op|'='
name|'_os_lstat'
op|'('
name|'parent_path'
op|')'
newline|'\n'
name|'return'
name|'MockStat'
op|'('
name|'child'
op|'.'
name|'st_mode'
op|','
name|'parent'
op|'.'
name|'st_ino'
op|','
nl|'\n'
name|'child'
op|'.'
name|'st_dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|'"os.lstat"'
op|','
name|'_mock_os_lstat'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'ismount'
op|'('
name|'tmpdir'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_parse_content_type
dedent|''
dedent|''
name|'def'
name|'test_parse_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|"'text/plain'"
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|"'text/plain;charset=utf-8'"
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'charset'"
op|','
string|"'utf-8'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|'\'text/plain;hello="world";charset=utf-8\''
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'hello'"
op|','
string|'\'"world"\''
op|')'
op|','
op|'('
string|"'charset'"
op|','
string|"'utf-8'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|'\'text/plain; hello="world"; a=b\''
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'hello'"
op|','
string|'\'"world"\''
op|')'
op|','
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|'r\'text/plain; x="\\""; a=b\''
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'x'"
op|','
string|'r\'"\\""\''
op|')'
op|','
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|"r'text/plain; x; a=b'"
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'x'"
op|','
string|"''"
op|')'
op|','
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'parse_content_type'
op|'('
string|'r\'text/plain; x="\\""; a\''
op|')'
op|','
nl|'\n'
op|'('
string|"'text/plain'"
op|','
op|'['
op|'('
string|"'x'"
op|','
string|'r\'"\\""\''
op|')'
op|','
op|'('
string|"'a'"
op|','
string|"''"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_quote
dedent|''
name|'def'
name|'test_quote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'utils'
op|'.'
name|'quote'
op|'('
string|"'/v1/a/c3/subdirx/'"
op|')'
newline|'\n'
name|'assert'
name|'res'
op|'=='
string|"'/v1/a/c3/subdirx/'"
newline|'\n'
name|'res'
op|'='
name|'utils'
op|'.'
name|'quote'
op|'('
string|"'/v1/a&b/c3/subdirx/'"
op|')'
newline|'\n'
name|'assert'
name|'res'
op|'=='
string|"'/v1/a%26b/c3/subdirx/'"
newline|'\n'
name|'res'
op|'='
name|'utils'
op|'.'
name|'quote'
op|'('
string|"'/v1/a&b/c3/subdirx/'"
op|','
name|'safe'
op|'='
string|"'&'"
op|')'
newline|'\n'
name|'assert'
name|'res'
op|'=='
string|"'%2Fv1%2Fa&b%2Fc3%2Fsubdirx%2F'"
newline|'\n'
name|'unicode_sample'
op|'='
string|"u'\\uc77c\\uc601'"
newline|'\n'
name|'account'
op|'='
string|"'abc_'"
op|'+'
name|'unicode_sample'
newline|'\n'
name|'valid_utf8_str'
op|'='
name|'utils'
op|'.'
name|'get_valid_utf8_str'
op|'('
name|'account'
op|')'
newline|'\n'
name|'account'
op|'='
string|"'abc_'"
op|'+'
name|'unicode_sample'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'invalid_utf8_str'
op|'='
name|'utils'
op|'.'
name|'get_valid_utf8_str'
op|'('
name|'account'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'abc_%EC%9D%BC%EC%98%81'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'quote'
op|'('
name|'valid_utf8_str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'abc_%EF%BF%BD%EF%BF%BD%EC%BC%9D%EF%BF%BD'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'quote'
op|'('
name|'invalid_utf8_str'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFileLikeIter
dedent|''
dedent|''
name|'class'
name|'TestFileLikeIter'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_iter_file_iter
indent|'    '
name|'def'
name|'test_iter_file_iter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc'"
op|','
string|"'de'"
op|','
string|"'fghijk'"
op|','
string|"'l'"
op|']'
newline|'\n'
name|'chunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'chunks'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'chunks'
op|','
name|'in_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_next
dedent|''
name|'def'
name|'test_next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc'"
op|','
string|"'de'"
op|','
string|"'fghijk'"
op|','
string|"'l'"
op|']'
newline|'\n'
name|'chunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'iter_file'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'chunks'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'chunks'
op|','
name|'in_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read
dedent|''
name|'def'
name|'test_read'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc'"
op|','
string|"'de'"
op|','
string|"'fghijk'"
op|','
string|"'l'"
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'iter_file'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'in_iter'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_with_size
dedent|''
name|'def'
name|'test_read_with_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc'"
op|','
string|"'de'"
op|','
string|"'fghijk'"
op|','
string|"'l'"
op|']'
newline|'\n'
name|'chunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
name|'iter_file'
op|'.'
name|'read'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'chunk'
op|')'
op|'<='
number|'2'
op|')'
newline|'\n'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'in_iter'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_with_size_zero
dedent|''
name|'def'
name|'test_read_with_size_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# makes little sense, but file supports it, so...'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
string|"'abc'"
op|')'
op|'.'
name|'read'
op|'('
number|'0'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline
dedent|''
name|'def'
name|'test_readline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc\\n'"
op|','
string|"'d'"
op|','
string|"'\\nef'"
op|','
string|"'g\\nh'"
op|','
string|"'\\nij\\n\\nk\\n'"
op|','
string|"'trailing.'"
op|']'
newline|'\n'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'iter_file'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lines'
op|','
nl|'\n'
op|'['
name|'v'
name|'if'
name|'v'
op|'=='
string|"'trailing.'"
name|'else'
name|'v'
op|'+'
string|"'\\n'"
nl|'\n'
name|'for'
name|'v'
name|'in'
string|"''"
op|'.'
name|'join'
op|'('
name|'in_iter'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline2
dedent|''
name|'def'
name|'test_readline2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
op|'['
string|"'abc'"
op|','
string|"'def\\n'"
op|']'
op|')'
op|'.'
name|'readline'
op|'('
number|'4'
op|')'
op|','
nl|'\n'
string|"'abcd'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline3
dedent|''
name|'def'
name|'test_readline3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
op|'['
string|"'a'"
op|'*'
number|'1111'
op|','
string|"'bc\\ndef'"
op|']'
op|')'
op|'.'
name|'readline'
op|'('
op|')'
op|','
nl|'\n'
op|'('
string|"'a'"
op|'*'
number|'1111'
op|')'
op|'+'
string|"'bc\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readline_with_size
dedent|''
name|'def'
name|'test_readline_with_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc\\n'"
op|','
string|"'d'"
op|','
string|"'\\nef'"
op|','
string|"'g\\nh'"
op|','
string|"'\\nij\\n\\nk\\n'"
op|','
string|"'trailing.'"
op|']'
newline|'\n'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'iter_file'
op|'.'
name|'readline'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'lines'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lines'
op|','
nl|'\n'
op|'['
string|"'ab'"
op|','
string|"'c\\n'"
op|','
string|"'d\\n'"
op|','
string|"'ef'"
op|','
string|"'g\\n'"
op|','
string|"'h\\n'"
op|','
string|"'ij'"
op|','
string|"'\\n'"
op|','
string|"'\\n'"
op|','
string|"'k\\n'"
op|','
nl|'\n'
string|"'tr'"
op|','
string|"'ai'"
op|','
string|"'li'"
op|','
string|"'ng'"
op|','
string|"'.'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readlines
dedent|''
name|'def'
name|'test_readlines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc\\n'"
op|','
string|"'d'"
op|','
string|"'\\nef'"
op|','
string|"'g\\nh'"
op|','
string|"'\\nij\\n\\nk\\n'"
op|','
string|"'trailing.'"
op|']'
newline|'\n'
name|'lines'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lines'
op|','
nl|'\n'
op|'['
name|'v'
name|'if'
name|'v'
op|'=='
string|"'trailing.'"
name|'else'
name|'v'
op|'+'
string|"'\\n'"
nl|'\n'
name|'for'
name|'v'
name|'in'
string|"''"
op|'.'
name|'join'
op|'('
name|'in_iter'
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readlines_with_size
dedent|''
name|'def'
name|'test_readlines_with_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_iter'
op|'='
op|'['
string|"'abc\\n'"
op|','
string|"'d'"
op|','
string|"'\\nef'"
op|','
string|"'g\\nh'"
op|','
string|"'\\nij\\n\\nk\\n'"
op|','
string|"'trailing.'"
op|']'
newline|'\n'
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
name|'in_iter'
op|')'
newline|'\n'
name|'lists_of_lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'lines'
op|'='
name|'iter_file'
op|'.'
name|'readlines'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lines'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'lists_of_lines'
op|'.'
name|'append'
op|'('
name|'lines'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'lists_of_lines'
op|','
nl|'\n'
op|'['
op|'['
string|"'ab'"
op|']'
op|','
op|'['
string|"'c\\n'"
op|']'
op|','
op|'['
string|"'d\\n'"
op|']'
op|','
op|'['
string|"'ef'"
op|']'
op|','
op|'['
string|"'g\\n'"
op|']'
op|','
op|'['
string|"'h\\n'"
op|']'
op|','
op|'['
string|"'ij'"
op|']'
op|','
nl|'\n'
op|'['
string|"'\\n'"
op|','
string|"'\\n'"
op|']'
op|','
op|'['
string|"'k\\n'"
op|']'
op|','
op|'['
string|"'tr'"
op|']'
op|','
op|'['
string|"'ai'"
op|']'
op|','
op|'['
string|"'li'"
op|']'
op|','
op|'['
string|"'ng'"
op|']'
op|','
op|'['
string|"'.'"
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_close
dedent|''
name|'def'
name|'test_close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iter_file'
op|'='
name|'utils'
op|'.'
name|'FileLikeIter'
op|'('
string|"'abcdef'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'iter_file'
op|'.'
name|'next'
op|'('
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'iter_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'iter_file'
op|'.'
name|'closed'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'iter_file'
op|'.'
name|'next'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'iter_file'
op|'.'
name|'read'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'iter_file'
op|'.'
name|'readline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'iter_file'
op|'.'
name|'readlines'
op|')'
newline|'\n'
comment|"# Just make sure repeated close calls don't raise an Exception"
nl|'\n'
name|'iter_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'iter_file'
op|'.'
name|'closed'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestStatsdLogging
dedent|''
dedent|''
name|'class'
name|'TestStatsdLogging'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_get_logger_statsd_client_not_specified
indent|'    '
name|'def'
name|'test_get_logger_statsd_client_not_specified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
op|'}'
op|','
string|"'some-name'"
op|','
name|'log_route'
op|'='
string|"'some-route'"
op|')'
newline|'\n'
comment|'# white-box construction validation'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_logger_statsd_client_defaults
dedent|''
name|'def'
name|'test_get_logger_statsd_client_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_statsd_host'"
op|':'
string|"'some.host.com'"
op|'}'
op|','
nl|'\n'
string|"'some-name'"
op|','
name|'log_route'
op|'='
string|"'some-route'"
op|')'
newline|'\n'
comment|'# white-box construction validation'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'StatsdClient'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_host'
op|','
string|"'some.host.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_port'
op|','
number|'8125'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
string|"'some-name.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_default_sample_rate'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'some-name.more-specific'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
nl|'\n'
string|"'some-name.more-specific.'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_logger_statsd_client_non_defaults
dedent|''
name|'def'
name|'test_get_logger_statsd_client_non_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'another.host.com'"
op|','
nl|'\n'
string|"'log_statsd_port'"
op|':'
string|"'9876'"
op|','
nl|'\n'
string|"'log_statsd_default_sample_rate'"
op|':'
string|"'0.75'"
op|','
nl|'\n'
string|"'log_statsd_sample_rate_factor'"
op|':'
string|"'0.81'"
op|','
nl|'\n'
string|"'log_statsd_metric_prefix'"
op|':'
string|"'tomato.sauce'"
op|','
nl|'\n'
op|'}'
op|','
string|"'some-name'"
op|','
name|'log_route'
op|'='
string|"'some-route'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
nl|'\n'
string|"'tomato.sauce.some-name.'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'some-name.more-specific'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
nl|'\n'
string|"'tomato.sauce.some-name.more-specific.'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_prefix'
op|','
string|"'tomato.sauce.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_host'
op|','
string|"'another.host.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_port'
op|','
number|'9876'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_default_sample_rate'
op|','
nl|'\n'
number|'0.75'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
op|'.'
name|'_sample_rate_factor'
op|','
nl|'\n'
number|'0.81'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sample_rates
dedent|''
name|'def'
name|'test_sample_rates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_statsd_host'"
op|':'
string|"'some.host.com'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'mock_socket'
op|'='
name|'MockUdpSocket'
op|'('
op|')'
newline|'\n'
comment|"# encapsulation? what's that?"
nl|'\n'
name|'statsd_client'
op|'='
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'statsd_client'
op|'.'
name|'random'
name|'is'
name|'random'
op|'.'
name|'random'
op|')'
newline|'\n'
nl|'\n'
name|'statsd_client'
op|'.'
name|'_open_socket'
op|'='
name|'lambda'
op|'*'
name|'_'
op|':'
name|'mock_socket'
newline|'\n'
name|'statsd_client'
op|'.'
name|'random'
op|'='
name|'lambda'
op|':'
number|'0.50001'
newline|'\n'
nl|'\n'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'tribbles'"
op|','
name|'sample_rate'
op|'='
number|'0.5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mock_socket'
op|'.'
name|'sent'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'statsd_client'
op|'.'
name|'random'
op|'='
name|'lambda'
op|':'
number|'0.49999'
newline|'\n'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'tribbles'"
op|','
name|'sample_rate'
op|'='
number|'0.5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mock_socket'
op|'.'
name|'sent'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'payload'
op|'='
name|'mock_socket'
op|'.'
name|'sent'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'.'
name|'endswith'
op|'('
string|'"|@0.5"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sample_rates_with_sample_rate_factor
dedent|''
name|'def'
name|'test_sample_rates_with_sample_rate_factor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'some.host.com'"
op|','
nl|'\n'
string|"'log_statsd_default_sample_rate'"
op|':'
string|"'0.82'"
op|','
nl|'\n'
string|"'log_statsd_sample_rate_factor'"
op|':'
string|"'0.91'"
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'effective_sample_rate'
op|'='
number|'0.82'
op|'*'
number|'0.91'
newline|'\n'
nl|'\n'
name|'mock_socket'
op|'='
name|'MockUdpSocket'
op|'('
op|')'
newline|'\n'
comment|"# encapsulation? what's that?"
nl|'\n'
name|'statsd_client'
op|'='
name|'logger'
op|'.'
name|'logger'
op|'.'
name|'statsd_client'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'statsd_client'
op|'.'
name|'random'
name|'is'
name|'random'
op|'.'
name|'random'
op|')'
newline|'\n'
nl|'\n'
name|'statsd_client'
op|'.'
name|'_open_socket'
op|'='
name|'lambda'
op|'*'
name|'_'
op|':'
name|'mock_socket'
newline|'\n'
name|'statsd_client'
op|'.'
name|'random'
op|'='
name|'lambda'
op|':'
name|'effective_sample_rate'
op|'+'
number|'0.001'
newline|'\n'
nl|'\n'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'tribbles'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mock_socket'
op|'.'
name|'sent'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'statsd_client'
op|'.'
name|'random'
op|'='
name|'lambda'
op|':'
name|'effective_sample_rate'
op|'-'
number|'0.001'
newline|'\n'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'tribbles'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mock_socket'
op|'.'
name|'sent'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'payload'
op|'='
name|'mock_socket'
op|'.'
name|'sent'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'.'
name|'endswith'
op|'('
string|'"|@%s"'
op|'%'
name|'effective_sample_rate'
op|')'
op|','
nl|'\n'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'effective_sample_rate'
op|'='
number|'0.587'
op|'*'
number|'0.91'
newline|'\n'
name|'statsd_client'
op|'.'
name|'random'
op|'='
name|'lambda'
op|':'
name|'effective_sample_rate'
op|'-'
number|'0.001'
newline|'\n'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'tribbles'"
op|','
name|'sample_rate'
op|'='
number|'0.587'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mock_socket'
op|'.'
name|'sent'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'payload'
op|'='
name|'mock_socket'
op|'.'
name|'sent'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'.'
name|'endswith'
op|'('
string|'"|@%s"'
op|'%'
name|'effective_sample_rate'
op|')'
op|','
nl|'\n'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_timing_stats
dedent|''
name|'def'
name|'test_timing_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MockController
indent|'        '
name|'class'
name|'MockController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'called'
op|'='
string|"'UNKNOWN'"
newline|'\n'
nl|'\n'
DECL|member|timing_since
dedent|''
name|'def'
name|'timing_since'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'called'
op|'='
string|"'timing'"
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'timing_stats'
op|'('
op|')'
newline|'\n'
DECL|function|METHOD
name|'def'
name|'METHOD'
op|'('
name|'controller'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Response'
op|'('
name|'status'
op|'='
name|'controller'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_controller'
op|'='
name|'MockController'
op|'('
number|'200'
op|')'
newline|'\n'
name|'METHOD'
op|'('
name|'mock_controller'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'called'
op|','
string|"'timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|"'METHOD.timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'mock_controller'
op|'='
name|'MockController'
op|'('
number|'404'
op|')'
newline|'\n'
name|'METHOD'
op|'('
name|'mock_controller'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'called'
op|','
string|"'timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|"'METHOD.timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'mock_controller'
op|'='
name|'MockController'
op|'('
number|'401'
op|')'
newline|'\n'
name|'METHOD'
op|'('
name|'mock_controller'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'called'
op|','
string|"'timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
string|"'METHOD.errors.timing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mock_controller'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnsafeXrange
dedent|''
dedent|''
name|'class'
name|'UnsafeXrange'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Like xrange(limit), but with extra context switching to screw things up.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'upper_bound'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'current'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'concurrent_calls'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'upper_bound'
op|'='
name|'upper_bound'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'concurrent_calls'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"concurrent access is bad, mmmkay? (%r)"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'concurrent_calls'
op|'+='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'current'
op|'>='
name|'self'
op|'.'
name|'upper_bound'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'val'
op|'='
name|'self'
op|'.'
name|'current'
newline|'\n'
name|'self'
op|'.'
name|'current'
op|'+='
number|'1'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
op|')'
comment|'# yield control'
newline|'\n'
name|'return'
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'concurrent_calls'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAffinityKeyFunction
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestAffinityKeyFunction'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nodes'
op|'='
op|'['
name|'dict'
op|'('
name|'id'
op|'='
number|'0'
op|','
name|'region'
op|'='
number|'1'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'region'
op|'='
number|'1'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'2'
op|','
name|'region'
op|'='
number|'2'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'3'
op|','
name|'region'
op|'='
number|'2'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'4'
op|','
name|'region'
op|'='
number|'3'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'5'
op|','
name|'region'
op|'='
number|'3'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'6'
op|','
name|'region'
op|'='
number|'4'
op|','
name|'zone'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'7'
op|','
name|'region'
op|'='
number|'4'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_single_region
dedent|''
name|'def'
name|'test_single_region'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'"r3=1"'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'4'
op|','
number|'5'
op|','
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'6'
op|','
number|'7'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bogus_value
dedent|''
name|'def'
name|'test_bogus_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_key_function'
op|','
string|'"r3"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_key_function'
op|','
string|'"r3=elephant"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_empty_value
dedent|''
name|'def'
name|'test_empty_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Empty's okay, it just means no preference"
nl|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
name|'keyfn'
op|')'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|','
number|'7'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_whitespace_value
dedent|''
name|'def'
name|'test_all_whitespace_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Empty's okay, it just means no preference"
nl|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'"  \\n"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
name|'keyfn'
op|')'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|','
number|'7'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_zone_zero
dedent|''
name|'def'
name|'test_with_zone_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'"r4z0=1"'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'6'
op|','
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'7'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multiple
dedent|''
name|'def'
name|'test_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'"r1=100, r4=200, r3z1=1"'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'4'
op|','
number|'0'
op|','
number|'1'
op|','
number|'6'
op|','
number|'7'
op|','
number|'2'
op|','
number|'3'
op|','
number|'5'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_more_specific_after_less_specific
dedent|''
name|'def'
name|'test_more_specific_after_less_specific'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keyfn'
op|'='
name|'utils'
op|'.'
name|'affinity_key_function'
op|'('
string|'"r2=100, r2z2=50"'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'nodes'
op|','
name|'key'
op|'='
name|'keyfn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'3'
op|','
number|'2'
op|','
number|'0'
op|','
number|'1'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|','
number|'7'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAffinityLocalityPredicate
dedent|''
dedent|''
name|'class'
name|'TestAffinityLocalityPredicate'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nodes'
op|'='
op|'['
name|'dict'
op|'('
name|'id'
op|'='
number|'0'
op|','
name|'region'
op|'='
number|'1'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'region'
op|'='
number|'1'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'2'
op|','
name|'region'
op|'='
number|'2'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'3'
op|','
name|'region'
op|'='
number|'2'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'4'
op|','
name|'region'
op|'='
number|'3'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'5'
op|','
name|'region'
op|'='
number|'3'
op|','
name|'zone'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'6'
op|','
name|'region'
op|'='
number|'4'
op|','
name|'zone'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'7'
op|','
name|'region'
op|'='
number|'4'
op|','
name|'zone'
op|'='
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_empty
dedent|''
name|'def'
name|'test_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pred'
op|'='
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'pred'
name|'is'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_region
dedent|''
name|'def'
name|'test_region'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pred'
op|'='
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|'('
string|"'r1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
name|'pred'
op|')'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'nodes'
name|'if'
name|'pred'
op|'('
name|'n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zone
dedent|''
name|'def'
name|'test_zone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pred'
op|'='
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|'('
string|"'r1z1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
name|'pred'
op|')'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'nodes'
name|'if'
name|'pred'
op|'('
name|'n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'0'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multiple
dedent|''
name|'def'
name|'test_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pred'
op|'='
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|'('
string|"'r1, r3, r4z0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
name|'pred'
op|')'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'nodes'
name|'if'
name|'pred'
op|'('
name|'n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid
dedent|''
name|'def'
name|'test_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|','
string|"'falafel'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|','
string|"'r8zQ'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|','
string|"'r2d2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'affinity_locality_predicate'
op|','
string|"'r1z1=1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestGreenthreadSafeIterator
dedent|''
dedent|''
name|'class'
name|'TestGreenthreadSafeIterator'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|increment
indent|'    '
name|'def'
name|'increment'
op|'('
name|'self'
op|','
name|'iterable'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'plus_ones'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'iterable'
op|':'
newline|'\n'
indent|'            '
name|'plus_ones'
op|'.'
name|'append'
op|'('
name|'n'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'plus_ones'
newline|'\n'
nl|'\n'
DECL|member|test_setup_works
dedent|''
name|'def'
name|'test_setup_works'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# it should work without concurrent access'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'list'
op|'('
name|'UnsafeXrange'
op|'('
number|'4'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iterable'
op|'='
name|'UnsafeXrange'
op|'('
number|'10'
op|')'
newline|'\n'
name|'pile'
op|'='
name|'eventlet'
op|'.'
name|'GreenPile'
op|'('
number|'2'
op|')'
newline|'\n'
name|'for'
name|'_'
name|'in'
name|'xrange'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pile'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'increment'
op|','
name|'iterable'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sorted'
op|'('
op|'['
name|'resp'
name|'for'
name|'resp'
name|'in'
name|'pile'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'False'
op|','
string|'"test setup is insufficiently crazy"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_access_is_serialized
dedent|''
dedent|''
name|'def'
name|'test_access_is_serialized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pile'
op|'='
name|'eventlet'
op|'.'
name|'GreenPile'
op|'('
number|'2'
op|')'
newline|'\n'
name|'iterable'
op|'='
name|'utils'
op|'.'
name|'GreenthreadSafeIterator'
op|'('
name|'UnsafeXrange'
op|'('
number|'10'
op|')'
op|')'
newline|'\n'
name|'for'
name|'_'
name|'in'
name|'xrange'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pile'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'increment'
op|','
name|'iterable'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'sorted'
op|'('
name|'sum'
op|'('
op|'['
name|'resp'
name|'for'
name|'resp'
name|'in'
name|'pile'
op|']'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'range'
op|'('
number|'1'
op|','
number|'11'
op|')'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestStatsdLoggingDelegation
dedent|''
dedent|''
name|'class'
name|'TestStatsdLoggingDelegation'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'bind'
op|'('
op|'('
string|"'localhost'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reader_thread'
op|'='
name|'threading'
op|'.'
name|'Thread'
op|'('
name|'target'
op|'='
name|'self'
op|'.'
name|'statsd_reader'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reader_thread'
op|'.'
name|'setDaemon'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reader_thread'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The "no-op when disabled" test doesn\'t set up a real logger, so'
nl|'\n'
comment|'# create one here so we can tell the reader thread to stop.'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'self'
op|','
string|"'logger'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'localhost'"
op|','
nl|'\n'
string|"'log_statsd_port'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
op|'}'
op|','
string|"'some-name'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'STOP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reader_thread'
op|'.'
name|'join'
op|'('
name|'timeout'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'logger'
newline|'\n'
nl|'\n'
DECL|member|statsd_reader
dedent|''
name|'def'
name|'statsd_reader'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'payload'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'recv'
op|'('
number|'4096'
op|')'
newline|'\n'
name|'if'
name|'payload'
name|'and'
string|"'STOP'"
name|'in'
name|'payload'
op|':'
newline|'\n'
indent|'                    '
name|'return'
number|'42'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'write'
op|'('
string|"'statsd_reader thread: %r'"
op|'%'
op|'('
name|'e'
op|','
op|')'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
DECL|member|_send_and_get
dedent|''
dedent|''
dedent|''
name|'def'
name|'_send_and_get'
op|'('
name|'self'
op|','
name|'sender_fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Because the client library may not actually send a packet with\n        sample_rate < 1, we keep trying until we get one through.\n        """'
newline|'\n'
name|'got'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'not'
name|'got'
op|':'
newline|'\n'
indent|'            '
name|'sender_fn'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'got'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'get'
op|'('
name|'timeout'
op|'='
number|'0.5'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'got'
newline|'\n'
nl|'\n'
DECL|member|assertStat
dedent|''
name|'def'
name|'assertStat'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'sender_fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'got'
op|'='
name|'self'
op|'.'
name|'_send_and_get'
op|'('
name|'sender_fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'got'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertStatMatches
dedent|''
name|'def'
name|'assertStatMatches'
op|'('
name|'self'
op|','
name|'expected_regexp'
op|','
name|'sender_fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'got'
op|'='
name|'self'
op|'.'
name|'_send_and_get'
op|'('
name|'sender_fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'re'
op|'.'
name|'search'
op|'('
name|'expected_regexp'
op|','
name|'got'
op|')'
op|','
nl|'\n'
op|'['
name|'got'
op|','
name|'expected_regexp'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_methods_are_no_ops_when_not_enabled
dedent|''
name|'def'
name|'test_methods_are_no_ops_when_not_enabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
comment|'# No "log_statsd_host" means "disabled"'
nl|'\n'
string|"'log_statsd_port'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
op|'}'
op|','
string|"'some-name'"
op|')'
newline|'\n'
comment|'# Delegate methods are no-ops'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'update_stats'
op|'('
string|"'foo'"
op|','
number|'88'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'update_stats'
op|'('
string|"'foo'"
op|','
number|'88'
op|','
number|'0.57'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'update_stats'
op|'('
string|"'foo'"
op|','
number|'88'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.61'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'foo'"
op|','
number|'0.57'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'foo'"
op|','
name|'sample_rate'
op|'='
number|'0.61'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'decrement'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'decrement'
op|'('
string|"'foo'"
op|','
number|'0.57'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'decrement'
op|'('
string|"'foo'"
op|','
name|'sample_rate'
op|'='
number|'0.61'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing'
op|'('
string|"'foo'"
op|','
number|'88.048'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing'
op|'('
string|"'foo'"
op|','
number|'88.57'
op|','
number|'0.34'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing'
op|'('
string|"'foo'"
op|','
number|'88.998'
op|','
name|'sample_rate'
op|'='
number|'0.82'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing_since'
op|'('
string|"'foo'"
op|','
number|'8938'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing_since'
op|'('
string|"'foo'"
op|','
number|'8948'
op|','
number|'0.57'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'logger'
op|'.'
name|'timing_since'
op|'('
string|"'foo'"
op|','
number|'849398'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.61'
op|')'
op|')'
newline|'\n'
comment|'# Now, the queue should be empty (no UDP packets sent)'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Empty'
op|','
name|'self'
op|'.'
name|'queue'
op|'.'
name|'get_nowait'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delegate_methods_with_no_default_sample_rate
dedent|''
name|'def'
name|'test_delegate_methods_with_no_default_sample_rate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'localhost'"
op|','
nl|'\n'
string|"'log_statsd_port'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
op|'}'
op|','
string|"'some-name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some-name.some.counter:1|c'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some-name.some.counter:-1|c'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some-name.some.operation:4900.0|ms'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.9'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'some-name\\.another\\.operation:\\d+\\.\\d+\\|ms'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.operation'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some-name.another.counter:42|c'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'42'
op|')'
newline|'\n'
nl|'\n'
comment|'# Each call can override the sample_rate (also, bonus prefix test)'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'pfx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:1|c|@0.972'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|','
name|'sample_rate'
op|'='
number|'0.972'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:-1|c|@0.972'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|','
name|'sample_rate'
op|'='
number|'0.972'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.operation:4900.0|ms|@0.972'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.9'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.972'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'pfx\\.another\\.op:\\d+\\.\\d+\\|ms|@0.972'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'sample_rate'
op|'='
number|'0.972'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.another.counter:3|c|@0.972'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.972'
op|')'
newline|'\n'
nl|'\n'
comment|'# Can override sample_rate with non-keyword arg'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.counter:1|c|@0.939'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|','
number|'0.939'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.counter:-1|c|@0.939'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|','
number|'0.939'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.operation:4900.0|ms|@0.939'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
nl|'\n'
number|'4.9'
op|'*'
number|'1000'
op|','
number|'0.939'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'another\\.op:\\d+\\.\\d+\\|ms|@0.939'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
number|'0.939'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'another.counter:3|c|@0.939'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|','
number|'0.939'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delegate_methods_with_default_sample_rate
dedent|''
name|'def'
name|'test_delegate_methods_with_default_sample_rate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'localhost'"
op|','
nl|'\n'
string|"'log_statsd_port'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
string|"'log_statsd_default_sample_rate'"
op|':'
string|"'0.93'"
op|','
nl|'\n'
op|'}'
op|','
string|"'pfx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:1|c|@0.93'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:-1|c|@0.93'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.operation:4760.0|ms|@0.93'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.76'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'pfx\\.another\\.op:\\d+\\.\\d+\\|ms|@0.93'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.another.counter:3|c|@0.93'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# Each call can override the sample_rate'
nl|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:1|c|@0.9912'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|','
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.counter:-1|c|@0.9912'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|','
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.some.operation:4900.0|ms|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.9'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'pfx\\.another\\.op:\\d+\\.\\d+\\|ms|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'pfx.another.counter:3|c|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
nl|'\n'
comment|'# Can override sample_rate with non-keyword arg'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.counter:1|c|@0.987654'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
nl|'\n'
string|"'some.counter'"
op|','
number|'0.987654'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.counter:-1|c|@0.987654'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
nl|'\n'
string|"'some.counter'"
op|','
number|'0.987654'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'some.operation:4900.0|ms|@0.987654'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
nl|'\n'
number|'4.9'
op|'*'
number|'1000'
op|','
number|'0.987654'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'another\\.op:\\d+\\.\\d+\\|ms|@0.987654'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
number|'0.987654'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'another.counter:3|c|@0.987654'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
nl|'\n'
number|'3'
op|','
number|'0.987654'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delegate_methods_with_metric_prefix
dedent|''
name|'def'
name|'test_delegate_methods_with_metric_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
nl|'\n'
string|"'log_statsd_host'"
op|':'
string|"'localhost'"
op|','
nl|'\n'
string|"'log_statsd_port'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'port'
op|')'
op|','
nl|'\n'
string|"'log_statsd_metric_prefix'"
op|':'
string|"'alpha.beta'"
op|','
nl|'\n'
op|'}'
op|','
string|"'pfx'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.pfx.some.counter:1|c'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.pfx.some.counter:-1|c'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
string|"'some.counter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.pfx.some.operation:4760.0|ms'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.76'
op|'*'
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
nl|'\n'
string|"'alpha\\.beta\\.pfx\\.another\\.op:\\d+\\.\\d+\\|ms'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.pfx.another.counter:3|c'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.some.counter:1|c|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|','
string|"'some.counter'"
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.some.counter:-1|c|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'decrement'
op|','
string|"'some.counter'"
op|','
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.some.operation:4900.0|ms|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing'
op|','
string|"'some.operation'"
op|','
number|'4.9'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatMatches'
op|'('
string|"'alpha\\.beta\\.another\\.op:\\d+\\.\\d+\\|ms|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'timing_since'
op|','
string|"'another.op'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStat'
op|'('
string|"'alpha.beta.another.counter:3|c|@0.9912'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'update_stats'
op|','
string|"'another.counter'"
op|','
number|'3'
op|','
nl|'\n'
name|'sample_rate'
op|'='
number|'0.9912'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_valid_utf8_str
dedent|''
name|'def'
name|'test_get_valid_utf8_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unicode_sample'
op|'='
string|"u'\\uc77c\\uc601'"
newline|'\n'
name|'valid_utf8_str'
op|'='
name|'unicode_sample'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
name|'invalid_utf8_str'
op|'='
name|'unicode_sample'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'valid_utf8_str'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_valid_utf8_str'
op|'('
name|'valid_utf8_str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'valid_utf8_str'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_valid_utf8_str'
op|'('
name|'unicode_sample'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\xef\\xbf\\xbd\\xef\\xbf\\xbd\\xec\\xbc\\x9d\\xef\\xbf\\xbd'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_valid_utf8_str'
op|'('
name|'invalid_utf8_str'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_thread_locals
dedent|''
name|'def'
name|'test_thread_locals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|')'
newline|'\n'
name|'orig_thread_locals'
op|'='
name|'logger'
op|'.'
name|'thread_locals'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'thread_locals'
op|','
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'txn_id'
op|'='
string|"'1234'"
newline|'\n'
name|'logger'
op|'.'
name|'client_ip'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'thread_locals'
op|','
op|'('
string|"'1234'"
op|','
string|"'1.2.3.4'"
op|')'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'txn_id'
op|'='
string|"'5678'"
newline|'\n'
name|'logger'
op|'.'
name|'client_ip'
op|'='
string|"'5.6.7.8'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logger'
op|'.'
name|'thread_locals'
op|','
op|'('
string|"'5678'"
op|','
string|"'5.6.7.8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'thread_locals'
op|'='
name|'orig_thread_locals'
newline|'\n'
nl|'\n'
DECL|member|test_no_fdatasync
dedent|''
dedent|''
name|'def'
name|'test_no_fdatasync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|NoFdatasync
name|'class'
name|'NoFdatasync'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fsync
dedent|''
name|'def'
name|'fsync'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.os'"
op|','
name|'NoFdatasync'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.fsync'"
op|','
name|'fsync'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'fdatasync'
op|'('
number|'12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'called'
op|','
op|'['
number|'12345'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yes_fdatasync
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_yes_fdatasync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|YesFdatasync
name|'class'
name|'YesFdatasync'
op|':'
newline|'\n'
nl|'\n'
DECL|member|fdatasync
indent|'            '
name|'def'
name|'fdatasync'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'called'
op|'.'
name|'append'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.os'"
op|','
name|'YesFdatasync'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'fdatasync'
op|'('
number|'12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'called'
op|','
op|'['
number|'12345'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fsync_bad_fullsync
dedent|''
dedent|''
name|'def'
name|'test_fsync_bad_fullsync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|FCNTL
indent|'        '
name|'class'
name|'FCNTL'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|F_FULLSYNC
indent|'            '
name|'F_FULLSYNC'
op|'='
number|'123'
newline|'\n'
nl|'\n'
DECL|member|fcntl
name|'def'
name|'fcntl'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'op'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'IOError'
op|'('
number|'18'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.fcntl'"
op|','
name|'FCNTL'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'lambda'
op|':'
name|'utils'
op|'.'
name|'fsync'
op|'('
number|'12345'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fsync_f_fullsync
dedent|''
dedent|''
name|'def'
name|'test_fsync_f_fullsync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|FCNTL
name|'class'
name|'FCNTL'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|F_FULLSYNC
indent|'            '
name|'F_FULLSYNC'
op|'='
number|'123'
newline|'\n'
nl|'\n'
DECL|member|fcntl
name|'def'
name|'fcntl'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'op'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'called'
op|'['
op|':'
op|']'
op|'='
op|'['
name|'fd'
op|','
name|'op'
op|']'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.fcntl'"
op|','
name|'FCNTL'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'fsync'
op|'('
number|'12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'called'
op|','
op|'['
number|'12345'
op|','
number|'123'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fsync_no_fullsync
dedent|''
dedent|''
name|'def'
name|'test_fsync_no_fullsync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|class|FCNTL
name|'class'
name|'FCNTL'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fsync
dedent|''
name|'def'
name|'fsync'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'.'
name|'append'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'patch'
op|'('
string|"'swift.common.utils.fcntl'"
op|','
name|'FCNTL'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'patch'
op|'('
string|"'os.fsync'"
op|','
name|'fsync'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'fsync'
op|'('
number|'12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'called'
op|','
op|'['
number|'12345'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestThreadpool
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestThreadpool'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_thread_id
indent|'    '
name|'def'
name|'_thread_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'threading'
op|'.'
name|'current_thread'
op|'('
op|')'
op|'.'
name|'ident'
newline|'\n'
nl|'\n'
DECL|member|_capture_args
dedent|''
name|'def'
name|'_capture_args'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'args'"
op|':'
name|'args'
op|','
string|"'kwargs'"
op|':'
name|'kwargs'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_raise_valueerror
dedent|''
name|'def'
name|'_raise_valueerror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
string|"'fishcakes'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_in_thread_with_threads
dedent|''
name|'def'
name|'test_run_in_thread_with_threads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tp'
op|'='
name|'utils'
op|'.'
name|'ThreadPool'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'my_id'
op|'='
name|'self'
op|'.'
name|'_thread_id'
op|'('
op|')'
newline|'\n'
name|'other_id'
op|'='
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_thread_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'my_id'
op|','
name|'other_id'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_capture_args'
op|','
number|'1'
op|','
number|'2'
op|','
name|'bert'
op|'='
string|"'ernie'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
op|'{'
string|"'args'"
op|':'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
string|"'bert'"
op|':'
string|"'ernie'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'caught'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_raise_valueerror'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'caught'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'caught'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_run_in_thread_with_threads
dedent|''
name|'def'
name|'test_force_run_in_thread_with_threads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# with nthreads > 0, force_run_in_thread looks just like run_in_thread'
nl|'\n'
indent|'        '
name|'tp'
op|'='
name|'utils'
op|'.'
name|'ThreadPool'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'my_id'
op|'='
name|'self'
op|'.'
name|'_thread_id'
op|'('
op|')'
newline|'\n'
name|'other_id'
op|'='
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_thread_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'my_id'
op|','
name|'other_id'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_capture_args'
op|','
number|'1'
op|','
number|'2'
op|','
name|'bert'
op|'='
string|"'ernie'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
op|'{'
string|"'args'"
op|':'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
string|"'bert'"
op|':'
string|"'ernie'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'caught'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_raise_valueerror'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'caught'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'caught'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_in_thread_without_threads
dedent|''
name|'def'
name|'test_run_in_thread_without_threads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# with zero threads, run_in_thread doesn't actually do so"
nl|'\n'
indent|'        '
name|'tp'
op|'='
name|'utils'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'my_id'
op|'='
name|'self'
op|'.'
name|'_thread_id'
op|'('
op|')'
newline|'\n'
name|'other_id'
op|'='
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_thread_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'my_id'
op|','
name|'other_id'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_capture_args'
op|','
number|'1'
op|','
number|'2'
op|','
name|'bert'
op|'='
string|"'ernie'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
op|'{'
string|"'args'"
op|':'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
string|"'bert'"
op|':'
string|"'ernie'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'caught'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'run_in_thread'
op|'('
name|'self'
op|'.'
name|'_raise_valueerror'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'caught'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'caught'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_run_in_thread_without_threads
dedent|''
name|'def'
name|'test_force_run_in_thread_without_threads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# with zero threads, force_run_in_thread uses eventlet.tpool'
nl|'\n'
indent|'        '
name|'tp'
op|'='
name|'utils'
op|'.'
name|'ThreadPool'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'my_id'
op|'='
name|'self'
op|'.'
name|'_thread_id'
op|'('
op|')'
newline|'\n'
name|'other_id'
op|'='
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_thread_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'my_id'
op|','
name|'other_id'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_capture_args'
op|','
number|'1'
op|','
number|'2'
op|','
name|'bert'
op|'='
string|"'ernie'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
op|'{'
string|"'args'"
op|':'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
string|"'bert'"
op|':'
string|"'ernie'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'caught'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'tp'
op|'.'
name|'force_run_in_thread'
op|'('
name|'self'
op|'.'
name|'_raise_valueerror'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'caught'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'caught'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestAuditLocationGenerator
dedent|''
dedent|''
name|'class'
name|'TestAuditLocationGenerator'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_non_dir_contents
indent|'    '
name|'def'
name|'test_non_dir_contents'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"drive"'
op|','
string|'"data"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'data'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'data'
op|','
string|'"partition1"'
op|')'
op|','
string|'"w"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'partition'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'data'
op|','
string|'"partition2"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'partition'
op|','
string|'"suffix1"'
op|')'
op|','
string|'"w"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'partition'
op|','
string|'"suffix2"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'suffix'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'suffix'
op|','
string|'"hash1"'
op|')'
op|','
string|'"w"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'locations'
op|'='
name|'utils'
op|'.'
name|'audit_location_generator'
op|'('
nl|'\n'
name|'tmpdir'
op|','
string|'"data"'
op|','
name|'mount_check'
op|'='
name|'False'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'locations'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
