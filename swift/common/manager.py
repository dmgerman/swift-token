begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'resource'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'search_tree'
op|','
name|'remove_file'
op|','
name|'write_file'
newline|'\n'
nl|'\n'
DECL|variable|SWIFT_DIR
name|'SWIFT_DIR'
op|'='
string|"'/etc/swift'"
newline|'\n'
DECL|variable|RUN_DIR
name|'RUN_DIR'
op|'='
string|"'/var/run/swift'"
newline|'\n'
nl|'\n'
comment|'# auth-server has been removed from ALL_SERVERS, start it explicitly'
nl|'\n'
DECL|variable|ALL_SERVERS
name|'ALL_SERVERS'
op|'='
op|'['
string|"'account-auditor'"
op|','
string|"'account-server'"
op|','
string|"'container-auditor'"
op|','
nl|'\n'
string|"'container-replicator'"
op|','
string|"'container-server'"
op|','
string|"'container-sync'"
op|','
nl|'\n'
string|"'container-updater'"
op|','
string|"'object-auditor'"
op|','
string|"'object-server'"
op|','
nl|'\n'
string|"'object-expirer'"
op|','
string|"'object-replicator'"
op|','
string|"'object-updater'"
op|','
nl|'\n'
string|"'proxy-server'"
op|','
string|"'account-replicator'"
op|','
string|"'account-reaper'"
op|']'
newline|'\n'
DECL|variable|MAIN_SERVERS
name|'MAIN_SERVERS'
op|'='
op|'['
string|"'proxy-server'"
op|','
string|"'account-server'"
op|','
string|"'container-server'"
op|','
nl|'\n'
string|"'object-server'"
op|']'
newline|'\n'
DECL|variable|REST_SERVERS
name|'REST_SERVERS'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'ALL_SERVERS'
name|'if'
name|'s'
name|'not'
name|'in'
name|'MAIN_SERVERS'
op|']'
newline|'\n'
DECL|variable|GRACEFUL_SHUTDOWN_SERVERS
name|'GRACEFUL_SHUTDOWN_SERVERS'
op|'='
name|'MAIN_SERVERS'
op|'+'
op|'['
string|"'auth-server'"
op|']'
newline|'\n'
DECL|variable|START_ONCE_SERVERS
name|'START_ONCE_SERVERS'
op|'='
name|'REST_SERVERS'
newline|'\n'
comment|'# These are servers that match a type (account-*, container-*, object-*) but'
nl|'\n'
comment|"# don't use that type-server.conf file and instead use their own."
nl|'\n'
DECL|variable|STANDALONE_SERVERS
name|'STANDALONE_SERVERS'
op|'='
op|'['
string|"'object-expirer'"
op|']'
newline|'\n'
nl|'\n'
DECL|variable|KILL_WAIT
name|'KILL_WAIT'
op|'='
number|'15'
comment|'# seconds to wait for servers to die (by default)'
newline|'\n'
DECL|variable|WARNING_WAIT
name|'WARNING_WAIT'
op|'='
number|'3'
comment|'# seconds to wait after message that may just be a warning'
newline|'\n'
nl|'\n'
DECL|variable|MAX_DESCRIPTORS
name|'MAX_DESCRIPTORS'
op|'='
number|'32768'
newline|'\n'
DECL|variable|MAX_MEMORY
name|'MAX_MEMORY'
op|'='
op|'('
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
op|'*'
number|'2'
comment|'# 2 GB'
newline|'\n'
DECL|variable|MAX_PROCS
name|'MAX_PROCS'
op|'='
number|'8192'
comment|'# workers * disks * threads_per_disk, can get high'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|setup_env
name|'def'
name|'setup_env'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Try to increase resource limits of the OS. Move PYTHON_EGG_CACHE to /tmp\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'setrlimit'
op|'('
name|'resource'
op|'.'
name|'RLIMIT_NOFILE'
op|','
nl|'\n'
op|'('
name|'MAX_DESCRIPTORS'
op|','
name|'MAX_DESCRIPTORS'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'_'
op|'('
string|'"WARNING: Unable to modify file descriptor limit.  "'
nl|'\n'
string|'"Running as non-root?"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'setrlimit'
op|'('
name|'resource'
op|'.'
name|'RLIMIT_DATA'
op|','
nl|'\n'
op|'('
name|'MAX_MEMORY'
op|','
name|'MAX_MEMORY'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'_'
op|'('
string|'"WARNING: Unable to modify memory limit.  "'
nl|'\n'
string|'"Running as non-root?"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'resource'
op|'.'
name|'setrlimit'
op|'('
name|'resource'
op|'.'
name|'RLIMIT_NPROC'
op|','
nl|'\n'
op|'('
name|'MAX_PROCS'
op|','
name|'MAX_PROCS'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'_'
op|'('
string|'"WARNING: Unable to modify max process limit.  "'
nl|'\n'
string|'"Running as non-root?"'
op|')'
newline|'\n'
nl|'\n'
comment|"# Set PYTHON_EGG_CACHE if it isn't already set"
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'environ'
op|'.'
name|'setdefault'
op|'('
string|"'PYTHON_EGG_CACHE'"
op|','
string|"'/tmp'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|command
dedent|''
name|'def'
name|'command'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods are accessible as commands, commands\n    always return 1 or 0, where 0 should indicate success.\n\n    :param func: function to make public\n    """'
newline|'\n'
name|'func'
op|'.'
name|'publicly_accessible'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'return'
number|'1'
name|'if'
name|'rv'
name|'else'
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|watch_server_pids
dedent|''
name|'def'
name|'watch_server_pids'
op|'('
name|'server_pids'
op|','
name|'interval'
op|'='
number|'1'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Monitor a collection of server pids yielding back those pids that\n    aren\'t responding to signals.\n\n    :param server_pids: a dict, lists of pids [int,...] keyed on\n                        Server objects\n    """'
newline|'\n'
name|'status'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'end'
op|'='
name|'start'
op|'+'
name|'interval'
newline|'\n'
name|'server_pids'
op|'='
name|'dict'
op|'('
name|'server_pids'
op|')'
comment|'# make a copy'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'server'
op|','
name|'pids'
name|'in'
name|'server_pids'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'pid'
name|'in'
name|'pids'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
comment|'# let pid stop if it wants to'
nl|'\n'
indent|'                    '
name|'os'
op|'.'
name|'waitpid'
op|'('
name|'pid'
op|','
name|'os'
op|'.'
name|'WNOHANG'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'not'
name|'in'
op|'('
name|'errno'
op|'.'
name|'ECHILD'
op|','
name|'errno'
op|'.'
name|'ESRCH'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
comment|'# else no such child/process'
newline|'\n'
comment|'# check running pids for server'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'status'
op|'['
name|'server'
op|']'
op|'='
name|'server'
op|'.'
name|'get_running_pids'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'for'
name|'pid'
name|'in'
name|'pids'
op|':'
newline|'\n'
comment|'# original pids no longer in running pids!'
nl|'\n'
indent|'                '
name|'if'
name|'pid'
name|'not'
name|'in'
name|'status'
op|'['
name|'server'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'server'
op|','
name|'pid'
newline|'\n'
comment|'# update active pids list using running_pids'
nl|'\n'
dedent|''
dedent|''
name|'server_pids'
op|'['
name|'server'
op|']'
op|'='
name|'status'
op|'['
name|'server'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
op|'['
name|'p'
name|'for'
name|'server'
op|','
name|'pids'
name|'in'
name|'status'
op|'.'
name|'items'
op|'('
op|')'
name|'for'
name|'p'
name|'in'
name|'pids'
op|']'
op|':'
newline|'\n'
comment|'# no more running pids'
nl|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'>'
name|'end'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnknownCommandError
dedent|''
dedent|''
dedent|''
name|'class'
name|'UnknownCommandError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Manager
dedent|''
name|'class'
name|'Manager'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Main class for performing commands on groups of servers.\n\n    :param servers: list of server names as strings\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'servers'
op|','
name|'run_dir'
op|'='
name|'RUN_DIR'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server_names'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'server'
op|'=='
string|"'all'"
op|':'
newline|'\n'
indent|'                '
name|'server_names'
op|'.'
name|'update'
op|'('
name|'ALL_SERVERS'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'server'
op|'=='
string|"'main'"
op|':'
newline|'\n'
indent|'                '
name|'server_names'
op|'.'
name|'update'
op|'('
name|'MAIN_SERVERS'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'server'
op|'=='
string|"'rest'"
op|':'
newline|'\n'
indent|'                '
name|'server_names'
op|'.'
name|'update'
op|'('
name|'REST_SERVERS'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'*'"
name|'in'
name|'server'
op|':'
newline|'\n'
comment|'# convert glob to regex'
nl|'\n'
indent|'                '
name|'server_names'
op|'.'
name|'update'
op|'('
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'ALL_SERVERS'
name|'if'
nl|'\n'
name|'re'
op|'.'
name|'match'
op|'('
name|'server'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
string|"'.*'"
op|')'
op|','
name|'s'
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'server_names'
op|'.'
name|'add'
op|'('
name|'server'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'servers'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'server_names'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'servers'
op|'.'
name|'add'
op|'('
name|'Server'
op|'('
name|'name'
op|','
name|'run_dir'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|status
name|'def'
name|'status'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""display status of tracked pids for server\n        """'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'status'
op|'+='
name|'server'
op|'.'
name|'status'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""starts a server\n        """'
newline|'\n'
name|'setup_env'
op|'('
op|')'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'launch'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'daemon'"
op|','
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'status'
op|'+='
name|'server'
op|'.'
name|'interact'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|"'\\nuser quit'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stop'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'wait'"
op|','
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|'+='
name|'server'
op|'.'
name|'wait'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|no_wait
name|'def'
name|'no_wait'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""spawn server and return immediately\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'wait'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'start'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|no_daemon
name|'def'
name|'no_daemon'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""start a server interactively\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'daemon'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'start'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|once
name|'def'
name|'once'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""start server and run one pass on supporting daemons\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'once'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'start'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""stops a server\n        """'
newline|'\n'
name|'server_pids'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'signaled_pids'
op|'='
name|'server'
op|'.'
name|'stop'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'signaled_pids'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'_'
op|'('
string|"'No %s running'"
op|')'
op|'%'
name|'server'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'server_pids'
op|'['
name|'server'
op|']'
op|'='
name|'signaled_pids'
newline|'\n'
nl|'\n'
comment|'# all signaled_pids, i.e. list(itertools.chain(*server_pids.values()))'
nl|'\n'
dedent|''
dedent|''
name|'signaled_pids'
op|'='
op|'['
name|'p'
name|'for'
name|'server'
op|','
name|'pids'
name|'in'
name|'server_pids'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'for'
name|'p'
name|'in'
name|'pids'
op|']'
newline|'\n'
comment|'# keep track of the pids yeiled back as killed for all servers'
nl|'\n'
name|'killed_pids'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'kill_wait'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'kill_wait'"
op|','
name|'KILL_WAIT'
op|')'
newline|'\n'
name|'for'
name|'server'
op|','
name|'killed_pid'
name|'in'
name|'watch_server_pids'
op|'('
name|'server_pids'
op|','
nl|'\n'
name|'interval'
op|'='
name|'kill_wait'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'_'
op|'('
string|'"%s (%s) appears to have stopped"'
op|')'
op|'%'
op|'('
name|'server'
op|','
name|'killed_pid'
op|')'
newline|'\n'
name|'killed_pids'
op|'.'
name|'add'
op|'('
name|'killed_pid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'killed_pids'
op|'.'
name|'symmetric_difference'
op|'('
name|'signaled_pids'
op|')'
op|':'
newline|'\n'
comment|'# all proccesses have been stopped'
nl|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
comment|'# reached interval n watch_pids w/o killing all servers'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'server'
op|','
name|'pids'
name|'in'
name|'server_pids'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'killed_pids'
op|'.'
name|'issuperset'
op|'('
name|'pids'
op|')'
op|':'
newline|'\n'
comment|'# some pids of this server were not killed'
nl|'\n'
indent|'                '
name|'print'
name|'_'
op|'('
string|"'Waited %s seconds for %s to die; giving up'"
op|')'
op|'%'
op|'('
nl|'\n'
name|'kill_wait'
op|','
name|'server'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|shutdown
name|'def'
name|'shutdown'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""allow current requests to finish on supporting servers\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'graceful'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'status'
op|'+='
name|'self'
op|'.'
name|'stop'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'status'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|restart
name|'def'
name|'restart'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""stops then restarts server\n        """'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'status'
op|'+='
name|'self'
op|'.'
name|'stop'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'status'
op|'+='
name|'self'
op|'.'
name|'start'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'status'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|reload
name|'def'
name|'reload'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""graceful shutdown then restart on supporting servers\n        """'
newline|'\n'
name|'kwargs'
op|'['
string|"'graceful'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'self'
op|'.'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'Manager'
op|'('
op|'['
name|'server'
op|'.'
name|'server'
op|']'
op|')'
newline|'\n'
name|'status'
op|'+='
name|'m'
op|'.'
name|'stop'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'status'
op|'+='
name|'m'
op|'.'
name|'start'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'command'
newline|'\n'
DECL|member|force_reload
name|'def'
name|'force_reload'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""alias for reload\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'reload'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find and return the decorated method named like cmd\n\n        :param cmd: the command to get, a string, if not found raises\n                    UnknownCommandError\n\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'cmd'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnknownCommandError'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'f'
op|','
string|"'publicly_accessible'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnknownCommandError'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|list_commands
name|'def'
name|'list_commands'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all publicly accessible commands\n\n        :returns: a list of string tuples (cmd, help), the method names who are\n                  decorated as commands\n        """'
newline|'\n'
name|'get_method'
op|'='
name|'lambda'
name|'cmd'
op|':'
name|'getattr'
op|'('
name|'cls'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'sorted'
op|'('
op|'['
op|'('
name|'x'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'-'"
op|')'
op|','
name|'get_method'
op|'('
name|'x'
op|')'
op|'.'
name|'__doc__'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'dir'
op|'('
name|'cls'
op|')'
name|'if'
nl|'\n'
name|'getattr'
op|'('
name|'get_method'
op|'('
name|'x'
op|')'
op|','
string|"'publicly_accessible'"
op|','
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_command
dedent|''
name|'def'
name|'run_command'
op|'('
name|'self'
op|','
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find the named command and run it\n\n        :param cmd: the command name to run\n\n        """'
newline|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'get_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'f'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Server
dedent|''
dedent|''
name|'class'
name|'Server'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manage operations on a server or group of servers of similar type\n\n    :param server: name of server\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'run_dir'
op|'='
name|'RUN_DIR'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'-'"
name|'not'
name|'in'
name|'server'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'='
string|"'%s-server'"
op|'%'
name|'server'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'server'
op|'='
name|'server'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'server'
op|'.'
name|'rsplit'
op|'('
string|"'-'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'cmd'
op|'='
string|"'swift-%s'"
op|'%'
name|'server'
newline|'\n'
name|'self'
op|'.'
name|'procs'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'run_dir'
op|'='
name|'run_dir'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'server'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s(%s)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'repr'
op|'('
name|'str'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__hash__
dedent|''
name|'def'
name|'__hash__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hash'
op|'('
name|'str'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'server'
op|'=='
name|'other'
op|'.'
name|'server'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_pid_file_name
dedent|''
dedent|''
name|'def'
name|'get_pid_file_name'
op|'('
name|'self'
op|','
name|'conf_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Translate conf_file to a corresponding pid_file\n\n        :param conf_file: an conf_file for this server, a string\n\n        :returns: the pid_file for this conf_file\n\n        """'
newline|'\n'
name|'return'
name|'conf_file'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'SWIFT_DIR'
op|')'
op|','
name|'self'
op|'.'
name|'run_dir'
op|','
number|'1'
op|')'
op|'.'
name|'replace'
op|'('
nl|'\n'
string|"'%s-server'"
op|'%'
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'server'
op|','
number|'1'
op|')'
op|'.'
name|'replace'
op|'('
nl|'\n'
string|"'.conf'"
op|','
string|"'.pid'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_conf_file_name
dedent|''
name|'def'
name|'get_conf_file_name'
op|'('
name|'self'
op|','
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Translate pid_file to a corresponding conf_file\n\n        :param pid_file: a pid_file for this server, a string\n\n        :returns: the conf_file for this pid_file\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'server'
name|'in'
name|'STANDALONE_SERVERS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'pid_file'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'self'
op|'.'
name|'run_dir'
op|')'
op|','
name|'SWIFT_DIR'
op|','
number|'1'
op|')'
op|'.'
name|'replace'
op|'('
nl|'\n'
string|"'.pid'"
op|','
string|"'.conf'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'pid_file'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'self'
op|'.'
name|'run_dir'
op|')'
op|','
name|'SWIFT_DIR'
op|','
number|'1'
op|')'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'server'
op|','
string|"'%s-server'"
op|'%'
name|'self'
op|'.'
name|'type'
op|','
number|'1'
op|')'
op|'.'
name|'replace'
op|'('
nl|'\n'
string|"'.pid'"
op|','
string|"'.conf'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|conf_files
dedent|''
dedent|''
name|'def'
name|'conf_files'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get conf files for this server\n\n        :param: number, if supplied will only lookup the nth server\n\n        :returns: list of conf files\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'server'
name|'in'
name|'STANDALONE_SERVERS'
op|':'
newline|'\n'
indent|'            '
name|'found_conf_files'
op|'='
name|'search_tree'
op|'('
name|'SWIFT_DIR'
op|','
name|'self'
op|'.'
name|'server'
op|'+'
string|"'*'"
op|','
nl|'\n'
string|"'.conf'"
op|','
name|'dir_ext'
op|'='
string|"'.conf.d'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'found_conf_files'
op|'='
name|'search_tree'
op|'('
name|'SWIFT_DIR'
op|','
string|"'%s-server*'"
op|'%'
name|'self'
op|'.'
name|'type'
op|','
nl|'\n'
string|"'.conf'"
op|','
name|'dir_ext'
op|'='
string|"'.conf.d'"
op|')'
newline|'\n'
dedent|''
name|'number'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'number'"
op|')'
newline|'\n'
name|'if'
name|'number'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conf_files'
op|'='
op|'['
name|'found_conf_files'
op|'['
name|'number'
op|'-'
number|'1'
op|']'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'conf_files'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'conf_files'
op|'='
name|'found_conf_files'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'conf_files'
op|':'
newline|'\n'
comment|"# maybe there's a config file(s) out there, but I couldn't find it!"
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'quiet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'_'
op|'('
string|"'Unable to locate config %sfor %s'"
op|')'
op|'%'
op|'('
nl|'\n'
op|'('
string|"'number %s '"
op|'%'
name|'number'
name|'if'
name|'number'
name|'else'
string|"''"
op|')'
op|','
name|'self'
op|'.'
name|'server'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'verbose'"
op|')'
name|'and'
name|'not'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'quiet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'found_conf_files'
op|':'
newline|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|"'Found configs:'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'i'
op|','
name|'conf_file'
name|'in'
name|'enumerate'
op|'('
name|'found_conf_files'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'print'
string|"'  %d) %s'"
op|'%'
op|'('
name|'i'
op|'+'
number|'1'
op|','
name|'conf_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'conf_files'
newline|'\n'
nl|'\n'
DECL|member|pid_files
dedent|''
name|'def'
name|'pid_files'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get pid files for this server\n\n        :param: number, if supplied will only lookup the nth server\n\n        :returns: list of pid files\n        """'
newline|'\n'
name|'pid_files'
op|'='
name|'search_tree'
op|'('
name|'self'
op|'.'
name|'run_dir'
op|','
string|"'%s*'"
op|'%'
name|'self'
op|'.'
name|'server'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'number'"
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_files'
op|'='
name|'self'
op|'.'
name|'conf_files'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# filter pid_files to match the index of numbered conf_file'
nl|'\n'
name|'pid_files'
op|'='
op|'['
name|'pid_file'
name|'for'
name|'pid_file'
name|'in'
name|'pid_files'
name|'if'
nl|'\n'
name|'self'
op|'.'
name|'get_conf_file_name'
op|'('
name|'pid_file'
op|')'
name|'in'
name|'conf_files'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'pid_files'
newline|'\n'
nl|'\n'
DECL|member|iter_pid_files
dedent|''
name|'def'
name|'iter_pid_files'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generator, yields (pid_file, pids)\n        """'
newline|'\n'
name|'for'
name|'pid_file'
name|'in'
name|'self'
op|'.'
name|'pid_files'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'pid_file'
op|','
name|'int'
op|'('
name|'open'
op|'('
name|'pid_file'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|signal_pids
dedent|''
dedent|''
name|'def'
name|'signal_pids'
op|'('
name|'self'
op|','
name|'sig'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a signal to pids for this server\n\n        :param sig: signal to send\n\n        :returns: a dict mapping pids (ints) to pid_files (paths)\n\n        """'
newline|'\n'
name|'pids'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'pid_file'
op|','
name|'pid'
name|'in'
name|'self'
op|'.'
name|'iter_pid_files'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sig'
op|'!='
name|'signal'
op|'.'
name|'SIG_DFL'
op|':'
newline|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|"'Signal %s  pid: %s  signal: %s'"
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'server'
op|','
nl|'\n'
name|'pid'
op|','
name|'sig'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'kill'
op|'('
name|'pid'
op|','
name|'sig'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ESRCH'
op|':'
newline|'\n'
comment|'# pid does not exist'
nl|'\n'
indent|'                    '
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'verbose'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'print'
name|'_'
op|'('
string|'"Removing stale pid file %s"'
op|')'
op|'%'
name|'pid_file'
newline|'\n'
dedent|''
name|'remove_file'
op|'('
name|'pid_file'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EPERM'
op|':'
newline|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|'"No permission to signal PID %d"'
op|')'
op|'%'
name|'pid'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# process exists'
nl|'\n'
indent|'                '
name|'pids'
op|'['
name|'pid'
op|']'
op|'='
name|'pid_file'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'pids'
newline|'\n'
nl|'\n'
DECL|member|get_running_pids
dedent|''
name|'def'
name|'get_running_pids'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get running pids\n\n        :returns: a dict mapping pids (ints) to pid_files (paths)\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'signal_pids'
op|'('
name|'signal'
op|'.'
name|'SIG_DFL'
op|','
op|'**'
name|'kwargs'
op|')'
comment|'# send noop'
newline|'\n'
nl|'\n'
DECL|member|kill_running_pids
dedent|''
name|'def'
name|'kill_running_pids'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Kill running pids\n\n        :param graceful: if True, attempt SIGHUP on supporting servers\n\n        :returns: a dict mapping pids (ints) to pid_files (paths)\n\n        """'
newline|'\n'
name|'graceful'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'graceful'"
op|')'
newline|'\n'
name|'if'
name|'graceful'
name|'and'
name|'self'
op|'.'
name|'server'
name|'in'
name|'GRACEFUL_SHUTDOWN_SERVERS'
op|':'
newline|'\n'
indent|'            '
name|'sig'
op|'='
name|'signal'
op|'.'
name|'SIGHUP'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sig'
op|'='
name|'signal'
op|'.'
name|'SIGTERM'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'signal_pids'
op|'('
name|'sig'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|status
dedent|''
name|'def'
name|'status'
op|'('
name|'self'
op|','
name|'pids'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Display status of server\n\n        :param: pids, if not supplied pids will be populated automatically\n        :param: number, if supplied will only lookup the nth server\n\n        :returns: 1 if server is not running, 0 otherwise\n        """'
newline|'\n'
name|'if'
name|'pids'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pids'
op|'='
name|'self'
op|'.'
name|'get_running_pids'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'pids'
op|':'
newline|'\n'
indent|'            '
name|'number'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'number'"
op|','
number|'0'
op|')'
newline|'\n'
name|'if'
name|'number'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|"'quiet'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'conf_files'
op|'='
name|'self'
op|'.'
name|'conf_files'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'conf_files'
op|':'
newline|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|'"%s #%d not running (%s)"'
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'number'
op|','
nl|'\n'
name|'conf_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'_'
op|'('
string|'"No %s running"'
op|')'
op|'%'
name|'self'
op|'.'
name|'server'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'for'
name|'pid'
op|','
name|'pid_file'
name|'in'
name|'pids'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'self'
op|'.'
name|'get_conf_file_name'
op|'('
name|'pid_file'
op|')'
newline|'\n'
name|'print'
name|'_'
op|'('
string|'"%s running (%s - %s)"'
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'pid'
op|','
name|'conf_file'
op|')'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'conf_file'
op|','
name|'once'
op|'='
name|'False'
op|','
name|'wait'
op|'='
name|'True'
op|','
name|'daemon'
op|'='
name|'True'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Launch a subprocess for this server.\n\n        :param conf_file: path to conf_file to use as first arg\n        :param once: boolean, add once argument to command\n        :param wait: boolean, if true capture stdout with a pipe\n        :param daemon: boolean, if true ask server to log to console\n\n        :returns : the pid of the spawned process\n        """'
newline|'\n'
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'cmd'
op|','
name|'conf_file'
op|']'
newline|'\n'
name|'if'
name|'once'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
string|"'once'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'daemon'
op|':'
newline|'\n'
comment|'# ask the server to log to console'
nl|'\n'
indent|'            '
name|'args'
op|'.'
name|'append'
op|'('
string|"'verbose'"
op|')'
newline|'\n'
nl|'\n'
comment|"# figure out what we're going to do with stdio"
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'daemon'
op|':'
newline|'\n'
comment|'# do nothing, this process is open until the spawns close anyway'
nl|'\n'
indent|'            '
name|'re_out'
op|'='
name|'None'
newline|'\n'
name|'re_err'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'re_err'
op|'='
name|'subprocess'
op|'.'
name|'STDOUT'
newline|'\n'
name|'if'
name|'wait'
op|':'
newline|'\n'
comment|"# we're going to need to block on this..."
nl|'\n'
indent|'                '
name|'re_out'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'re_out'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'devnull'
op|','
string|"'w+b'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'proc'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'args'
op|','
name|'stdout'
op|'='
name|'re_out'
op|','
name|'stderr'
op|'='
name|'re_err'
op|')'
newline|'\n'
name|'pid_file'
op|'='
name|'self'
op|'.'
name|'get_pid_file_name'
op|'('
name|'conf_file'
op|')'
newline|'\n'
name|'write_file'
op|'('
name|'pid_file'
op|','
name|'proc'
op|'.'
name|'pid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'procs'
op|'.'
name|'append'
op|'('
name|'proc'
op|')'
newline|'\n'
name|'return'
name|'proc'
op|'.'
name|'pid'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wait on spawned procs to start\n        """'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'proc'
name|'in'
name|'self'
op|'.'
name|'procs'
op|':'
newline|'\n'
comment|'# wait for process to close its stdout'
nl|'\n'
indent|'            '
name|'output'
op|'='
name|'proc'
op|'.'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'output'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'output'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
comment|'# wait for process to die (output may just be a warning)'
nl|'\n'
name|'while'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|'<'
name|'WARNING_WAIT'
op|':'
newline|'\n'
indent|'                    '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
name|'if'
name|'proc'
op|'.'
name|'poll'
op|'('
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'status'
op|'+='
name|'proc'
op|'.'
name|'returncode'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
DECL|member|interact
dedent|''
name|'def'
name|'interact'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        wait on spawned procs to terminate\n        """'
newline|'\n'
name|'status'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'proc'
name|'in'
name|'self'
op|'.'
name|'procs'
op|':'
newline|'\n'
comment|'# wait for process to terminate'
nl|'\n'
indent|'            '
name|'proc'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'proc'
op|'.'
name|'returncode'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
DECL|member|launch
dedent|''
name|'def'
name|'launch'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Collect conf files and attempt to spawn the processes for this server\n        """'
newline|'\n'
name|'conf_files'
op|'='
name|'self'
op|'.'
name|'conf_files'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'conf_files'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'pids'
op|'='
name|'self'
op|'.'
name|'get_running_pids'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'already_started'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'pid'
op|','
name|'pid_file'
name|'in'
name|'pids'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'self'
op|'.'
name|'get_conf_file_name'
op|'('
name|'pid_file'
op|')'
newline|'\n'
comment|"# for legacy compat you can't start other servers if one server is"
nl|'\n'
comment|'# already running (unless -n specifies which one you want), this'
nl|'\n'
comment|'# restriction could potentially be lifted, and launch could start'
nl|'\n'
comment|'# any unstarted instances'
nl|'\n'
name|'if'
name|'conf_file'
name|'in'
name|'conf_files'
op|':'
newline|'\n'
indent|'                '
name|'already_started'
op|'='
name|'True'
newline|'\n'
name|'print'
name|'_'
op|'('
string|'"%s running (%s - %s)"'
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'pid'
op|','
name|'conf_file'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'number'"
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'already_started'
op|'='
name|'True'
newline|'\n'
name|'print'
name|'_'
op|'('
string|'"%s running (%s - %s)"'
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'server'
op|','
name|'pid'
op|','
name|'pid_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'already_started'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'_'
op|'('
string|'"%s already started..."'
op|')'
op|'%'
name|'self'
op|'.'
name|'server'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'server'
name|'not'
name|'in'
name|'START_ONCE_SERVERS'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'once'"
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'pids'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'conf_file'
name|'in'
name|'conf_files'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'once'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Running %s once'"
op|')'
op|'%'
name|'self'
op|'.'
name|'server'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Starting %s'"
op|')'
op|'%'
name|'self'
op|'.'
name|'server'
newline|'\n'
dedent|''
name|'print'
string|"'%s...(%s)'"
op|'%'
op|'('
name|'msg'
op|','
name|'conf_file'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'pid'
op|'='
name|'self'
op|'.'
name|'spawn'
op|'('
name|'conf_file'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
comment|'#TODO(clayg): should I check if self.cmd exists earlier?'
nl|'\n'
indent|'                    '
name|'print'
name|'_'
op|'('
string|'"%s does not exist"'
op|')'
op|'%'
name|'self'
op|'.'
name|'cmd'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'pids'
op|'['
name|'pid'
op|']'
op|'='
name|'conf_file'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'pids'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send stop signals to pids for this server\n\n        :returns: a dict mapping pids (ints) to pid_files (paths)\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'kill_running_pids'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
