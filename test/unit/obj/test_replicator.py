begin_unit
comment|'# Copyright (c) 2010 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
nl|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'gzip'
name|'import'
name|'GzipFile'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'fcntl'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'subprocess'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
name|'import'
name|'replicator'
name|'as'
name|'object_replicator'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'ring'
newline|'\n'
nl|'\n'
DECL|function|_ips
name|'def'
name|'_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
string|"'127.0.0.0'"
op|','
op|']'
newline|'\n'
dedent|''
name|'object_replicator'
op|'.'
name|'whataremyips'
op|'='
name|'_ips'
newline|'\n'
nl|'\n'
DECL|class|NullHandler
name|'class'
name|'NullHandler'
op|'('
name|'logging'
op|'.'
name|'Handler'
op|')'
op|':'
newline|'\n'
DECL|member|emit
indent|'    '
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|variable|null_logger
dedent|''
dedent|''
name|'null_logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"testing"'
op|')'
newline|'\n'
name|'null_logger'
op|'.'
name|'addHandler'
op|'('
name|'NullHandler'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MockProcess
name|'class'
name|'MockProcess'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|ret_code
indent|'    '
name|'ret_code'
op|'='
name|'None'
newline|'\n'
DECL|variable|ret_log
name|'ret_log'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|class|Stream
name|'class'
name|'Stream'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|read
indent|'        '
name|'def'
name|'read'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'MockProcess'
op|'.'
name|'ret_log'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stdout'
op|'='
name|'self'
op|'.'
name|'Stream'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'ret_code'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|_mock_process
name|'def'
name|'_mock_process'
op|'('
name|'ret'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'orig_process'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
newline|'\n'
name|'MockProcess'
op|'.'
name|'ret_code'
op|'='
op|'('
name|'i'
op|'['
number|'0'
op|']'
name|'for'
name|'i'
name|'in'
name|'ret'
op|')'
newline|'\n'
name|'MockProcess'
op|'.'
name|'ret_log'
op|'='
op|'('
name|'i'
op|'['
number|'1'
op|']'
name|'for'
name|'i'
name|'in'
name|'ret'
op|')'
newline|'\n'
name|'object_replicator'
op|'.'
name|'subprocess'
op|'.'
name|'Popen'
op|'='
name|'MockProcess'
newline|'\n'
name|'yield'
newline|'\n'
name|'object_replicator'
op|'.'
name|'subprocess'
op|'.'
name|'Popen'
op|'='
name|'orig_process'
newline|'\n'
nl|'\n'
DECL|function|_create_test_ring
dedent|''
name|'def'
name|'_create_test_ring'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'testgz'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'object.ring.gz'"
op|')'
newline|'\n'
name|'intended_replica2part2dev_id'
op|'='
op|'['
nl|'\n'
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
nl|'\n'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'0'
op|','
number|'5'
op|','
number|'6'
op|','
number|'4'
op|']'
op|','
nl|'\n'
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|','
number|'1'
op|','
number|'6'
op|','
number|'4'
op|','
number|'5'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'intended_devs'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'0'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.0'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'1'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'2'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'4'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.3'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'4'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'5'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.4'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'5'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'6'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.5'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'6'
op|','
string|"'device'"
op|':'
string|"'sda'"
op|','
string|"'zone'"
op|':'
number|'7'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.6'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'intended_part_shift'
op|'='
number|'30'
newline|'\n'
name|'intended_reload_time'
op|'='
number|'15'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
name|'ring'
op|'.'
name|'RingData'
op|'('
name|'intended_replica2part2dev_id'
op|','
nl|'\n'
name|'intended_devs'
op|','
name|'intended_part_shift'
op|')'
op|','
nl|'\n'
name|'GzipFile'
op|'('
name|'testgz'
op|','
string|"'wb'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'ring'
op|'.'
name|'Ring'
op|'('
name|'testgz'
op|','
name|'reload_time'
op|'='
name|'intended_reload_time'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectReplicator
dedent|''
name|'class'
name|'TestObjectReplicator'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Setup a test ring (stolen from common/test_ring.py)'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/dev/shm'"
op|','
string|"'test_replicator'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'devices'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'node'"
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'devices'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objects'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda'"
op|','
string|"'objects'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
op|'['
string|"'0'"
op|','
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects'
op|','
name|'part'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'ring'
op|'='
name|'_create_test_ring'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'swift_dir'
op|'='
name|'self'
op|'.'
name|'testdir'
op|','
name|'devices'
op|'='
name|'self'
op|'.'
name|'devices'
op|','
name|'mount_check'
op|'='
string|"'false'"
op|','
nl|'\n'
name|'timeout'
op|'='
string|"'300'"
op|','
name|'stats_interval'
op|'='
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'replicator'
op|'='
name|'object_replicator'
op|'.'
name|'ObjectReplicator'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'conf'
op|')'
newline|'\n'
nl|'\n'
comment|'#    def test_check_ring(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|'#        self.assertTrue(self.replicator.check_ring())'
nl|'\n'
comment|'#        orig_check = self.replicator.next_check'
nl|'\n'
comment|'#        self.replicator.next_check = orig_check - 30'
nl|'\n'
comment|'#        self.assertTrue(self.replicator.check_ring())'
nl|'\n'
comment|'#        self.replicator.next_check = orig_check'
nl|'\n'
comment|'#        orig_ring_time = self.replicator.object_ring._mtime'
nl|'\n'
comment|'#        self.replicator.object_ring._mtime = orig_ring_time - 30'
nl|'\n'
comment|'#        self.assertTrue(self.replicator.check_ring())'
nl|'\n'
comment|'#        self.replicator.next_check = orig_check - 30'
nl|'\n'
comment|'#        self.assertFalse(self.replicator.check_ring())'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_collect_jobs(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|"#        self.assertTrue('1' in self.replicator.parts_to_delete)"
nl|'\n'
comment|'#        self.assertEquals('
nl|'\n'
comment|"#            [node['id'] for node in self.replicator.partitions['0']['nodes']],"
nl|'\n'
comment|'#            [1,2])'
nl|'\n'
comment|'#        self.assertEquals('
nl|'\n'
comment|"#            [node['id'] for node in self.replicator.partitions['1']['nodes']],"
nl|'\n'
comment|'#            [1,2,3])'
nl|'\n'
comment|'#        self.assertEquals('
nl|'\n'
comment|"#            [node['id'] for node in self.replicator.partitions['2']['nodes']],"
nl|'\n'
comment|'#            [2,3])'
nl|'\n'
comment|'#        self.assertEquals('
nl|'\n'
comment|"#            [node['id'] for node in self.replicator.partitions['3']['nodes']],"
nl|'\n'
comment|'#            [3,1])'
nl|'\n'
comment|"#        for part in ['0', '1', '2', '3']:"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.partitions[part]['device'], 'sda')"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.partitions[part]['path'],"
nl|'\n'
comment|'#                self.objects)'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_delete_partition(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|"#        part_path = os.path.join(self.objects, '1')"
nl|'\n'
comment|'#        self.assertTrue(os.access(part_path, os.F_OK))'
nl|'\n'
comment|"#        self.replicator.delete_partition('1')"
nl|'\n'
comment|'#        self.assertFalse(os.access(part_path, os.F_OK))'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_rsync(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|"#        with _mock_process([(0,''), (0,''), (0,'')]):"
nl|'\n'
comment|"#            self.replicator.rsync('0')"
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_rsync_delete_no(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|'#        with _mock_process([(-1, "stuff in log"), (-1, "stuff in log"),'
nl|'\n'
comment|"#                (0,''), (0,'')]):"
nl|'\n'
comment|"#            self.replicator.rsync('1')"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.parts_to_delete['1'],"
nl|'\n'
comment|'#                [False, True, True])'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_rsync_delete_yes(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|"#        with _mock_process([(0,''), (0,''), (0,'')]):"
nl|'\n'
comment|"#            self.replicator.rsync('1')"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.parts_to_delete['1'],"
nl|'\n'
comment|'#                [True, True, True])'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_rsync_delete_yes_with_failure(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|'#        with _mock_process([(-1, "stuff in log"), (0, \'\'), (0,\'\'), (0,\'\')]):'
nl|'\n'
comment|"#            self.replicator.rsync('1')"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.parts_to_delete['1'],"
nl|'\n'
comment|'#                [True, True, True])'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    def test_rsync_failed_drive(self):'
nl|'\n'
comment|"#        self.replicator.collect_jobs('sda', 0, self.ring)"
nl|'\n'
comment|"#        with _mock_process([(12,'There was an error in file IO'),"
nl|'\n'
comment|"#            (0,''), (0,''), (0,'')]):"
nl|'\n'
comment|"#            self.replicator.rsync('1')"
nl|'\n'
comment|"#            self.assertEquals(self.replicator.parts_to_delete['1'],"
nl|'\n'
comment|'#                [True, True, True])'
nl|'\n'
nl|'\n'
DECL|member|test_run
dedent|''
name|'def'
name|'test_run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'_mock_process'
op|'('
op|'['
op|'('
number|'0'
op|','
string|"''"
op|')'
op|']'
op|'*'
number|'100'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'replicator'
op|'.'
name|'replicate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_withlog
dedent|''
dedent|''
name|'def'
name|'test_run_withlog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'_mock_process'
op|'('
op|'['
op|'('
number|'0'
op|','
string|'"stuff in log"'
op|')'
op|']'
op|'*'
number|'100'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'replicator'
op|'.'
name|'replicate'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
