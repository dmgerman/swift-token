begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
comment|'# NOTE: swift_conn'
nl|'\n'
comment|"# You'll see swift_conn passed around a few places in this file. This is the"
nl|'\n'
comment|'# source bufferedhttp connection of whatever it is attached to.'
nl|'\n'
comment|'#   It is used when early termination of reading from the connection should'
nl|'\n'
comment|"# happen, such as when a range request is satisfied but there's still more the"
nl|'\n'
comment|'# source connection would like to send. To prevent having to read all the data'
nl|'\n'
comment|'# that could be left, the source connection can be .close() and then reads'
nl|'\n'
comment|'# commence to empty out any buffers.'
nl|'\n'
comment|'#   These shenanigans are to ensure all related objects can be garbage'
nl|'\n'
comment|"# collected. We've seen objects hang around forever otherwise."
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'quote'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'timeout'
name|'import'
name|'Timeout'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'wsgi'
name|'import'
name|'make_pre_authed_env'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'normalize_timestamp'
op|','
name|'config_true_value'
op|','
name|'public'
op|','
name|'split_path'
op|','
name|'list_from_csv'
op|','
name|'GreenthreadSafeIterator'
op|','
name|'quorum_size'
op|','
name|'GreenAsyncPile'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'bufferedhttp'
name|'import'
name|'http_connect'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'ChunkReadTimeout'
op|','
name|'ChunkWriteTimeout'
op|','
name|'ConnectionTimeout'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'http'
name|'import'
name|'is_informational'
op|','
name|'is_success'
op|','
name|'is_redirection'
op|','
name|'is_server_error'
op|','
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|','
name|'HTTP_NOT_FOUND'
op|','
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
name|'HTTP_INSUFFICIENT_STORAGE'
op|','
name|'HTTP_UNAUTHORIZED'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Request'
op|','
name|'Response'
op|','
name|'HeaderKeyDict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_headers
name|'def'
name|'update_headers'
op|'('
name|'response'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to update headers in the response.\n\n    :param response: swob.Response object\n    :param headers: dictionary headers\n    """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'headers'
op|','
string|"'items'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'etag'"
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'not'
name|'in'
op|'('
string|"'date'"
op|','
string|"'content-length'"
op|','
string|"'content-type'"
op|','
nl|'\n'
string|"'connection'"
op|','
string|"'x-put-timestamp'"
op|','
string|"'x-delete-after'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|source_key
dedent|''
dedent|''
dedent|''
name|'def'
name|'source_key'
op|'('
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Provide the timestamp of the swift http response as a floating\n    point value.  Used as a sort key.\n\n    :param resp: bufferedhttp response object\n    """'
newline|'\n'
name|'return'
name|'float'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-put-timestamp'"
op|')'
name|'or'
nl|'\n'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delay_denial
dedent|''
name|'def'
name|'delay_denial'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods should have any swift.authorize call\n    delayed. This is so the method can load the Request object up with\n    additional information that may be needed by the authorization system.\n\n    :param func: function for which authorization will be delayed\n    """'
newline|'\n'
name|'func'
op|'.'
name|'delay_denial'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account_memcache_key
dedent|''
name|'def'
name|'get_account_memcache_key'
op|'('
name|'account'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'cache_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container_memcache_key
dedent|''
name|'def'
name|'get_container_memcache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"container not provided"'
op|')'
newline|'\n'
dedent|''
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'return'
name|'cache_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_account_info
dedent|''
name|'def'
name|'headers_to_account_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of account info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dict'
op|'('
name|'headers'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
comment|"# 'container_count' anomaly:"
nl|'\n'
comment|'# Previous code sometimes expects an int sometimes a string'
nl|'\n'
comment|'# Current code aligns to str and None, yet translates to int in'
nl|'\n'
comment|'# deprecated functions as needed'
nl|'\n'
string|"'container_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-container-count'"
op|')'
op|','
nl|'\n'
string|"'total_object_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-object-count'"
op|')'
op|','
nl|'\n'
string|"'bytes'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-bytes-used'"
op|')'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'dict'
op|'('
op|'('
name|'key'
op|'['
number|'15'
op|':'
op|']'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'x-account-meta-'"
op|')'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_container_info
dedent|''
name|'def'
name|'headers_to_container_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of container info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dict'
op|'('
name|'headers'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
string|"'read_acl'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-read'"
op|')'
op|','
nl|'\n'
string|"'write_acl'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-write'"
op|')'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-sync-key'"
op|')'
op|','
nl|'\n'
string|"'object_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-object-count'"
op|')'
op|','
nl|'\n'
string|"'bytes'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-bytes-used'"
op|')'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-versions-location'"
op|')'
op|','
nl|'\n'
string|"'cors'"
op|':'
op|'{'
nl|'\n'
string|"'allow_origin'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'x-container-meta-access-control-allow-origin'"
op|')'
op|','
nl|'\n'
string|"'expose_headers'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'x-container-meta-access-control-expose-headers'"
op|')'
op|','
nl|'\n'
string|"'max_age'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'x-container-meta-access-control-max-age'"
op|')'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'dict'
op|'('
op|'('
name|'key'
op|'['
number|'17'
op|':'
op|']'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'x-container-meta-'"
op|')'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_object_info
dedent|''
name|'def'
name|'headers_to_object_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of object info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dict'
op|'('
name|'headers'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'info'
op|'='
op|'{'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
string|"'length'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-length'"
op|')'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-type'"
op|')'
op|','
nl|'\n'
string|"'etag'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|')'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'dict'
op|'('
op|'('
name|'key'
op|'['
number|'14'
op|':'
op|']'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'x-object-meta-'"
op|')'
op|')'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cors_validation
dedent|''
name|'def'
name|'cors_validation'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to check if the request is a CORS request and if so, if it\'s\n    valid.\n\n    :param func: function to check\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'a'
op|'['
number|'0'
op|']'
newline|'\n'
name|'req'
op|'='
name|'a'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# The logic here was interpreted from'
nl|'\n'
comment|'#    http://www.w3.org/TR/cors/#resource-requests'
nl|'\n'
nl|'\n'
comment|'# Is this a CORS request?'
nl|'\n'
name|'req_origin'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Origin'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'req_origin'
op|':'
newline|'\n'
comment|'# Yes, this is a CORS request so test if the origin is allowed'
nl|'\n'
indent|'            '
name|'container_info'
op|'='
name|'controller'
op|'.'
name|'container_info'
op|'('
name|'controller'
op|'.'
name|'account_name'
op|','
nl|'\n'
name|'controller'
op|'.'
name|'container_name'
op|','
name|'req'
op|')'
newline|'\n'
name|'cors_info'
op|'='
name|'container_info'
op|'.'
name|'get'
op|'('
string|"'cors'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call through to the decorated method'
nl|'\n'
name|'resp'
op|'='
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
comment|'# Expose,'
nl|'\n'
comment|'#  - simple response headers,'
nl|'\n'
comment|'#    http://www.w3.org/TR/cors/#simple-response-header'
nl|'\n'
comment|'#  - swift specific: etag, x-timestamp, x-trans-id'
nl|'\n'
comment|'#  - user metadata headers'
nl|'\n'
comment|'#  - headers provided by the user in'
nl|'\n'
comment|'#    x-container-meta-access-control-expose-headers'
nl|'\n'
name|'expose_headers'
op|'='
op|'['
string|"'cache-control'"
op|','
string|"'content-language'"
op|','
nl|'\n'
string|"'content-type'"
op|','
string|"'expires'"
op|','
string|"'last-modified'"
op|','
nl|'\n'
string|"'pragma'"
op|','
string|"'etag'"
op|','
string|"'x-timestamp'"
op|','
string|"'x-trans-id'"
op|']'
newline|'\n'
name|'for'
name|'header'
name|'in'
name|'resp'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'header'
op|'.'
name|'startswith'
op|'('
string|"'X-Container-Meta'"
op|')'
name|'or'
name|'header'
op|'.'
name|'startswith'
op|'('
string|"'X-Object-Meta'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'expose_headers'
op|'.'
name|'append'
op|'('
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'cors_info'
op|'.'
name|'get'
op|'('
string|"'expose_headers'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'expose_headers'
op|'.'
name|'extend'
op|'('
nl|'\n'
op|'['
name|'header_line'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
name|'for'
name|'header_line'
name|'in'
name|'cors_info'
op|'['
string|"'expose_headers'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
nl|'\n'
name|'if'
name|'header_line'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Expose-Headers'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'expose_headers'
op|')'
newline|'\n'
nl|'\n'
comment|"# The user agent won't process the response if the Allow-Origin"
nl|'\n'
comment|"# header isn't included"
nl|'\n'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Allow-Origin'"
op|']'
op|'='
name|'req_origin'
newline|'\n'
nl|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Not a CORS request so make the call as normal'
nl|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_object_info
dedent|''
name|'def'
name|'get_object_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for an object, based on env and app.\n    This is useful to middlewares.\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the object.\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|'='
name|'split_path'
op|'('
name|'path'
name|'or'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'4'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'_get_object_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_object_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container_info
dedent|''
name|'def'
name|'get_container_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for a container, based on env and app.\n    This is useful to middlewares.\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the account.\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'unused'
op|')'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'3'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'ret_not_found'
op|'='
name|'True'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account_info
dedent|''
name|'def'
name|'get_account_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for an account, based on env and app.\n    This is useful to middlewares.\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the container.\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'_junk'
op|','
name|'_junk'
op|')'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'2'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'ret_not_found'
op|'='
name|'True'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_account_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'info'
op|'.'
name|'get'
op|'('
string|"'container_count'"
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'['
string|"'container_count'"
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'['
string|"'container_count'"
op|']'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'container_count'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_cache_key
dedent|''
name|'def'
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the keys for both memcache (cache_key) and env (env_key)\n    where info about accounts and containers is cached\n    :param   account: The name of the account\n    :param container: The name of the container (or None if account)\n    :returns a tuple of (cache_key, env_key)\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'cache_key'
op|'='
string|"'container/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_key'
op|'='
string|"'account/%s'"
op|'%'
name|'account'
newline|'\n'
comment|'# Use a unique environment cache key per account and one container.'
nl|'\n'
comment|'# This allows caching both account and container and ensures that when we'
nl|'\n'
comment|"# copy this env to form a new request, it won't accidentally reuse the"
nl|'\n'
comment|'# old container or account info'
nl|'\n'
dedent|''
name|'env_key'
op|'='
string|"'swift.%s'"
op|'%'
name|'cache_key'
newline|'\n'
name|'return'
name|'cache_key'
op|','
name|'env_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_object_env_key
dedent|''
name|'def'
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the keys for env (env_key) where info about object is cached\n    :param   account: The name of the account\n    :param container: The name of the container\n    :param obj: The name of the object\n    :returns a string env_key\n    """'
newline|'\n'
name|'env_key'
op|'='
string|"'swift.object/%s/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
nl|'\n'
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'return'
name|'env_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_info_cache
dedent|''
name|'def'
name|'_set_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Cache info in both memcache and env.\n\n    Caching is used to avoid unnecessary calls to account & container servers.\n    This is a private function that is being called by GETorHEAD_base and\n    by clear_info_cache.\n    Any attempt to GET or HEAD from the container/account server should use\n    the GETorHEAD_base interface which would than set the cache.\n\n    :param  app: the application object\n    :param  account: the unquoted account name\n    :param  container: the unquoted container name or None\n    :param resp: the response received or None if info cache should be cleared\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'app'
op|'.'
name|'recheck_container_existence'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'app'
op|'.'
name|'recheck_account_existence'
newline|'\n'
dedent|''
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resp'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'resp'
op|'.'
name|'status_int'
op|'=='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'            '
name|'cache_time'
op|'*='
number|'0.1'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cache_time'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Next actually set both memcache and the env chache'
nl|'\n'
dedent|''
name|'memcache'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'memcache'"
op|','
name|'None'
op|')'
name|'or'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.cache'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cache_time'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'.'
name|'pop'
op|'('
name|'env_key'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'            '
name|'memcache'
op|'.'
name|'delete'
op|'('
name|'cache_key'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_account_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'        '
name|'memcache'
op|'.'
name|'set'
op|'('
name|'cache_key'
op|','
name|'info'
op|','
name|'time'
op|'='
name|'cache_time'
op|')'
newline|'\n'
dedent|''
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_object_info_cache
dedent|''
name|'def'
name|'_set_object_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Cache object info env. Do not cache object informations in\n    memcache. This is an intentional omission as it would lead\n    to cache pressure. This is a per-request cache.\n\n    Caching is used to avoid unnecessary calls to object servers.\n    This is a private function that is being called by GETorHEAD_base.\n    Any attempt to GET or HEAD from the object server should use\n    the GETorHEAD_base interface which would then set the cache.\n\n    :param  app: the application object\n    :param  account: the unquoted account name\n    :param  container: the unquoted container name or None\n    :param  object: the unquoted object name or None\n    :param resp: the response received or None if info cache should be cleared\n    """'
newline|'\n'
nl|'\n'
name|'env_key'
op|'='
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'.'
name|'pop'
op|'('
name|'env_key'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'headers_to_object_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clear_info_cache
dedent|''
name|'def'
name|'clear_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Clear the cached info in both memcache and env\n\n    :param  app: the application object\n    :param  account: the account name\n    :param  container: the containr name or None if setting info for containers\n    """'
newline|'\n'
name|'_set_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_info_cache
dedent|''
name|'def'
name|'_get_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the cached info from env or memcache (if used) in that order\n    Used for both account and container info\n    A private function used by get_info\n\n    :param  app: the application object\n    :param  env: the environment used by the current request\n    :returns the cached info or None if not cached\n    """'
newline|'\n'
nl|'\n'
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'env_key'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'env'
op|'['
name|'env_key'
op|']'
newline|'\n'
dedent|''
name|'memcache'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'memcache'"
op|','
name|'None'
op|')'
name|'or'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.cache'"
op|')'
newline|'\n'
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'memcache'
op|'.'
name|'get'
op|'('
name|'cache_key'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_prepare_pre_auth_info_request
dedent|''
name|'def'
name|'_prepare_pre_auth_info_request'
op|'('
name|'env'
op|','
name|'path'
op|','
name|'swift_source'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Prepares a pre authed request to obtain info using a HEAD.\n\n    :param env: the environment used by the current request\n    :param path: The unquoted request path\n    :param swift_source: value for swift.source in WSGI environment\n    :returns: the pre authed request\n    """'
newline|'\n'
comment|'# Set the env for the pre_authed call without a query string'
nl|'\n'
name|'newenv'
op|'='
name|'make_pre_authed_env'
op|'('
name|'env'
op|','
string|"'HEAD'"
op|','
name|'path'
op|','
name|'agent'
op|'='
string|"'Swift'"
op|','
nl|'\n'
name|'query_string'
op|'='
string|"''"
op|','
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
comment|'# Note that Request.blank expects quoted path'
nl|'\n'
name|'return'
name|'Request'
op|'.'
name|'blank'
op|'('
name|'quote'
op|'('
name|'path'
op|')'
op|','
name|'environ'
op|'='
name|'newenv'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'ret_not_found'
op|'='
name|'False'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info about accounts or containers\n\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the info.\n\n    :param app: the application object\n    :param env: the environment used by the current request\n    :param account: The unquoted name of the account\n    :param container: The unquoted name of the container (or None if account)\n    :returns: the cached info or None if cannot be retrieved\n    """'
newline|'\n'
name|'info'
op|'='
name|'_get_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ret_not_found'
name|'or'
name|'is_success'
op|'('
name|'info'
op|'['
string|"'status'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
comment|"# Not in cache, let's try the account servers"
nl|'\n'
dedent|''
name|'path'
op|'='
string|"'/v1/%s'"
op|'%'
name|'account'
newline|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
comment|'# Stop and check if we have an account?'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'path'
op|'+='
string|"'/'"
op|'+'
name|'container'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'_prepare_pre_auth_info_request'
op|'('
nl|'\n'
name|'env'
op|','
name|'path'
op|','
op|'('
name|'swift_source'
name|'or'
string|"'GET_INFO'"
op|')'
op|')'
newline|'\n'
comment|'# Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in'
nl|'\n'
comment|'# the environment under environ[env_key] and in memcache. We will'
nl|'\n'
comment|'# pick the one from environ[env_key] and use it to set the caller env'
nl|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'app'
op|')'
newline|'\n'
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'resp'
op|'.'
name|'environ'
op|'['
name|'env_key'
op|']'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
name|'if'
name|'ret_not_found'
name|'or'
name|'is_success'
op|'('
name|'info'
op|'['
string|"'status'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'info'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_info
dedent|''
name|'def'
name|'_get_object_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info about object\n\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the info.\n\n    :param app: the application object\n    :param env: the environment used by the current request\n    :param account: The unquoted name of the account\n    :param container: The unquoted name of the container\n    :param obj: The unquoted name of the object\n    :returns: the cached info or None if cannot be retrieved\n    """'
newline|'\n'
name|'env_key'
op|'='
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'info'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
name|'env_key'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'info'
newline|'\n'
comment|"# Not in cached, let's try the object servers"
nl|'\n'
dedent|''
name|'path'
op|'='
string|"'/v1/%s/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'req'
op|'='
name|'_prepare_pre_auth_info_request'
op|'('
name|'env'
op|','
name|'path'
op|','
name|'swift_source'
op|')'
newline|'\n'
comment|'# Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in'
nl|'\n'
comment|'# the environment under environ[env_key]. We will'
nl|'\n'
comment|'# pick the one from environ[env_key] and use it to set the caller env'
nl|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'app'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'resp'
op|'.'
name|'environ'
op|'['
name|'env_key'
op|']'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
dedent|''
name|'class'
name|'Controller'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base WSGI controller class for the proxy"""'
newline|'\n'
DECL|variable|server_type
name|'server_type'
op|'='
string|"'Base'"
newline|'\n'
nl|'\n'
comment|'# Ensure these are all lowercase'
nl|'\n'
DECL|variable|pass_through_headers
name|'pass_through_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a controller attached to an application instance\n\n        :param app: the application instance\n        """'
newline|'\n'
name|'self'
op|'.'
name|'account_name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'trans_id'
op|'='
string|"'-'"
newline|'\n'
name|'self'
op|'.'
name|'_allowed_methods'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|allowed_methods
name|'def'
name|'allowed_methods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_allowed_methods'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_allowed_methods'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'all_methods'
op|'='
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'self'
op|','
name|'predicate'
op|'='
name|'inspect'
op|'.'
name|'ismethod'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'m'
name|'in'
name|'all_methods'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'getattr'
op|'('
name|'m'
op|','
string|"'publicly_accessible'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_allowed_methods'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_allowed_methods'
newline|'\n'
nl|'\n'
DECL|member|_x_remove_headers
dedent|''
name|'def'
name|'_x_remove_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of headers that must not be sent to the backend\n\n        :returns: a list of header\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|transfer_headers
dedent|''
name|'def'
name|'transfer_headers'
op|'('
name|'self'
op|','
name|'src_headers'
op|','
name|'dst_headers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Transfer legal headers from an original client request to dictionary\n        that will be used as headers by the backend request\n\n        :param src_headers: A dictionary of the original client request headers\n        :param dst_headers: A dictionary of the backend request headers\n        """'
newline|'\n'
name|'st'
op|'='
name|'self'
op|'.'
name|'server_type'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'x_remove'
op|'='
string|"'x-remove-%s-meta-'"
op|'%'
name|'st'
newline|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'-remove'"
op|','
string|"''"
op|','
number|'1'
op|')'
op|','
string|"''"
op|')'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'src_headers'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'x_remove'
op|')'
name|'or'
nl|'\n'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'_x_remove_headers'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'x_meta'
op|'='
string|"'x-%s-meta-'"
op|'%'
name|'st'
newline|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'src_headers'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'pass_through_headers'
name|'or'
nl|'\n'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'x_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_request_headers
dedent|''
name|'def'
name|'generate_request_headers'
op|'('
name|'self'
op|','
name|'orig_req'
op|'='
name|'None'
op|','
name|'additional'
op|'='
name|'None'
op|','
nl|'\n'
name|'transfer'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a list of headers to be used in backend requets\n\n        :param orig_req: the original request sent by the client to the proxy\n        :param additional: additional headers to send to the backend\n        :param transfer: If True, transfer headers from original client request\n        :returns: a dictionary of headers\n        """'
newline|'\n'
comment|"# Use the additional headers first so they don't overwrite the headers"
nl|'\n'
comment|'# we require.'
nl|'\n'
name|'headers'
op|'='
name|'HeaderKeyDict'
op|'('
name|'additional'
op|')'
name|'if'
name|'additional'
name|'else'
name|'HeaderKeyDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'transfer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transfer_headers'
op|'('
name|'orig_req'
op|'.'
name|'headers'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|"'x-timestamp'"
op|','
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'orig_req'
op|':'
newline|'\n'
indent|'            '
name|'referer'
op|'='
name|'orig_req'
op|'.'
name|'as_referer'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'referer'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'x-trans-id'"
op|']'
op|'='
name|'self'
op|'.'
name|'trans_id'
newline|'\n'
name|'headers'
op|'['
string|"'connection'"
op|']'
op|'='
string|"'close'"
newline|'\n'
name|'headers'
op|'['
string|"'user-agent'"
op|']'
op|'='
string|"'proxy-server %s'"
op|'%'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'referer'"
op|']'
op|'='
name|'referer'
newline|'\n'
name|'return'
name|'headers'
newline|'\n'
nl|'\n'
DECL|member|error_occurred
dedent|''
name|'def'
name|'error_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging, and handling of errors.\n\n        :param node: dictionary of node to handle errors for\n        :param msg: error message\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'node'
op|'.'
name|'get'
op|'('
string|"'errors'"
op|','
number|'0'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(msg)s %(ip)s:%(port)s/%(device)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'msg'"
op|':'
name|'msg'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exception_occurred
dedent|''
name|'def'
name|'exception_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'typ'
op|','
name|'additional_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging of generic exceptions.\n\n        :param node: dictionary of node to log the error for\n        :param typ: server type\n        :param additional_info: additional information to log\n        """'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'ERROR with %(type)s server %(ip)s:%(port)s/%(device)s re: '"
nl|'\n'
string|"'%(info)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'typ'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
string|"'info'"
op|':'
name|'additional_info'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_limited
dedent|''
name|'def'
name|'error_limited'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the node is currently error limited.\n\n        :param node: dictionary of node to check\n        :returns: True if error limited, False otherwise\n        """'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'errors'"
name|'not'
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
string|"'last_error'"
name|'in'
name|'node'
name|'and'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'<'
name|'now'
op|'-'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_interval'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'node'
op|'['
string|"'last_error'"
op|']'
newline|'\n'
name|'if'
string|"'errors'"
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'node'
op|'['
string|"'errors'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'limited'
op|'='
name|'node'
op|'['
string|"'errors'"
op|']'
op|'>'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
newline|'\n'
name|'if'
name|'limited'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Node error limited %(ip)s:%(port)s (%(device)s)'"
op|')'
op|','
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'limited'
newline|'\n'
nl|'\n'
DECL|member|error_limit
dedent|''
name|'def'
name|'error_limit'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark a node as error limited. This immediately pretends the\n        node received enough errors to trigger error suppression. Use\n        this for errors like Insufficient Storage. For other errors\n        use :func:`error_occurred`.\n\n        :param node: dictionary of node to error limit\n        :param msg: error message\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(msg)s %(ip)s:%(port)s/%(device)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'msg'"
op|':'
name|'msg'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|account_info
dedent|''
name|'def'
name|'account_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'req'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get account information, and also verify that the account exists.\n\n        :param account: name of the account to get the info for\n        :param req: caller\'s HTTP request context object (optional)\n        :returns: tuple of (account partition, account nodes, container_count)\n                  or (None, None, None) if it does not exist\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|')'
newline|'\n'
name|'if'
name|'req'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
string|"'environ'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'get_info'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'env'
op|','
name|'account'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'info'
op|'.'
name|'get'
op|'('
string|"'container_count'"
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'container_count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'container_count'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'container_count'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'container_count'
newline|'\n'
nl|'\n'
DECL|member|container_info
dedent|''
name|'def'
name|'container_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'container'
op|','
name|'req'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get container information and thusly verify container existence.\n        This will also verify account existence.\n\n        :param account: account name for the container\n        :param container: container name to look up\n        :param req: caller\'s HTTP request context object (optional)\n        :returns: dict containing at least container partition (\'partition\'),\n                  container nodes (\'containers\'), container read\n                  acl (\'read_acl\'), container write acl (\'write_acl\'),\n                  and container sync key (\'sync_key\').\n                  Values are set to None if the container does not exist.\n        """'
newline|'\n'
name|'part'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'req'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
string|"'environ'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'get_info'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
name|'info'
op|'['
string|"'partition'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'info'
op|'['
string|"'nodes'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'partition'"
op|']'
op|'='
name|'part'
newline|'\n'
name|'info'
op|'['
string|"'nodes'"
op|']'
op|'='
name|'nodes'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
DECL|member|iter_nodes
dedent|''
name|'def'
name|'iter_nodes'
op|'('
name|'self'
op|','
name|'ring'
op|','
name|'partition'
op|','
name|'node_iter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Yields nodes for a ring partition, skipping over error\n        limited nodes and stopping at the configurable number of\n        nodes. If a node yielded subsequently gets error limited, an\n        extra node will be yielded to take its place.\n\n        Note that if you\'re going to iterate over this concurrently from\n        multiple greenthreads, you\'ll want to use a\n        swift.common.utils.GreenthreadSafeIterator to serialize access.\n        Otherwise, you may get ValueErrors from concurrent access. (You also\n        may not, depending on how logging is configured, the vagaries of\n        socket IO and eventlet, and the phase of the moon.)\n\n        :param ring: ring to get yield nodes from\n        :param partition: ring partition to yield nodes for\n        :param node_iter: optional iterable of nodes to try. Useful if you\n            want to filter or reorder the nodes.\n        """'
newline|'\n'
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'node_iter'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node_iter'
op|'='
name|'itertools'
op|'.'
name|'chain'
op|'('
name|'part_nodes'
op|','
nl|'\n'
name|'ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
dedent|''
name|'num_primary_nodes'
op|'='
name|'len'
op|'('
name|'part_nodes'
op|')'
newline|'\n'
nl|'\n'
comment|'# Use of list() here forcibly yanks the first N nodes (the primary'
nl|'\n'
comment|'# nodes) from node_iter, so the rest of its values are handoffs.'
nl|'\n'
name|'primary_nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'sort_nodes'
op|'('
nl|'\n'
name|'list'
op|'('
name|'itertools'
op|'.'
name|'islice'
op|'('
name|'node_iter'
op|','
name|'num_primary_nodes'
op|')'
op|')'
op|')'
newline|'\n'
name|'handoff_nodes'
op|'='
name|'node_iter'
newline|'\n'
name|'nodes_left'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'request_node_count'
op|'('
name|'ring'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'primary_nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'handoffs'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'handoff_nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'handoffs'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'log_handoffs'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_count'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
nl|'\n'
string|"'Handoff requested (%d)'"
op|'%'
name|'handoffs'
op|')'
newline|'\n'
name|'if'
name|'handoffs'
op|'=='
name|'len'
op|'('
name|'primary_nodes'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_all_count'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_make_request
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_make_request'
op|'('
name|'self'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'query'
op|','
nl|'\n'
name|'logger_thread_locals'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Iterates over the given node iterator, sending an HTTP request to one\n        node at a time.  The first non-informational, non-server-error\n        response is returned.  If no non-informational, non-server-error\n        response is received from any of the nodes, returns None.\n\n        :param nodes: an iterator of the backend server and handoff servers\n        :param part: the partition number\n        :param method: the method to send to the backend\n        :param path: the path to send to the backend\n        :param headers: a list of dicts, where each dict represents one\n                        backend request that should be made.\n        :param query: query string to send to the backend.\n        :param logger_thread_locals: The thread local values to be set on the\n                                     self.app.logger to retain transaction\n                                     logging information.\n        :returns: a swob.Response object, or None if no responses were received\n        """'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|'='
name|'logger_thread_locals'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start_node_timing'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'query_string'
op|'='
name|'query'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'node'
op|'='
name|'node'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'set_node_timing'
op|'('
name|'node'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_node_timing'
op|')'
newline|'\n'
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'is_informational'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
name|'and'
name|'not'
name|'is_server_error'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'resp'
op|'.'
name|'status'
op|','
name|'resp'
op|'.'
name|'reason'
op|','
name|'resp'
op|'.'
name|'getheaders'
op|'('
op|')'
op|','
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR Insufficient Storage'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'self'
op|'.'
name|'server_type'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'path'"
op|':'
name|'path'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_requests
dedent|''
dedent|''
dedent|''
name|'def'
name|'make_requests'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'ring'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
name|'query_string'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sends an HTTP request to multiple nodes and aggregates the results.\n        It attempts the primary nodes concurrently, then iterates over the\n        handoff nodes as needed.\n\n        :param req: a request sent by the client\n        :param ring: the ring used for finding backend servers\n        :param part: the partition number\n        :param method: the method to send to the backend\n        :param path: the path to send to the backend\n        :param headers: a list of dicts, where each dict represents one\n                        backend request that should be made.\n        :param query_string: optional query string to send to the backend\n        :returns: a swob.Response object\n        """'
newline|'\n'
name|'start_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'part'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'GreenthreadSafeIterator'
op|'('
name|'self'
op|'.'
name|'iter_nodes'
op|'('
name|'ring'
op|','
name|'part'
op|')'
op|')'
newline|'\n'
name|'pile'
op|'='
name|'GreenAsyncPile'
op|'('
name|'len'
op|'('
name|'start_nodes'
op|')'
op|')'
newline|'\n'
name|'for'
name|'head'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'pile'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_make_request'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'head'
op|','
name|'query_string'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'resp'
name|'in'
name|'pile'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'append'
op|'('
name|'resp'
op|')'
newline|'\n'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'resp'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'have_quorum'
op|'('
name|'statuses'
op|','
name|'len'
op|'('
name|'start_nodes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'while'
name|'len'
op|'('
name|'response'
op|')'
op|'<'
name|'len'
op|'('
name|'start_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'append'
op|'('
op|'('
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'statuses'
op|','
name|'reasons'
op|','
name|'resp_headers'
op|','
name|'bodies'
op|'='
name|'zip'
op|'('
op|'*'
name|'response'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'best_response'
op|'('
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|','
nl|'\n'
name|'headers'
op|'='
name|'resp_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|have_quorum
dedent|''
name|'def'
name|'have_quorum'
op|'('
name|'self'
op|','
name|'statuses'
op|','
name|'node_count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of statuses from several requests, determine if\n        a quorum response can already be decided.\n\n        :param statuses: list of statuses returned\n        :param node_count: number of nodes being queried (basically ring count)\n        :returns: True or False, depending on if quorum is established\n        """'
newline|'\n'
name|'quorum'
op|'='
name|'quorum_size'
op|'('
name|'node_count'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'statuses'
op|')'
op|'>='
name|'quorum'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'hundred'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sum'
op|'('
number|'1'
name|'for'
name|'s'
name|'in'
name|'statuses'
nl|'\n'
name|'if'
name|'hundred'
op|'<='
name|'s'
op|'<'
name|'hundred'
op|'+'
number|'100'
op|')'
op|'>='
name|'quorum'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|best_response
dedent|''
name|'def'
name|'best_response'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'server_type'
op|','
nl|'\n'
name|'etag'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of responses from several servers, choose the best to\n        return to the API.\n\n        :param req: swob.Request object\n        :param statuses: list of statuses returned\n        :param reasons: list of reasons for each status\n        :param bodies: bodies of each response\n        :param server_type: type of server the responses came from\n        :param etag: etag\n        :param headers: headers of each response\n        :returns: swob.Response object with the correct status, body, etc. set\n        """'
newline|'\n'
name|'resp'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'statuses'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'hundred'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hstatuses'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'statuses'
name|'if'
name|'hundred'
op|'<='
name|'s'
op|'<'
name|'hundred'
op|'+'
number|'100'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hstatuses'
op|')'
op|'>='
name|'quorum_size'
op|'('
name|'len'
op|'('
name|'statuses'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'status'
op|'='
name|'max'
op|'('
name|'hstatuses'
op|')'
newline|'\n'
name|'status_index'
op|'='
name|'statuses'
op|'.'
name|'index'
op|'('
name|'status'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'status'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'status'
op|','
name|'reasons'
op|'['
name|'status_index'
op|']'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'body'
op|'='
name|'bodies'
op|'['
name|'status_index'
op|']'
newline|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'                        '
name|'update_headers'
op|'('
name|'resp'
op|','
name|'headers'
op|'['
name|'status_index'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'                        '
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|'='
name|'etag'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(type)s returning 503 for %(statuses)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'server_type'
op|','
string|"'statuses'"
op|':'
name|'statuses'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'status'
op|'='
string|"'503 Internal Server Error'"
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|GET
name|'def'
name|'GET'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handler for HTTP GET requests.\n\n        :param req: The client request\n        :returns: the response to the client\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|HEAD
name|'def'
name|'HEAD'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handler for HTTP HEAD requests.\n\n        :param req: The client request\n        :returns: the response to the client\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_app_iter
dedent|''
name|'def'
name|'_make_app_iter'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an iterator over the contents of the source (via its read\n        func).  There is also quite a bit of cleanup to ensure garbage\n        collection works and the underlying socket of the source is closed.\n\n        :param source: The bufferedhttp.Response object this iterator should\n                       read from.\n        :param node: The node the source is reading from, for logging purposes.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nchunks'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ChunkReadTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'chunk'
op|'='
name|'source'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
newline|'\n'
name|'nchunks'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'with'
name|'ChunkWriteTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'chunk'
newline|'\n'
comment|'# This is for fairness; if the network is outpacing the CPU,'
nl|'\n'
comment|"# we'll always be able to read and write data without"
nl|'\n'
comment|'# encountering an EWOULDBLOCK, and so eventlet will not switch'
nl|'\n'
comment|'# greenthreads on its own. We do it manually so that clients'
nl|'\n'
comment|"# don't starve."
nl|'\n'
comment|'#'
nl|'\n'
comment|"# The number 5 here was chosen by making stuff up. It's not"
nl|'\n'
comment|"# every single chunk, but it's not too big either, so it seemed"
nl|'\n'
comment|'# like it would probably be an okay choice.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that we may trampoline to other greenthreads more often'
nl|'\n'
comment|'# than once every 5 chunks, depending on how blocking our'
nl|'\n'
comment|'# network IO is; the explicit sleep here simply provides a'
nl|'\n'
comment|'# lower bound on the rate of trampolining.'
nl|'\n'
dedent|''
name|'if'
name|'nchunks'
op|'%'
number|'5'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'sleep'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'ChunkReadTimeout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'Object'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to read during GET'"
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'ChunkWriteTimeout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Client did not read from proxy within %ss'"
op|')'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'client_timeouts'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'GeneratorExit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Client disconnected on read'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Trying to send to client'"
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# Close-out the connection as best as possible.'
nl|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'source'
op|','
string|"'swift_conn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close_swift_conn'
op|'('
name|'source'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close_swift_conn
dedent|''
dedent|''
dedent|''
name|'def'
name|'close_swift_conn'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Force close the http connection to the backend.\n\n        :param src: the response from the backend\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Since the backends set "Connection: close" in their response'
nl|'\n'
comment|'# headers, the response object (src) is solely responsible for the'
nl|'\n'
comment|'# socket. The connection object (src.swift_conn) has no references'
nl|'\n'
comment|'# to the socket, so calling its close() method does nothing, and'
nl|'\n'
comment|"# therefore we don't do it."
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Also, since calling the response's close() method might not"
nl|'\n'
comment|'# close the underlying socket but only decrement some'
nl|'\n'
comment|'# reference-counter, we have a special method here that really,'
nl|'\n'
comment|'# really kills the underlying socket with a close() syscall.'
nl|'\n'
indent|'            '
name|'src'
op|'.'
name|'nuke_from_orbit'
op|'('
op|')'
comment|"# it's the only way to be sure"
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|is_good_source
dedent|''
dedent|''
name|'def'
name|'is_good_source'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicates whether or not the request made to the backend found\n        what it was looking for.\n\n        :param src: the response from the backend\n        :returns: True if found, False if not\n        """'
newline|'\n'
name|'return'
name|'is_success'
op|'('
name|'src'
op|'.'
name|'status'
op|')'
name|'or'
name|'is_redirection'
op|'('
name|'src'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|autocreate_account
dedent|''
name|'def'
name|'autocreate_account'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'account'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Autocreate an account\n\n        :param env: the environment of the request leading to this autocreate\n        :param account: the unquoted account name\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'/%s'"
op|'%'
name|'account'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'X-Trans-Id'"
op|':'
name|'self'
op|'.'
name|'trans_id'
op|','
nl|'\n'
string|"'Connection'"
op|':'
string|"'close'"
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'make_requests'
op|'('
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1'"
op|'+'
name|'path'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|','
name|'partition'
op|','
string|"'PUT'"
op|','
nl|'\n'
name|'path'
op|','
op|'['
name|'headers'
op|']'
op|'*'
name|'len'
op|'('
name|'nodes'
op|')'
op|')'
newline|'\n'
name|'if'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'autocreate account %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
name|'clear_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'env'
op|','
name|'account'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
string|"'Could not autocreate account %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|GETorHEAD_base
dedent|''
dedent|''
name|'def'
name|'GETorHEAD_base'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'server_type'
op|','
name|'ring'
op|','
name|'partition'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Base handler for HTTP GET or HEAD requests.\n\n        :param req: swob.Request object\n        :param server_type: server type\n        :param ring: the ring to obtain nodes from\n        :param partition: partition\n        :param path: path for the request\n        :returns: swob.Response object\n        """'
newline|'\n'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'reasons'
op|'='
op|'['
op|']'
newline|'\n'
name|'bodies'
op|'='
op|'['
op|']'
newline|'\n'
name|'source_headers'
op|'='
op|'['
op|']'
newline|'\n'
name|'sources'
op|'='
op|'['
op|']'
newline|'\n'
name|'newest'
op|'='
name|'config_true_value'
op|'('
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-newest'"
op|','
string|"'f'"
op|')'
op|')'
newline|'\n'
name|'headers'
op|'='
name|'self'
op|'.'
name|'generate_request_headers'
op|'('
name|'req'
op|','
name|'additional'
op|'='
name|'req'
op|'.'
name|'headers'
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'iter_nodes'
op|'('
name|'ring'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_node_timing'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
nl|'\n'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
nl|'\n'
name|'req'
op|'.'
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|'='
name|'headers'
op|','
nl|'\n'
name|'query_string'
op|'='
name|'req'
op|'.'
name|'query_string'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'set_node_timing'
op|'('
name|'node'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_node_timing'
op|')'
newline|'\n'
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'possible_source'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'possible_source'
op|'.'
name|'swift_conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
nl|'\n'
name|'node'
op|','
name|'server_type'
op|','
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'req'
op|'.'
name|'method'
op|','
string|"'path'"
op|':'
name|'req'
op|'.'
name|'path'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'is_good_source'
op|'('
name|'possible_source'
op|')'
op|':'
newline|'\n'
comment|"# 404 if we know we don't have a synced copy"
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'float'
op|'('
name|'possible_source'
op|'.'
name|'getheader'
op|'('
string|"'X-PUT-Timestamp'"
op|','
number|'1'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'statuses'
op|'.'
name|'append'
op|'('
name|'HTTP_NOT_FOUND'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'source_headers'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'close_swift_conn'
op|'('
name|'possible_source'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'statuses'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'source_headers'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'sources'
op|'.'
name|'append'
op|'('
op|'('
name|'possible_source'
op|','
name|'node'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'newest'
op|':'
comment|'# one good source is enough'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'statuses'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'source_headers'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'possible_source'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR Insufficient Storage'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'is_server_error'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'error_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR %(status)d %(body)s '"
nl|'\n'
string|"'From %(type)s Server'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'status'"
op|':'
name|'possible_source'
op|'.'
name|'status'
op|','
nl|'\n'
string|"'body'"
op|':'
name|'bodies'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|':'
number|'1024'
op|']'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'server_type'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'res'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'sources'
op|':'
newline|'\n'
indent|'            '
name|'sources'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'s'
op|':'
name|'source_key'
op|'('
name|'s'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'source'
op|','
name|'node'
op|'='
name|'sources'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'for'
name|'src'
op|','
name|'_junk'
name|'in'
name|'sources'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close_swift_conn'
op|'('
name|'src'
op|')'
newline|'\n'
dedent|''
name|'res'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'GET'"
name|'and'
name|'source'
op|'.'
name|'status'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'app_iter'
op|'='
name|'self'
op|'.'
name|'_make_app_iter'
op|'('
name|'node'
op|','
name|'source'
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'res'
op|'.'
name|'swift_conn'
op|'='
name|'source'
op|'.'
name|'swift_conn'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'status'
op|'='
name|'source'
op|'.'
name|'status'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
name|'source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'res'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'environ'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'environ'
op|'['
string|"'swift_x_timestamp'"
op|']'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
newline|'\n'
name|'res'
op|'.'
name|'accept_ranges'
op|'='
string|"'bytes'"
newline|'\n'
name|'res'
op|'.'
name|'content_length'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
name|'if'
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'charset'
op|'='
name|'None'
newline|'\n'
name|'res'
op|'.'
name|'content_type'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'res'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'self'
op|'.'
name|'best_response'
op|'('
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|','
nl|'\n'
name|'headers'
op|'='
name|'source_headers'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'account'
op|','
name|'container'
op|')'
op|'='
name|'split_path'
op|'('
name|'req'
op|'.'
name|'path_info'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'_set_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|'.'
name|'environ'
op|','
name|'account'
op|','
name|'container'
op|','
name|'res'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|'='
name|'split_path'
op|'('
name|'req'
op|'.'
name|'path_info'
op|','
number|'3'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
name|'_set_object_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|'.'
name|'environ'
op|','
name|'account'
op|','
nl|'\n'
name|'container'
op|','
name|'obj'
op|','
name|'res'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
DECL|member|is_origin_allowed
dedent|''
name|'def'
name|'is_origin_allowed'
op|'('
name|'self'
op|','
name|'cors_info'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Is the given Origin allowed to make requests to this resource\n\n        :param cors_info: the resource\'s CORS related metadata headers\n        :param origin: the origin making the request\n        :return: True or False\n        """'
newline|'\n'
name|'allowed_origins'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'if'
name|'cors_info'
op|'.'
name|'get'
op|'('
string|"'allow_origin'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'allowed_origins'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'['
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'cors_info'
op|'['
string|"'allow_origin'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
nl|'\n'
name|'if'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'cors_allow_origin'
op|':'
newline|'\n'
indent|'            '
name|'allowed_origins'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'cors_allow_origin'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'origin'
name|'in'
name|'allowed_origins'
name|'or'
string|"'*'"
name|'in'
name|'allowed_origins'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|OPTIONS
name|'def'
name|'OPTIONS'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Base handler for OPTIONS requests\n\n        :param req: swob.Request object\n        :returns: swob.Response object\n        """'
newline|'\n'
comment|'# Prepare the default response'
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Allow'"
op|':'
string|"', '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'allowed_methods'
op|')'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'Response'
op|'('
name|'status'
op|'='
number|'200'
op|','
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
comment|"# If this isn't a CORS pre-flight request then return now"
nl|'\n'
name|'req_origin_value'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Origin'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'req_origin_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
comment|"# This is a CORS preflight request so check it's allowed"
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'container_info'
op|'='
name|'self'
op|'.'
name|'container_info'
op|'('
name|'self'
op|'.'
name|'account_name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'container_name'
op|','
name|'req'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
comment|'# This should only happen for requests to the Account. A future'
nl|'\n'
comment|'# change could allow CORS requests to the Account level as well.'
nl|'\n'
indent|'            '
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
name|'cors'
op|'='
name|'container_info'
op|'.'
name|'get'
op|'('
string|"'cors'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|"# If the CORS origin isn't allowed return a 401"
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'is_origin_allowed'
op|'('
name|'cors'
op|','
name|'req_origin_value'
op|')'
name|'or'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Access-Control-Request-Method'"
op|')'
name|'not'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'allowed_methods'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'.'
name|'status'
op|'='
name|'HTTP_UNAUTHORIZED'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
comment|'# Allow all headers requested in the request. The CORS'
nl|'\n'
comment|'# specification does leave the door open for this, as mentioned in'
nl|'\n'
comment|'# http://www.w3.org/TR/cors/#resource-preflight-requests'
nl|'\n'
comment|'# Note: Since the list of headers can be unbounded'
nl|'\n'
comment|'# simply returning headers can be enough.'
nl|'\n'
dedent|''
name|'allow_headers'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Access-Control-Request-Headers'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'allow_headers'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'list_from_csv'
op|'('
name|'req'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Request-Headers'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Populate the response with the CORS preflight headers'
nl|'\n'
dedent|''
name|'headers'
op|'['
string|"'access-control-allow-origin'"
op|']'
op|'='
name|'req_origin_value'
newline|'\n'
name|'if'
name|'cors'
op|'.'
name|'get'
op|'('
string|"'max_age'"
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-max-age'"
op|']'
op|'='
name|'cors'
op|'.'
name|'get'
op|'('
string|"'max_age'"
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'access-control-allow-methods'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'allowed_methods'
op|')'
newline|'\n'
name|'if'
name|'allow_headers'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-allow-headers'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'allow_headers'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
nl|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
