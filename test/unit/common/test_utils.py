begin_unit
comment|'# Copyright (c) 2010 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Tests for swift.common.utils """'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'mimetools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'getpass'
name|'import'
name|'getuser'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'from'
name|'StringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'functools'
name|'import'
name|'partial'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'NamedTemporaryFile'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockOs
name|'class'
name|'MockOs'
op|'('
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pass_funcs'
op|'='
op|'['
op|']'
op|','
name|'called_funcs'
op|'='
op|'['
op|']'
op|','
name|'raise_funcs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed_fds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'pass_funcs'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'self'
op|'.'
name|'pass_func'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'called_funcs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'func'
name|'in'
name|'called_funcs'
op|':'
newline|'\n'
indent|'            '
name|'c_func'
op|'='
name|'partial'
op|'('
name|'self'
op|'.'
name|'called_func'
op|','
name|'name'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'c_func'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'func'
name|'in'
name|'raise_funcs'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'func'
op|','
name|'self'
op|'.'
name|'raise_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pass_func
dedent|''
dedent|''
name|'def'
name|'pass_func'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'chdir'
op|'='
name|'setsid'
op|'='
name|'setgid'
op|'='
name|'setuid'
op|'='
name|'umask'
op|'='
name|'pass_func'
newline|'\n'
nl|'\n'
DECL|member|called_func
name|'def'
name|'called_func'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called_funcs'
op|'['
name|'name'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|raise_func
dedent|''
name|'def'
name|'raise_func'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'OSError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dup2
dedent|''
name|'def'
name|'dup2'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'closed_fds'
op|'.'
name|'append'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|'# I only over-ride portions of the os module'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
op|'.'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'os'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockSys
dedent|''
dedent|''
dedent|''
name|'class'
name|'MockSys'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|__stderr__
indent|'    '
name|'__stderr__'
op|'='
name|'sys'
op|'.'
name|'__stderr__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUtils
dedent|''
name|'class'
name|'TestUtils'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Tests for swift.common.utils """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'HASH_PATH_SUFFIX'
op|'='
string|"'endcap'"
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'starting_handlers'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'logger'
op|'.'
name|'handlers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# don't let extra handlers pile up redirecting stdio and other stuff..."
nl|'\n'
indent|'        '
name|'for'
name|'handler'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'handlers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'handler'
name|'not'
name|'in'
name|'self'
op|'.'
name|'starting_handlers'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'removeHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_normalize_timestamp
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_normalize_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Test swift.common.utils.normalize_timestamp """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593.48174'"
op|')'
op|','
nl|'\n'
string|'"1253327593.48174"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593.48174'
op|')'
op|','
nl|'\n'
string|'"1253327593.48174"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593.48'"
op|')'
op|','
nl|'\n'
string|'"1253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593.48'
op|')'
op|','
nl|'\n'
string|'"1253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'253327593.48'"
op|')'
op|','
nl|'\n'
string|'"0253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'253327593.48'
op|')'
op|','
nl|'\n'
string|'"0253327593.48000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
string|"'1253327593'"
op|')'
op|','
nl|'\n'
string|'"1253327593.00000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'normalize_timestamp'
op|'('
number|'1253327593'
op|')'
op|','
nl|'\n'
string|'"1253327593.00000"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'normalize_timestamp'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'normalize_timestamp'
op|','
string|"'abc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mkdirs
dedent|''
name|'def'
name|'test_mkdirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'testroot'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
string|"'mkdirs'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'testroot'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testroot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testroot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testroot'
op|')'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'testroot'
op|','
string|"'one/two/three'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'testroot'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'open'
op|'('
name|'testroot'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'utils'
op|'.'
name|'mkdirs'
op|','
name|'testdir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'testroot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_split_path
dedent|''
name|'def'
name|'test_split_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Test swift.common.utils.split_account_path """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a'"
op|')'
op|','
op|'['
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/'"
op|')'
op|','
op|'['
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'//c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a//'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c'"
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/o'"
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a/c/o/r'"
op|','
number|'3'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/o/r'"
op|','
number|'3'
op|','
number|'3'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o/r'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'split_path'
op|','
string|"'/a'"
op|','
number|'5'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/'"
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'/a/c/'"
op|','
number|'2'
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"''"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'o\\nn e'"
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid path: o%0An%20e'"
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'split_path'
op|'('
string|"'o\\nn e'"
op|','
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|','
string|"'Invalid path: o%0An%20e'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_NullLogger
dedent|''
dedent|''
name|'def'
name|'test_NullLogger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Test swift.common.utils.NullLogger """'
newline|'\n'
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'nl'
op|'='
name|'utils'
op|'.'
name|'NullLogger'
op|'('
op|')'
newline|'\n'
name|'nl'
op|'.'
name|'write'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_LoggerFileObject
dedent|''
name|'def'
name|'test_LoggerFileObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reload'
op|'('
name|'sys'
op|')'
comment|'# reset stdio redirection'
newline|'\n'
name|'orig_stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'orig_stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'handler'
op|')'
newline|'\n'
name|'lfo'
op|'='
name|'utils'
op|'.'
name|'LoggerFileObject'
op|'('
name|'logger'
op|')'
newline|'\n'
name|'print'
string|"'test1'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'lfo'
newline|'\n'
name|'print'
string|"'test2'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'lfo'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'test4'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'orig_stdout'
newline|'\n'
name|'print'
string|"'test5'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
op|')'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'test6'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'orig_stderr'
newline|'\n'
name|'print'
string|"'test8'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'writelines'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'write'
op|'('
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\nSTDOUT: d\\n'"
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'STDOUT: test2\\nSTDOUT: test4\\n'"
nl|'\n'
string|"'STDOUT: test6\\nSTDOUT: a#012b#012c\\nSTDOUT: d\\n'"
op|')'
newline|'\n'
name|'got_exc'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'lfo'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'got_exc'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'got_exc'
op|')'
newline|'\n'
name|'got_exc'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'lfo'
op|'.'
name|'xreadlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'got_exc'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'got_exc'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'read'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'read'
op|','
number|'1024'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'readline'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IOError'
op|','
name|'lfo'
op|'.'
name|'readline'
op|','
number|'1024'
op|')'
newline|'\n'
name|'lfo'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_options
dedent|''
name|'def'
name|'test_parse_options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# use mkstemp to get a file that is definately on disk'
nl|'\n'
indent|'        '
name|'with'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'f'
op|'.'
name|'name'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conf'
op|','
name|'conf_file'
op|')'
newline|'\n'
comment|'# assert defaults'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'once'"
name|'not'
name|'in'
name|'options'
op|')'
newline|'\n'
comment|'# assert verbose as option'
nl|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'-v'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
comment|'# check once option'
nl|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
op|','
nl|'\n'
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'--once'"
op|']'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
name|'test_args'
op|','
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
comment|'# check options as arg parsing'
nl|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|','
string|"'once'"
op|','
string|"'plugin_name'"
op|','
string|"'verbose'"
op|']'
newline|'\n'
name|'conf'
op|','
name|'options'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'test_args'
op|'='
name|'test_args'
op|','
name|'once'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'verbose'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'once'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'options'
op|'['
string|"'extra_args'"
op|']'
op|','
op|'['
string|"'plugin_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_options_errors
dedent|''
dedent|''
name|'def'
name|'test_parse_options_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'orig_stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'stdo'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'stde'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'stdo'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'stde'
newline|'\n'
name|'err_msg'
op|'='
string|'"""Usage: test usage\n\nError: missing config file argument\n"""'
newline|'\n'
name|'test_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'parse_options'
op|','
string|"'test usage'"
op|','
name|'True'
op|','
nl|'\n'
name|'test_args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stdo'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
name|'err_msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify conf file must exist, context manager will delete temp file'
nl|'\n'
name|'with'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'conf_file'
op|'='
name|'f'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'err_msg'
op|'+='
string|'"""Usage: test usage\n\nError: unable to locate %s\n"""'
op|'%'
name|'conf_file'
newline|'\n'
name|'test_args'
op|'='
op|'['
name|'conf_file'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'utils'
op|'.'
name|'parse_options'
op|','
string|"'test usage'"
op|','
name|'True'
op|','
nl|'\n'
name|'test_args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stdo'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
name|'err_msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset stdio'
nl|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'orig_stdout'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'orig_stderr'
newline|'\n'
nl|'\n'
DECL|member|test_NamedLogger
dedent|''
name|'def'
name|'test_NamedLogger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
op|')'
newline|'\n'
name|'nl'
op|'='
name|'utils'
op|'.'
name|'NamedLogger'
op|'('
name|'logger'
op|','
string|"'server'"
op|')'
newline|'\n'
name|'nl'
op|'.'
name|'warn'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'server test\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_logger
dedent|''
name|'def'
name|'test_get_logger'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sio'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'addHandler'
op|'('
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
name|'sio'
op|')'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'server test1\\n'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'server test1\\n'"
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_level'"
op|':'
string|"'DEBUG'"
op|'}'
op|','
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
string|"'server test1\\nserver test3\\n'"
op|')'
newline|'\n'
comment|"# Doesn't really test that the log facility is truly being used all the"
nl|'\n'
comment|'# way to syslog; but exercises the code.'
nl|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
op|'{'
string|"'log_facility'"
op|':'
string|"'LOG_LOCAL3'"
op|'}'
op|','
string|"'server'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'test4'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'server test1\\nserver test3\\nserver test4\\n'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'test5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
nl|'\n'
string|"'server test1\\nserver test3\\nserver test4\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_storage_directory
dedent|''
name|'def'
name|'test_storage_directory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'storage_directory'
op|'('
string|"'objects'"
op|','
string|"'1'"
op|','
string|"'ABCDEF'"
op|')'
op|','
nl|'\n'
string|"'objects/1/DEF/ABCDEF'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_whataremyips
dedent|''
name|'def'
name|'test_whataremyips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'myips'
op|'='
name|'utils'
op|'.'
name|'whataremyips'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'myips'
op|')'
op|'>'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'127.0.0.1'"
name|'in'
name|'myips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_path
dedent|''
name|'def'
name|'test_hash_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Yes, these tests are deliberately very fragile. We want to make sure'
nl|'\n'
comment|'# that if someones changes the results hash_path produces, they know it.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|')'
op|','
nl|'\n'
string|"'1c84525acb02107ea475dcd3d09c2c58'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|')'
op|','
nl|'\n'
string|"'33379ecb053aa5c9e356c68997cbb59e'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
op|','
nl|'\n'
string|"'06fbf0b514e5199dfc4e00f42eb5ea83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'raw_digest'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'06fbf0b514e5199dfc4e00f42eb5ea83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'raw_digest'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'\\x06\\xfb\\xf0\\xb5\\x14\\xe5\\x19\\x9d\\xfcN\\x00\\xf4.\\xb5\\xea\\x83'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'utils'
op|'.'
name|'hash_path'
op|','
string|"'a'"
op|','
name|'object'
op|'='
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_load_libc_function
dedent|''
name|'def'
name|'test_load_libc_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'load_libc_function'
op|'('
string|"'printf'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'callable'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'load_libc_function'
op|'('
string|"'some_not_real_function'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_readconf
dedent|''
name|'def'
name|'test_readconf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
string|"'''[section1]\nfoo = bar\n\n[section2]\nlog_name = yarr'''"
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
string|"'/tmp/test'"
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
string|"'/tmp/test'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'log_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'section1'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
string|"'section2'"
op|':'
op|'{'
string|"'log_name'"
op|':'
string|"'yarr'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
string|"'/tmp/test'"
op|','
string|"'section1'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'log_name'"
op|':'
string|"'section1'"
op|','
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
string|"'/tmp/test'"
op|','
string|"'section2'"
op|')'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'yarr'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
string|"'/tmp/test'"
op|','
string|"'section1'"
op|','
name|'log_name'
op|'='
string|"'foo'"
op|')'
op|'.'
name|'get'
op|'('
string|"'log_name'"
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'readconf'
op|'('
string|"'/tmp/test'"
op|','
string|"'section1'"
op|','
name|'defaults'
op|'='
op|'{'
string|"'bar'"
op|':'
string|"'baz'"
op|'}'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'log_name'"
op|':'
string|"'section1'"
op|','
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'bar'"
op|':'
string|"'baz'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
string|"'/tmp/test'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_daemonize
dedent|''
name|'def'
name|'test_daemonize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# default args'
nl|'\n'
indent|'        '
name|'conf'
op|'='
op|'{'
string|"'user'"
op|':'
name|'getuser'
op|'('
op|')'
op|'}'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
string|"'daemon'"
op|')'
newline|'\n'
nl|'\n'
comment|'# over-ride utils system modules with mocks'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'daemonize'
op|'('
name|'conf'
op|','
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test same args, OSError trying to get session leader'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
name|'raise_funcs'
op|'='
op|'('
string|"'setsid'"
op|','
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'daemonize'
op|'('
name|'conf'
op|','
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test same args, exc when trying to close stdio'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
name|'raise_funcs'
op|'='
op|'('
string|"'dup2'"
op|','
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'daemonize'
op|'('
name|'conf'
op|','
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
comment|'# unable to close stdio'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stdout'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'stderr'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset; test some other args'
nl|'\n'
name|'utils'
op|'.'
name|'os'
op|'='
name|'MockOs'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'sys'
op|'='
name|'MockSys'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'='
op|'{'
string|"'user'"
op|':'
name|'getuser'
op|'('
op|')'
op|'}'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'daemonize'
op|'('
name|'conf'
op|','
name|'logger'
op|','
name|'capture_stdout'
op|'='
name|'False'
op|','
nl|'\n'
name|'capture_stderr'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'utils'
op|'.'
name|'sys'
op|'.'
name|'excepthook'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
comment|'# when logging to console, stderr remains open'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'os'
op|'.'
name|'closed_fds'
op|','
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
comment|'# stdio not captured'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'sys'
op|','
string|"'stdout'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'sys'
op|','
string|"'stderr'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset mocks on utils'
nl|'\n'
name|'reload'
op|'('
name|'utils'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_logger_console
dedent|''
name|'def'
name|'test_get_logger_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reload'
op|'('
name|'utils'
op|')'
comment|'# reset get_logger attrs'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'console'"
op|')'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'hasattr'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|','
string|"'console'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|'.'
name|'console'
op|','
nl|'\n'
name|'logging'
op|'.'
name|'StreamHandler'
op|')'
op|')'
newline|'\n'
comment|"# make sure you can't have two console handlers"
nl|'\n'
name|'old_handler'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'.'
name|'console'
newline|'\n'
name|'logger'
op|'='
name|'utils'
op|'.'
name|'get_logger'
op|'('
name|'None'
op|','
name|'log_to_console'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'utils'
op|'.'
name|'get_logger'
op|'.'
name|'console'
op|','
name|'old_handler'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
