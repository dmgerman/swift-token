begin_unit
comment|'# Copyright (c) 2010-2013 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Methods & Attributes for shared \'on-disk\' data layouts."""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'shuffle'
newline|'\n'
name|'from'
name|'ConfigParser'
name|'import'
name|'ConfigParser'
op|','
name|'NoSectionError'
op|','
name|'NoOptionError'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'listdir'
op|','
name|'quote'
newline|'\n'
nl|'\n'
comment|'# Used by hash_path to offer a bit more security when generating hashes for'
nl|'\n'
comment|'# paths. It simply appends this value to all paths; guessing the hash a path'
nl|'\n'
comment|'# will end up with would also require knowing this suffix.'
nl|'\n'
DECL|variable|_hash_conf
name|'_hash_conf'
op|'='
name|'ConfigParser'
op|'('
op|')'
newline|'\n'
DECL|variable|HASH_PATH_SUFFIX
name|'HASH_PATH_SUFFIX'
op|'='
string|"''"
newline|'\n'
DECL|variable|HASH_PATH_PREFIX
name|'HASH_PATH_PREFIX'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'_hash_conf'
op|'.'
name|'read'
op|'('
string|"'/etc/swift/swift.conf'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
DECL|variable|HASH_PATH_SUFFIX
indent|'        '
name|'HASH_PATH_SUFFIX'
op|'='
name|'_hash_conf'
op|'.'
name|'get'
op|'('
string|"'swift-hash'"
op|','
nl|'\n'
string|"'swift_hash_path_suffix'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'NoSectionError'
op|','
name|'NoOptionError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
DECL|variable|HASH_PATH_PREFIX
indent|'        '
name|'HASH_PATH_PREFIX'
op|'='
name|'_hash_conf'
op|'.'
name|'get'
op|'('
string|"'swift-hash'"
op|','
nl|'\n'
string|"'swift_hash_path_prefix'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'NoSectionError'
op|','
name|'NoOptionError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_configuration
dedent|''
dedent|''
name|'def'
name|'validate_configuration'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'HASH_PATH_SUFFIX'
name|'and'
name|'not'
name|'HASH_PATH_PREFIX'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'exit'
op|'('
string|'"Error: [swift-hash]: both swift_hash_path_suffix "'
nl|'\n'
string|'"and swift_hash_path_prefix are missing "'
nl|'\n'
string|'"from /etc/swift/swift.conf"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_path
dedent|''
dedent|''
name|'def'
name|'hash_path'
op|'('
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'object'
op|'='
name|'None'
op|','
name|'raw_digest'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the canonical hash for an account/container/object\n\n    :param account: Account\n    :param container: Container\n    :param object: Object\n    :param raw_digest: If True, return the raw version rather than a hex digest\n    :returns: hash string\n    """'
newline|'\n'
name|'if'
name|'object'
name|'and'
name|'not'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'container is required if object is provided'"
op|')'
newline|'\n'
dedent|''
name|'paths'
op|'='
op|'['
name|'account'
op|']'
newline|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'.'
name|'append'
op|'('
name|'container'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'object'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'.'
name|'append'
op|'('
name|'object'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'raw_digest'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'md5'
op|'('
name|'HASH_PATH_PREFIX'
op|'+'
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|')'
nl|'\n'
op|'+'
name|'HASH_PATH_SUFFIX'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'md5'
op|'('
name|'HASH_PATH_PREFIX'
op|'+'
string|"'/'"
op|'+'
string|"'/'"
op|'.'
name|'join'
op|'('
name|'paths'
op|')'
nl|'\n'
op|'+'
name|'HASH_PATH_SUFFIX'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize_timestamp
dedent|''
dedent|''
name|'def'
name|'normalize_timestamp'
op|'('
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Format a timestamp (string or numeric) into a standardized\n    xxxxxxxxxx.xxxxx (10.5) format.\n\n    Note that timestamps using values greater than or equal to November 20th,\n    2286 at 17:46 UTC will use 11 digits to represent the number of\n    seconds.\n\n    :param timestamp: unix timestamp\n    :returns: normalized timestamp as a string\n    """'
newline|'\n'
name|'return'
string|'"%016.05f"'
op|'%'
op|'('
name|'float'
op|'('
name|'timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_device_partition
dedent|''
name|'def'
name|'validate_device_partition'
op|'('
name|'device'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Validate that a device and a partition are valid and won\'t lead to\n    directory traversal when used.\n\n    :param device: device to validate\n    :param partition: partition to validate\n    :raises: ValueError if given an invalid device or partition\n    """'
newline|'\n'
name|'invalid_device'
op|'='
name|'False'
newline|'\n'
name|'invalid_partition'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'device'
name|'or'
string|"'/'"
name|'in'
name|'device'
name|'or'
name|'device'
name|'in'
op|'['
string|"'.'"
op|','
string|"'..'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'invalid_device'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'partition'
name|'or'
string|"'/'"
name|'in'
name|'partition'
name|'or'
name|'partition'
name|'in'
op|'['
string|"'.'"
op|','
string|"'..'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'invalid_partition'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'invalid_device'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid device: %s'"
op|'%'
name|'quote'
op|'('
name|'device'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_partition'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid partition: %s'"
op|'%'
name|'quote'
op|'('
name|'partition'
name|'or'
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|storage_directory
dedent|''
dedent|''
name|'def'
name|'storage_directory'
op|'('
name|'datadir'
op|','
name|'partition'
op|','
name|'name_hash'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the storage directory\n\n    :param datadir: Base data directory\n    :param partition: Partition\n    :param name_hash: Account, container or object name hash\n    :returns: Storage directory\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir'
op|','
name|'str'
op|'('
name|'partition'
op|')'
op|','
name|'name_hash'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|','
name|'name_hash'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|audit_location_generator
dedent|''
name|'def'
name|'audit_location_generator'
op|'('
name|'devices'
op|','
name|'datadir'
op|','
name|'suffix'
op|'='
string|"''"
op|','
nl|'\n'
name|'mount_check'
op|'='
name|'True'
op|','
name|'logger'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''\n    Given a devices path and a data directory, yield (path, device,\n    partition) for all files in that directory\n\n    :param devices: parent directory of the devices to be audited\n    :param datadir: a directory located under self.devices. This should be\n                    one of the DATADIR constants defined in the account,\n                    container, and object servers.\n    :param suffix: path name suffix required for all names returned\n    :param mount_check: Flag to check if a mount check should be performed\n                    on devices\n    :param logger: a logger object\n    '''"
newline|'\n'
name|'device_dir'
op|'='
name|'listdir'
op|'('
name|'devices'
op|')'
newline|'\n'
comment|'# randomize devices in case of process restart before sweep completed'
nl|'\n'
name|'shuffle'
op|'('
name|'device_dir'
op|')'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'device_dir'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mount_check'
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'ismount'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'logger'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Skipping %s as it is not mounted'"
op|')'
op|','
name|'device'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|','
name|'datadir'
op|')'
newline|'\n'
name|'partitions'
op|'='
name|'listdir'
op|'('
name|'datadir_path'
op|')'
newline|'\n'
name|'for'
name|'partition'
name|'in'
name|'partitions'
op|':'
newline|'\n'
indent|'            '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir_path'
op|','
name|'partition'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'suffixes'
op|'='
name|'listdir'
op|'('
name|'part_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'asuffix'
name|'in'
name|'suffixes'
op|':'
newline|'\n'
indent|'                '
name|'suff_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'asuffix'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'hashes'
op|'='
name|'listdir'
op|'('
name|'suff_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'hsh'
name|'in'
name|'hashes'
op|':'
newline|'\n'
indent|'                    '
name|'hash_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'suff_path'
op|','
name|'hsh'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'files'
op|'='
name|'sorted'
op|'('
name|'listdir'
op|'('
name|'hash_path'
op|')'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOTDIR'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'fname'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'suffix'
name|'and'
name|'not'
name|'fname'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'continue'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'hash_path'
op|','
name|'fname'
op|')'
newline|'\n'
name|'yield'
name|'path'
op|','
name|'device'
op|','
name|'partition'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit
