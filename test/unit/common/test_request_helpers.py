begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for swift.common.request_helpers"""'
newline|'\n'
nl|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'request_helpers'
name|'import'
name|'is_sys_meta'
op|','
name|'is_user_meta'
op|','
name|'is_sys_or_user_meta'
op|','
name|'strip_sys_meta_prefix'
op|','
name|'strip_user_meta_prefix'
op|','
name|'remove_items'
newline|'\n'
nl|'\n'
DECL|variable|server_types
name|'server_types'
op|'='
op|'['
string|"'account'"
op|','
string|"'container'"
op|','
string|"'object'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRequestHelpers
name|'class'
name|'TestRequestHelpers'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_is_user_meta
indent|'    '
name|'def'
name|'test_is_user_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m_type'
op|'='
string|"'meta'"
newline|'\n'
name|'for'
name|'st'
name|'in'
name|'server_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'is_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-foo'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%sfoo'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_sys_meta
dedent|''
dedent|''
name|'def'
name|'test_is_sys_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m_type'
op|'='
string|"'sysmeta'"
newline|'\n'
name|'for'
name|'st'
name|'in'
name|'server_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'is_sys_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-foo'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_sys_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_sys_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%sfoo'"
op|'%'
op|'('
name|'st'
op|','
name|'m_type'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_sys_or_user_meta
dedent|''
dedent|''
name|'def'
name|'test_is_sys_or_user_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m_types'
op|'='
op|'['
string|"'sysmeta'"
op|','
string|"'meta'"
op|']'
newline|'\n'
name|'for'
name|'mt'
name|'in'
name|'m_types'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'st'
name|'in'
name|'server_types'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'is_sys_or_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-foo'"
nl|'\n'
op|'%'
op|'('
name|'st'
op|','
name|'mt'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_sys_or_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%s-'"
nl|'\n'
op|'%'
op|'('
name|'st'
op|','
name|'mt'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_sys_or_user_meta'
op|'('
name|'st'
op|','
string|"'x-%s-%sfoo'"
nl|'\n'
op|'%'
op|'('
name|'st'
op|','
name|'mt'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_strip_sys_meta_prefix
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_strip_sys_meta_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mt'
op|'='
string|"'sysmeta'"
newline|'\n'
name|'for'
name|'st'
name|'in'
name|'server_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_sys_meta_prefix'
op|'('
name|'st'
op|','
string|"'x-%s-%s-a'"
nl|'\n'
op|'%'
op|'('
name|'st'
op|','
name|'mt'
op|')'
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_strip_user_meta_prefix
dedent|''
dedent|''
name|'def'
name|'test_strip_user_meta_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mt'
op|'='
string|"'meta'"
newline|'\n'
name|'for'
name|'st'
name|'in'
name|'server_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strip_user_meta_prefix'
op|'('
name|'st'
op|','
string|"'x-%s-%s-a'"
nl|'\n'
op|'%'
op|'('
name|'st'
op|','
name|'mt'
op|')'
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_items
dedent|''
dedent|''
name|'def'
name|'test_remove_items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'src'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'b'"
op|','
nl|'\n'
string|"'c'"
op|':'
string|"'d'"
op|'}'
newline|'\n'
name|'test'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'=='
string|"'a'"
newline|'\n'
name|'rem'
op|'='
name|'remove_items'
op|'('
name|'src'
op|','
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'src'
op|','
op|'{'
string|"'c'"
op|':'
string|"'d'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rem'
op|','
op|'{'
string|"'a'"
op|':'
string|"'b'"
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
