begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Swift tests """'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
op|','
name|'closing'
newline|'\n'
name|'from'
name|'collections'
name|'import'
name|'defaultdict'
op|','
name|'Iterable'
newline|'\n'
name|'from'
name|'numbers'
name|'import'
name|'Number'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'NamedTemporaryFile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'socket'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkdtemp'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'from'
name|'test'
name|'import'
name|'get_config'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'swob'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'config_true_value'
op|','
name|'LogAdapter'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'ring'
name|'import'
name|'Ring'
op|','
name|'RingData'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
op|','
name|'Timeout'
newline|'\n'
name|'import'
name|'logging'
op|'.'
name|'handlers'
newline|'\n'
name|'from'
name|'httplib'
name|'import'
name|'HTTPException'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'storage_policy'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'from'
name|'gzip'
name|'import'
name|'GzipFile'
newline|'\n'
name|'import'
name|'mock'
name|'as'
name|'mocklib'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|patch_policies
name|'def'
name|'patch_policies'
op|'('
name|'thing_or_policies'
op|'='
name|'None'
op|','
name|'legacy_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'legacy_only'
op|':'
newline|'\n'
indent|'        '
name|'default_policies'
op|'='
op|'['
name|'storage_policy'
op|'.'
name|'StoragePolicy'
op|'('
nl|'\n'
number|'0'
op|','
string|"'legacy'"
op|','
name|'True'
op|','
name|'object_ring'
op|'='
name|'FakeRing'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'default_policies'
op|'='
op|'['
nl|'\n'
name|'storage_policy'
op|'.'
name|'StoragePolicy'
op|'('
nl|'\n'
number|'0'
op|','
string|"'nulo'"
op|','
name|'True'
op|','
name|'object_ring'
op|'='
name|'FakeRing'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'storage_policy'
op|'.'
name|'StoragePolicy'
op|'('
nl|'\n'
number|'1'
op|','
string|"'unu'"
op|','
name|'object_ring'
op|'='
name|'FakeRing'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'thing_or_policies'
op|'='
name|'thing_or_policies'
name|'or'
name|'default_policies'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'thing_or_policies'
op|','
op|'('
nl|'\n'
name|'Iterable'
op|','
name|'storage_policy'
op|'.'
name|'StoragePolicyCollection'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'PatchPolicies'
op|'('
name|'thing_or_policies'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# it's a thing!"
nl|'\n'
indent|'        '
name|'return'
name|'PatchPolicies'
op|'('
name|'default_policies'
op|')'
op|'('
name|'thing_or_policies'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PatchPolicies
dedent|''
dedent|''
name|'class'
name|'PatchPolicies'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Why not mock.patch?  In my case, when used as a decorator on the class it\n    seemed to patch setUp at the wrong time (i.e. in setup the global wasn\'t\n    patched yet)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'policies'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'policies'
op|','
name|'storage_policy'
op|'.'
name|'StoragePolicyCollection'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'policies'
op|'='
name|'policies'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'policies'
op|'='
name|'storage_policy'
op|'.'
name|'StoragePolicyCollection'
op|'('
name|'policies'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_patch_class'
op|'('
name|'thing'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_patch_method'
op|'('
name|'thing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_patch_class
dedent|''
dedent|''
name|'def'
name|'_patch_class'
op|'('
name|'self'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|NewClass
indent|'        '
name|'class'
name|'NewClass'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|already_patched
indent|'            '
name|'already_patched'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'cls_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_orig_POLICIES'
op|'='
name|'storage_policy'
op|'.'
name|'_POLICIES'
newline|'\n'
name|'if'
name|'not'
name|'cls_self'
op|'.'
name|'already_patched'
op|':'
newline|'\n'
indent|'                    '
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'policies'
newline|'\n'
name|'cls_self'
op|'.'
name|'already_patched'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'NewClass'
op|','
name|'cls_self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'cls_self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'super'
op|'('
name|'NewClass'
op|','
name|'cls_self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'_orig_POLICIES'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'NewClass'
op|'.'
name|'__name__'
op|'='
name|'cls'
op|'.'
name|'__name__'
newline|'\n'
name|'return'
name|'NewClass'
newline|'\n'
nl|'\n'
DECL|member|_patch_method
dedent|''
name|'def'
name|'_patch_method'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|mywrapper
name|'def'
name|'mywrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_orig_POLICIES'
op|'='
name|'storage_policy'
op|'.'
name|'_POLICIES'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'policies'
newline|'\n'
name|'return'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'_orig_POLICIES'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'mywrapper'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_orig_POLICIES'
op|'='
name|'storage_policy'
op|'.'
name|'_POLICIES'
newline|'\n'
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'policies'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'storage_policy'
op|'.'
name|'_POLICIES'
op|'='
name|'self'
op|'.'
name|'_orig_POLICIES'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeRing
dedent|''
dedent|''
name|'class'
name|'FakeRing'
op|'('
name|'Ring'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'replicas'
op|'='
number|'3'
op|','
name|'max_more_nodes'
op|'='
number|'0'
op|','
name|'part_power'
op|'='
number|'0'
op|','
nl|'\n'
name|'base_port'
op|'='
number|'1000'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param part_power: make part calculation based on the path\n\n        If you set a part_power when you setup your FakeRing the parts you get\n        out of ring methods will actually be based on the path - otherwise we\n        exercise the real ring code, but ignore the result and return 1.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_base_port'
op|'='
name|'base_port'
newline|'\n'
name|'self'
op|'.'
name|'max_more_nodes'
op|'='
name|'max_more_nodes'
newline|'\n'
name|'self'
op|'.'
name|'_part_shift'
op|'='
number|'32'
op|'-'
name|'part_power'
newline|'\n'
comment|'# 9 total nodes (6 more past the initial 3) is the cap, no matter if'
nl|'\n'
comment|'# this is set higher, or R^2 for R replicas'
nl|'\n'
name|'self'
op|'.'
name|'set_replicas'
op|'('
name|'replicas'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reload
dedent|''
name|'def'
name|'_reload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_rtime'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_replicas
dedent|''
name|'def'
name|'set_replicas'
op|'('
name|'self'
op|','
name|'replicas'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'replicas'
op|'='
name|'replicas'
newline|'\n'
name|'self'
op|'.'
name|'_devs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'replicas'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ip'
op|'='
string|"'10.0.0.%s'"
op|'%'
name|'x'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'_base_port'
op|'+'
name|'x'
newline|'\n'
name|'self'
op|'.'
name|'_devs'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sd'"
op|'+'
op|'('
name|'chr'
op|'('
name|'ord'
op|'('
string|"'a'"
op|')'
op|'+'
name|'x'
op|')'
op|')'
op|','
nl|'\n'
string|"'zone'"
op|':'
name|'x'
op|'%'
number|'3'
op|','
nl|'\n'
string|"'region'"
op|':'
name|'x'
op|'%'
number|'2'
op|','
nl|'\n'
string|"'id'"
op|':'
name|'x'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|replica_count
name|'def'
name|'replica_count'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'replicas'
newline|'\n'
nl|'\n'
DECL|member|_get_part_nodes
dedent|''
name|'def'
name|'_get_part_nodes'
op|'('
name|'self'
op|','
name|'part'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'_devs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_more_nodes
dedent|''
name|'def'
name|'get_more_nodes'
op|'('
name|'self'
op|','
name|'part'
op|')'
op|':'
newline|'\n'
comment|'# replicas^2 is the true cap'
nl|'\n'
indent|'        '
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'self'
op|'.'
name|'replicas'
op|','
name|'min'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'+'
name|'self'
op|'.'
name|'max_more_nodes'
op|','
nl|'\n'
name|'self'
op|'.'
name|'replicas'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
op|'{'
string|"'ip'"
op|':'
string|"'10.0.0.%s'"
op|'%'
name|'x'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'_base_port'
op|'+'
name|'x'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda'"
op|','
nl|'\n'
string|"'zone'"
op|':'
name|'x'
op|'%'
number|'3'
op|','
nl|'\n'
string|"'region'"
op|':'
name|'x'
op|'%'
number|'2'
op|','
nl|'\n'
string|"'id'"
op|':'
name|'x'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_fake_ring
dedent|''
dedent|''
dedent|''
name|'def'
name|'write_fake_ring'
op|'('
name|'path'
op|','
op|'*'
name|'devs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Pretty much just a two node, two replica, 2 part power ring...\n    """'
newline|'\n'
name|'dev1'
op|'='
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
string|"'zone'"
op|':'
number|'0'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
newline|'\n'
name|'dev2'
op|'='
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
string|"'zone'"
op|':'
number|'0'
op|','
string|"'device'"
op|':'
string|"'sdb1'"
op|','
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
newline|'\n'
nl|'\n'
name|'dev1_updates'
op|','
name|'dev2_updates'
op|'='
name|'devs'
name|'or'
op|'('
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'dev1'
op|'.'
name|'update'
op|'('
name|'dev1_updates'
op|')'
newline|'\n'
name|'dev2'
op|'.'
name|'update'
op|'('
name|'dev2_updates'
op|')'
newline|'\n'
nl|'\n'
name|'replica2part2dev_id'
op|'='
op|'['
op|'['
number|'0'
op|','
number|'1'
op|','
number|'0'
op|','
number|'1'
op|']'
op|','
op|'['
number|'1'
op|','
number|'0'
op|','
number|'1'
op|','
number|'0'
op|']'
op|']'
newline|'\n'
name|'devs'
op|'='
op|'['
name|'dev1'
op|','
name|'dev2'
op|']'
newline|'\n'
name|'part_shift'
op|'='
number|'30'
newline|'\n'
name|'with'
name|'closing'
op|'('
name|'GzipFile'
op|'('
name|'path'
op|','
string|"'wb'"
op|')'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'pickle'
op|'.'
name|'dump'
op|'('
name|'RingData'
op|'('
name|'replica2part2dev_id'
op|','
name|'devs'
op|','
name|'part_shift'
op|')'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeMemcache
dedent|''
dedent|''
name|'class'
name|'FakeMemcache'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'store'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'store'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'store'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|','
name|'time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'store'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|incr
dedent|''
name|'def'
name|'incr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'store'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'store'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
number|'0'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'store'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|soft_lock
name|'def'
name|'soft_lock'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'timeout'
op|'='
number|'0'
op|','
name|'retries'
op|'='
number|'5'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'store'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|readuntil2crlfs
dedent|''
dedent|''
name|'def'
name|'readuntil2crlfs'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'rv'
op|'='
string|"''"
newline|'\n'
name|'lc'
op|'='
string|"''"
newline|'\n'
name|'crlfs'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'crlfs'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'fd'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'c'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"didn\'t get two CRLFs; just got %r"'
op|'%'
name|'rv'
op|')'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'rv'
op|'+'
name|'c'
newline|'\n'
name|'if'
name|'c'
op|'=='
string|"'\\r'"
name|'and'
name|'lc'
op|'!='
string|"'\\n'"
op|':'
newline|'\n'
indent|'            '
name|'crlfs'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'lc'
op|'=='
string|"'\\r'"
name|'and'
name|'c'
op|'=='
string|"'\\n'"
op|':'
newline|'\n'
indent|'            '
name|'crlfs'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'lc'
op|'='
name|'c'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|connect_tcp
dedent|''
name|'def'
name|'connect_tcp'
op|'('
name|'hostport'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'rv'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'rv'
op|'.'
name|'connect'
op|'('
name|'hostport'
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|tmpfile
name|'def'
name|'tmpfile'
op|'('
name|'content'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'NamedTemporaryFile'
op|'('
string|"'w'"
op|','
name|'delete'
op|'='
name|'False'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'file_name'
op|'='
name|'f'
op|'.'
name|'name'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'file_name'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'file_name'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|xattr_data
dedent|''
dedent|''
name|'xattr_data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_inode
name|'def'
name|'_get_inode'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'fd'
op|','
name|'int'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fd'
op|'='
name|'fd'
op|'.'
name|'fileno'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'stat'
op|'('
name|'fd'
op|')'
op|'.'
name|'st_ino'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'os'
op|'.'
name|'fstat'
op|'('
name|'fd'
op|')'
op|'.'
name|'st_ino'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_setxattr
dedent|''
name|'def'
name|'_setxattr'
op|'('
name|'fd'
op|','
name|'k'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'inode'
op|'='
name|'_get_inode'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'data'
op|'='
name|'xattr_data'
op|'.'
name|'get'
op|'('
name|'inode'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'data'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
name|'xattr_data'
op|'['
name|'inode'
op|']'
op|'='
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_getxattr
dedent|''
name|'def'
name|'_getxattr'
op|'('
name|'fd'
op|','
name|'k'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'inode'
op|'='
name|'_get_inode'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'data'
op|'='
name|'xattr_data'
op|'.'
name|'get'
op|'('
name|'inode'
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'ENODATA'
op|','
string|'"Fake IOError"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'xattr'
newline|'\n'
name|'xattr'
op|'.'
name|'setxattr'
op|'='
name|'_setxattr'
newline|'\n'
name|'xattr'
op|'.'
name|'getxattr'
op|'='
name|'_getxattr'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|temptree
name|'def'
name|'temptree'
op|'('
name|'files'
op|','
name|'contents'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
comment|'# generate enough contents to fill the files'
nl|'\n'
indent|'    '
name|'c'
op|'='
name|'len'
op|'('
name|'files'
op|')'
newline|'\n'
name|'contents'
op|'='
op|'('
name|'list'
op|'('
name|'contents'
op|')'
op|'+'
op|'['
string|"''"
op|']'
op|'*'
name|'c'
op|')'
op|'['
op|':'
name|'c'
op|']'
newline|'\n'
name|'tempdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'for'
name|'path'
op|','
name|'content'
name|'in'
name|'zip'
op|'('
name|'files'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|"'.'"
op|'+'
name|'path'
newline|'\n'
dedent|''
name|'new_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tempdir'
op|','
name|'path'
op|')'
newline|'\n'
name|'subdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'new_path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'subdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'subdir'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'new_path'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'tempdir'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'rmtree'
op|'('
name|'tempdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|with_tempdir
dedent|''
dedent|''
name|'def'
name|'with_tempdir'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to give a single test a tempdir as argument to test method.\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tempdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'append'
op|'('
name|'tempdir'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'rmtree'
op|'('
name|'tempdir'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NullLoggingHandler
dedent|''
name|'class'
name|'NullLoggingHandler'
op|'('
name|'logging'
op|'.'
name|'Handler'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|emit
indent|'    '
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnmockTimeModule
dedent|''
dedent|''
name|'class'
name|'UnmockTimeModule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Even if a test mocks time.time - you can restore unmolested behavior in a\n    another module who imports time directly by monkey patching it\'s imported\n    reference to the module with an instance of this class\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_orig_time
name|'_orig_time'
op|'='
name|'time'
op|'.'
name|'time'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'time'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'UnmockTimeModule'
op|'.'
name|'_orig_time'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'time'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# logging.LogRecord.__init__ calls time.time'
nl|'\n'
dedent|''
dedent|''
name|'logging'
op|'.'
name|'time'
op|'='
name|'UnmockTimeModule'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeLogger
name|'class'
name|'FakeLogger'
op|'('
name|'logging'
op|'.'
name|'Logger'
op|')'
op|':'
newline|'\n'
comment|'# a thread safe logger'
nl|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|"'swift.unit.fake_logger'"
newline|'\n'
name|'self'
op|'.'
name|'level'
op|'='
name|'logging'
op|'.'
name|'NOTSET'
newline|'\n'
name|'if'
string|"'facility'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'facility'
op|'='
name|'kwargs'
op|'['
string|"'facility'"
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'statsd_client'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'thread_locals'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_clear
dedent|''
name|'def'
name|'_clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log_dict'
op|'='
name|'defaultdict'
op|'('
name|'list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lines_dict'
op|'='
op|'{'
string|"'critical'"
op|':'
op|'['
op|']'
op|','
string|"'error'"
op|':'
op|'['
op|']'
op|','
string|"'info'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'warning'"
op|':'
op|'['
op|']'
op|','
string|"'debug'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_store_in
dedent|''
name|'def'
name|'_store_in'
op|'('
name|'store_name'
op|')'
op|':'
newline|'\n'
DECL|function|stub_fn
indent|'        '
name|'def'
name|'stub_fn'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log_dict'
op|'['
name|'store_name'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'stub_fn'
newline|'\n'
nl|'\n'
DECL|member|_store_and_log_in
dedent|''
name|'def'
name|'_store_and_log_in'
op|'('
name|'store_name'
op|','
name|'level'
op|')'
op|':'
newline|'\n'
DECL|function|stub_fn
indent|'        '
name|'def'
name|'stub_fn'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'log_dict'
op|'['
name|'store_name'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_log'
op|'('
name|'level'
op|','
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'args'
op|'['
number|'1'
op|':'
op|']'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'stub_fn'
newline|'\n'
nl|'\n'
DECL|member|get_lines_for_level
dedent|''
name|'def'
name|'get_lines_for_level'
op|'('
name|'self'
op|','
name|'level'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'level'
name|'not'
name|'in'
name|'self'
op|'.'
name|'lines_dict'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
nl|'\n'
string|'"Invalid log level \'%s\'; valid levels are %s"'
op|'%'
nl|'\n'
op|'('
name|'level'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
string|'"\'%s\'"'
op|'%'
name|'lvl'
name|'for'
name|'lvl'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'lines_dict'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'lines_dict'
op|'['
name|'level'
op|']'
newline|'\n'
nl|'\n'
DECL|member|all_log_lines
dedent|''
name|'def'
name|'all_log_lines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
op|'('
name|'level'
op|','
name|'msgs'
op|')'
name|'for'
name|'level'
op|','
name|'msgs'
name|'in'
name|'self'
op|'.'
name|'lines_dict'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'msgs'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|error
dedent|''
name|'error'
op|'='
name|'_store_and_log_in'
op|'('
string|"'error'"
op|','
name|'logging'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
DECL|variable|info
name|'info'
op|'='
name|'_store_and_log_in'
op|'('
string|"'info'"
op|','
name|'logging'
op|'.'
name|'INFO'
op|')'
newline|'\n'
DECL|variable|warning
name|'warning'
op|'='
name|'_store_and_log_in'
op|'('
string|"'warning'"
op|','
name|'logging'
op|'.'
name|'WARNING'
op|')'
newline|'\n'
DECL|variable|warn
name|'warn'
op|'='
name|'_store_and_log_in'
op|'('
string|"'warning'"
op|','
name|'logging'
op|'.'
name|'WARNING'
op|')'
newline|'\n'
DECL|variable|debug
name|'debug'
op|'='
name|'_store_and_log_in'
op|'('
string|"'debug'"
op|','
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exception
name|'def'
name|'exception'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log_dict'
op|'['
string|"'exception'"
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'args'
op|','
name|'kwargs'
op|','
nl|'\n'
name|'str'
op|'('
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
name|'print'
string|"'FakeLogger Exception: %s'"
op|'%'
name|'self'
op|'.'
name|'log_dict'
newline|'\n'
nl|'\n'
comment|'# mock out the StatsD logging methods:'
nl|'\n'
DECL|variable|update_stats
dedent|''
name|'update_stats'
op|'='
name|'_store_in'
op|'('
string|"'update_stats'"
op|')'
newline|'\n'
DECL|variable|increment
name|'increment'
op|'='
name|'_store_in'
op|'('
string|"'increment'"
op|')'
newline|'\n'
DECL|variable|decrement
name|'decrement'
op|'='
name|'_store_in'
op|'('
string|"'decrement'"
op|')'
newline|'\n'
DECL|variable|timing
name|'timing'
op|'='
name|'_store_in'
op|'('
string|"'timing'"
op|')'
newline|'\n'
DECL|variable|timing_since
name|'timing_since'
op|'='
name|'_store_in'
op|'('
string|"'timing_since'"
op|')'
newline|'\n'
DECL|variable|transfer_rate
name|'transfer_rate'
op|'='
name|'_store_in'
op|'('
string|"'transfer_rate'"
op|')'
newline|'\n'
DECL|variable|set_statsd_prefix
name|'set_statsd_prefix'
op|'='
name|'_store_in'
op|'('
string|"'set_statsd_prefix'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_increments
name|'def'
name|'get_increments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'call'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
name|'for'
name|'call'
name|'in'
name|'self'
op|'.'
name|'log_dict'
op|'['
string|"'increment'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_increment_counts
dedent|''
name|'def'
name|'get_increment_counts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'counts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'metric'
name|'in'
name|'self'
op|'.'
name|'get_increments'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'metric'
name|'not'
name|'in'
name|'counts'
op|':'
newline|'\n'
indent|'                '
name|'counts'
op|'['
name|'metric'
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'counts'
op|'['
name|'metric'
op|']'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'counts'
newline|'\n'
nl|'\n'
DECL|member|setFormatter
dedent|''
name|'def'
name|'setFormatter'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'formatter'
op|'='
name|'obj'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_name
dedent|''
name|'def'
name|'set_name'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|"# don't touch _handlers"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|acquire
dedent|''
name|'def'
name|'acquire'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|release
dedent|''
name|'def'
name|'release'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|createLock
dedent|''
name|'def'
name|'createLock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_handle
dedent|''
name|'def'
name|'_handle'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'record'
op|'.'
name|'getMessage'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'WARNING: unable to format log message %r %% %r'"
op|'%'
op|'('
nl|'\n'
name|'record'
op|'.'
name|'msg'
op|','
name|'record'
op|'.'
name|'args'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'lines_dict'
op|'['
name|'record'
op|'.'
name|'levelname'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle
dedent|''
name|'def'
name|'handle'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|handleError
dedent|''
name|'def'
name|'handleError'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DebugLogger
dedent|''
dedent|''
name|'class'
name|'DebugLogger'
op|'('
name|'FakeLogger'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A simple stdout logging version of FakeLogger"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'FakeLogger'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'formatter'
op|'='
name|'logging'
op|'.'
name|'Formatter'
op|'('
nl|'\n'
string|'"%(server)s %(levelname)s: %(message)s"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle
dedent|''
name|'def'
name|'handle'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle'
op|'('
name|'record'
op|')'
newline|'\n'
name|'print'
name|'self'
op|'.'
name|'formatter'
op|'.'
name|'format'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DebugLogAdapter
dedent|''
dedent|''
name|'class'
name|'DebugLogAdapter'
op|'('
name|'LogAdapter'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_send_to_logger
indent|'    '
name|'def'
name|'_send_to_logger'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
DECL|function|stub_fn
indent|'        '
name|'def'
name|'stub_fn'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'logger'
op|','
name|'name'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'stub_fn'
newline|'\n'
nl|'\n'
comment|"# delegate to FakeLogger's mocks"
nl|'\n'
DECL|variable|update_stats
dedent|''
name|'update_stats'
op|'='
name|'_send_to_logger'
op|'('
string|"'update_stats'"
op|')'
newline|'\n'
DECL|variable|increment
name|'increment'
op|'='
name|'_send_to_logger'
op|'('
string|"'increment'"
op|')'
newline|'\n'
DECL|variable|decrement
name|'decrement'
op|'='
name|'_send_to_logger'
op|'('
string|"'decrement'"
op|')'
newline|'\n'
DECL|variable|timing
name|'timing'
op|'='
name|'_send_to_logger'
op|'('
string|"'timing'"
op|')'
newline|'\n'
DECL|variable|timing_since
name|'timing_since'
op|'='
name|'_send_to_logger'
op|'('
string|"'timing_since'"
op|')'
newline|'\n'
DECL|variable|transfer_rate
name|'transfer_rate'
op|'='
name|'_send_to_logger'
op|'('
string|"'transfer_rate'"
op|')'
newline|'\n'
DECL|variable|set_statsd_prefix
name|'set_statsd_prefix'
op|'='
name|'_send_to_logger'
op|'('
string|"'set_statsd_prefix'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
op|'.'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'logger'"
op|']'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug_logger
dedent|''
dedent|''
dedent|''
name|'def'
name|'debug_logger'
op|'('
name|'name'
op|'='
string|"'test'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""get a named adapted debug logger"""'
newline|'\n'
name|'return'
name|'DebugLogAdapter'
op|'('
name|'DebugLogger'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|original_syslog_handler
dedent|''
name|'original_syslog_handler'
op|'='
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SysLogHandler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_syslog_handler
name|'def'
name|'fake_syslog_handler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'attr'
name|'in'
name|'dir'
op|'('
name|'original_syslog_handler'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attr'
op|'.'
name|'startswith'
op|'('
string|"'LOG'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'FakeLogger'
op|','
name|'attr'
op|','
nl|'\n'
name|'copy'
op|'.'
name|'copy'
op|'('
name|'getattr'
op|'('
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SysLogHandler'
op|','
name|'attr'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'FakeLogger'
op|'.'
name|'priority_map'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SysLogHandler'
op|'.'
name|'priority_map'
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'SysLogHandler'
op|'='
name|'FakeLogger'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'config_true_value'
op|'('
name|'get_config'
op|'('
string|"'unit_test'"
op|')'
op|'.'
name|'get'
op|'('
string|"'fake_syslog'"
op|','
string|"'False'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fake_syslog_handler'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockTrue
dedent|''
name|'class'
name|'MockTrue'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Instances of MockTrue evaluate like True\n    Any attr accessed on an instance of MockTrue will return a MockTrue\n    instance. Any method called on an instance of MockTrue will return\n    a MockTrue instance.\n\n    >>> thing = MockTrue()\n    >>> thing\n    True\n    >>> thing == True # True == True\n    True\n    >>> thing == False # True == False\n    False\n    >>> thing != True # True != True\n    False\n    >>> thing != False # True != False\n    True\n    >>> thing.attribute\n    True\n    >>> thing.method()\n    True\n    >>> thing.attribute.method()\n    True\n    >>> thing.method().attribute\n    True\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'other'
name|'is'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'other'
name|'is'
name|'not'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|mock
name|'def'
name|'mock'
op|'('
name|'update'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'returns'
op|'='
op|'['
op|']'
newline|'\n'
name|'deletes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'update'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'imports'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'attr'
op|'='
name|'imports'
op|'.'
name|'pop'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'module'
op|'='
name|'__import__'
op|'('
name|'imports'
op|'['
number|'0'
op|']'
op|','
name|'fromlist'
op|'='
name|'imports'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
name|'for'
name|'modname'
name|'in'
name|'imports'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'modname'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'module'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'returns'
op|'.'
name|'append'
op|'('
op|'('
name|'module'
op|','
name|'attr'
op|','
name|'getattr'
op|'('
name|'module'
op|','
name|'attr'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'deletes'
op|'.'
name|'append'
op|'('
op|'('
name|'module'
op|','
name|'attr'
op|')'
op|')'
newline|'\n'
dedent|''
name|'setattr'
op|'('
name|'module'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'True'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'module'
op|','
name|'attr'
op|','
name|'value'
name|'in'
name|'returns'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'module'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'module'
op|','
name|'attr'
name|'in'
name|'deletes'
op|':'
newline|'\n'
indent|'            '
name|'delattr'
op|'('
name|'module'
op|','
name|'attr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_http_connect
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_http_connect'
op|'('
op|'*'
name|'code_iter'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|FakeConn
indent|'    '
name|'class'
name|'FakeConn'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'etag'
op|'='
name|'None'
op|','
name|'body'
op|'='
string|"''"
op|','
name|'timestamp'
op|'='
string|"'1'"
op|','
nl|'\n'
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# connect exception'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'status'
op|','
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'status'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'status'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'expect_status'
op|','
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'expect_status'
op|','
name|'self'
op|'.'
name|'status'
op|'='
op|'('
name|'None'
op|','
name|'status'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'expect_status'
op|':'
newline|'\n'
comment|'# when a swift backend service returns a status before reading'
nl|'\n'
comment|'# from the body (mostly an error response) eventlet.wsgi will'
nl|'\n'
comment|'# respond with that status line immediately instead of 100'
nl|'\n'
comment|'# Continue, even if the client sent the Expect 100 header.'
nl|'\n'
comment|'# BufferedHttp and the proxy both see these error statuses'
nl|'\n'
comment|'# when they call getexpect, so our FakeConn tries to act like'
nl|'\n'
comment|'# our backend services and return certain types of responses'
nl|'\n'
comment|'# as expect statuses just like a real backend server would do.'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'status'
name|'in'
op|'('
number|'507'
op|','
number|'412'
op|','
number|'409'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'expect_status'
op|'='
name|'status'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'expect_status'
op|'='
number|'100'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'reason'
op|'='
string|"'Fake'"
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
string|"'1234'"
newline|'\n'
name|'self'
op|'.'
name|'sent'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'received'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'etag'
op|'='
name|'etag'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'timestamp'
newline|'\n'
name|'if'
string|"'slow'"
name|'in'
name|'kwargs'
name|'and'
name|'isinstance'
op|'('
name|'kwargs'
op|'['
string|"'slow'"
op|']'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_next_sleep'
op|'='
name|'kwargs'
op|'['
string|"'slow'"
op|']'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_next_sleep'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getresponse
dedent|''
dedent|''
dedent|''
name|'def'
name|'getresponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'status'
op|','
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'status'
newline|'\n'
dedent|''
name|'exc'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'raise_exc'"
op|')'
newline|'\n'
name|'if'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'exc'
op|','
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exc'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'raise_timeout_exc'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Timeout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|getexpect
dedent|''
name|'def'
name|'getexpect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'expect_status'
op|','
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'expect_status'
newline|'\n'
dedent|''
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'expect_status'
op|'=='
number|'409'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|"'X-Backend-Timestamp'"
op|']'
op|'='
name|'self'
op|'.'
name|'timestamp'
newline|'\n'
dedent|''
name|'return'
name|'FakeConn'
op|'('
name|'self'
op|'.'
name|'expect_status'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getheaders
dedent|''
name|'def'
name|'getheaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'self'
op|'.'
name|'etag'
newline|'\n'
name|'if'
name|'not'
name|'etag'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'body'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'etag'
op|'='
string|'\'"\''
op|'+'
name|'md5'
op|'('
name|'self'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|'+'
string|'\'"\''
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'etag'
op|'='
string|'\'"68b329da9893e34099c7d8ad5cb9c940"\''
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'headers'
op|'='
name|'swob'
op|'.'
name|'HeaderKeyDict'
op|'('
op|'{'
nl|'\n'
string|"'content-length'"
op|':'
name|'len'
op|'('
name|'self'
op|'.'
name|'body'
op|')'
op|','
nl|'\n'
string|"'content-type'"
op|':'
string|"'x-application/test'"
op|','
nl|'\n'
string|"'x-timestamp'"
op|':'
name|'self'
op|'.'
name|'timestamp'
op|','
nl|'\n'
string|"'x-backend-timestamp'"
op|':'
name|'self'
op|'.'
name|'timestamp'
op|','
nl|'\n'
string|"'last-modified'"
op|':'
name|'self'
op|'.'
name|'timestamp'
op|','
nl|'\n'
string|"'x-object-meta-test'"
op|':'
string|"'testing'"
op|','
nl|'\n'
string|"'x-delete-at'"
op|':'
string|"'9876543210'"
op|','
nl|'\n'
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'x-works'"
op|':'
string|"'yes'"
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'status'
op|'//'
number|'100'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|"'x-account-container-count'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'count'"
op|','
number|'12345'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'timestamp'
op|':'
newline|'\n'
comment|'# when timestamp is None, HeaderKeyDict raises KeyError'
nl|'\n'
indent|'                '
name|'headers'
op|'.'
name|'pop'
op|'('
string|"'x-timestamp'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'container_ts_iter'
op|'.'
name|'next'
op|'('
op|')'
name|'is'
name|'False'
op|':'
newline|'\n'
indent|'                    '
name|'headers'
op|'['
string|"'x-container-timestamp'"
op|']'
op|'='
string|"'1'"
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'am_slow'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'get_slow'
op|'('
op|')'
newline|'\n'
name|'if'
name|'am_slow'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|"'content-length'"
op|']'
op|'='
string|"'4'"
newline|'\n'
dedent|''
name|'headers'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'headers'
op|')'
newline|'\n'
name|'return'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_slow
dedent|''
name|'def'
name|'get_slow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'slow'"
name|'in'
name|'kwargs'
name|'and'
name|'isinstance'
op|'('
name|'kwargs'
op|'['
string|"'slow'"
op|']'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_next_sleep'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
op|','
name|'self'
op|'.'
name|'_next_sleep'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'False'
op|','
number|'0.01'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'slow'"
op|')'
name|'and'
name|'isinstance'
op|'('
name|'kwargs'
op|'['
string|"'slow'"
op|']'
op|','
name|'Number'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
op|','
name|'kwargs'
op|'['
string|"'slow'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'bool'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'slow'"
op|')'
op|')'
op|','
number|'0.1'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'amt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'am_slow'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'get_slow'
op|'('
op|')'
newline|'\n'
name|'if'
name|'am_slow'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'sent'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'sent'
op|'+='
number|'1'
newline|'\n'
name|'sleep'
op|'('
name|'value'
op|')'
newline|'\n'
name|'return'
string|"' '"
newline|'\n'
dedent|''
dedent|''
name|'rv'
op|'='
name|'self'
op|'.'
name|'body'
op|'['
op|':'
name|'amt'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'self'
op|'.'
name|'body'
op|'['
name|'amt'
op|':'
op|']'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'amt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'am_slow'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'get_slow'
op|'('
op|')'
newline|'\n'
name|'if'
name|'am_slow'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'received'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'received'
op|'+='
number|'1'
newline|'\n'
name|'sleep'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getheader
dedent|''
dedent|''
dedent|''
name|'def'
name|'getheader'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'swob'
op|'.'
name|'HeaderKeyDict'
op|'('
name|'self'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timestamps_iter'
op|'='
name|'iter'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'timestamps'"
op|')'
name|'or'
op|'['
string|"'1'"
op|']'
op|'*'
name|'len'
op|'('
name|'code_iter'
op|')'
op|')'
newline|'\n'
name|'etag_iter'
op|'='
name|'iter'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'etags'"
op|')'
name|'or'
op|'['
name|'None'
op|']'
op|'*'
name|'len'
op|'('
name|'code_iter'
op|')'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'headers'"
op|')'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
DECL|variable|headers_iter
indent|'        '
name|'headers_iter'
op|'='
name|'iter'
op|'('
name|'kwargs'
op|'['
string|"'headers'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|headers_iter
indent|'        '
name|'headers_iter'
op|'='
name|'iter'
op|'('
op|'['
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'headers'"
op|','
op|'{'
op|'}'
op|')'
op|']'
op|'*'
name|'len'
op|'('
name|'code_iter'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'x'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'missing_container'"
op|','
op|'['
name|'False'
op|']'
op|'*'
name|'len'
op|'('
name|'code_iter'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'x'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|')'
op|')'
op|':'
newline|'\n'
DECL|variable|x
indent|'        '
name|'x'
op|'='
op|'['
name|'x'
op|']'
op|'*'
name|'len'
op|'('
name|'code_iter'
op|')'
newline|'\n'
dedent|''
name|'container_ts_iter'
op|'='
name|'iter'
op|'('
name|'x'
op|')'
newline|'\n'
name|'code_iter'
op|'='
name|'iter'
op|'('
name|'code_iter'
op|')'
newline|'\n'
name|'static_body'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'body'"
op|','
name|'None'
op|')'
newline|'\n'
name|'body_iter'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'body_iter'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'body_iter'
op|':'
newline|'\n'
DECL|variable|body_iter
indent|'        '
name|'body_iter'
op|'='
name|'iter'
op|'('
name|'body_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|function|connect
dedent|''
name|'def'
name|'connect'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'ckwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'slow_connect'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'give_content_type'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'>='
number|'7'
name|'and'
string|"'Content-Type'"
name|'in'
name|'args'
op|'['
number|'6'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|"'give_content_type'"
op|']'
op|'('
name|'args'
op|'['
number|'6'
op|']'
op|'['
string|"'Content-Type'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|"'give_content_type'"
op|']'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'give_connect'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'give_connect'"
op|']'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'ckwargs'
op|')'
newline|'\n'
dedent|''
name|'status'
op|'='
name|'code_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'etag'
op|'='
name|'etag_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'='
name|'headers_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'timestamps_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'status'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'body_iter'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'static_body'
name|'or'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'body_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'FakeConn'
op|'('
name|'status'
op|','
name|'etag'
op|','
name|'body'
op|'='
name|'body'
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect'
op|'.'
name|'code_iter'
op|'='
name|'code_iter'
newline|'\n'
nl|'\n'
name|'return'
name|'connect'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|mocked_http_conn
name|'def'
name|'mocked_http_conn'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fake_conn'
op|'='
name|'fake_http_connect'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'with'
name|'mocklib'
op|'.'
name|'patch'
op|'('
string|"'swift.common.bufferedhttp.http_connect_raw'"
op|','
nl|'\n'
name|'new'
op|'='
name|'fake_conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'fake_conn'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
