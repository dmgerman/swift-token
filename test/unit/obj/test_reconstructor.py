begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
op|','
name|'sleep'
newline|'\n'
nl|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'closing'
op|','
name|'contextmanager'
newline|'\n'
name|'from'
name|'gzip'
name|'import'
name|'GzipFile'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'DiskFileError'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'header_key_dict'
name|'import'
name|'HeaderKeyDict'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
name|'import'
name|'diskfile'
op|','
name|'reconstructor'
name|'as'
name|'object_reconstructor'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'ring'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
op|'('
name|'StoragePolicy'
op|','
name|'ECStoragePolicy'
op|','
nl|'\n'
name|'POLICIES'
op|','
name|'EC_POLICY'
op|')'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
op|'.'
name|'reconstructor'
name|'import'
name|'REVERT'
newline|'\n'
nl|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
name|'import'
op|'('
name|'patch_policies'
op|','
name|'debug_logger'
op|','
name|'mocked_http_conn'
op|','
nl|'\n'
name|'FabricatedRing'
op|','
name|'make_timestamp_iter'
op|','
nl|'\n'
name|'DEFAULT_TEST_EC_TYPE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|mock_ssync_sender
name|'def'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|'='
name|'None'
op|','
name|'response_callback'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
DECL|function|fake_ssync
indent|'    '
name|'def'
name|'fake_ssync'
op|'('
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ssync_calls'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ssync_calls'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'{'
string|"'node'"
op|':'
name|'node'
op|','
string|"'job'"
op|':'
name|'job'
op|','
string|"'suffixes'"
op|':'
name|'suffixes'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_call
dedent|''
name|'def'
name|'fake_call'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'response_callback'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'response_callback'
op|'('
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'True'
op|','
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'return'
name|'fake_call'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.ssync_sender'"
op|','
name|'fake_ssync'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'fake_ssync'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_ec_archive_bodies
dedent|''
dedent|''
name|'def'
name|'make_ec_archive_bodies'
op|'('
name|'policy'
op|','
name|'test_body'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'segment_size'
op|'='
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
comment|'# split up the body into buffers'
nl|'\n'
name|'chunks'
op|'='
op|'['
name|'test_body'
op|'['
name|'x'
op|':'
name|'x'
op|'+'
name|'segment_size'
op|']'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'test_body'
op|')'
op|','
name|'segment_size'
op|')'
op|']'
newline|'\n'
comment|'# encode the buffers into fragment payloads'
nl|'\n'
name|'fragment_payloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'chunks'
op|':'
newline|'\n'
indent|'        '
name|'fragments'
op|'='
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'encode'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fragments'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'fragment_payloads'
op|'.'
name|'append'
op|'('
name|'fragments'
op|')'
newline|'\n'
nl|'\n'
comment|'# join up the fragment payloads per node'
nl|'\n'
dedent|''
name|'ec_archive_bodies'
op|'='
op|'['
string|"''"
op|'.'
name|'join'
op|'('
name|'frags'
op|')'
name|'for'
name|'frags'
name|'in'
name|'zip'
op|'('
op|'*'
name|'fragment_payloads'
op|')'
op|']'
newline|'\n'
name|'return'
name|'ec_archive_bodies'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_test_rings
dedent|''
name|'def'
name|'_create_test_rings'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'testgz'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'object.ring.gz'"
op|')'
newline|'\n'
name|'intended_replica2part2dev_id'
op|'='
op|'['
nl|'\n'
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
nl|'\n'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
nl|'\n'
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'intended_devs'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'0'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'1'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'2'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'4'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.3'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'intended_part_shift'
op|'='
number|'30'
newline|'\n'
name|'with'
name|'closing'
op|'('
name|'GzipFile'
op|'('
name|'testgz'
op|','
string|"'wb'"
op|')'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'pickle'
op|'.'
name|'dump'
op|'('
nl|'\n'
name|'ring'
op|'.'
name|'RingData'
op|'('
name|'intended_replica2part2dev_id'
op|','
nl|'\n'
name|'intended_devs'
op|','
name|'intended_part_shift'
op|')'
op|','
nl|'\n'
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'testgz'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'object-1.ring.gz'"
op|')'
newline|'\n'
name|'with'
name|'closing'
op|'('
name|'GzipFile'
op|'('
name|'testgz'
op|','
string|"'wb'"
op|')'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'pickle'
op|'.'
name|'dump'
op|'('
nl|'\n'
name|'ring'
op|'.'
name|'RingData'
op|'('
name|'intended_replica2part2dev_id'
op|','
nl|'\n'
name|'intended_devs'
op|','
name|'intended_part_shift'
op|')'
op|','
nl|'\n'
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|count_stats
dedent|''
dedent|''
name|'def'
name|'count_stats'
op|'('
name|'logger'
op|','
name|'key'
op|','
name|'metric'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'count'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'record'
name|'in'
name|'logger'
op|'.'
name|'log_dict'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'log_args'
op|','
name|'log_kwargs'
op|'='
name|'record'
newline|'\n'
name|'m'
op|'='
name|'log_args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
name|'metric'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'count'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'count'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_header_frag_index
dedent|''
name|'def'
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'metadata'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'get_metadata'
op|'('
name|'body'
op|')'
newline|'\n'
name|'frag_index'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'h'"
op|','
name|'metadata'
op|'['
op|':'
number|'2'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'patch_policies'
op|'('
op|'['
name|'StoragePolicy'
op|'('
number|'0'
op|','
name|'name'
op|'='
string|"'zero'"
op|','
name|'is_default'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'ECStoragePolicy'
op|'('
number|'1'
op|','
name|'name'
op|'='
string|"'one'"
op|','
nl|'\n'
DECL|variable|ec_type
name|'ec_type'
op|'='
name|'DEFAULT_TEST_EC_TYPE'
op|','
nl|'\n'
name|'ec_ndata'
op|'='
number|'2'
op|','
name|'ec_nparity'
op|'='
number|'1'
op|')'
op|']'
op|')'
newline|'\n'
DECL|class|TestGlobalSetupObjectReconstructor
name|'class'
name|'TestGlobalSetupObjectReconstructor'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'testdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'_create_test_rings'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|'.'
name|'object_ring'
op|'='
name|'ring'
op|'.'
name|'Ring'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ring_name'
op|'='
string|"'object'"
op|')'
newline|'\n'
name|'POLICIES'
op|'['
number|'1'
op|']'
op|'.'
name|'object_ring'
op|'='
name|'ring'
op|'.'
name|'Ring'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ring_name'
op|'='
string|"'object-1'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_SUFFIX'
op|'='
string|"'endcap'"
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'devices'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'node'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'self'
op|'.'
name|'devices'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objects'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objects_1'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'parts_1'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'part_nums'
op|'='
op|'['
string|"'0'"
op|','
string|"'1'"
op|','
string|"'2'"
op|']'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'self'
op|'.'
name|'part_nums'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parts'
op|'['
name|'part'
op|']'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects'
op|','
name|'part'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'parts'
op|'['
name|'part'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parts_1'
op|'['
name|'part'
op|']'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
name|'part'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'parts_1'
op|'['
name|'part'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conf'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'swift_dir'
op|'='
name|'self'
op|'.'
name|'testdir'
op|','
name|'devices'
op|'='
name|'self'
op|'.'
name|'devices'
op|','
name|'mount_check'
op|'='
string|"'false'"
op|','
nl|'\n'
name|'timeout'
op|'='
string|"'300'"
op|','
name|'stats_interval'
op|'='
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'test-reconstructor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'='
name|'object_reconstructor'
op|'.'
name|'ObjectReconstructor'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'conf'
op|','
name|'logger'
op|'='
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# most of the reconstructor test methods require that there be'
nl|'\n'
comment|"# real objects in place, not just part dirs, so we'll create them"
nl|'\n'
comment|'# all here....'
nl|'\n'
comment|'# part 0: 3C1/hash/xxx-1.data  <-- job: sync_only - parnters (FI 1)'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier job (FI 1)'
nl|'\n'
comment|'#         061/hash/xxx-1.data  <-- included in earlier job (FI 1)'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier job (FI 1)'
nl|'\n'
comment|'#                 /xxx-2.data  <-- job: sync_revert to index 2'
nl|'\n'
nl|'\n'
comment|'# part 1: 3C1/hash/xxx-0.data  <-- job: sync_only - parnters (FI 0)'
nl|'\n'
comment|'#                 /xxx-1.data  <-- job: sync_revert to index 1'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier jobs (FI 0, 1)'
nl|'\n'
comment|'#         061/hash/xxx-1.data  <-- included in earlier job (FI 1)'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier job (FI 1)'
nl|'\n'
nl|'\n'
comment|'# part 2: 3C1/hash/xxx-2.data  <-- job: sync_revert to index 2'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier job (FI 2)'
nl|'\n'
comment|'#         061/hash/xxx-0.data  <-- job: sync_revert to index 0'
nl|'\n'
comment|'#                 /xxx.durable <-- included in earlier job (FI 0)'
nl|'\n'
nl|'\n'
DECL|function|_create_frag_archives
name|'def'
name|'_create_frag_archives'
op|'('
name|'policy'
op|','
name|'obj_path'
op|','
name|'local_id'
op|','
name|'obj_set'
op|')'
op|':'
newline|'\n'
comment|"# we'll create 2 sets of objects in different suffix dirs"
nl|'\n'
comment|'# so we cover all the scenarios we want (3 of them)'
nl|'\n'
comment|"# 1) part dir with all FI's matching the local node index"
nl|'\n'
comment|'# 2) part dir with one local and mix of others'
nl|'\n'
comment|'# 3) part dir with no local FI and one or more others'
nl|'\n'
DECL|function|part_0
indent|'            '
name|'def'
name|'part_0'
op|'('
name|'set'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'set'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# just the local'
nl|'\n'
indent|'                    '
name|'return'
name|'local_id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# onde local and all of another'
nl|'\n'
indent|'                    '
name|'if'
name|'obj_num'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'local_id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'('
name|'local_id'
op|'+'
number|'1'
op|')'
op|'%'
number|'3'
newline|'\n'
nl|'\n'
DECL|function|part_1
dedent|''
dedent|''
dedent|''
name|'def'
name|'part_1'
op|'('
name|'set'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'set'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# one local and all of another'
nl|'\n'
indent|'                    '
name|'if'
name|'obj_num'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'local_id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'('
name|'local_id'
op|'+'
number|'2'
op|')'
op|'%'
number|'3'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# just the local node'
nl|'\n'
indent|'                    '
name|'return'
name|'local_id'
newline|'\n'
nl|'\n'
DECL|function|part_2
dedent|''
dedent|''
name|'def'
name|'part_2'
op|'('
name|'set'
op|')'
op|':'
newline|'\n'
comment|'# this part is a handoff in our config (always)'
nl|'\n'
comment|'# so lets do a set with indices from different nodes'
nl|'\n'
indent|'                '
name|'if'
name|'set'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'('
name|'local_id'
op|'+'
number|'1'
op|')'
op|'%'
number|'3'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'('
name|'local_id'
op|'+'
number|'2'
op|')'
op|'%'
number|'3'
newline|'\n'
nl|'\n'
comment|'# function dictionary for defining test scenarios base on set #'
nl|'\n'
dedent|''
dedent|''
name|'scenarios'
op|'='
op|'{'
string|"'0'"
op|':'
name|'part_0'
op|','
nl|'\n'
string|"'1'"
op|':'
name|'part_1'
op|','
nl|'\n'
string|"'2'"
op|':'
name|'part_2'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_create_df
name|'def'
name|'_create_df'
op|'('
name|'obj_num'
op|','
name|'part_num'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_diskfile'
op|'('
nl|'\n'
name|'part'
op|'='
name|'part_num'
op|','
name|'object_name'
op|'='
string|"'o'"
op|'+'
name|'str'
op|'('
name|'obj_set'
op|')'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'scenarios'
op|'['
name|'part_num'
op|']'
op|'('
name|'obj_set'
op|')'
op|','
nl|'\n'
name|'timestamp'
op|'='
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'part_num'
name|'in'
name|'self'
op|'.'
name|'part_nums'
op|':'
newline|'\n'
comment|'# create 3 unique objcets per part, each part'
nl|'\n'
comment|'# will then have a unique mix of FIs for the'
nl|'\n'
comment|'# possible scenarios'
nl|'\n'
indent|'                '
name|'for'
name|'obj_num'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'_create_df'
op|'('
name|'obj_num'
op|','
name|'part_num'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'ips'
op|'='
name|'utils'
op|'.'
name|'whataremyips'
op|'('
op|')'
newline|'\n'
name|'for'
name|'policy'
name|'in'
op|'['
name|'p'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
name|'if'
name|'p'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec_policy'
op|'='
name|'policy'
newline|'\n'
name|'self'
op|'.'
name|'ec_obj_ring'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'load_object_ring'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ec_policy'
op|')'
newline|'\n'
name|'data_dir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'ec_policy'
op|')'
newline|'\n'
name|'for'
name|'local_dev'
name|'in'
op|'['
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'self'
op|'.'
name|'ec_obj_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'dev'
name|'and'
name|'dev'
op|'['
string|"'replication_ip'"
op|']'
name|'in'
name|'ips'
name|'and'
nl|'\n'
name|'dev'
op|'['
string|"'replication_port'"
op|']'
op|'=='
nl|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'port'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ec_local_dev'
op|'='
name|'local_dev'
newline|'\n'
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'devices_dir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec_local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec_obj_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dev_path'
op|','
name|'data_dir'
op|')'
newline|'\n'
nl|'\n'
comment|"# create a bunch of FA's to test"
nl|'\n'
name|'t'
op|'='
number|'1421181937.70054'
comment|'# time.time()'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.time'"
op|')'
name|'as'
name|'mock_time'
op|':'
newline|'\n'
comment|'# since (a) we are using a fixed time here to create'
nl|'\n'
comment|'# frags which corresponds to all the hardcoded hashes and'
nl|'\n'
comment|'# (b) the EC diskfile will delete its .data file right'
nl|'\n'
comment|'# after creating if it has expired, use this horrible hack'
nl|'\n'
comment|'# to prevent the reclaim happening'
nl|'\n'
indent|'                    '
name|'mock_time'
op|'.'
name|'time'
op|'.'
name|'return_value'
op|'='
number|'0.0'
newline|'\n'
name|'_create_frag_archives'
op|'('
name|'self'
op|'.'
name|'ec_policy'
op|','
name|'self'
op|'.'
name|'ec_obj_path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec_local_dev'
op|'['
string|"'id'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'_create_frag_archives'
op|'('
name|'self'
op|'.'
name|'ec_policy'
op|','
name|'self'
op|'.'
name|'ec_obj_path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec_local_dev'
op|'['
string|"'id'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_diskfile
dedent|''
name|'def'
name|'_create_diskfile'
op|'('
name|'self'
op|','
name|'policy'
op|'='
name|'None'
op|','
name|'part'
op|'='
number|'0'
op|','
name|'object_name'
op|'='
string|"'o'"
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'0'
op|','
name|'timestamp'
op|'='
name|'None'
op|','
name|'test_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'self'
op|'.'
name|'policy'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
name|'part'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
name|'object_name'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'timestamp'
name|'or'
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'test_data'
op|'='
name|'test_data'
name|'or'
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
string|"'Etag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'df'
newline|'\n'
nl|'\n'
DECL|member|assert_expected_jobs
dedent|''
name|'def'
name|'assert_expected_jobs'
op|'('
name|'self'
op|','
name|'part_num'
op|','
name|'jobs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'job'
op|'['
string|"'path'"
op|']'
newline|'\n'
name|'del'
name|'job'
op|'['
string|"'policy'"
op|']'
newline|'\n'
name|'if'
string|"'local_index'"
name|'in'
name|'job'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'job'
op|'['
string|"'local_index'"
op|']'
newline|'\n'
dedent|''
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# part num 0'
nl|'\n'
name|'expected'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'['
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'061'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'2'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'sync_diskfile_builder'"
op|':'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'061'"
op|','
string|"'3c1'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
nl|'\n'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'2'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|')'
newline|'\n'
comment|'# part num 1'
nl|'\n'
name|'expected'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'['
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'061'"
op|','
string|"'3c1'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
nl|'\n'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
number|'0'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.3'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.3'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'sync_diskfile_builder'"
op|':'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'3c1'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
number|'0'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'1'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|')'
newline|'\n'
comment|'# part num 2'
nl|'\n'
name|'expected'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'['
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'061'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
number|'0'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'2'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'sync_to'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|']'
op|','
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
string|"'3c1'"
op|']'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'local_dev'"
op|':'
op|'{'
nl|'\n'
string|"'replication_port'"
op|':'
number|'6000'
op|','
nl|'\n'
string|"'zone'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'region'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
nl|'\n'
string|"'061'"
op|':'
op|'{'
nl|'\n'
number|'0'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
op|','
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'3c1'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'85b02a5283704292a511078a5c483da5'"
op|','
nl|'\n'
number|'2'
op|':'
string|"'0e6e8d48d801dc89fd31904ae3b31229'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check_jobs
name|'def'
name|'check_jobs'
op|'('
name|'part_num'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'expected_jobs'
op|'='
name|'expected'
op|'['
name|'int'
op|'('
name|'part_num'
op|')'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'IndexError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unknown part number %r'"
op|'%'
name|'part_num'
op|')'
newline|'\n'
dedent|''
name|'expected_by_part_frag_index'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
op|'('
name|'j'
op|'['
string|"'partition'"
op|']'
op|','
name|'j'
op|'['
string|"'frag_index'"
op|']'
op|')'
op|','
name|'j'
op|')'
name|'for'
name|'j'
name|'in'
name|'expected_jobs'
op|')'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                '
name|'job_key'
op|'='
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'job_key'
name|'in'
name|'expected_by_part_frag_index'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'k'
op|','
name|'value'
name|'in'
name|'job'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'expected_value'
op|'='
name|'expected_by_part_frag_index'
op|'['
name|'job_key'
op|']'
op|'['
name|'k'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'value'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected_value'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
name|'expected_value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                            '
name|'extra_info'
op|'='
string|"'\\n\\n... for %r in part num %s job %r'"
op|'%'
op|'('
nl|'\n'
name|'k'
op|','
name|'part_num'
op|','
name|'job_key'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|'+'
name|'extra_info'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|"'Unexpected job %r for part num %s - '"
nl|'\n'
string|"'expected jobs where %r'"
op|'%'
op|'('
nl|'\n'
name|'job_key'
op|','
name|'part_num'
op|','
nl|'\n'
name|'expected_by_part_frag_index'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'expected_job'
name|'in'
name|'expected_jobs'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'expected_job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                    '
name|'jobs'
op|'.'
name|'remove'
op|'('
name|'expected_job'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'jobs'
op|')'
comment|'# that should be all of them'
newline|'\n'
dedent|''
name|'check_jobs'
op|'('
name|'part_num'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_once
dedent|''
name|'def'
name|'_run_once'
op|'('
name|'self'
op|','
name|'http_count'
op|','
name|'extra_devices'
op|','
name|'override_devices'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ring_devs'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
op|')'
newline|'\n'
name|'for'
name|'device'
op|','
name|'parts'
name|'in'
name|'extra_devices'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'device_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'device'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'device_path'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'range'
op|'('
name|'parts'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'device_path'
op|','
string|"'objects-1'"
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# we update the ring to make is_local happy'
nl|'\n'
dedent|''
name|'devs'
op|'='
op|'['
name|'dict'
op|'('
name|'d'
op|')'
name|'for'
name|'d'
name|'in'
name|'ring_devs'
op|']'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'devs'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'['
string|"'device'"
op|']'
op|'='
name|'device'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
op|'.'
name|'extend'
op|'('
name|'devs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'stats_interval'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'process_job'
op|'='
name|'lambda'
name|'j'
op|':'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
name|'http_count'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock_ssync_sender'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'run_once'
op|'('
name|'devices'
op|'='
name|'override_devices'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_once
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_run_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# sda1: 3 is done in setup'
nl|'\n'
indent|'        '
name|'extra_devices'
op|'='
op|'{'
nl|'\n'
string|"'sdb1'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'sdc1'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'sdd1'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_run_once'
op|'('
number|'18'
op|','
name|'extra_devices'
op|')'
newline|'\n'
name|'stats_lines'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'info'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'devices reconstructed in'"
name|'not'
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'stat_line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"'of'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'stats_lines'
op|'.'
name|'add'
op|'('
name|'stat_line'
op|')'
newline|'\n'
dedent|''
name|'acceptable'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
string|"'0/3 (0.00%) partitions'"
op|','
nl|'\n'
string|"'8/8 (100.00%) partitions'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'matched'
op|'='
name|'stats_lines'
op|'&'
name|'acceptable'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'matched'
op|','
name|'acceptable'
op|','
nl|'\n'
string|"'missing some expected acceptable:\\n%s'"
op|'%'
op|'('
nl|'\n'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'sorted'
op|'('
name|'acceptable'
op|'-'
name|'matched'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruction_device_count'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruction_part_count'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'part_count'
op|','
number|'8'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_once_override_devices
dedent|''
name|'def'
name|'test_run_once_override_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# sda1: 3 is done in setup'
nl|'\n'
indent|'        '
name|'extra_devices'
op|'='
op|'{'
nl|'\n'
string|"'sdb1'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'sdc1'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'sdd1'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_run_once'
op|'('
number|'2'
op|','
name|'extra_devices'
op|','
string|"'sdc1'"
op|')'
newline|'\n'
name|'stats_lines'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'info'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'devices reconstructed in'"
name|'not'
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'stat_line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"'of'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'stats_lines'
op|'.'
name|'add'
op|'('
name|'stat_line'
op|')'
newline|'\n'
dedent|''
name|'acceptable'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
string|"'1/1 (100.00%) partitions'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'matched'
op|'='
name|'stats_lines'
op|'&'
name|'acceptable'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'matched'
op|','
name|'acceptable'
op|','
nl|'\n'
string|"'missing some expected acceptable:\\n%s'"
op|'%'
op|'('
nl|'\n'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'sorted'
op|'('
name|'acceptable'
op|'-'
name|'matched'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruction_device_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruction_part_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'part_count'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_response
dedent|''
name|'def'
name|'test_get_response'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'part'
op|'='
name|'self'
op|'.'
name|'part_nums'
op|'['
number|'0'
op|']'
newline|'\n'
name|'node'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'int'
op|'('
name|'part'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'stat_code'
name|'in'
op|'('
number|'200'
op|','
number|'400'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
name|'stat_code'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_get_response'
op|'('
name|'node'
op|','
name|'part'
op|','
nl|'\n'
name|'path'
op|'='
string|"'nada'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status'
op|','
number|'200'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'logger'
op|'.'
name|'log_dict'
op|'['
string|"'warning'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstructor_does_not_log_on_404
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_reconstructor_does_not_log_on_404'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'part'
op|'='
name|'self'
op|'.'
name|'part_nums'
op|'['
number|'0'
op|']'
newline|'\n'
name|'node'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'int'
op|'('
name|'part'
op|')'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
number|'404'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_get_response'
op|'('
name|'node'
op|','
name|'part'
op|','
nl|'\n'
name|'path'
op|'='
string|"'some_path'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that no warnings are emitted for a 404'
nl|'\n'
name|'len_warning_lines'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len_warning_lines'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstructor_skips_bogus_partition_dirs
dedent|''
dedent|''
name|'def'
name|'test_reconstructor_skips_bogus_partition_dirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# A directory in the wrong place shouldn't crash the reconstructor"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
string|'"burrito"'
op|')'
op|')'
newline|'\n'
name|'jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'+='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'jobs'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_ring
dedent|''
name|'def'
name|'test_check_ring'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'testring'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'_create_test_rings'
op|'('
name|'testring'
op|')'
newline|'\n'
name|'obj_ring'
op|'='
name|'ring'
op|'.'
name|'Ring'
op|'('
name|'testring'
op|','
name|'ring_name'
op|'='
string|"'object'"
op|')'
comment|'# noqa'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'check_ring'
op|'('
name|'obj_ring'
op|')'
op|')'
newline|'\n'
name|'orig_check'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'next_check'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'next_check'
op|'='
name|'orig_check'
op|'-'
number|'30'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'check_ring'
op|'('
name|'obj_ring'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'next_check'
op|'='
name|'orig_check'
newline|'\n'
name|'orig_ring_time'
op|'='
name|'obj_ring'
op|'.'
name|'_mtime'
newline|'\n'
name|'obj_ring'
op|'.'
name|'_mtime'
op|'='
name|'orig_ring_time'
op|'-'
number|'30'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'check_ring'
op|'('
name|'obj_ring'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'next_check'
op|'='
name|'orig_check'
op|'-'
number|'30'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'check_ring'
op|'('
name|'obj_ring'
op|')'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'testring'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_reconstruction_jobs
dedent|''
name|'def'
name|'test_build_reconstruction_jobs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'handoffs_first'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'jobs'
op|'['
number|'0'
op|']'
op|'['
string|"'job_type'"
op|']'
name|'in'
nl|'\n'
op|'('
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_expected_jobs'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|','
name|'jobs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'handoffs_first'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'jobs'
op|'['
number|'0'
op|']'
op|'['
string|"'job_type'"
op|']'
op|'=='
nl|'\n'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_expected_jobs'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|','
name|'jobs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_partners
dedent|''
dedent|''
name|'def'
name|'test_get_partners'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# we're going to perform an exhaustive test of every possible"
nl|'\n'
comment|'# combination of partitions and nodes in our custom test ring'
nl|'\n'
nl|'\n'
comment|"# format: [dev_id in question, 'part_num',"
nl|'\n'
comment|'#          [part_nodes for the given part], left id, right id...]'
nl|'\n'
indent|'        '
name|'expected_partners'
op|'='
name|'sorted'
op|'('
op|'['
nl|'\n'
op|'('
number|'0'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'2'
op|','
number|'1'
op|')'
op|','
op|'('
number|'0'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'3'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'('
number|'1'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'3'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
number|'2'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'1'
op|','
number|'0'
op|')'
op|','
op|'('
number|'2'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'1'
op|','
number|'3'
op|')'
op|','
nl|'\n'
op|'('
number|'2'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'0'
op|','
number|'3'
op|')'
op|','
op|'('
number|'3'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'2'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
number|'3'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
op|'('
number|'0'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'2'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
number|'0'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'3'
op|','
number|'2'
op|')'
op|','
op|'('
number|'1'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'3'
op|','
number|'2'
op|')'
op|','
op|'('
number|'2'
op|','
string|"'0'"
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
number|'1'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'('
number|'2'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'1'
op|','
number|'3'
op|')'
op|','
op|'('
number|'2'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'0'
op|','
number|'3'
op|')'
op|','
nl|'\n'
op|'('
number|'3'
op|','
string|"'1'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
number|'2'
op|','
number|'1'
op|')'
op|','
op|'('
number|'3'
op|','
string|"'2'"
op|','
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|']'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'got_partners'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'pol'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'obj_ring'
op|'='
name|'pol'
op|'.'
name|'object_ring'
newline|'\n'
name|'for'
name|'part_num'
name|'in'
name|'self'
op|'.'
name|'part_nums'
op|':'
newline|'\n'
indent|'                '
name|'part_nodes'
op|'='
name|'obj_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'int'
op|'('
name|'part_num'
op|')'
op|')'
newline|'\n'
name|'primary_ids'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'part_nodes'
op|']'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'part_nodes'
op|':'
newline|'\n'
indent|'                    '
name|'partners'
op|'='
name|'object_reconstructor'
op|'.'
name|'_get_partners'
op|'('
nl|'\n'
name|'node'
op|'['
string|"'index'"
op|']'
op|','
name|'part_nodes'
op|')'
newline|'\n'
name|'left'
op|'='
name|'partners'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'right'
op|'='
name|'partners'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'got_partners'
op|'.'
name|'append'
op|'('
op|'('
nl|'\n'
name|'node'
op|'['
string|"'id'"
op|']'
op|','
name|'part_num'
op|','
name|'primary_ids'
op|','
name|'left'
op|','
name|'right'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_partners'
op|','
name|'sorted'
op|'('
name|'got_partners'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts
dedent|''
name|'def'
name|'test_collect_parts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parts'
op|'.'
name|'append'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'parts'
op|')'
op|','
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_mkdirs_error
dedent|''
name|'def'
name|'test_collect_parts_mkdirs_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|blowup_mkdirs
indent|'        '
name|'def'
name|'blowup_mkdirs'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
string|"'Ow!'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'object_reconstructor'
op|','
string|"'mkdirs'"
op|','
name|'blowup_mkdirs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'.'
name|'append'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'error_lines'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'log_args'
op|','
name|'log_kwargs'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'log_dict'
op|'['
string|"'error'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'log_kwargs'
op|'['
string|"'exc_info'"
op|']'
op|'['
number|'1'
op|']'
op|')'
op|','
string|"'Ow!'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_removes_zbf
dedent|''
dedent|''
name|'def'
name|'test_removes_zbf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After running xfs_repair, a partition directory could become a'
nl|'\n'
comment|'# zero-byte file. If this happens, the reconstructor should clean it'
nl|'\n'
comment|'# up, log something, and move on to the next partition.'
nl|'\n'
nl|'\n'
comment|'# Surprise! Partition dir 1 is actually a zero-byte file.'
nl|'\n'
indent|'        '
name|'pol_1_part_1_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'pol_1_part_1_path'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'pol_1_part_1_path'
op|','
string|"'w'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'pol_1_part_1_path'
op|')'
op|')'
comment|'# sanity check'
newline|'\n'
nl|'\n'
comment|'# since our collect_parts job is a generator, that yields directly'
nl|'\n'
comment|"# into build_jobs and then spawns it's safe to do the remove_files"
nl|'\n'
comment|'# without making reconstructor startup slow'
nl|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'pol_1_part_1_path'
op|','
name|'part_info'
op|'['
string|"'part_path'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pol_1_part_1_path'
op|')'
op|')'
newline|'\n'
name|'warnings'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'warnings'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Unexpected entity in data dir:'"
name|'in'
name|'warnings'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'Warning not found in %s'"
op|'%'
name|'warnings'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_fake_ssync
dedent|''
name|'def'
name|'_make_fake_ssync'
op|'('
name|'self'
op|','
name|'ssync_calls'
op|')'
op|':'
newline|'\n'
DECL|class|_fake_ssync
indent|'        '
name|'class'
name|'_fake_ssync'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'daemon'
op|','
name|'node'
op|','
name|'job'
op|','
name|'suffixes'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# capture context and generate an available_map of objs'
nl|'\n'
indent|'                '
name|'context'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'context'
op|'['
string|"'node'"
op|']'
op|'='
name|'node'
newline|'\n'
name|'context'
op|'['
string|"'job'"
op|']'
op|'='
name|'job'
newline|'\n'
name|'context'
op|'['
string|"'suffixes'"
op|']'
op|'='
name|'suffixes'
newline|'\n'
name|'self'
op|'.'
name|'suffixes'
op|'='
name|'suffixes'
newline|'\n'
name|'self'
op|'.'
name|'daemon'
op|'='
name|'daemon'
newline|'\n'
name|'self'
op|'.'
name|'job'
op|'='
name|'job'
newline|'\n'
name|'hash_gen'
op|'='
name|'self'
op|'.'
name|'daemon'
op|'.'
name|'_diskfile_mgr'
op|'.'
name|'yield_hashes'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'job'
op|'['
string|"'device'"
op|']'
op|','
name|'self'
op|'.'
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'job'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'suffixes'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'self'
op|'.'
name|'job'
op|'.'
name|'get'
op|'('
string|"'frag_index'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'available_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'path'
op|','
name|'hash_'
op|','
name|'timestamps'
name|'in'
name|'hash_gen'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'available_map'
op|'['
name|'hash_'
op|']'
op|'='
name|'timestamps'
newline|'\n'
dedent|''
name|'context'
op|'['
string|"'available_map'"
op|']'
op|'='
name|'self'
op|'.'
name|'available_map'
newline|'\n'
name|'ssync_calls'
op|'.'
name|'append'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
op|','
name|'self'
op|'.'
name|'available_map'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'_fake_ssync'
newline|'\n'
nl|'\n'
DECL|member|test_delete_reverted
dedent|''
name|'def'
name|'test_delete_reverted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# verify reconstructor deletes reverted frag indexes after ssync'ing"
nl|'\n'
nl|'\n'
DECL|function|visit_obj_dirs
indent|'        '
name|'def'
name|'visit_obj_dirs'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'suff'
name|'in'
name|'context'
op|'['
string|"'suffixes'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'suff_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'context'
op|'['
string|"'job'"
op|']'
op|'['
string|"'path'"
op|']'
op|','
name|'suff'
op|')'
newline|'\n'
name|'for'
name|'root'
op|','
name|'dirs'
op|','
name|'files'
name|'in'
name|'os'
op|'.'
name|'walk'
op|'('
name|'suff_dir'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'d'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'                        '
name|'dirpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'root'
op|','
name|'d'
op|')'
newline|'\n'
name|'files'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'dirpath'
op|')'
newline|'\n'
name|'yield'
name|'dirpath'
op|','
name|'files'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'n_files'
op|'='
name|'n_files_after'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# run reconstructor with delete function mocked out to check calls'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'delete_func'
op|'='
string|"'swift.obj.reconstructor.ObjectReconstructor.delete_reverted_objs'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.ssync_sender'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'_make_fake_ssync'
op|'('
name|'ssync_calls'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
number|'12'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'delete_func'
op|')'
name|'as'
name|'mock_delete'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct'
op|'('
op|')'
newline|'\n'
dedent|''
name|'expected_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'context'
name|'in'
name|'ssync_calls'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'context'
op|'['
string|"'job'"
op|']'
op|'['
string|"'job_type'"
op|']'
op|'=='
name|'REVERT'
op|':'
newline|'\n'
indent|'                        '
name|'for'
name|'dirpath'
op|','
name|'files'
name|'in'
name|'visit_obj_dirs'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
comment|'# sanity check - expect some files to be in dir,'
nl|'\n'
comment|'# may not be for the reverted frag index'
nl|'\n'
indent|'                            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'files'
op|')'
newline|'\n'
name|'n_files'
op|'+='
name|'len'
op|'('
name|'files'
op|')'
newline|'\n'
dedent|''
name|'expected_calls'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
name|'context'
op|'['
string|"'job'"
op|']'
op|','
nl|'\n'
name|'context'
op|'['
string|"'available_map'"
op|']'
op|','
nl|'\n'
name|'context'
op|'['
string|"'node'"
op|']'
op|'['
string|"'index'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'mock_delete'
op|'.'
name|'assert_has_calls'
op|'('
name|'expected_calls'
op|','
name|'any_order'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.ssync_sender'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'_make_fake_ssync'
op|'('
name|'ssync_calls'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
number|'12'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct'
op|'('
op|')'
newline|'\n'
name|'for'
name|'context'
name|'in'
name|'ssync_calls'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'context'
op|'['
string|"'job'"
op|']'
op|'['
string|"'job_type'"
op|']'
op|'=='
name|'REVERT'
op|':'
newline|'\n'
indent|'                        '
name|'data_file_tail'
op|'='
op|'('
string|"'#%s.data'"
nl|'\n'
op|'%'
name|'context'
op|'['
string|"'node'"
op|']'
op|'['
string|"'index'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'dirpath'
op|','
name|'files'
name|'in'
name|'visit_obj_dirs'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'n_files_after'
op|'+='
name|'len'
op|'('
name|'files'
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'filename'
op|'.'
name|'endswith'
op|'('
name|'data_file_tail'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity check that some files should were deleted'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'n_files'
op|'>'
name|'n_files_after'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_part_jobs
dedent|''
name|'def'
name|'test_get_part_jobs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# yeah, this test code expects a specific setup'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'part_nums'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# OK, at this point we should have 4 loaded parts with one'
nl|'\n'
name|'jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'partition'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'ec_obj_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'ec_obj_path'
op|','
name|'partition'
op|')'
newline|'\n'
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_get_part_jobs'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ec_local_dev'
op|','
name|'part_path'
op|','
name|'int'
op|'('
name|'partition'
op|')'
op|','
name|'self'
op|'.'
name|'ec_policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_expected_jobs'
op|'('
name|'partition'
op|','
name|'jobs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertStatCount
dedent|''
dedent|''
name|'def'
name|'assertStatCount'
op|'('
name|'self'
op|','
name|'stat_method'
op|','
name|'stat_prefix'
op|','
name|'expected_count'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'count'
op|'='
name|'count_stats'
op|'('
name|'self'
op|'.'
name|'logger'
op|','
name|'stat_method'
op|','
name|'stat_prefix'
op|')'
newline|'\n'
name|'msg'
op|'='
string|"'expected %s != %s for %s %s'"
op|'%'
op|'('
nl|'\n'
name|'expected_count'
op|','
name|'count'
op|','
name|'stat_method'
op|','
name|'stat_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_count'
op|','
name|'count'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_partition
dedent|''
name|'def'
name|'test_delete_partition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# part 2 is predefined to have all revert jobs'
nl|'\n'
indent|'        '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
string|"'2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'part_path'
op|','
name|'os'
op|'.'
name|'F_OK'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'status'
op|'='
op|'['
number|'200'
op|']'
op|'*'
number|'2'
newline|'\n'
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'status'
op|','
name|'body'
op|'='
name|'body'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.ssync_sender'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'_make_fake_ssync'
op|'('
name|'ssync_calls'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct'
op|'('
name|'override_partitions'
op|'='
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'expected_repliate_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'127.0.0.0'"
op|','
string|"'/sda1/2/3c1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'127.0.0.2'"
op|','
string|"'/sda1/2/061'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'found_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_repliate_calls'
op|','
name|'found_calls'
op|')'
newline|'\n'
nl|'\n'
name|'expected_ssync_calls'
op|'='
name|'sorted'
op|'('
op|'['
nl|'\n'
op|'('
string|"'127.0.0.0'"
op|','
name|'REVERT'
op|','
number|'2'
op|','
op|'['
string|"'3c1'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'127.0.0.2'"
op|','
name|'REVERT'
op|','
number|'2'
op|','
op|'['
string|"'061'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_ssync_calls'
op|','
name|'sorted'
op|'('
op|'('
nl|'\n'
name|'c'
op|'['
string|"'node'"
op|']'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'job'"
op|']'
op|'['
string|"'job_type'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'job'"
op|']'
op|'['
string|"'partition'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'suffixes'"
op|']'
op|','
nl|'\n'
op|')'
name|'for'
name|'c'
name|'in'
name|'ssync_calls'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected_stats'
op|'='
op|'{'
nl|'\n'
op|'('
string|"'increment'"
op|','
string|"'partition.delete.count.'"
op|')'
op|':'
number|'2'
op|','
nl|'\n'
op|'('
string|"'timing_since'"
op|','
string|"'partition.delete.timing'"
op|')'
op|':'
number|'2'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'stat_key'
op|','
name|'expected'
name|'in'
name|'expected_stats'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'stat_method'
op|','
name|'stat_prefix'
op|'='
name|'stat_key'
newline|'\n'
name|'self'
op|'.'
name|'assertStatCount'
op|'('
name|'stat_method'
op|','
name|'stat_prefix'
op|','
name|'expected'
op|')'
newline|'\n'
comment|'# part 2 should be totally empty'
nl|'\n'
dedent|''
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'1'
op|']'
newline|'\n'
name|'hash_gen'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'yield_hashes'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'2'"
op|','
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'path'
op|','
name|'hash_'
op|','
name|'ts'
name|'in'
name|'hash_gen'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'found %s with %s in %s'"
op|','
op|'('
name|'hash_'
op|','
name|'ts'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
comment|'# but the partition directory and hashes pkl still exist'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'part_path'
op|','
name|'os'
op|'.'
name|'F_OK'
op|')'
op|')'
newline|'\n'
name|'hashes_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects_1'
op|','
string|"'2'"
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'hashes_path'
op|','
name|'os'
op|'.'
name|'F_OK'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... but on next pass'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.ssync_sender'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'_make_fake_ssync'
op|'('
name|'ssync_calls'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct'
op|'('
name|'override_partitions'
op|'='
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
comment|"# reconstruct won't generate any replicate or ssync_calls"
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'ssync_calls'
op|')'
newline|'\n'
comment|'# and the partition will get removed!'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'part_path'
op|','
name|'os'
op|'.'
name|'F_OK'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_all_success
dedent|''
name|'def'
name|'test_process_job_all_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
number|'12'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
nl|'\n'
name|'part_info'
op|')'
newline|'\n'
name|'found_jobs'
op|'.'
name|'extend'
op|'('
name|'jobs'
op|')'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
name|'node_count'
op|'='
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
name|'if'
name|'job'
op|'['
string|"'job_type'"
op|']'
op|'=='
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.hashes'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'assertStatCount'
op|'('
string|"'update_stats'"
op|','
nl|'\n'
string|"'suffix.hashes'"
op|','
nl|'\n'
name|'node_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_count'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.hashes'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_count'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.syncs'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'error'"
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'all_log_lines'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_sync'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_count'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'found_jobs'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_all_insufficient_storage
dedent|''
name|'def'
name|'test_process_job_all_insufficient_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'507'
op|']'
op|'*'
number|'8'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
nl|'\n'
name|'part_info'
op|')'
newline|'\n'
name|'found_jobs'
op|'.'
name|'extend'
op|'('
name|'jobs'
op|')'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'responded as unmounted'"
name|'in'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.hashes'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.syncs'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_sync'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_count'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'found_jobs'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_all_client_error
dedent|''
name|'def'
name|'test_process_job_all_client_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'400'
op|']'
op|'*'
number|'8'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
nl|'\n'
name|'part_info'
op|')'
newline|'\n'
name|'found_jobs'
op|'.'
name|'extend'
op|'('
name|'jobs'
op|')'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Invalid response 400'"
name|'in'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.hashes'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'count_stats'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'logger'
op|','
string|"'update_stats'"
op|','
string|"'suffix.syncs'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_sync'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_count'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'found_jobs'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_all_timeout
dedent|''
name|'def'
name|'test_process_job_all_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
name|'Timeout'
op|'('
op|')'
op|']'
op|'*'
number|'8'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'found_jobs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
nl|'\n'
name|'part_info'
op|')'
newline|'\n'
name|'found_jobs'
op|'.'
name|'extend'
op|'('
name|'jobs'
op|')'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Timeout (Nones)'"
name|'in'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertStatCount'
op|'('
nl|'\n'
string|"'update_stats'"
op|','
string|"'suffix.hashes'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertStatCount'
op|'('
nl|'\n'
string|"'update_stats'"
op|','
string|"'suffix.syncs'"
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_sync'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'suffix_count'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'found_jobs'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestObjectReconstructor
name|'class'
name|'TestObjectReconstructor'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'_rtime'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'3600'
newline|'\n'
name|'self'
op|'.'
name|'testdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'devices'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'devices'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'local_dev'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ip'
op|'='
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'replication_ip'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'replication_port'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
op|'{'
nl|'\n'
string|"'devices'"
op|':'
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
string|"'mount_check'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'bind_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'bind_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'object-reconstructor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_configure_reconstructor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'max_more_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'self'
op|'.'
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_configure_reconstructor
dedent|''
name|'def'
name|'_configure_reconstructor'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'='
name|'object_reconstructor'
op|'.'
name|'ObjectReconstructor'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'conf'
op|','
name|'logger'
op|'='
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
comment|'# some tests bypass build_reconstruction_jobs and go to process_job'
nl|'\n'
comment|'# directly, so you end up with a /0 when you try to show the'
nl|'\n'
comment|'# percentage of complete jobs as ratio of the total job count'
nl|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'job_count'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_reset_stats'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'stats_line'
op|'('
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ts
dedent|''
name|'def'
name|'ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'next'
op|'('
name|'self'
op|'.'
name|'ts_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_skips_non_ec_policy_and_device
dedent|''
name|'def'
name|'test_collect_parts_skips_non_ec_policy_and_device'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stub_parts'
op|'='
op|'('
number|'371'
op|','
number|'78'
op|','
number|'419'
op|','
number|'834'
op|')'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'stub_parts'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
name|'found_parts'
op|'='
name|'sorted'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'found_parts'
op|','
name|'sorted'
op|'('
name|'stub_parts'
op|')'
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'part_infos'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'part_path'"
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_skips_non_local_devs_servers_per_port
dedent|''
dedent|''
name|'def'
name|'test_collect_parts_skips_non_local_devs_servers_per_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_configure_reconstructor'
op|'('
name|'devices'
op|'='
name|'self'
op|'.'
name|'devices'
op|','
name|'mount_check'
op|'='
name|'False'
op|','
nl|'\n'
name|'bind_ip'
op|'='
name|'self'
op|'.'
name|'ip'
op|','
name|'bind_port'
op|'='
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
name|'servers_per_port'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'device_parts'
op|'='
op|'{'
nl|'\n'
string|"'sda'"
op|':'
op|'('
number|'374'
op|','
op|')'
op|','
nl|'\n'
string|"'sdb'"
op|':'
op|'('
number|'179'
op|','
number|'807'
op|')'
op|','
comment|'# w/one-serv-per-port, same IP alone is local'
nl|'\n'
string|"'sdc'"
op|':'
op|'('
number|'363'
op|','
number|'468'
op|','
number|'843'
op|')'
op|','
nl|'\n'
string|"'sdd'"
op|':'
op|'('
number|'912'
op|','
op|')'
op|','
comment|'# "not local" via different IP'
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'dev'
op|','
name|'parts'
name|'in'
name|'device_parts'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
nl|'\n'
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# we're only going to add sda and sdc into the ring"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdb'"
op|','
string|"'sdc'"
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|'+'
number|'1'
name|'if'
name|'dev'
op|'=='
string|"'sdb'"
name|'else'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
name|'stub_ring_devs'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'sdd'"
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.88'"
op|','
comment|'# not local via IP'
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'bind_ip'
op|'='
string|"'0.0.0.0'"
comment|'# use whataremyips'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'found_parts'
op|'='
name|'sorted'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
newline|'\n'
name|'expected_parts'
op|'='
name|'sorted'
op|'('
name|'itertools'
op|'.'
name|'chain'
op|'('
nl|'\n'
op|'*'
op|'('
name|'device_parts'
op|'['
name|'d'
op|']'
name|'for'
name|'d'
name|'in'
name|'local_devs'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'found_parts'
op|','
name|'expected_parts'
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'part_infos'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
name|'in'
name|'stub_ring_devs'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'part_path'"
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
name|'dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_multi_device_skips_non_non_local_devs
dedent|''
dedent|''
name|'def'
name|'test_collect_parts_multi_device_skips_non_non_local_devs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device_parts'
op|'='
op|'{'
nl|'\n'
string|"'sda'"
op|':'
op|'('
number|'374'
op|','
op|')'
op|','
nl|'\n'
string|"'sdb'"
op|':'
op|'('
number|'179'
op|','
number|'807'
op|')'
op|','
comment|'# "not local" via different port'
nl|'\n'
string|"'sdc'"
op|':'
op|'('
number|'363'
op|','
number|'468'
op|','
number|'843'
op|')'
op|','
nl|'\n'
string|"'sdd'"
op|':'
op|'('
number|'912'
op|','
op|')'
op|','
comment|'# "not local" via different IP'
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'dev'
op|','
name|'parts'
name|'in'
name|'device_parts'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
nl|'\n'
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# we're only going to add sda and sdc into the ring"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdc'"
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
name|'stub_ring_devs'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'sdb'"
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|'+'
number|'1'
op|','
comment|'# not local via port'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'device'"
op|':'
string|"'sdd'"
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
string|"'127.0.0.88'"
op|','
comment|'# not local via IP'
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'bind_ip'
op|'='
string|"'0.0.0.0'"
comment|'# use whataremyips'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'found_parts'
op|'='
name|'sorted'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
newline|'\n'
name|'expected_parts'
op|'='
name|'sorted'
op|'('
name|'itertools'
op|'.'
name|'chain'
op|'('
nl|'\n'
op|'*'
op|'('
name|'device_parts'
op|'['
name|'d'
op|']'
name|'for'
name|'d'
name|'in'
name|'local_devs'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'found_parts'
op|','
name|'expected_parts'
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'part_infos'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
name|'in'
name|'stub_ring_devs'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'part_path'"
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
name|'dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_multi_device_skips_non_ring_devices
dedent|''
dedent|''
name|'def'
name|'test_collect_parts_multi_device_skips_non_ring_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device_parts'
op|'='
op|'{'
nl|'\n'
string|"'sda'"
op|':'
op|'('
number|'374'
op|','
op|')'
op|','
nl|'\n'
string|"'sdc'"
op|':'
op|'('
number|'363'
op|','
number|'468'
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'dev'
op|','
name|'parts'
name|'in'
name|'device_parts'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
nl|'\n'
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# we're only going to add sda and sdc into the ring"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdc'"
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'bind_ip'
op|'='
string|"'0.0.0.0'"
comment|'# use whataremyips'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'found_parts'
op|'='
name|'sorted'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
newline|'\n'
name|'expected_parts'
op|'='
name|'sorted'
op|'('
name|'itertools'
op|'.'
name|'chain'
op|'('
nl|'\n'
op|'*'
op|'('
name|'device_parts'
op|'['
name|'d'
op|']'
name|'for'
name|'d'
name|'in'
name|'local_devs'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'found_parts'
op|','
name|'expected_parts'
op|')'
newline|'\n'
name|'for'
name|'part_info'
name|'in'
name|'part_infos'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
name|'in'
name|'stub_ring_devs'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'part_info'
op|'['
string|"'local_dev'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_info'
op|'['
string|"'part_path'"
op|']'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
name|'dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'part_info'
op|'['
string|"'partition'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_mount_check
dedent|''
dedent|''
name|'def'
name|'test_collect_parts_mount_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# each device has one part in it'
nl|'\n'
indent|'        '
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdb'"
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'dev'
name|'in'
name|'enumerate'
op|'('
name|'local_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
name|'datadir'
op|','
name|'str'
op|'('
name|'i'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'part_infos'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'paths'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_check_mount
name|'def'
name|'fake_check_mount'
op|'('
name|'devices'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'paths'
op|'.'
name|'append'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'fake_check_mount'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'part_infos'
op|')'
op|')'
comment|'# sanity, same jobs'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'int'
op|'('
name|'p'
op|'['
string|"'partition'"
op|']'
op|')'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... because ismount was not called'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'paths'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... now with mount check'
nl|'\n'
name|'self'
op|'.'
name|'_configure_reconstructor'
op|'('
name|'mount_check'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'mount_check'
op|')'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'mount_check'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'fake_check_mount'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'part_infos'
op|')'
comment|'# sanity, no jobs'
newline|'\n'
nl|'\n'
comment|'# ... because fake_ismount returned False for both paths'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'paths'
op|')'
op|','
name|'set'
op|'('
op|'['
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|')'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_check_mount
name|'def'
name|'fake_check_mount'
op|'('
name|'devices'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'devices'
op|','
name|'device'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
string|"'sda'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'fake_check_mount'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'part_infos'
op|')'
op|')'
comment|'# only sda picked up (part 0)'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'part_infos'
op|'['
number|'0'
op|']'
op|'['
string|"'partition'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_cleans_tmp
dedent|''
name|'def'
name|'test_collect_parts_cleans_tmp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdc'"
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'local_devs'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'device'
op|')'
op|')'
newline|'\n'
dedent|''
name|'fake_unlink'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reclaim_age'
op|'='
number|'1000'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.time.time'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'now'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.unlink_older_than'"
op|','
nl|'\n'
name|'fake_unlink'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# each local device hash unlink_older_than called on it,'
nl|'\n'
comment|'# with now - self.reclaim_age'
nl|'\n'
dedent|''
name|'tmpdir'
op|'='
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'now'
op|'-'
number|'1000'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_unlink'
op|'.'
name|'mock_calls'
op|','
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
name|'tmpdir'
op|')'
op|','
name|'expected'
op|')'
nl|'\n'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_creates_datadir
dedent|''
name|'def'
name|'test_collect_parts_creates_datadir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# create just the device path'
nl|'\n'
indent|'        '
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'dev_path'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dev_path'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'datadir_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_creates_datadir_error
dedent|''
name|'def'
name|'test_collect_parts_creates_datadir_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# create just the device path'
nl|'\n'
indent|'        '
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'datadir_path'
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.mkdirs'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'OSError'
op|'('
string|"'kaboom!'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'error_lines'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'line'
op|'='
name|'error_lines'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Unable to create'"
name|'in'
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'datadir_path'
name|'in'
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_skips_invalid_paths
dedent|''
name|'def'
name|'test_collect_parts_skips_invalid_paths'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'datadir_path'
op|')'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'datadir_path'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
string|"'junk'"
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'datadir_path'
op|')'
op|')'
newline|'\n'
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'error_lines'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'line'
op|'='
name|'error_lines'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Unable to list partitions'"
name|'in'
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'datadir_path'
name|'in'
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_removes_non_partition_files
dedent|''
name|'def'
name|'test_collect_parts_removes_non_partition_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# create some junk next to partitions'
nl|'\n'
indent|'        '
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|')'
newline|'\n'
name|'num_parts'
op|'='
number|'3'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'range'
op|'('
name|'num_parts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir_path'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'junk_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir_path'
op|','
string|"'junk'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'junk_file'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
string|"'junk'"
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# the file is not included in the part_infos map'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'p'
op|'['
string|"'part_path'"
op|']'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
op|','
nl|'\n'
name|'sorted'
op|'('
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir_path'
op|','
name|'str'
op|'('
name|'i'
op|')'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_parts'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
comment|'# and gets cleaned up'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'junk_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_collect_parts_overrides
dedent|''
name|'def'
name|'test_collect_parts_overrides'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup multiple devices, with multiple parts'
nl|'\n'
indent|'        '
name|'device_parts'
op|'='
op|'{'
nl|'\n'
string|"'sda'"
op|':'
op|'('
number|'374'
op|','
number|'843'
op|')'
op|','
nl|'\n'
string|"'sdb'"
op|':'
op|'('
number|'179'
op|','
number|'807'
op|')'
op|','
nl|'\n'
string|"'sdc'"
op|':'
op|'('
number|'363'
op|','
number|'468'
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'datadir'
op|'='
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'for'
name|'dev'
op|','
name|'parts'
name|'in'
name|'device_parts'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
nl|'\n'
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# we're only going to add sda and sdc into the ring"
nl|'\n'
dedent|''
dedent|''
name|'local_devs'
op|'='
op|'('
string|"'sda'"
op|','
string|"'sdc'"
op|')'
newline|'\n'
name|'stub_ring_devs'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'device'"
op|':'
name|'dev'
op|','
nl|'\n'
string|"'replication_ip'"
op|':'
name|'self'
op|'.'
name|'ip'
op|','
nl|'\n'
string|"'replication_port'"
op|':'
name|'self'
op|'.'
name|'port'
nl|'\n'
op|'}'
name|'for'
name|'dev'
name|'in'
name|'local_devs'
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'('
nl|'\n'
op|'('
op|'{'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'374'
op|')'
op|','
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'363'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'468'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_devices'"
op|':'
op|'['
string|"'sda'"
op|','
string|"'sdc'"
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'374'
op|')'
op|','
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'363'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'468'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_devices'"
op|':'
op|'['
string|"'sdc'"
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'363'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'468'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_devices'"
op|':'
op|'['
string|"'sda'"
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'374'
op|')'
op|','
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_devices'"
op|':'
op|'['
string|"'sdx'"
op|']'
op|'}'
op|','
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_partitions'"
op|':'
op|'['
number|'374'
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'374'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_partitions'"
op|':'
op|'['
number|'843'
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|'('
string|"'sdc'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'override_partitions'"
op|':'
op|'['
number|'843'
op|']'
op|','
string|"'override_devices'"
op|':'
op|'['
string|"'sda'"
op|']'
op|'}'
op|','
op|'['
nl|'\n'
op|'('
string|"'sda'"
op|','
number|'843'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.reconstructor.whataremyips'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'ip'
op|']'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|','
string|"'_devs'"
op|','
nl|'\n'
name|'new'
op|'='
name|'stub_ring_devs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'kwargs'
op|','
name|'expected_parts'
name|'in'
name|'expected'
op|':'
newline|'\n'
indent|'                '
name|'part_infos'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'collect_parts'
op|'('
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'expected_paths'
op|'='
name|'set'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'dev'
op|','
name|'datadir'
op|','
name|'str'
op|'('
name|'part'
op|')'
op|')'
nl|'\n'
name|'for'
name|'dev'
op|','
name|'part'
name|'in'
name|'expected_parts'
op|')'
newline|'\n'
name|'found_paths'
op|'='
name|'set'
op|'('
name|'p'
op|'['
string|"'part_path'"
op|']'
name|'for'
name|'p'
name|'in'
name|'part_infos'
op|')'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for %r'"
op|'%'
op|'('
nl|'\n'
name|'expected_paths'
op|','
name|'found_paths'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_paths'
op|','
name|'found_paths'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_creates_empty_hashes
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_build_jobs_creates_empty_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkdirs'
op|'('
name|'part_path'
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'job_type'"
op|']'
op|','
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'path'"
op|']'
op|','
name|'part_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'hashes'"
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'device'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
newline|'\n'
name|'suffixes'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_get_hashes'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'policy'
op|','
name|'part_path'
op|','
name|'do_listdir'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffixes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_no_hashes
dedent|''
name|'def'
name|'test_build_jobs_no_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'job_type'"
op|']'
op|','
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'path'"
op|']'
op|','
name|'part_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'hashes'"
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'device'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_primary
dedent|''
name|'def'
name|'test_build_jobs_primary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ring'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'='
name|'FabricatedRing'
op|'('
op|')'
newline|'\n'
comment|"# find a partition for which we're a primary"
nl|'\n'
name|'for'
name|'partition'
name|'in'
name|'range'
op|'('
number|'2'
op|'**'
name|'ring'
op|'.'
name|'part_power'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'frag_index'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'part_nodes'
op|']'
op|'.'
name|'index'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"the ring doesn\'t work: %r"'
op|'%'
name|'ring'
op|'.'
name|'_replica2part2dev_id'
op|')'
newline|'\n'
dedent|''
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'job_type'"
op|']'
op|','
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|','
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
name|'n'
op|'['
string|"'index'"
op|']'
name|'for'
name|'n'
name|'in'
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'ring'
op|'.'
name|'replicas'
op|','
nl|'\n'
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'ring'
op|'.'
name|'replicas'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
name|'partition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'path'"
op|']'
op|','
name|'part_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'hashes'"
op|']'
op|','
name|'stub_hashes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'device'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_handoff
dedent|''
name|'def'
name|'test_build_jobs_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ring'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'='
name|'FabricatedRing'
op|'('
op|')'
newline|'\n'
comment|"# find a partition for which we're a handoff"
nl|'\n'
name|'for'
name|'partition'
name|'in'
name|'range'
op|'('
number|'2'
op|'**'
name|'ring'
op|'.'
name|'part_power'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'id'"
op|']'
name|'not'
name|'in'
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'part_nodes'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"the ring doesn\'t work: %r"'
op|'%'
name|'ring'
op|'.'
name|'_replica2part2dev_id'
op|')'
newline|'\n'
dedent|''
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|"# since this part doesn't belong on us it doesn't matter what"
nl|'\n'
comment|'# frag_index we have'
nl|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'job_type'"
op|']'
op|','
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
name|'sorted'
op|'('
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'path'"
op|']'
op|','
name|'part_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
name|'partition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'job'
op|'['
string|"'hashes'"
op|']'
op|')'
op|','
name|'sorted'
op|'('
name|'stub_hashes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_mixed
dedent|''
name|'def'
name|'test_build_jobs_mixed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ring'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'='
name|'FabricatedRing'
op|'('
op|')'
newline|'\n'
comment|"# find a partition for which we're a primary"
nl|'\n'
name|'for'
name|'partition'
name|'in'
name|'range'
op|'('
number|'2'
op|'**'
name|'ring'
op|'.'
name|'part_power'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'frag_index'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'part_nodes'
op|']'
op|'.'
name|'index'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"the ring doesn\'t work: %r"'
op|'%'
name|'ring'
op|'.'
name|'_replica2part2dev_id'
op|')'
newline|'\n'
dedent|''
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'other_frag_index'
op|'='
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'f'
name|'for'
name|'f'
name|'in'
name|'range'
op|'('
name|'ring'
op|'.'
name|'replicas'
op|')'
nl|'\n'
name|'if'
name|'f'
op|'!='
name|'frag_index'
op|']'
op|')'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
name|'other_frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'jobs'
op|')'
op|')'
newline|'\n'
name|'sync_jobs'
op|','
name|'revert_jobs'
op|'='
op|'['
op|']'
op|','
op|'['
op|']'
newline|'\n'
name|'for'
name|'job'
name|'in'
name|'jobs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'partition'"
op|']'
op|','
name|'partition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'path'"
op|']'
op|','
name|'part_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'job'
op|'['
string|"'hashes'"
op|']'
op|')'
op|','
name|'sorted'
op|'('
name|'stub_hashes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'policy'"
op|']'
op|','
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'local_dev'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'device'"
op|']'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|')'
newline|'\n'
op|'{'
nl|'\n'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|':'
name|'sync_jobs'
op|','
nl|'\n'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|':'
name|'revert_jobs'
op|','
nl|'\n'
op|'}'
op|'['
name|'job'
op|'['
string|"'job_type'"
op|']'
op|']'
op|'.'
name|'append'
op|'('
name|'job'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'sync_jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'sync_jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
name|'sorted'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
name|'n'
op|'['
string|"'index'"
op|']'
name|'for'
name|'n'
name|'in'
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'ring'
op|'.'
name|'replicas'
op|','
nl|'\n'
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'ring'
op|'.'
name|'replicas'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'revert_jobs'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
name|'revert_jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'frag_index'"
op|']'
op|','
name|'other_frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'suffixes'"
op|']'
op|','
op|'['
string|"'456'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|','
name|'other_frag_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_jobs_revert_only_tombstones
dedent|''
name|'def'
name|'test_build_jobs_revert_only_tombstones'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ring'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'='
name|'FabricatedRing'
op|'('
op|')'
newline|'\n'
comment|"# find a partition for which we're a handoff"
nl|'\n'
name|'for'
name|'partition'
name|'in'
name|'range'
op|'('
number|'2'
op|'**'
name|'ring'
op|'.'
name|'part_power'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'id'"
op|']'
name|'not'
name|'in'
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'part_nodes'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"the ring doesn\'t work: %r"'
op|'%'
name|'ring'
op|'.'
name|'_replica2part2dev_id'
op|')'
newline|'\n'
dedent|''
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'part_info'
op|'='
op|'{'
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'part_path'"
op|':'
name|'part_path'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# we have no fragment index to hint the jobs where they belong'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'jobs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'build_reconstruction_jobs'
op|'('
name|'part_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'jobs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'job'
op|'='
name|'jobs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ring'
op|'.'
name|'replica_count'
op|','
name|'len'
op|'('
name|'job'
op|'['
string|"'sync_to'"
op|']'
op|')'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'expected %s != %s for %s'"
op|'%'
op|'('
nl|'\n'
name|'v'
op|','
name|'job'
op|'['
name|'k'
op|']'
op|','
name|'k'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'v'
op|','
name|'job'
op|'['
name|'k'
op|']'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_suffix_delta
dedent|''
dedent|''
name|'def'
name|'test_get_suffix_delta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# different'
nl|'\n'
indent|'        '
name|'local_suff'
op|'='
op|'{'
string|"'123'"
op|':'
op|'{'
name|'None'
op|':'
string|"'abc'"
op|','
number|'0'
op|':'
string|"'def'"
op|'}'
op|'}'
newline|'\n'
name|'remote_suff'
op|'='
op|'{'
string|"'456'"
op|':'
op|'{'
name|'None'
op|':'
string|"'ghi'"
op|','
number|'0'
op|':'
string|"'jkl'"
op|'}'
op|'}'
newline|'\n'
name|'local_index'
op|'='
number|'0'
newline|'\n'
name|'remote_index'
op|'='
number|'0'
newline|'\n'
name|'suffs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'get_suffix_delta'
op|'('
name|'local_suff'
op|','
nl|'\n'
name|'local_index'
op|','
nl|'\n'
name|'remote_suff'
op|','
nl|'\n'
name|'remote_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffs'
op|','
op|'['
string|"'123'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# now the same'
nl|'\n'
name|'remote_suff'
op|'='
op|'{'
string|"'123'"
op|':'
op|'{'
name|'None'
op|':'
string|"'abc'"
op|','
number|'0'
op|':'
string|"'def'"
op|'}'
op|'}'
newline|'\n'
name|'suffs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'get_suffix_delta'
op|'('
name|'local_suff'
op|','
nl|'\n'
name|'local_index'
op|','
nl|'\n'
name|'remote_suff'
op|','
nl|'\n'
name|'remote_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# now with a mis-matched None key (missing durable)'
nl|'\n'
name|'remote_suff'
op|'='
op|'{'
string|"'123'"
op|':'
op|'{'
name|'None'
op|':'
string|"'ghi'"
op|','
number|'0'
op|':'
string|"'def'"
op|'}'
op|'}'
newline|'\n'
name|'suffs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'get_suffix_delta'
op|'('
name|'local_suff'
op|','
nl|'\n'
name|'local_index'
op|','
nl|'\n'
name|'remote_suff'
op|','
nl|'\n'
name|'remote_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffs'
op|','
op|'['
string|"'123'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# now with bogus local index'
nl|'\n'
name|'local_suff'
op|'='
op|'{'
string|"'123'"
op|':'
op|'{'
name|'None'
op|':'
string|"'abc'"
op|','
number|'99'
op|':'
string|"'def'"
op|'}'
op|'}'
newline|'\n'
name|'remote_suff'
op|'='
op|'{'
string|"'456'"
op|':'
op|'{'
name|'None'
op|':'
string|"'ghi'"
op|','
number|'0'
op|':'
string|"'jkl'"
op|'}'
op|'}'
newline|'\n'
name|'suffs'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'get_suffix_delta'
op|'('
name|'local_suff'
op|','
nl|'\n'
name|'local_index'
op|','
nl|'\n'
name|'remote_suff'
op|','
nl|'\n'
name|'remote_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffs'
op|','
op|'['
string|"'123'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_primary_in_sync
dedent|''
name|'def'
name|'test_process_job_primary_in_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
comment|'# setup left and right hashes'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'left_index'
op|'='
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'left_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'right_index'
op|'='
name|'sync_to'
op|'['
number|'1'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'right_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'right_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'right_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'hashes'
op|')'
op|')'
name|'for'
name|'hashes'
name|'in'
op|'('
nl|'\n'
name|'left_hashes'
op|','
name|'right_hashes'
op|')'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
nl|'\n'
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ssync_calls'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_primary_not_in_sync
dedent|''
name|'def'
name|'test_process_job_primary_not_in_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
comment|'# setup left and right hashes'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'left_hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sync_to'
op|'['
number|'1'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'right_hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'hashes'
op|')'
op|')'
name|'for'
name|'hashes'
name|'in'
op|'('
nl|'\n'
name|'left_hashes'
op|','
name|'left_hashes'
op|','
name|'right_hashes'
op|','
name|'right_hashes'
op|')'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0/123-abc'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0/123-abc'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
nl|'\n'
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected_ssync_calls'
op|'='
name|'sorted'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
number|'0'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
number|'0'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_ssync_calls'
op|','
name|'sorted'
op|'('
op|'('
nl|'\n'
name|'c'
op|'['
string|"'node'"
op|']'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'job'"
op|']'
op|'['
string|"'partition'"
op|']'
op|','
nl|'\n'
name|'set'
op|'('
name|'c'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
nl|'\n'
op|')'
name|'for'
name|'c'
name|'in'
name|'ssync_calls'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_sync_missing_durable
dedent|''
name|'def'
name|'test_process_job_sync_missing_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
comment|'# setup left and right hashes'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# left hand side is in sync'
nl|'\n'
name|'left_index'
op|'='
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'left_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# right hand side has fragment, but no durable (None key is whack)'
nl|'\n'
name|'right_index'
op|'='
name|'sync_to'
op|'['
number|'1'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'right_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'right_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'right_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'different-because-durable'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'hashes'
op|')'
op|')'
name|'for'
name|'hashes'
name|'in'
op|'('
nl|'\n'
name|'left_hashes'
op|','
name|'right_hashes'
op|','
name|'right_hashes'
op|')'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0/abc'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
nl|'\n'
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected_ssync_calls'
op|'='
name|'sorted'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
number|'0'
op|','
op|'['
string|"'abc'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_ssync_calls'
op|','
name|'sorted'
op|'('
op|'('
nl|'\n'
name|'c'
op|'['
string|"'node'"
op|']'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'job'"
op|']'
op|'['
string|"'partition'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'suffixes'"
op|']'
op|','
nl|'\n'
op|')'
name|'for'
name|'c'
name|'in'
name|'ssync_calls'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_primary_some_in_sync
dedent|''
name|'def'
name|'test_process_job_primary_some_in_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
comment|'# setup left and right hashes'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'left_index'
op|'='
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'-'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'left_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hashX'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'left_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'right_index'
op|'='
name|'sync_to'
op|'['
number|'1'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
op|'('
name|'frag_index'
op|'+'
number|'1'
op|')'
op|'%'
name|'replicas'
newline|'\n'
name|'right_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'right_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'hashes'
op|')'
op|')'
name|'for'
name|'hashes'
name|'in'
op|'('
nl|'\n'
name|'left_hashes'
op|','
name|'left_hashes'
op|','
name|'right_hashes'
op|','
name|'right_hashes'
op|')'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
string|"'/sdb/0/123'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
string|"'/sdc/0/abc'"
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
nl|'\n'
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ssync_calls'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'c'
op|'['
string|"'node'"
op|']'
op|'['
string|"'index'"
op|']'
name|'for'
name|'c'
name|'in'
name|'ssync_calls'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
name|'left_index'
op|','
name|'right_index'
op|']'
op|')'
op|')'
newline|'\n'
name|'for'
name|'call'
name|'in'
name|'ssync_calls'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'call'
op|'['
string|"'node'"
op|']'
op|'['
string|"'index'"
op|']'
op|'=='
name|'left_index'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call'
op|'['
string|"'suffixes'"
op|']'
op|','
op|'['
string|"'123'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'call'
op|'['
string|"'node'"
op|']'
op|'['
string|"'index'"
op|']'
op|'=='
name|'right_index'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call'
op|'['
string|"'suffixes'"
op|']'
op|','
op|'['
string|"'abc'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'unexpected call %r'"
op|'%'
name|'call'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_primary_down
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_process_job_primary_down'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'sync_to'
op|'='
name|'part_nodes'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'non_local'
op|'='
op|'{'
string|"'called'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ssync_response_callback
name|'def'
name|'ssync_response_callback'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# in this test, ssync fails on the first (primary sync_to) node'
nl|'\n'
indent|'            '
name|'if'
name|'non_local'
op|'['
string|"'called'"
op|']'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
op|','
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'non_local'
op|'['
string|"'called'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'False'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'part_nodes'
op|'['
op|':'
number|'3'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'expected_suffix_calls'
op|'.'
name|'update'
op|'('
op|'['
nl|'\n'
op|'('
name|'node'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0'"
op|'%'
name|'node'
op|'['
string|"'device'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'node'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0/123-abc'"
op|'%'
name|'node'
op|'['
string|"'device'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|','
nl|'\n'
name|'response_callback'
op|'='
name|'ssync_response_callback'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
name|'len'
op|'('
name|'expected_suffix_calls'
op|')'
op|','
nl|'\n'
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'found_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
name|'found_suffix_calls'
op|')'
newline|'\n'
nl|'\n'
name|'expected_ssync_calls'
op|'='
name|'sorted'
op|'('
op|'['
nl|'\n'
op|'('
string|"'10.0.0.0'"
op|','
number|'0'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.1'"
op|','
number|'0'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'10.0.0.2'"
op|','
number|'0'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'found_ssync_calls'
op|'='
name|'sorted'
op|'('
op|'('
nl|'\n'
name|'c'
op|'['
string|"'node'"
op|']'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
name|'c'
op|'['
string|"'job'"
op|']'
op|'['
string|"'partition'"
op|']'
op|','
nl|'\n'
name|'set'
op|'('
name|'c'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
nl|'\n'
op|')'
name|'for'
name|'c'
name|'in'
name|'ssync_calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_ssync_calls'
op|','
name|'found_ssync_calls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_suffix_call_errors
dedent|''
name|'def'
name|'test_process_job_suffix_call_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'sync_to'
op|'='
name|'part_nodes'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'SYNC'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
nl|'\n'
name|'node'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0'"
op|'%'
name|'node'
op|'['
string|"'device'"
op|']'
nl|'\n'
op|')'
name|'for'
name|'node'
name|'in'
name|'part_nodes'
op|')'
newline|'\n'
nl|'\n'
name|'possible_errors'
op|'='
op|'['
number|'404'
op|','
number|'507'
op|','
name|'Timeout'
op|'('
op|')'
op|','
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|']'
newline|'\n'
name|'codes'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'possible_errors'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'expected_suffix_calls'
op|']'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'found_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
name|'found_suffix_calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'ssync_calls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_handoff
dedent|''
name|'def'
name|'test_process_job_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|')'
op|']'
newline|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
name|'frag_index'
newline|'\n'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
number|'200'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
op|','
string|"'/%s/0/123-abc'"
op|'%'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'device'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'found_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
name|'found_suffix_calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ssync_calls'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'call'
op|'='
name|'ssync_calls'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call'
op|'['
string|"'node'"
op|']'
op|','
name|'sync_to'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'call'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_revert_to_handoff
dedent|''
name|'def'
name|'test_process_job_revert_to_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|')'
op|']'
newline|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
name|'frag_index'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'handoff'
op|'='
name|'next'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'non_local'
op|'='
op|'{'
string|"'called'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ssync_response_callback
name|'def'
name|'ssync_response_callback'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# in this test, ssync fails on the first (primary sync_to) node'
nl|'\n'
indent|'            '
name|'if'
name|'non_local'
op|'['
string|"'called'"
op|']'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
op|','
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'non_local'
op|'['
string|"'called'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'False'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
name|'node'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0/123-abc'"
op|'%'
name|'node'
op|'['
string|"'device'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'node'
name|'in'
op|'('
name|'sync_to'
op|'['
number|'0'
op|']'
op|','
name|'handoff'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|','
nl|'\n'
name|'response_callback'
op|'='
name|'ssync_response_callback'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
name|'len'
op|'('
name|'expected_suffix_calls'
op|')'
op|','
nl|'\n'
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'found_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
name|'found_suffix_calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'len'
op|'('
name|'expected_suffix_calls'
op|')'
op|')'
newline|'\n'
name|'call'
op|'='
name|'ssync_calls'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call'
op|'['
string|"'node'"
op|']'
op|','
name|'sync_to'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'call'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_revert_is_handoff
dedent|''
name|'def'
name|'test_process_job_revert_is_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|')'
op|']'
newline|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
name|'frag_index'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
name|'handoff_nodes'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'stub_hashes'
op|'='
op|'{'
nl|'\n'
string|"'123'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
string|"'abc'"
op|':'
op|'{'
name|'frag_index'
op|':'
string|"'hash'"
op|','
name|'None'
op|':'
string|"'hash'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
name|'stub_hashes'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
name|'stub_hashes'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'handoff_nodes'
op|'['
op|'-'
number|'1'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ssync_response_callback
name|'def'
name|'ssync_response_callback'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# in this test ssync always fails, until we encounter ourselves in'
nl|'\n'
comment|"# the list of possible handoff's to sync to"
nl|'\n'
indent|'            '
name|'return'
name|'False'
op|','
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_suffix_calls'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'replication_ip'"
op|']'
op|','
nl|'\n'
string|"'/%s/0/123-abc'"
op|'%'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'device'"
op|']'
op|')'
nl|'\n'
op|']'
op|'+'
op|'['
nl|'\n'
op|'('
name|'node'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0/123-abc'"
op|'%'
name|'node'
op|'['
string|"'device'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'handoff_nodes'
op|'['
op|':'
op|'-'
number|'1'
op|']'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|','
nl|'\n'
name|'response_callback'
op|'='
name|'ssync_response_callback'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ECDiskFileManager._get_hashes'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'stub_hashes'
op|')'
op|')'
op|','
name|'mocked_http_conn'
op|'('
op|'*'
op|'['
number|'200'
op|']'
op|'*'
name|'len'
op|'('
name|'expected_suffix_calls'
op|')'
op|','
nl|'\n'
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'found_suffix_calls'
op|'='
name|'set'
op|'('
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_suffix_calls'
op|','
name|'found_suffix_calls'
op|')'
newline|'\n'
nl|'\n'
comment|'# this is ssync call to primary (which fails) plus the ssync call to'
nl|'\n'
comment|'# all of the handoffs (except the last one - which is the local_dev)'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ssync_calls'
op|')'
op|','
name|'len'
op|'('
name|'handoff_nodes'
op|')'
op|')'
newline|'\n'
name|'call'
op|'='
name|'ssync_calls'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call'
op|'['
string|"'node'"
op|']'
op|','
name|'sync_to'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'call'
op|'['
string|"'suffixes'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'123'"
op|','
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_revert_cleanup
dedent|''
name|'def'
name|'test_process_job_revert_cleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replicas'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'frag_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'sync_to'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|')'
op|']'
newline|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'index'"
op|']'
op|'='
name|'frag_index'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'part_path'
op|')'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'self'
op|'.'
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
string|"'a'"
op|','
nl|'\n'
string|"'c'"
op|','
string|"'data-obj'"
op|','
name|'policy'
op|'='
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'test_data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
string|"'Etag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ohash'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ssync_response_callback
name|'def'
name|'ssync_response_callback'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
op|','
op|'{'
name|'ohash'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|','
nl|'\n'
name|'response_callback'
op|'='
name|'ssync_response_callback'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
number|'200'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
nl|'\n'
op|'('
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0/%s'"
op|'%'
op|'('
nl|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'device'"
op|']'
op|','
name|'suffix'
op|')'
op|')'
op|','
nl|'\n'
op|']'
op|','
op|'['
nl|'\n'
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
nl|'\n'
op|']'
op|')'
newline|'\n'
comment|'# hashpath is still there, but only the durable remains'
nl|'\n'
name|'files'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'files'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'files'
op|'['
number|'0'
op|']'
op|'.'
name|'endswith'
op|'('
string|"'.durable'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# and more to the point, the next suffix recalc will clean it up'
nl|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'self'
op|'.'
name|'policy'
op|']'
newline|'\n'
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
name|'str'
op|'('
name|'partition'
op|')'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'access'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'os'
op|'.'
name|'F_OK'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_process_job_revert_cleanup_tombstone
dedent|''
name|'def'
name|'test_process_job_revert_cleanup_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sync_to'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'devs'
nl|'\n'
name|'if'
name|'n'
op|'!='
name|'self'
op|'.'
name|'local_dev'
op|']'
op|')'
op|']'
newline|'\n'
name|'partition'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'self'
op|'.'
name|'policy'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'part_path'
op|')'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'_df_router'
op|'['
name|'self'
op|'.'
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'local_dev'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
string|"'a'"
op|','
nl|'\n'
string|"'c'"
op|','
string|"'data-obj'"
op|','
name|'policy'
op|'='
name|'self'
op|'.'
name|'policy'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
name|'ohash'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'job_type'"
op|':'
name|'object_reconstructor'
op|'.'
name|'REVERT'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'suffixes'"
op|':'
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
string|"'sync_to'"
op|':'
name|'sync_to'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'part_path'
op|','
nl|'\n'
string|"'hashes'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
string|"'local_dev'"
op|':'
name|'self'
op|'.'
name|'local_dev'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ssync_response_callback
name|'def'
name|'ssync_response_callback'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
op|','
op|'{'
name|'ohash'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'ssync_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'with'
name|'mock_ssync_sender'
op|'('
name|'ssync_calls'
op|','
nl|'\n'
name|'response_callback'
op|'='
name|'ssync_response_callback'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
number|'200'
op|','
name|'body'
op|'='
name|'pickle'
op|'.'
name|'dumps'
op|'('
op|'{'
op|'}'
op|')'
op|')'
name|'as'
name|'request_log'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'process_job'
op|'('
name|'job'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
nl|'\n'
op|'('
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'replication_ip'"
op|']'
op|','
string|"'/%s/0/%s'"
op|'%'
op|'('
nl|'\n'
name|'sync_to'
op|'['
number|'0'
op|']'
op|'['
string|"'device'"
op|']'
op|','
name|'suffix'
op|')'
op|')'
op|','
nl|'\n'
op|']'
op|','
op|'['
nl|'\n'
op|'('
name|'r'
op|'['
string|"'ip'"
op|']'
op|','
name|'r'
op|'['
string|"'path'"
op|']'
op|')'
name|'for'
name|'r'
name|'in'
name|'request_log'
op|'.'
name|'requests'
nl|'\n'
op|']'
op|')'
newline|'\n'
comment|"# hashpath is still there, but it's empty"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_no_errors
dedent|''
name|'def'
name|'test_reconstruct_fa_no_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|'}'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'append'
op|'('
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# make a hook point at'
nl|'\n'
comment|'# swift.obj.reconstructor.ObjectReconstructor._get_response'
nl|'\n'
dedent|''
name|'called_headers'
op|'='
op|'['
op|']'
newline|'\n'
name|'orig_func'
op|'='
name|'object_reconstructor'
op|'.'
name|'ObjectReconstructor'
op|'.'
name|'_get_response'
newline|'\n'
nl|'\n'
DECL|function|_get_response_hook
name|'def'
name|'_get_response_hook'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'part'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called_headers'
op|'.'
name|'append'
op|'('
name|'headers'
op|')'
newline|'\n'
name|'return'
name|'orig_func'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'part'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'get_response_path'
op|'='
string|"'swift.obj.reconstructor.ObjectReconstructor._get_response'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'get_response_path'
op|','
name|'_get_response_hook'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mocked_http_conn'
op|'('
nl|'\n'
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'called_header'
name|'in'
name|'called_headers'
op|':'
newline|'\n'
indent|'                    '
name|'called_header'
op|'='
name|'HeaderKeyDict'
op|'('
name|'called_header'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Content-Length'"
name|'in'
name|'called_header'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called_header'
op|'['
string|"'Content-Length'"
op|']'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'User-Agent'"
name|'in'
name|'called_header'
op|')'
newline|'\n'
name|'user_agent'
op|'='
name|'called_header'
op|'['
string|"'User-Agent'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'user_agent'
op|'.'
name|'startswith'
op|'('
string|"'obj-reconstructor'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_errors_works
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_errors_works'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'4'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'base_responses'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|'}'
op|')'
newline|'\n'
name|'base_responses'
op|'.'
name|'append'
op|'('
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# since we're already missing a fragment a +2 scheme can only support"
nl|'\n'
comment|'# one additional failure at a time'
nl|'\n'
dedent|''
name|'for'
name|'error'
name|'in'
op|'('
name|'Timeout'
op|'('
op|')'
op|','
number|'404'
op|','
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'responses'
op|'='
name|'base_responses'
newline|'\n'
name|'error_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'responses'
op|')'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'responses'
op|'['
name|'error_index'
op|']'
op|'='
op|'('
name|'error'
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'dict'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_parity_fa_with_data_node_failure
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_parity_fa_with_data_node_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
op|'-'
number|'4'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# make up some data (trim some amount to make it unaligned with'
nl|'\n'
comment|'# segment size)'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'454'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
comment|'# the scheme is 10+4, so this gets a parity node'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
op|'-'
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'responses'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|'}'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'append'
op|'('
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'error'
name|'in'
op|'('
name|'Timeout'
op|'('
op|')'
op|','
number|'404'
op|','
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|')'
op|':'
newline|'\n'
comment|'# grab a data node index'
nl|'\n'
indent|'            '
name|'error_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'responses'
op|'['
name|'error_index'
op|']'
op|'='
op|'('
name|'error'
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers_iter'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'dict'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_errors_fails
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_errors_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'policy'
op|'='
name|'self'
op|'.'
name|'policy'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'possible_errors'
op|'='
op|'['
number|'404'
op|','
name|'Timeout'
op|'('
op|')'
op|','
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|']'
newline|'\n'
name|'codes'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'possible_errors'
op|')'
name|'for'
name|'i'
name|'in'
nl|'\n'
name|'range'
op|'('
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
op|']'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|','
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_with_mixed_old_etag
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_with_mixed_old_etag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
number|'1'
op|')'
newline|'\n'
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# bad response'
nl|'\n'
name|'bad_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
string|"'some garbage'"
op|','
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# good responses'
nl|'\n'
name|'responses'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'t1'
op|'='
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'t1'
op|'}'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'append'
op|'('
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# mixed together'
nl|'\n'
dedent|''
name|'error_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|')'
newline|'\n'
name|'error_headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
nl|'\n'
op|'('
name|'responses'
op|'['
name|'error_index'
op|']'
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'error_headers'
op|'.'
name|'update'
op|'('
name|'bad_headers'
op|')'
newline|'\n'
name|'bad_response'
op|'='
op|'('
number|'200'
op|','
string|"''"
op|','
name|'bad_headers'
op|')'
newline|'\n'
name|'responses'
op|'['
name|'error_index'
op|']'
op|'='
name|'bad_response'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_with_mixed_new_etag
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_with_mixed_new_etag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
number|'1'
op|')'
newline|'\n'
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# good responses'
nl|'\n'
name|'responses'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'t0'
op|'='
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
name|'body'
op|')'
newline|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'t0'
op|'}'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'append'
op|'('
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity check before negative test'
nl|'\n'
dedent|''
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'dict'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# one newer etag can spoil the bunch'
nl|'\n'
dedent|''
name|'new_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'responses'
op|')'
op|'-'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_nparity'
op|')'
newline|'\n'
name|'new_headers'
op|'='
name|'get_header_frag_index'
op|'('
name|'self'
op|','
op|'('
name|'responses'
op|'['
name|'new_index'
op|']'
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'new_headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
string|"'some garbage'"
op|','
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'new_response'
op|'='
op|'('
number|'200'
op|','
string|"''"
op|','
name|'new_headers'
op|')'
newline|'\n'
name|'responses'
op|'['
name|'new_index'
op|']'
op|'='
name|'new_response'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|','
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'dict'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_finds_itself_does_not_fail
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_finds_itself_does_not_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
comment|"# instead of popping the broken body, we'll just leave it in the list"
nl|'\n'
comment|'# of responses and take away something else.'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'['
number|'1'
op|']'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'ec_archive_bodies'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|function|make_header
name|'def'
name|'make_header'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'get_metadata'
op|'('
name|'body'
op|')'
newline|'\n'
name|'frag_index'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'h'"
op|','
name|'metadata'
op|'['
op|':'
number|'2'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'body'
op|','
name|'make_header'
op|'('
name|'body'
op|')'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reconstruct_fa_finds_duplicate_does_not_fail
dedent|''
dedent|''
name|'def'
name|'test_reconstruct_fa_finds_duplicate_does_not_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'job'
op|'='
op|'{'
nl|'\n'
string|"'partition'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'policy'"
op|':'
name|'self'
op|'.'
name|'policy'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'part_nodes'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'0'
op|')'
newline|'\n'
name|'node'
op|'='
name|'part_nodes'
op|'['
number|'1'
op|']'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'ETag'"
op|':'
string|"'etag'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'test_data'
op|'='
op|'('
string|"'rebuild'"
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'777'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'make_ec_archive_bodies'
op|'('
name|'self'
op|'.'
name|'policy'
op|','
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'broken_body'
op|'='
name|'ec_archive_bodies'
op|'.'
name|'pop'
op|'('
number|'1'
op|')'
newline|'\n'
comment|'# add some duplicates'
nl|'\n'
name|'num_duplicates'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_nparity'
op|'-'
number|'1'
newline|'\n'
name|'ec_archive_bodies'
op|'='
op|'('
name|'ec_archive_bodies'
op|'['
op|':'
name|'num_duplicates'
op|']'
op|'+'
nl|'\n'
name|'ec_archive_bodies'
op|')'
op|'['
op|':'
op|'-'
name|'num_duplicates'
op|']'
newline|'\n'
nl|'\n'
DECL|function|make_header
name|'def'
name|'make_header'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'get_metadata'
op|'('
name|'body'
op|')'
newline|'\n'
name|'frag_index'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'h'"
op|','
name|'metadata'
op|'['
op|':'
number|'2'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'frag_index'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'body'
op|','
name|'make_header'
op|'('
name|'body'
op|')'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|']'
newline|'\n'
name|'codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'mocked_http_conn'
op|'('
op|'*'
name|'codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'reconstructor'
op|'.'
name|'reconstruct_fa'
op|'('
nl|'\n'
name|'job'
op|','
name|'node'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'fixed_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fixed_body'
op|')'
op|','
name|'len'
op|'('
name|'broken_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'fixed_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'md5'
op|'('
name|'broken_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
