begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Database code for Swift """'
newline|'\n'
nl|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
op|','
name|'closing'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'uuid'
name|'import'
name|'uuid4'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkstemp'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
op|','
name|'Timeout'
newline|'\n'
name|'import'
name|'sqlite3'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'json'
op|','
name|'normalize_timestamp'
op|','
name|'renamer'
op|','
name|'mkdirs'
op|','
name|'lock_parent_directory'
op|','
name|'fallocate'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'LockTimeout'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#: Whether calls will be made to preallocate disk space for database files.'
nl|'\n'
DECL|variable|DB_PREALLOCATION
name|'DB_PREALLOCATION'
op|'='
name|'True'
newline|'\n'
comment|'#: Timeout for trying to connect to a DB'
nl|'\n'
DECL|variable|BROKER_TIMEOUT
name|'BROKER_TIMEOUT'
op|'='
number|'25'
newline|'\n'
comment|'#: Pickle protocol to use'
nl|'\n'
DECL|variable|PICKLE_PROTOCOL
name|'PICKLE_PROTOCOL'
op|'='
number|'2'
newline|'\n'
comment|'#: Max number of pending entries'
nl|'\n'
DECL|variable|PENDING_CAP
name|'PENDING_CAP'
op|'='
number|'131072'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8encode
name|'def'
name|'utf8encode'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
op|'('
name|'s'
op|'.'
name|'encode'
op|'('
string|"'utf8'"
op|')'
name|'if'
name|'isinstance'
op|'('
name|'s'
op|','
name|'unicode'
op|')'
name|'else'
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'args'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8encodekeys
dedent|''
name|'def'
name|'utf8encodekeys'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'uni_keys'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'metadata'
name|'if'
name|'isinstance'
op|'('
name|'k'
op|','
name|'unicode'
op|')'
op|']'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'uni_keys'
op|':'
newline|'\n'
indent|'        '
name|'sv'
op|'='
name|'metadata'
op|'['
name|'k'
op|']'
newline|'\n'
name|'del'
name|'metadata'
op|'['
name|'k'
op|']'
newline|'\n'
name|'metadata'
op|'['
name|'k'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|']'
op|'='
name|'sv'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_db_timeout
dedent|''
dedent|''
name|'def'
name|'_db_timeout'
op|'('
name|'timeout'
op|','
name|'db_file'
op|','
name|'call'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'LockTimeout'
op|'('
name|'timeout'
op|','
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retry_wait'
op|'='
number|'0.001'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'call'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'locked'"
name|'not'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'sleep'
op|'('
name|'retry_wait'
op|')'
newline|'\n'
name|'retry_wait'
op|'='
name|'min'
op|'('
name|'retry_wait'
op|'*'
number|'2'
op|','
number|'0.05'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatabaseConnectionError
dedent|''
dedent|''
dedent|''
name|'class'
name|'DatabaseConnectionError'
op|'('
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""More friendly error messages for DB Errors."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'DB connection error (%s, %s):\\n%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'path'
op|','
name|'self'
op|'.'
name|'timeout'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatabaseAlreadyExists
dedent|''
dedent|''
name|'class'
name|'DatabaseAlreadyExists'
op|'('
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""More friendly error messages for DB Errors."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'DB %s already exists'"
op|'%'
name|'self'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenDBConnection
dedent|''
dedent|''
name|'class'
name|'GreenDBConnection'
op|'('
name|'sqlite3'
op|'.'
name|'Connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""SQLite DB Connection handler that plays well with eventlet."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'database'
op|','
name|'timeout'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'BROKER_TIMEOUT'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'db_file'
op|'='
name|'database'
newline|'\n'
name|'super'
op|'('
name|'GreenDBConnection'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'database'
op|','
number|'0'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cursor
dedent|''
name|'def'
name|'cursor'
op|'('
name|'self'
op|','
name|'cls'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cls'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'='
name|'GreenDBCursor'
newline|'\n'
dedent|''
name|'return'
name|'sqlite3'
op|'.'
name|'Connection'
op|'.'
name|'cursor'
op|'('
name|'self'
op|','
name|'cls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_db_timeout'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'timeout'
op|','
name|'self'
op|'.'
name|'db_file'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'sqlite3'
op|'.'
name|'Connection'
op|'.'
name|'commit'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenDBCursor
dedent|''
dedent|''
name|'class'
name|'GreenDBCursor'
op|'('
name|'sqlite3'
op|'.'
name|'Cursor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""SQLite Cursor handler that plays well with eventlet."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'timeout'
op|'='
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'db_file'
op|'='
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'db_file'
newline|'\n'
name|'super'
op|'('
name|'GreenDBCursor'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_db_timeout'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'timeout'
op|','
name|'self'
op|'.'
name|'db_file'
op|','
name|'lambda'
op|':'
name|'sqlite3'
op|'.'
name|'Cursor'
op|'.'
name|'execute'
op|'('
nl|'\n'
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict_factory
dedent|''
dedent|''
name|'def'
name|'dict_factory'
op|'('
name|'crs'
op|','
name|'row'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This should only be used when you need a real dict,\n    i.e. when you\'re going to serialize the results.\n    """'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
op|'('
op|'('
name|'col'
op|'['
number|'0'
op|']'
op|','
name|'row'
op|'['
name|'idx'
op|']'
op|')'
name|'for'
name|'idx'
op|','
name|'col'
name|'in'
name|'enumerate'
op|'('
name|'crs'
op|'.'
name|'description'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|chexor
dedent|''
name|'def'
name|'chexor'
op|'('
name|'old'
op|','
name|'name'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Each entry in the account and container databases is XORed by the 128-bit\n    hash on insert or delete.  This serves as a rolling, order-independent hash\n    of the contents. (check + XOR)\n\n    :param old: hex representation of the current DB hash\n    :param name: name of the object or container being inserted\n    :param timestamp: timestamp of the new record\n    :returns: a hex representation of the new hash value\n    """'
newline|'\n'
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
string|"'name is None!'"
op|')'
newline|'\n'
dedent|''
name|'new'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
op|'('
string|"'%s-%s'"
op|'%'
op|'('
name|'name'
op|','
name|'timestamp'
op|')'
op|')'
op|'.'
name|'encode'
op|'('
string|"'utf8'"
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'return'
string|"'%032x'"
op|'%'
op|'('
name|'int'
op|'('
name|'old'
op|','
number|'16'
op|')'
op|'^'
name|'int'
op|'('
name|'new'
op|','
number|'16'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_db_connection
dedent|''
name|'def'
name|'get_db_connection'
op|'('
name|'path'
op|','
name|'timeout'
op|'='
number|'30'
op|','
name|'okay_to_create'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a properly configured SQLite database connection.\n\n    :param path: path to DB\n    :param timeout: timeout for connection\n    :param okay_to_create: if True, create the DB if it doesn\'t exist\n    :returns: DB connection object\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'connect_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'sqlite3'
op|'.'
name|'connect'
op|'('
name|'path'
op|','
name|'check_same_thread'
op|'='
name|'False'
op|','
nl|'\n'
name|'factory'
op|'='
name|'GreenDBConnection'
op|','
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'!='
string|"':memory:'"
name|'and'
name|'not'
name|'okay_to_create'
op|':'
newline|'\n'
comment|'# attempt to detect and fail when connect creates the db file'
nl|'\n'
indent|'            '
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'stat'
op|'.'
name|'st_size'
op|'=='
number|'0'
name|'and'
name|'stat'
op|'.'
name|'st_ctime'
op|'>='
name|'connect_time'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'path'
op|')'
newline|'\n'
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'path'
op|','
nl|'\n'
string|"'DB file created by connect?'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'row_factory'
op|'='
name|'sqlite3'
op|'.'
name|'Row'
newline|'\n'
name|'conn'
op|'.'
name|'text_factory'
op|'='
name|'str'
newline|'\n'
name|'with'
name|'closing'
op|'('
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
op|')'
name|'as'
name|'cur'
op|':'
newline|'\n'
indent|'            '
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA synchronous = NORMAL'"
op|')'
newline|'\n'
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA count_changes = OFF'"
op|')'
newline|'\n'
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA temp_store = MEMORY'"
op|')'
newline|'\n'
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA journal_mode = DELETE'"
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'create_function'
op|'('
string|"'chexor'"
op|','
number|'3'
op|','
name|'chexor'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'traceback'
newline|'\n'
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'path'
op|','
name|'traceback'
op|'.'
name|'format_exc'
op|'('
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatabaseBroker
dedent|''
name|'class'
name|'DatabaseBroker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encapsulates working with a database."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'db_file'
op|','
name|'timeout'
op|'='
name|'BROKER_TIMEOUT'
op|','
name|'logger'
op|'='
name|'None'
op|','
nl|'\n'
name|'account'
op|'='
name|'None'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'pending_timeout'
op|'='
name|'None'
op|','
nl|'\n'
name|'stale_reads_ok'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Encapsulates working with a database."""'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'db_file'
op|'='
name|'db_file'
newline|'\n'
name|'self'
op|'.'
name|'pending_file'
op|'='
name|'self'
op|'.'
name|'db_file'
op|'+'
string|"'.pending'"
newline|'\n'
name|'self'
op|'.'
name|'pending_timeout'
op|'='
name|'pending_timeout'
name|'or'
number|'10'
newline|'\n'
name|'self'
op|'.'
name|'stale_reads_ok'
op|'='
name|'stale_reads_ok'
newline|'\n'
name|'self'
op|'.'
name|'db_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'db_file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
name|'or'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'account'
op|'='
name|'account'
newline|'\n'
name|'self'
op|'.'
name|'container'
op|'='
name|'container'
newline|'\n'
name|'self'
op|'.'
name|'_db_version'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a string indentifying the entity under broker to a human.\n        The baseline implementation returns a full pathname to a database.\n        This is vital for useful diagnostics.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db_file'
newline|'\n'
nl|'\n'
DECL|member|initialize
dedent|''
name|'def'
name|'initialize'
op|'('
name|'self'
op|','
name|'put_timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the DB\n\n        :param put_timestamp: timestamp of initial PUT request\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'tmp_db_file'
op|'='
name|'None'
newline|'\n'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mkdirs'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|')'
newline|'\n'
name|'fd'
op|','
name|'tmp_db_file'
op|'='
name|'mkstemp'
op|'('
name|'suffix'
op|'='
string|"'.tmp'"
op|','
name|'dir'
op|'='
name|'self'
op|'.'
name|'db_dir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'sqlite3'
op|'.'
name|'connect'
op|'('
name|'tmp_db_file'
op|','
name|'check_same_thread'
op|'='
name|'False'
op|','
nl|'\n'
name|'factory'
op|'='
name|'GreenDBConnection'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
newline|'\n'
comment|'# creating dbs implicitly does a lot of transactions, so we'
nl|'\n'
comment|'# pick fast, unsafe options here and do a big fsync at the end.'
nl|'\n'
dedent|''
name|'with'
name|'closing'
op|'('
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
op|')'
name|'as'
name|'cur'
op|':'
newline|'\n'
indent|'            '
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA synchronous = OFF'"
op|')'
newline|'\n'
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA temp_store = MEMORY'"
op|')'
newline|'\n'
name|'cur'
op|'.'
name|'execute'
op|'('
string|"'PRAGMA journal_mode = MEMORY'"
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'create_function'
op|'('
string|"'chexor'"
op|','
number|'3'
op|','
name|'chexor'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'row_factory'
op|'='
name|'sqlite3'
op|'.'
name|'Row'
newline|'\n'
name|'conn'
op|'.'
name|'text_factory'
op|'='
name|'str'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE outgoing_sync (\n                remote_id TEXT UNIQUE,\n                sync_point INTEGER,\n                updated_at TEXT DEFAULT 0\n            );\n            CREATE TABLE incoming_sync (\n                remote_id TEXT UNIQUE,\n                sync_point INTEGER,\n                updated_at TEXT DEFAULT 0\n            );\n            CREATE TRIGGER outgoing_sync_insert AFTER INSERT ON outgoing_sync\n            BEGIN\n                UPDATE outgoing_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER outgoing_sync_update AFTER UPDATE ON outgoing_sync\n            BEGIN\n                UPDATE outgoing_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER incoming_sync_insert AFTER INSERT ON incoming_sync\n            BEGIN\n                UPDATE incoming_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n            CREATE TRIGGER incoming_sync_update AFTER UPDATE ON incoming_sync\n            BEGIN\n                UPDATE incoming_sync\n                SET updated_at = STRFTIME(\'%s\', \'NOW\')\n                WHERE ROWID = new.ROWID;\n            END;\n        """'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'put_timestamp'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'normalize_timestamp'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_initialize'
op|'('
name|'conn'
op|','
name|'put_timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'if'
name|'tmp_db_file'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'tmp_db_file'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'fsync'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
comment|'# It\'s as if there was a "condition" where different parts'
nl|'\n'
comment|'# of the system were "racing" each other.'
nl|'\n'
indent|'                    '
name|'raise'
name|'DatabaseAlreadyExists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
newline|'\n'
dedent|''
name|'renamer'
op|'('
name|'tmp_db_file'
op|','
name|'self'
op|'.'
name|'db_file'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
nl|'\n'
DECL|member|delete_db
dedent|''
dedent|''
name|'def'
name|'delete_db'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the DB as deleted\n\n        :param timestamp: delete timestamp\n        """'
newline|'\n'
name|'timestamp'
op|'='
name|'normalize_timestamp'
op|'('
name|'timestamp'
op|')'
newline|'\n'
comment|'# first, clear the metadata'
nl|'\n'
name|'cleared_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'cleared_meta'
op|'['
name|'k'
op|']'
op|'='
op|'('
string|"''"
op|','
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'update_metadata'
op|'('
name|'cleared_meta'
op|')'
newline|'\n'
comment|'# then mark the db as deleted'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_db'
op|'('
name|'conn'
op|','
name|'timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|possibly_quarantine
dedent|''
dedent|''
name|'def'
name|'possibly_quarantine'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checks the exception info to see if it indicates a quarantine situation\n        (malformed or corrupted database). If not, the original exception will\n        be reraised. If so, the database will be quarantined and a new\n        sqlite3.DatabaseError will be raised indicating the action taken.\n        """'
newline|'\n'
name|'if'
string|"'database disk image is malformed'"
name|'in'
name|'str'
op|'('
name|'exc_value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'exc_hint'
op|'='
string|"'malformed'"
newline|'\n'
dedent|''
name|'elif'
string|"'file is encrypted or is not a database'"
name|'in'
name|'str'
op|'('
name|'exc_value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'exc_hint'
op|'='
string|"'corrupted'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
newline|'\n'
dedent|''
name|'prefix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|')'
newline|'\n'
name|'partition_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'prefix_path'
op|')'
newline|'\n'
name|'dbs_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'partition_path'
op|')'
newline|'\n'
name|'device_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'dbs_path'
op|')'
newline|'\n'
name|'quar_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'device_path'
op|','
string|"'quarantined'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|'+'
string|"'s'"
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'renamer'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|','
name|'quar_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'not'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EEXIST'
op|','
name|'errno'
op|'.'
name|'ENOTEMPTY'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'quar_path'
op|'='
string|'"%s-%s"'
op|'%'
op|'('
name|'quar_path'
op|','
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
name|'renamer'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|','
name|'quar_path'
op|')'
newline|'\n'
dedent|''
name|'detail'
op|'='
name|'_'
op|'('
string|"'Quarantined %s to %s due to %s database'"
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'db_dir'
op|','
name|'quar_path'
op|','
name|'exc_hint'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'detail'
op|')'
newline|'\n'
name|'raise'
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|'('
name|'detail'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|get
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use with the "with" statement; returns a database connection."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|','
name|'DatabaseConnectionError'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'possibly_quarantine'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|'"DB doesn\'t exist"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'conn'
newline|'\n'
name|'conn'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'DatabaseError'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'possibly_quarantine'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|member|lock
name|'def'
name|'lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use with the "with" statement; locks a database."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'conn'
op|'='
name|'get_db_connection'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
name|'self'
op|'.'
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DatabaseConnectionError'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|'"DB doesn\'t exist"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'None'
newline|'\n'
name|'orig_isolation_level'
op|'='
name|'conn'
op|'.'
name|'isolation_level'
newline|'\n'
name|'conn'
op|'.'
name|'isolation_level'
op|'='
name|'None'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'BEGIN IMMEDIATE'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'ROLLBACK'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'isolation_level'
op|'='
name|'orig_isolation_level'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Broker error trying to rollback locked connection'"
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|newid
dedent|''
dedent|''
name|'def'
name|'newid'
op|'('
name|'self'
op|','
name|'remote_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Re-id the database.  This should be called after an rsync.\n\n        :param remote_id: the ID of the remote database being rsynced in\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE %s_stat SET id=?\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'str'
op|'('
name|'uuid4'
op|'('
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT ROWID FROM %s ORDER BY ROWID DESC LIMIT 1\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'sync_point'
op|'='
name|'row'
op|'['
string|"'ROWID'"
op|']'
name|'if'
name|'row'
name|'else'
op|'-'
number|'1'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                INSERT OR REPLACE INTO incoming_sync (sync_point, remote_id)\n                VALUES (?, ?)\n            '''"
op|','
op|'('
name|'sync_point'
op|','
name|'remote_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_newid'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_newid
dedent|''
dedent|''
name|'def'
name|'_newid'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
comment|'# Override for additional work when receiving an rsynced db.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|merge_timestamps
dedent|''
name|'def'
name|'merge_timestamps'
op|'('
name|'self'
op|','
name|'created_at'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used in replication to handle updating timestamps.\n\n        :param created_at: create timestamp\n        :param put_timestamp: put timestamp\n        :param delete_timestamp: delete timestamp\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE %s_stat SET created_at=MIN(?, created_at),\n                                   put_timestamp=MAX(?, put_timestamp),\n                                   delete_timestamp=MAX(?, delete_timestamp)\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'created_at'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_items_since
dedent|''
dedent|''
name|'def'
name|'get_items_since'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of objects in the database between start and end.\n\n        :param start: start ROWID\n        :param count: number to get\n        :returns: list of objects between start and end\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT * FROM %s WHERE ROWID > ? ORDER BY ROWID ASC LIMIT ?\n            '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
op|','
op|'('
name|'start'
op|','
name|'count'
op|')'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'dict_factory'
newline|'\n'
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_sync
dedent|''
dedent|''
name|'def'
name|'get_sync'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets the most recent sync point for a server from the sync table.\n\n        :param id: remote ID to get the sync_point for\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        :returns: the sync point, or -1 if the id doesn\'t exist.\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|'"SELECT sync_point FROM %s_sync WHERE remote_id=?"'
nl|'\n'
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
op|'('
name|'id'
op|','
op|')'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'row'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'row'
op|'['
string|"'sync_point'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_syncs
dedent|''
dedent|''
name|'def'
name|'get_syncs'
op|'('
name|'self'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a serialized copy of the sync table.\n\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        :returns: list of {\'remote_id\', \'sync_point\'}\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                SELECT remote_id, sync_point FROM %s_sync\n            '''"
op|'%'
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'curs'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'remote_id'"
op|':'
name|'row'
op|'['
number|'0'
op|']'
op|','
string|"'sync_point'"
op|':'
name|'row'
op|'['
number|'1'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|get_replication_info
dedent|''
dedent|''
name|'def'
name|'get_replication_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get information about the DB required for replication.\n\n        :returns: dict containing keys: hash, id, created_at, put_timestamp,\n            delete_timestamp, count, max_row, and metadata\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'query_part1'
op|'='
string|"'''\n            SELECT hash, id, created_at, put_timestamp, delete_timestamp,\n                %s_count AS count,\n                CASE WHEN SQLITE_SEQUENCE.seq IS NOT NULL\n                    THEN SQLITE_SEQUENCE.seq ELSE -1 END AS max_row, '''"
op|'%'
name|'self'
op|'.'
name|'db_contains_type'
newline|'\n'
name|'query_part2'
op|'='
string|"'''\n            FROM (%s_stat LEFT JOIN SQLITE_SEQUENCE\n                  ON SQLITE_SEQUENCE.name == '%s') LIMIT 1\n        '''"
op|'%'
op|'('
name|'self'
op|'.'
name|'db_type'
op|','
name|'self'
op|'.'
name|'db_contains_type'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query_part1'
op|'+'
string|"'metadata'"
op|'+'
name|'query_part2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query_part1'
op|'+'
string|'"\'\' as metadata"'
op|'+'
nl|'\n'
name|'query_part2'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'dict_factory'
newline|'\n'
name|'return'
name|'curs'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts
dedent|''
dedent|''
name|'def'
name|'_commit_puts'
op|'('
name|'self'
op|','
name|'item_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Scan for .pending files and commit the found records by feeding them\n        to merge_items().\n\n        :param item_list: A list of items to commit in addition to .pending\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'item_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'item_list'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'with'
name|'lock_parent_directory'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
name|'self'
op|'.'
name|'pending_timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_preallocate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'r+b'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'entry'
name|'in'
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'entry'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'_commit_puts_load'
op|'('
name|'item_list'
op|','
name|'entry'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid pending entry %(file)s: %(entry)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'file'"
op|':'
name|'self'
op|'.'
name|'pending_file'
op|','
string|"'entry'"
op|':'
name|'entry'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'item_list'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'merge_items'
op|'('
name|'item_list'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'ftruncate'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts_stale_ok
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_commit_puts_stale_ok'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Catch failures of _commit_puts() if broker is intended for\n        reading of stats, and thus does not care for pending updates.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'LockTimeout'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'stale_reads_ok'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts_load
dedent|''
dedent|''
dedent|''
name|'def'
name|'_commit_puts_load'
op|'('
name|'self'
op|','
name|'item_list'
op|','
name|'entry'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unmarshall the :param:entry and append it to :param:item_list.\n        This is implemented by a particular broker to be compatible\n        with its :func:`merge_items`.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|merge_syncs
dedent|''
name|'def'
name|'merge_syncs'
op|'('
name|'self'
op|','
name|'sync_points'
op|','
name|'incoming'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Merge a list of sync points with the incoming sync table.\n\n        :param sync_points: list of sync points where a sync point is a dict of\n                            {\'sync_point\', \'remote_id\'}\n        :param incoming: if True, get the last incoming sync, otherwise get\n                         the last outgoing sync\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rec'
name|'in'
name|'sync_points'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO %s_sync (sync_point, remote_id)\n                        VALUES (?, ?)\n                    '''"
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'sync_point'"
op|']'
op|','
name|'rec'
op|'['
string|"'remote_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'IntegrityError'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                        UPDATE %s_sync SET sync_point=max(?, sync_point)\n                        WHERE remote_id=?\n                    '''"
op|'%'
op|'('
string|"'incoming'"
name|'if'
name|'incoming'
name|'else'
string|"'outgoing'"
op|')'
op|','
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'sync_point'"
op|']'
op|','
name|'rec'
op|'['
string|"'remote_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_preallocate
dedent|''
dedent|''
name|'def'
name|'_preallocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The idea is to allocate space in front of an expanding db.  If it gets\n        within 512k of a boundary, it allocates to the next boundary.\n        Boundaries are 2m, 5m, 10m, 25m, 50m, then every 50m after.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'DB_PREALLOCATION'
name|'or'
name|'self'
op|'.'
name|'db_file'
op|'=='
string|"':memory:'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'MB'
op|'='
op|'('
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
nl|'\n'
DECL|function|prealloc_points
name|'def'
name|'prealloc_points'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'pm'
name|'in'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'5'
op|','
number|'10'
op|','
number|'25'
op|','
number|'50'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'pm'
op|'*'
name|'MB'
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'pm'
op|'+='
number|'50'
newline|'\n'
name|'yield'
name|'pm'
op|'*'
name|'MB'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'stat'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
newline|'\n'
name|'file_size'
op|'='
name|'stat'
op|'.'
name|'st_size'
newline|'\n'
name|'allocated_size'
op|'='
name|'stat'
op|'.'
name|'st_blocks'
op|'*'
number|'512'
newline|'\n'
name|'for'
name|'point'
name|'in'
name|'prealloc_points'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'file_size'
op|'<='
name|'point'
op|'-'
name|'MB'
op|'/'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'prealloc_size'
op|'='
name|'point'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'allocated_size'
op|'<'
name|'prealloc_size'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'db_file'
op|','
string|"'rb+'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'fallocate'
op|'('
name|'fp'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'int'
op|'('
name|'prealloc_size'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|metadata
name|'def'
name|'metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the metadata dict for the database. The metadata dict values\n        are tuples of (value, timestamp) where the timestamp indicates when\n        that key was set to that value.\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'metadata'
op|'='
string|"''"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'utf8encodekeys'
op|'('
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'metadata'
newline|'\n'
nl|'\n'
DECL|member|update_metadata
dedent|''
name|'def'
name|'update_metadata'
op|'('
name|'self'
op|','
name|'metadata_updates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Updates the metadata dict for the database. The metadata dict values\n        are tuples of (value, timestamp) where the timestamp indicates when\n        that key was set to that value. Key/values will only be overwritten if\n        the timestamp is newer. To delete a key, set its value to (\'\',\n        timestamp). These empty keys will eventually be removed by\n        :func:`reclaim`\n        """'
newline|'\n'
name|'old_metadata'
op|'='
name|'self'
op|'.'
name|'metadata'
newline|'\n'
name|'if'
name|'set'
op|'('
name|'metadata_updates'
op|')'
op|'.'
name|'issubset'
op|'('
name|'set'
op|'('
name|'old_metadata'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
op|'('
name|'value'
op|','
name|'timestamp'
op|')'
name|'in'
name|'metadata_updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'timestamp'
op|'>'
name|'old_metadata'
op|'['
name|'key'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'md'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'md'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'md'
op|')'
name|'if'
name|'md'
name|'else'
op|'{'
op|'}'
newline|'\n'
name|'utf8encodekeys'
op|'('
name|'md'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n                    ALTER TABLE %s_stat\n                    ADD COLUMN metadata TEXT DEFAULT \'\' """'
op|'%'
name|'self'
op|'.'
name|'db_type'
op|')'
newline|'\n'
name|'md'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value_timestamp'
name|'in'
name|'metadata_updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|','
name|'timestamp'
op|'='
name|'value_timestamp'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'md'
name|'or'
name|'timestamp'
op|'>'
name|'md'
op|'['
name|'key'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'md'
op|'['
name|'key'
op|']'
op|'='
name|'value_timestamp'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'UPDATE %s_stat SET metadata = ?'"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
nl|'\n'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'md'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reclaim
dedent|''
dedent|''
name|'def'
name|'reclaim'
op|'('
name|'self'
op|','
name|'age_timestamp'
op|','
name|'sync_timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete rows from the db_contains_type table that are marked deleted\n        and whose created_at timestamp is < age_timestamp.  Also deletes rows\n        from incoming_sync and outgoing_sync where the updated_at timestamp is\n        < sync_timestamp.\n\n        In addition, this calls the DatabaseBroker\'s :func:`_reclaim` method.\n\n        :param age_timestamp: max created_at timestamp of object rows to delete\n        :param sync_timestamp: max update_at timestamp of sync rows to delete\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                DELETE FROM %s WHERE deleted = 1 AND %s < ?\n            '''"
op|'%'
op|'('
name|'self'
op|'.'
name|'db_contains_type'
op|','
name|'self'
op|'.'
name|'db_reclaim_timestamp'
op|')'
op|','
nl|'\n'
op|'('
name|'age_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM outgoing_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    DELETE FROM incoming_sync WHERE updated_at < ?\n                '''"
op|','
op|'('
name|'sync_timestamp'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|"# Old dbs didn't have updated_at in the _sync tables."
nl|'\n'
indent|'                '
name|'if'
string|"'no such column: updated_at'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'DatabaseBroker'
op|'.'
name|'_reclaim'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'age_timestamp'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reclaim
dedent|''
dedent|''
name|'def'
name|'_reclaim'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Removes any empty metadata values older than the timestamp using the\n        given database connection. This function will not call commit on the\n        conn, but will instead return True if the database needs committing.\n        This function was created as a worker to limit transactions and commits\n        from other related functions.\n\n        :param conn: Database connection to reclaim metadata within.\n        :param timestamp: Empty metadata items last updated before this\n                          timestamp will be removed.\n        :returns: True if conn.commit() should be called\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'md'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'SELECT metadata FROM %s_stat'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'md'
op|':'
newline|'\n'
indent|'                '
name|'md'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'md'
op|')'
newline|'\n'
name|'keys_to_delete'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
op|'('
name|'value'
op|','
name|'value_timestamp'
op|')'
name|'in'
name|'md'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'value'
op|'=='
string|"''"
name|'and'
name|'value_timestamp'
op|'<'
name|'timestamp'
op|':'
newline|'\n'
indent|'                        '
name|'keys_to_delete'
op|'.'
name|'append'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'keys_to_delete'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'key'
name|'in'
name|'keys_to_delete'
op|':'
newline|'\n'
indent|'                        '
name|'del'
name|'md'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'UPDATE %s_stat SET metadata = ?'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'db_type'
op|','
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'md'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'no such column: metadata'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|update_put_timestamp
dedent|''
name|'def'
name|'update_put_timestamp'
op|'('
name|'self'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the put_timestamp.  Only modifies it if it is greater than\n        the current timestamp.\n\n        :param timestamp: put timestamp\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'UPDATE %s_stat SET put_timestamp = ?'"
nl|'\n'
string|"' WHERE put_timestamp < ?'"
op|'%'
name|'self'
op|'.'
name|'db_type'
op|','
nl|'\n'
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit
