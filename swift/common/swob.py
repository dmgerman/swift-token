begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nImplementation of WSGI Request and Response objects.\n\nThis library has a very similar API to Webob.  It wraps WSGI request\nenvironments and response values into objects that are more friendly to\ninteract with.\n\nWhy Swob and not just use WebOb?\nBy Michael Barton\n\nWe used webob for years. The main problem was that the interface\nwasn\'t stable. For a while, each of our several test suites required\na slightly different version of webob to run, and none of them worked\nwith the then-current version. It was a huge headache, so we just\nscrapped it.\n\nThis is kind of a ton of code, but it\'s also been a huge relief to\nnot have to scramble to add a bunch of code branches all over the\nplace to keep Swift working every time webob decides some interface\nneeds to change.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'collections'
name|'import'
name|'defaultdict'
newline|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'UserDict'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'functools'
name|'import'
name|'partial'
newline|'\n'
name|'from'
name|'datetime'
name|'import'
name|'datetime'
op|','
name|'timedelta'
op|','
name|'tzinfo'
newline|'\n'
name|'from'
name|'email'
op|'.'
name|'utils'
name|'import'
name|'parsedate'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'import'
name|'urllib2'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'reiterate'
op|','
name|'split_path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|RESPONSE_REASONS
name|'RESPONSE_REASONS'
op|'='
op|'{'
nl|'\n'
number|'100'
op|':'
op|'('
string|"'Continue'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'200'
op|':'
op|'('
string|"'OK'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'201'
op|':'
op|'('
string|"'Created'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'202'
op|':'
op|'('
string|"'Accepted'"
op|','
string|"'The request is accepted for processing.'"
op|')'
op|','
nl|'\n'
number|'204'
op|':'
op|'('
string|"'No Content'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'206'
op|':'
op|'('
string|"'Partial Content'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'301'
op|':'
op|'('
string|"'Moved Permanently'"
op|','
string|"'The resource has moved permanently.'"
op|')'
op|','
nl|'\n'
number|'302'
op|':'
op|'('
string|"'Found'"
op|','
string|"'The resource has moved temporarily.'"
op|')'
op|','
nl|'\n'
number|'303'
op|':'
op|'('
string|"'See Other'"
op|','
string|"'The response to the request can be found under a '"
nl|'\n'
string|"'different URI.'"
op|')'
op|','
nl|'\n'
number|'304'
op|':'
op|'('
string|"'Not Modified'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
number|'307'
op|':'
op|'('
string|"'Temporary Redirect'"
op|','
string|"'The resource has moved temporarily.'"
op|')'
op|','
nl|'\n'
number|'400'
op|':'
op|'('
string|"'Bad Request'"
op|','
string|"'The server could not comply with the request since '"
nl|'\n'
string|"'it is either malformed or otherwise incorrect.'"
op|')'
op|','
nl|'\n'
number|'401'
op|':'
op|'('
string|"'Unauthorized'"
op|','
string|"'This server could not verify that you are '"
nl|'\n'
string|"'authorized to access the document you requested.'"
op|')'
op|','
nl|'\n'
number|'402'
op|':'
op|'('
string|"'Payment Required'"
op|','
string|"'Access was denied for financial reasons.'"
op|')'
op|','
nl|'\n'
number|'403'
op|':'
op|'('
string|"'Forbidden'"
op|','
string|"'Access was denied to this resource.'"
op|')'
op|','
nl|'\n'
number|'404'
op|':'
op|'('
string|"'Not Found'"
op|','
string|"'The resource could not be found.'"
op|')'
op|','
nl|'\n'
number|'405'
op|':'
op|'('
string|"'Method Not Allowed'"
op|','
string|"'The method is not allowed for this '"
nl|'\n'
string|"'resource.'"
op|')'
op|','
nl|'\n'
number|'406'
op|':'
op|'('
string|"'Not Acceptable'"
op|','
string|"'The resource is not available in a format '"
nl|'\n'
string|"'acceptable to your browser.'"
op|')'
op|','
nl|'\n'
number|'408'
op|':'
op|'('
string|"'Request Timeout'"
op|','
string|"'The server has waited too long for the request '"
nl|'\n'
string|"'to be sent by the client.'"
op|')'
op|','
nl|'\n'
number|'409'
op|':'
op|'('
string|"'Conflict'"
op|','
string|"'There was a conflict when trying to complete '"
nl|'\n'
string|"'your request.'"
op|')'
op|','
nl|'\n'
number|'410'
op|':'
op|'('
string|"'Gone'"
op|','
string|"'This resource is no longer available.'"
op|')'
op|','
nl|'\n'
number|'411'
op|':'
op|'('
string|"'Length Required'"
op|','
string|"'Content-Length header required.'"
op|')'
op|','
nl|'\n'
number|'412'
op|':'
op|'('
string|"'Precondition Failed'"
op|','
string|"'A precondition for this request was not '"
nl|'\n'
string|"'met.'"
op|')'
op|','
nl|'\n'
number|'413'
op|':'
op|'('
string|"'Request Entity Too Large'"
op|','
string|"'The body of your request was too '"
nl|'\n'
string|"'large for this server.'"
op|')'
op|','
nl|'\n'
number|'414'
op|':'
op|'('
string|"'Request URI Too Long'"
op|','
string|"'The request URI was too long for this '"
nl|'\n'
string|"'server.'"
op|')'
op|','
nl|'\n'
number|'415'
op|':'
op|'('
string|"'Unsupported Media Type'"
op|','
string|"'The request media type is not '"
nl|'\n'
string|"'supported by this server.'"
op|')'
op|','
nl|'\n'
number|'416'
op|':'
op|'('
string|"'Requested Range Not Satisfiable'"
op|','
string|"'The Range requested is not '"
nl|'\n'
string|"'available.'"
op|')'
op|','
nl|'\n'
number|'417'
op|':'
op|'('
string|"'Expectation Failed'"
op|','
string|"'Expectation failed.'"
op|')'
op|','
nl|'\n'
number|'422'
op|':'
op|'('
string|"'Unprocessable Entity'"
op|','
string|"'Unable to process the contained '"
nl|'\n'
string|"'instructions'"
op|')'
op|','
nl|'\n'
number|'499'
op|':'
op|'('
string|"'Client Disconnect'"
op|','
string|"'The client was disconnected during request.'"
op|')'
op|','
nl|'\n'
number|'500'
op|':'
op|'('
string|"'Internal Error'"
op|','
string|"'The server has either erred or is incapable of '"
nl|'\n'
string|"'performing the requested operation.'"
op|')'
op|','
nl|'\n'
number|'501'
op|':'
op|'('
string|"'Not Implemented'"
op|','
string|"'The requested method is not implemented by '"
nl|'\n'
string|"'this server.'"
op|')'
op|','
nl|'\n'
number|'502'
op|':'
op|'('
string|"'Bad Gateway'"
op|','
string|"'Bad gateway.'"
op|')'
op|','
nl|'\n'
number|'503'
op|':'
op|'('
string|"'Service Unavailable'"
op|','
string|"'The server is currently unavailable. '"
nl|'\n'
string|"'Please try again at a later time.'"
op|')'
op|','
nl|'\n'
number|'504'
op|':'
op|'('
string|"'Gateway Timeout'"
op|','
string|"'A timeout has occurred speaking to a '"
nl|'\n'
string|"'backend server.'"
op|')'
op|','
nl|'\n'
number|'507'
op|':'
op|'('
string|"'Insufficient Storage'"
op|','
string|"'There was not enough space to save the '"
nl|'\n'
string|"'resource. Drive: %(drive)s'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_UTC
name|'class'
name|'_UTC'
op|'('
name|'tzinfo'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A tzinfo class for datetime objects that returns a 0 timedelta (UTC time)\n    """'
newline|'\n'
DECL|member|dst
name|'def'
name|'dst'
op|'('
name|'self'
op|','
name|'dt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'timedelta'
op|'('
number|'0'
op|')'
newline|'\n'
DECL|variable|utcoffset
dedent|''
name|'utcoffset'
op|'='
name|'dst'
newline|'\n'
nl|'\n'
DECL|member|tzname
name|'def'
name|'tzname'
op|'('
name|'self'
op|','
name|'dt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'UTC'"
newline|'\n'
DECL|variable|UTC
dedent|''
dedent|''
name|'UTC'
op|'='
name|'_UTC'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_datetime_property
name|'def'
name|'_datetime_property'
op|'('
name|'header'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the datetime value of self.headers[header]\n    (Used by both request and response)\n    The header is parsed on retrieval and a datetime object is returned.\n    The header can be set using a datetime, numeric value, or str.\n    If a value of None is given, the header is deleted.\n\n    :param header: name of the header, e.g. "Content-Length"\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'header'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'='
name|'parsedate'
op|'('
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|')'
op|'['
op|':'
number|'7'
op|']'
newline|'\n'
name|'return'
name|'datetime'
op|'('
op|'*'
op|'('
name|'parts'
op|'+'
op|'('
name|'UTC'
op|','
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
dedent|''
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
op|'('
name|'float'
op|','
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
nl|'\n'
string|'"%a, %d %b %Y %H:%M:%S GMT"'
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
op|'.'
name|'strftime'
op|'('
string|'"%a, %d %b %Y %H:%M:%S GMT"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
op|'('
string|'"Retrieve and set the %s header as a datetime, "'
nl|'\n'
string|'"set it with a datetime, int, or str"'
op|')'
op|'%'
name|'header'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_header_property
dedent|''
name|'def'
name|'_header_property'
op|'('
name|'header'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the value of self.headers[header]\n    (Used by both request and response)\n    If a value of None is given, the header is deleted.\n\n    :param header: name of the header, e.g. "Transfer-Encoding"\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'header'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the %s header"'
op|'%'
name|'header'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_header_int_property
dedent|''
name|'def'
name|'_header_int_property'
op|'('
name|'header'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the value of self.headers[header]\n    (Used by both request and response)\n    On retrieval, it converts values to integers.\n    If a value of None is given, the header is deleted.\n\n    :param header: name of the header, e.g. "Content-Length"\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'header'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'val'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the %s header as an int"'
op|'%'
name|'header'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HeaderEnvironProxy
dedent|''
name|'class'
name|'HeaderEnvironProxy'
op|'('
name|'UserDict'
op|'.'
name|'DictMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dict-like object that proxies requests to a wsgi environ,\n    rewriting header keys to environ keys.\n\n    For example, headers[\'Content-Range\'] sets and gets the value of\n    headers.environ[\'HTTP_CONTENT_RANGE\']\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environ'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'environ'
op|'='
name|'environ'
newline|'\n'
nl|'\n'
DECL|member|_normalize
dedent|''
name|'def'
name|'_normalize'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
string|"'HTTP_'"
op|'+'
name|'key'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'key'
op|'=='
string|"'HTTP_CONTENT_LENGTH'"
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'CONTENT_LENGTH'"
newline|'\n'
dedent|''
name|'if'
name|'key'
op|'=='
string|"'HTTP_CONTENT_TYPE'"
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'CONTENT_TYPE'"
newline|'\n'
dedent|''
name|'return'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'environ'
op|'['
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'.'
name|'pop'
op|'('
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'['
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
op|']'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'['
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
op|']'
op|'='
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
name|'in'
name|'self'
op|'.'
name|'environ'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'environ'
op|'['
name|'self'
op|'.'
name|'_normalize'
op|'('
name|'key'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
op|'['
name|'key'
op|'['
number|'5'
op|':'
op|']'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'-'"
op|')'
op|'.'
name|'title'
op|'('
op|')'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'environ'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'HTTP_'"
op|')'
op|']'
newline|'\n'
name|'if'
string|"'CONTENT_LENGTH'"
name|'in'
name|'self'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'.'
name|'append'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'CONTENT_TYPE'"
name|'in'
name|'self'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'.'
name|'append'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'keys'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HeaderKeyDict
dedent|''
dedent|''
name|'class'
name|'HeaderKeyDict'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dict that title-cases all keys on the way in, so as to be\n    case-insensitive.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'base_headers'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'base_headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update'
op|'('
name|'base_headers'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'other'
op|','
string|"'keys'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
name|'in'
name|'other'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|']'
op|'='
name|'other'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'other'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pop'
op|'('
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'.'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'.'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setdefault
dedent|''
name|'def'
name|'setdefault'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'not'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|pop
dedent|''
name|'def'
name|'pop'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'pop'
op|'('
name|'self'
op|','
name|'key'
op|'.'
name|'title'
op|'('
op|')'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_status_property
dedent|''
dedent|''
name|'def'
name|'_resp_status_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the value of Response.status\n    On retrieval, it concatenates status_int and title.\n    When set to a str, it splits status_int and title apart.\n    When set to an integer, retrieves the correct title for that\n    response code from the RESPONSE_REASONS dict.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'status_int'
op|','
name|'self'
op|'.'
name|'title'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status_int'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'explanation'
op|'='
name|'self'
op|'.'
name|'title'
op|'='
name|'RESPONSE_REASONS'
op|'['
name|'value'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'status_int'
op|'='
name|'int'
op|'('
name|'value'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'explanation'
op|'='
name|'self'
op|'.'
name|'title'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the Response status, e.g. \'200 OK\'"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_body_property
dedent|''
name|'def'
name|'_resp_body_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the value of Response.body\n    If necessary, it will consume Response.app_iter to create a body.\n    On assignment, encodes unicode values to utf-8, and sets the content-length\n    to the length of the str.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_body'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_app_iter'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_app_iter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_app_iter'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_body'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content_length'
op|'='
name|'len'
op|'('
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_app_iter'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_body'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the Response body str"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_etag_property
dedent|''
name|'def'
name|'_resp_etag_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve Response.etag\n    This may be broken for etag use cases other than Swift\'s.\n    Quotes strings when assigned and unquotes when read, for compatibility\n    with webob.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'etag'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'etag'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'etag'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|'='
string|'\'"%s"\''
op|'%'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the response Etag header"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_content_type_property
dedent|''
name|'def'
name|'_resp_content_type_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve Response.content_type\n    Strips off any charset when retrieved -- that is accessible\n    via Response.charset.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'content-type'"
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-type'"
op|')'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the response Content-Type header"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_charset_property
dedent|''
name|'def'
name|'_resp_charset_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve Response.charset\n    On retrieval, separates the charset from the content-type.\n    On assignment, removes any existing charset from the content-type and\n    appends the new one.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'; charset='"
name|'in'
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'.'
name|'split'
op|'('
string|"'; charset='"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'content-type'"
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'='
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"';'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'content-type'"
op|']'
op|'+='
string|"'; charset='"
op|'+'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the response charset"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resp_app_iter_property
dedent|''
name|'def'
name|'_resp_app_iter_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve Response.app_iter\n    Mostly a pass-through to Response._app_iter; it\'s a property so it can zero\n    out an existing content-length on assignment.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_app_iter'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content_length'
op|'='
name|'sum'
op|'('
name|'map'
op|'('
name|'len'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content_length'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_body'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_app_iter'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
nl|'\n'
name|'doc'
op|'='
string|'"Retrieve and set the response app_iter"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_req_fancy_property
dedent|''
name|'def'
name|'_req_fancy_property'
op|'('
name|'cls'
op|','
name|'header'
op|','
name|'even_if_nonexistent'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve "fancy" properties.\n    On retrieval, these properties return a class that takes the value of the\n    header as the only argument to their constructor.\n    For assignment, those classes should implement a __str__ that converts them\n    back to their header values.\n\n    :param header: name of the header, e.g. "Accept"\n    :param even_if_nonexistent: Return a value even if the header does not\n        exist.  Classes using this should be prepared to accept None as a\n        parameter.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'header'
name|'in'
name|'self'
op|'.'
name|'headers'
name|'or'
name|'even_if_nonexistent'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cls'
op|'('
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'header'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'['
name|'header'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
name|'doc'
op|'='
op|'('
string|'"Retrieve and set the %s "'
nl|'\n'
string|'"property in the WSGI environ, as a %s object"'
op|')'
op|'%'
nl|'\n'
op|'('
name|'header'
op|','
name|'cls'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Range
dedent|''
name|'class'
name|'Range'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps a Request\'s Range header as a friendly object.\n    After initialization, "range.ranges" is populated with a list\n    of (start, end) tuples denoting the requested ranges.\n\n    If there were any syntactically-invalid byte-range-spec values,\n    "range.ranges" will be an empty list, per the relevant RFC:\n\n    "The recipient of a byte-range-set that includes one or more syntactically\n    invalid byte-range-spec values MUST ignore the header field that includes\n    that byte-range-set."\n\n    According to the RFC 2616 specification, the following cases will be all\n    considered as syntactically invalid, thus, a ValueError is thrown so that\n    the range header will be ignored. If the range value contains at least\n    one of the following cases, the entire range is considered invalid,\n    ValueError will be thrown so that the header will be ignored.\n\n    1. value not starts with bytes=\n    2. range value start is greater than the end, eg. bytes=5-3\n    3. range does not have start or end, eg. bytes=-\n    4. range does not have hyphen, eg. bytes=45\n    5. range value is non numeric\n    6. any combination of the above\n\n    Every syntactically valid range will be added into the ranges list\n    even when some of the ranges may not be satisfied by underlying content.\n\n    :param headerval: value of the header as a str\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'headerval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headerval'
op|'='
name|'headerval'
op|'.'
name|'replace'
op|'('
string|"' '"
op|','
string|"''"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'headerval'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|"'bytes='"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Range header: %s'"
op|'%'
name|'headerval'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'ranges'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rng'
name|'in'
name|'headerval'
op|'['
number|'6'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
comment|'# Check if the range has required hyphen.'
nl|'\n'
indent|'            '
name|'if'
name|'rng'
op|'.'
name|'find'
op|'('
string|"'-'"
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Range header: %s'"
op|'%'
name|'headerval'
op|')'
newline|'\n'
dedent|''
name|'start'
op|','
name|'end'
op|'='
name|'rng'
op|'.'
name|'split'
op|'('
string|"'-'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'start'
op|':'
newline|'\n'
comment|'# when start contains non numeric value, this also causes'
nl|'\n'
comment|'# ValueError'
nl|'\n'
indent|'                '
name|'start'
op|'='
name|'int'
op|'('
name|'start'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'end'
op|':'
newline|'\n'
comment|'# when end contains non numeric value, this also causes'
nl|'\n'
comment|'# ValueError'
nl|'\n'
indent|'                '
name|'end'
op|'='
name|'int'
op|'('
name|'end'
op|')'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'end'
op|'<'
name|'start'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Range header: %s'"
op|'%'
name|'headerval'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'end'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Range header: %s'"
op|'%'
name|'headerval'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'ranges'
op|'.'
name|'append'
op|'('
op|'('
name|'start'
op|','
name|'end'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'string'
op|'='
string|"'bytes='"
newline|'\n'
name|'for'
name|'start'
op|','
name|'end'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'string'
op|'+='
name|'str'
op|'('
name|'start'
op|')'
newline|'\n'
dedent|''
name|'string'
op|'+='
string|"'-'"
newline|'\n'
name|'if'
name|'end'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'string'
op|'+='
name|'str'
op|'('
name|'end'
op|')'
newline|'\n'
dedent|''
name|'string'
op|'+='
string|"','"
newline|'\n'
dedent|''
name|'return'
name|'string'
op|'.'
name|'rstrip'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
DECL|member|ranges_for_length
dedent|''
name|'def'
name|'ranges_for_length'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is used to return multiple ranges for a given length\n        which should represent the length of the underlying content.\n        The constructor method __init__ made sure that any range in ranges\n        list is syntactically valid. So if length is None or size of the\n        ranges is zero, then the Range header should be ignored which will\n        eventually make the response to be 200.\n\n        If an empty list is returned by this method, it indicates that there\n        are unsatisfiable ranges found in the Range header, 416 will be\n        returned.\n\n        if a returned list has at least one element, the list indicates that\n        there is at least one range valid and the server should serve the\n        request with a 206 status code.\n\n        The start value of each range represents the starting position in\n        the content, the end value represents the ending position. This\n        method purposely adds 1 to the end number because the spec defines\n        the Range to be inclusive.\n\n        The Range spec can be found at the following link:\n        http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n\n        :param length: length of the underlying content\n        """'
newline|'\n'
comment|'# not syntactically valid ranges, must ignore'
nl|'\n'
name|'if'
name|'length'
name|'is'
name|'None'
name|'or'
name|'not'
name|'self'
op|'.'
name|'ranges'
name|'or'
name|'self'
op|'.'
name|'ranges'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'all_ranges'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'single_range'
name|'in'
name|'self'
op|'.'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'begin'
op|','
name|'end'
op|'='
name|'single_range'
newline|'\n'
comment|'# The possible values for begin and end are'
nl|'\n'
comment|'# None, 0, or a positive numeric number'
nl|'\n'
name|'if'
name|'begin'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'end'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# this is the bytes=-0 case'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'end'
op|'>'
name|'length'
op|':'
newline|'\n'
comment|'# This is the case where the end is greater than the'
nl|'\n'
comment|'# content length, as the RFC 2616 stated, the entire'
nl|'\n'
comment|'# content should be returned.'
nl|'\n'
indent|'                    '
name|'all_ranges'
op|'.'
name|'append'
op|'('
op|'('
number|'0'
op|','
name|'length'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'all_ranges'
op|'.'
name|'append'
op|'('
op|'('
name|'length'
op|'-'
name|'end'
op|','
name|'length'
op|')'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
comment|'# begin can only be 0 and numeric value from this point on'
nl|'\n'
dedent|''
name|'if'
name|'end'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'begin'
op|'<'
name|'length'
op|':'
newline|'\n'
indent|'                    '
name|'all_ranges'
op|'.'
name|'append'
op|'('
op|'('
name|'begin'
op|','
name|'length'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# the begin position is greater than or equal to the'
nl|'\n'
comment|'# content length; skip and move on to the next range'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
comment|'# end can only be 0 or numeric value'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'begin'
op|'<'
name|'length'
op|':'
newline|'\n'
comment|'# the begin position is valid, take the min of end + 1 or'
nl|'\n'
comment|'# the total length of the content'
nl|'\n'
indent|'                '
name|'all_ranges'
op|'.'
name|'append'
op|'('
op|'('
name|'begin'
op|','
name|'min'
op|'('
name|'end'
op|'+'
number|'1'
op|','
name|'length'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'all_ranges'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Match
dedent|''
dedent|''
name|'class'
name|'Match'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps a Request\'s If-[None-]Match header as a friendly object.\n\n    :param headerval: value of the header as a str\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'headerval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tags'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'headerval'
op|'.'
name|'split'
op|'('
string|"', '"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'tag'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
name|'and'
name|'tag'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'tags'
op|'.'
name|'add'
op|'('
name|'tag'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'tags'
op|'.'
name|'add'
op|'('
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'*'"
name|'in'
name|'self'
op|'.'
name|'tags'
name|'or'
name|'val'
name|'in'
name|'self'
op|'.'
name|'tags'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Accept
dedent|''
dedent|''
name|'class'
name|'Accept'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps a Request\'s Accept header as a friendly object.\n\n    :param headerval: value of the header as a str\n    """'
newline|'\n'
nl|'\n'
comment|'# RFC 2616 section 2.2'
nl|'\n'
DECL|variable|token
name|'token'
op|'='
string|'r\'[^()<>@,;:\\"/\\[\\]?={}\\x00-\\x20\\x7f]+\''
newline|'\n'
DECL|variable|qdtext
name|'qdtext'
op|'='
string|'r\'[^"]\''
newline|'\n'
DECL|variable|quoted_pair
name|'quoted_pair'
op|'='
string|"r'(?:\\\\.)'"
newline|'\n'
DECL|variable|quoted_string
name|'quoted_string'
op|'='
string|'r\'"(?:\''
op|'+'
name|'qdtext'
op|'+'
string|"r'|'"
op|'+'
name|'quoted_pair'
op|'+'
string|'r\')*"\''
newline|'\n'
DECL|variable|extension
name|'extension'
op|'='
op|'('
string|"r'(?:\\s*;\\s*(?:'"
op|'+'
name|'token'
op|'+'
string|'r")\\s*=\\s*"'
op|'+'
string|"r'(?:'"
op|'+'
name|'token'
op|'+'
nl|'\n'
string|"r'|'"
op|'+'
name|'quoted_string'
op|'+'
string|"r'))'"
op|')'
newline|'\n'
DECL|variable|acc
name|'acc'
op|'='
op|'('
string|"r'^\\s*('"
op|'+'
name|'token'
op|'+'
string|"r')/('"
op|'+'
name|'token'
op|'+'
nl|'\n'
string|"r')('"
op|'+'
name|'extension'
op|'+'
string|"r'*?\\s*)$'"
op|')'
newline|'\n'
DECL|variable|acc_pattern
name|'acc_pattern'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'acc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'headerval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headerval'
op|'='
name|'headerval'
newline|'\n'
nl|'\n'
DECL|member|_get_types
dedent|''
name|'def'
name|'_get_types'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'types'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'headerval'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'for'
name|'typ'
name|'in'
name|'self'
op|'.'
name|'headerval'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'type_parms'
op|'='
name|'self'
op|'.'
name|'acc_pattern'
op|'.'
name|'findall'
op|'('
name|'typ'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'type_parms'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid accept header'"
op|')'
newline|'\n'
dedent|''
name|'typ'
op|','
name|'subtype'
op|','
name|'parms'
op|'='
name|'type_parms'
op|'['
number|'0'
op|']'
newline|'\n'
name|'parms'
op|'='
op|'['
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'p'
name|'in'
name|'parms'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
name|'if'
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'seen_q_already'
op|'='
name|'False'
newline|'\n'
name|'quality'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
name|'for'
name|'parm'
name|'in'
name|'parms'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'value'
op|'='
name|'parm'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'name'
op|'='
name|'name'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
op|'=='
string|"'q'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'seen_q_already'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|'('
string|'\'Multiple "q" params\''
op|')'
newline|'\n'
dedent|''
name|'seen_q_already'
op|'='
name|'True'
newline|'\n'
name|'quality'
op|'='
name|'float'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'pattern'
op|'='
string|"'^'"
op|'+'
op|'('
name|'self'
op|'.'
name|'token'
name|'if'
name|'typ'
op|'=='
string|"'*'"
name|'else'
name|'re'
op|'.'
name|'escape'
op|'('
name|'typ'
op|')'
op|')'
op|'+'
string|"'/'"
op|'+'
op|'('
name|'self'
op|'.'
name|'token'
name|'if'
name|'subtype'
op|'=='
string|"'*'"
name|'else'
name|'re'
op|'.'
name|'escape'
op|'('
name|'subtype'
op|')'
op|')'
op|'+'
string|"'$'"
newline|'\n'
name|'types'
op|'.'
name|'append'
op|'('
op|'('
name|'pattern'
op|','
name|'quality'
op|','
string|"'*'"
name|'not'
name|'in'
op|'('
name|'typ'
op|','
name|'subtype'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# sort candidates by quality, then whether or not there were globs'
nl|'\n'
dedent|''
name|'types'
op|'.'
name|'sort'
op|'('
name|'reverse'
op|'='
name|'True'
op|','
name|'key'
op|'='
name|'lambda'
name|'t'
op|':'
op|'('
name|'t'
op|'['
number|'1'
op|']'
op|','
name|'t'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
op|'['
name|'t'
op|'['
number|'0'
op|']'
name|'for'
name|'t'
name|'in'
name|'types'
op|']'
newline|'\n'
nl|'\n'
DECL|member|best_match
dedent|''
name|'def'
name|'best_match'
op|'('
name|'self'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the item from "options" that best matches the accept header.\n        Returns None if no available options are acceptable to the client.\n\n        :param options: a list of content-types the server can respond with\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'types'
op|'='
name|'self'
op|'.'
name|'_get_types'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'types'
name|'and'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'options'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'pattern'
name|'in'
name|'types'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'option'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
name|'pattern'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'option'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'headerval'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_req_environ_property
dedent|''
dedent|''
name|'def'
name|'_req_environ_property'
op|'('
name|'environ_field'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve value of the environ_field entry in self.environ.\n    (Used by both request and response)\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'environ_field'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'['
name|'environ_field'
op|']'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'['
name|'environ_field'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
name|'doc'
op|'='
op|'('
string|'"Get and set the %s property "'
nl|'\n'
string|'"in the WSGI environment"'
op|')'
op|'%'
name|'environ_field'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_req_body_property
dedent|''
name|'def'
name|'_req_body_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set and retrieve the Request.body parameter.  It consumes wsgi.input and\n    returns the results.  On assignment, uses a StringIO to create a new\n    wsgi.input.\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'body'
op|'='
name|'self'
op|'.'
name|'environ'
op|'['
string|"'wsgi.input'"
op|']'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'wsgi.input'"
op|']'
op|'='
name|'StringIO'
op|'('
name|'body'
op|')'
newline|'\n'
name|'return'
name|'body'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'environ'
op|'['
string|"'wsgi.input'"
op|']'
op|'='
name|'StringIO'
op|'('
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'CONTENT_LENGTH'"
op|']'
op|'='
name|'str'
op|'('
name|'len'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|','
name|'doc'
op|'='
string|'"Get and set the request body str"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_url_property
dedent|''
name|'def'
name|'_host_url_property'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Retrieves the best guess that can be made for an absolute location up to\n    the path, for example: https://host.com:1234\n    """'
newline|'\n'
DECL|function|getter
name|'def'
name|'getter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'HTTP_HOST'"
name|'in'
name|'self'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'self'
op|'.'
name|'environ'
op|'['
string|"'HTTP_HOST'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'environ'
op|'['
string|"'SERVER_NAME'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'SERVER_PORT'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'scheme'
op|'='
name|'self'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'wsgi.url_scheme'"
op|','
string|"'http'"
op|')'
newline|'\n'
name|'if'
name|'scheme'
op|'=='
string|"'http'"
name|'and'
name|'host'
op|'.'
name|'endswith'
op|'('
string|"':80'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'host'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'scheme'
op|'=='
string|"'https'"
name|'and'
name|'host'
op|'.'
name|'endswith'
op|'('
string|"':443'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'port'
op|'='
name|'host'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'%s://%s'"
op|'%'
op|'('
name|'scheme'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'property'
op|'('
name|'getter'
op|','
name|'doc'
op|'='
string|'"Get url for request/response up to path"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Request
dedent|''
name|'class'
name|'Request'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    WSGI Request object.\n    """'
newline|'\n'
DECL|variable|range
name|'range'
op|'='
name|'_req_fancy_property'
op|'('
name|'Range'
op|','
string|"'range'"
op|')'
newline|'\n'
DECL|variable|if_none_match
name|'if_none_match'
op|'='
name|'_req_fancy_property'
op|'('
name|'Match'
op|','
string|"'if-none-match'"
op|')'
newline|'\n'
DECL|variable|accept
name|'accept'
op|'='
name|'_req_fancy_property'
op|'('
name|'Accept'
op|','
string|"'accept'"
op|','
name|'True'
op|')'
newline|'\n'
DECL|variable|method
name|'method'
op|'='
name|'_req_environ_property'
op|'('
string|"'REQUEST_METHOD'"
op|')'
newline|'\n'
name|'referrer'
op|'='
name|'referer'
op|'='
name|'_req_environ_property'
op|'('
string|"'HTTP_REFERER'"
op|')'
newline|'\n'
DECL|variable|script_name
name|'script_name'
op|'='
name|'_req_environ_property'
op|'('
string|"'SCRIPT_NAME'"
op|')'
newline|'\n'
DECL|variable|path_info
name|'path_info'
op|'='
name|'_req_environ_property'
op|'('
string|"'PATH_INFO'"
op|')'
newline|'\n'
DECL|variable|host
name|'host'
op|'='
name|'_req_environ_property'
op|'('
string|"'HTTP_HOST'"
op|')'
newline|'\n'
DECL|variable|host_url
name|'host_url'
op|'='
name|'_host_url_property'
op|'('
op|')'
newline|'\n'
DECL|variable|remote_addr
name|'remote_addr'
op|'='
name|'_req_environ_property'
op|'('
string|"'REMOTE_ADDR'"
op|')'
newline|'\n'
DECL|variable|remote_user
name|'remote_user'
op|'='
name|'_req_environ_property'
op|'('
string|"'REMOTE_USER'"
op|')'
newline|'\n'
DECL|variable|user_agent
name|'user_agent'
op|'='
name|'_req_environ_property'
op|'('
string|"'HTTP_USER_AGENT'"
op|')'
newline|'\n'
DECL|variable|query_string
name|'query_string'
op|'='
name|'_req_environ_property'
op|'('
string|"'QUERY_STRING'"
op|')'
newline|'\n'
DECL|variable|if_match
name|'if_match'
op|'='
name|'_req_fancy_property'
op|'('
name|'Match'
op|','
string|"'if-match'"
op|')'
newline|'\n'
DECL|variable|body_file
name|'body_file'
op|'='
name|'_req_environ_property'
op|'('
string|"'wsgi.input'"
op|')'
newline|'\n'
DECL|variable|content_length
name|'content_length'
op|'='
name|'_header_int_property'
op|'('
string|"'content-length'"
op|')'
newline|'\n'
DECL|variable|if_modified_since
name|'if_modified_since'
op|'='
name|'_datetime_property'
op|'('
string|"'if-modified-since'"
op|')'
newline|'\n'
DECL|variable|if_unmodified_since
name|'if_unmodified_since'
op|'='
name|'_datetime_property'
op|'('
string|"'if-unmodified-since'"
op|')'
newline|'\n'
DECL|variable|body
name|'body'
op|'='
name|'_req_body_property'
op|'('
op|')'
newline|'\n'
DECL|variable|charset
name|'charset'
op|'='
name|'None'
newline|'\n'
DECL|variable|_params_cache
name|'_params_cache'
op|'='
name|'None'
newline|'\n'
DECL|variable|acl
name|'acl'
op|'='
name|'_req_environ_property'
op|'('
string|"'swob.ACL'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environ'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'environ'
op|'='
name|'environ'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'HeaderEnvironProxy'
op|'('
name|'self'
op|'.'
name|'environ'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|blank
name|'def'
name|'blank'
op|'('
name|'cls'
op|','
name|'path'
op|','
name|'environ'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'body'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new request object with the given parameters, and an\n        environment otherwise filled in with non-surprising default values.\n\n        :param path: encoded, parsed, and unquoted into PATH_INFO\n        :param environ: WSGI environ dictionary\n        :param headers: HTTP headers\n        :param body: stuffed in a StringIO and hung on wsgi.input\n        :param kwargs: any environ key with an property setter\n        """'
newline|'\n'
name|'headers'
op|'='
name|'headers'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'environ'
op|'='
name|'environ'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'path'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'path'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'parsed_path'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'path'
op|')'
newline|'\n'
name|'server_name'
op|'='
string|"'localhost'"
newline|'\n'
name|'if'
name|'parsed_path'
op|'.'
name|'netloc'
op|':'
newline|'\n'
indent|'            '
name|'server_name'
op|'='
name|'parsed_path'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'server_port'
op|'='
name|'parsed_path'
op|'.'
name|'port'
newline|'\n'
name|'if'
name|'server_port'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'server_port'
op|'='
op|'{'
string|"'http'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'https'"
op|':'
number|'443'
op|'}'
op|'.'
name|'get'
op|'('
name|'parsed_path'
op|'.'
name|'scheme'
op|','
number|'80'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'parsed_path'
op|'.'
name|'scheme'
name|'and'
name|'parsed_path'
op|'.'
name|'scheme'
name|'not'
name|'in'
op|'['
string|"'http'"
op|','
string|"'https'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|"'Invalid scheme: %s'"
op|'%'
name|'parsed_path'
op|'.'
name|'scheme'
op|')'
newline|'\n'
dedent|''
name|'env'
op|'='
op|'{'
nl|'\n'
string|"'REQUEST_METHOD'"
op|':'
string|"'GET'"
op|','
nl|'\n'
string|"'SCRIPT_NAME'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'QUERY_STRING'"
op|':'
name|'parsed_path'
op|'.'
name|'query'
op|','
nl|'\n'
string|"'PATH_INFO'"
op|':'
name|'urllib2'
op|'.'
name|'unquote'
op|'('
name|'parsed_path'
op|'.'
name|'path'
op|')'
op|','
nl|'\n'
string|"'SERVER_NAME'"
op|':'
name|'server_name'
op|','
nl|'\n'
string|"'SERVER_PORT'"
op|':'
name|'str'
op|'('
name|'server_port'
op|')'
op|','
nl|'\n'
string|"'HTTP_HOST'"
op|':'
string|"'%s:%d'"
op|'%'
op|'('
name|'server_name'
op|','
name|'server_port'
op|')'
op|','
nl|'\n'
string|"'SERVER_PROTOCOL'"
op|':'
string|"'HTTP/1.0'"
op|','
nl|'\n'
string|"'wsgi.version'"
op|':'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'wsgi.url_scheme'"
op|':'
name|'parsed_path'
op|'.'
name|'scheme'
name|'or'
string|"'http'"
op|','
nl|'\n'
string|"'wsgi.errors'"
op|':'
name|'StringIO'
op|'('
string|"''"
op|')'
op|','
nl|'\n'
string|"'wsgi.multithread'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'wsgi.multiprocess'"
op|':'
name|'False'
nl|'\n'
op|'}'
newline|'\n'
name|'env'
op|'.'
name|'update'
op|'('
name|'environ'
op|')'
newline|'\n'
name|'if'
name|'body'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'['
string|"'wsgi.input'"
op|']'
op|'='
name|'StringIO'
op|'('
name|'body'
op|')'
newline|'\n'
name|'env'
op|'['
string|"'CONTENT_LENGTH'"
op|']'
op|'='
name|'str'
op|'('
name|'len'
op|'('
name|'body'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'wsgi.input'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'['
string|"'wsgi.input'"
op|']'
op|'='
name|'StringIO'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'req'
op|'='
name|'Request'
op|'('
name|'env'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'headers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'headers'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prop'
op|'='
name|'getattr'
op|'('
name|'Request'
op|','
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'prop'
name|'and'
name|'isinstance'
op|'('
name|'prop'
op|','
name|'property'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'req'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'TypeError'
op|'('
string|'"got unexpected keyword argument %r"'
op|'%'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'req'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|params
name|'def'
name|'params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Provides QUERY_STRING parameters as a dictionary"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_params_cache'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'QUERY_STRING'"
name|'in'
name|'self'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_params_cache'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'urlparse'
op|'.'
name|'parse_qsl'
op|'('
name|'self'
op|'.'
name|'environ'
op|'['
string|"'QUERY_STRING'"
op|']'
op|','
name|'True'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_params_cache'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_params_cache'
newline|'\n'
DECL|variable|str_params
dedent|''
name|'str_params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|path_qs
name|'def'
name|'path_qs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The path of the request, without host but with query string."""'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'path'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'query_string'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'+='
string|"'?'"
op|'+'
name|'self'
op|'.'
name|'query_string'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|path
name|'def'
name|'path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Provides the full path of the request, excluding the QUERY_STRING"'
newline|'\n'
name|'return'
name|'urllib2'
op|'.'
name|'quote'
op|'('
name|'self'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"''"
op|')'
op|'+'
nl|'\n'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'PATH_INFO'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|swift_entity_path
name|'def'
name|'swift_entity_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Provides the account/container/object path, sans API version.\n\n        This can be useful when constructing a path to send to a backend\n        server, as that path will need everything after the "/v1".\n        """'
newline|'\n'
name|'_ver'
op|','
name|'entity_path'
op|'='
name|'self'
op|'.'
name|'split_path'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'rest_with_last'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'entity_path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'/'"
op|'+'
name|'entity_path'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|url
name|'def'
name|'url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Provides the full url of the request"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host_url'
op|'+'
name|'self'
op|'.'
name|'path_qs'
newline|'\n'
nl|'\n'
DECL|member|as_referer
dedent|''
name|'def'
name|'as_referer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'method'
op|'+'
string|"' '"
op|'+'
name|'self'
op|'.'
name|'url'
newline|'\n'
nl|'\n'
DECL|member|path_info_pop
dedent|''
name|'def'
name|'path_info_pop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes one path portion (delineated by slashes) from the\n        path_info, and appends it to the script_name.  Returns\n        the path segment.\n        """'
newline|'\n'
name|'path_info'
op|'='
name|'self'
op|'.'
name|'path_info'
newline|'\n'
name|'if'
name|'not'
name|'path_info'
name|'or'
name|'path_info'
op|'['
number|'0'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'slash_loc'
op|'='
name|'path_info'
op|'.'
name|'index'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'slash_loc'
op|'='
name|'len'
op|'('
name|'path_info'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'script_name'
op|'+='
name|'path_info'
op|'['
op|':'
name|'slash_loc'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'path_info'
op|'='
name|'path_info'
op|'['
name|'slash_loc'
op|':'
op|']'
newline|'\n'
name|'return'
name|'path_info'
op|'['
number|'1'
op|':'
name|'slash_loc'
op|']'
newline|'\n'
nl|'\n'
DECL|member|copy_get
dedent|''
name|'def'
name|'copy_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Makes a copy of the request, converting it to a GET.\n        """'
newline|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'REQUEST_METHOD'"
op|':'
string|"'GET'"
op|','
nl|'\n'
string|"'CONTENT_LENGTH'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'wsgi.input'"
op|':'
name|'StringIO'
op|'('
string|"''"
op|')'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'Request'
op|'('
name|'env'
op|')'
newline|'\n'
nl|'\n'
DECL|member|call_application
dedent|''
name|'def'
name|'call_application'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calls the application with this request\'s environment.  Returns the\n        status, headers, and app_iter for the response as a tuple.\n\n        :param application: the WSGI application to call\n        """'
newline|'\n'
name|'output'
op|'='
op|'['
op|']'
newline|'\n'
name|'captured'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|start_response
name|'def'
name|'start_response'
op|'('
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'captured'
op|'['
op|':'
op|']'
op|'='
op|'['
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|']'
newline|'\n'
name|'return'
name|'output'
op|'.'
name|'append'
newline|'\n'
dedent|''
name|'app_iter'
op|'='
name|'application'
op|'('
name|'self'
op|'.'
name|'environ'
op|','
name|'start_response'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'app_iter'
op|':'
newline|'\n'
indent|'            '
name|'app_iter'
op|'='
name|'output'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'captured'
op|':'
newline|'\n'
indent|'            '
name|'app_iter'
op|'='
name|'reiterate'
op|'('
name|'app_iter'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'captured'
op|'['
number|'0'
op|']'
op|','
name|'captured'
op|'['
number|'1'
op|']'
op|','
name|'app_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_response
dedent|''
name|'def'
name|'get_response'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calls the application with this request\'s environment.  Returns a\n        Response object that wraps up the application\'s result.\n\n        :param application: the WSGI application to call\n        """'
newline|'\n'
name|'status'
op|','
name|'headers'
op|','
name|'app_iter'
op|'='
name|'self'
op|'.'
name|'call_application'
op|'('
name|'application'
op|')'
newline|'\n'
name|'return'
name|'Response'
op|'('
name|'status'
op|'='
name|'status'
op|','
name|'headers'
op|'='
name|'dict'
op|'('
name|'headers'
op|')'
op|','
nl|'\n'
name|'app_iter'
op|'='
name|'app_iter'
op|','
name|'request'
op|'='
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|split_path
dedent|''
name|'def'
name|'split_path'
op|'('
name|'self'
op|','
name|'minsegs'
op|'='
number|'1'
op|','
name|'maxsegs'
op|'='
name|'None'
op|','
name|'rest_with_last'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate and split the Request\'s path.\n\n        **Examples**::\n\n            [\'a\'] = split_path(\'/a\')\n            [\'a\', None] = split_path(\'/a\', 1, 2)\n            [\'a\', \'c\'] = split_path(\'/a/c\', 1, 2)\n            [\'a\', \'c\', \'o/r\'] = split_path(\'/a/c/o/r\', 1, 3, True)\n\n        :param minsegs: Minimum number of segments to be extracted\n        :param maxsegs: Maximum number of segments to be extracted\n        :param rest_with_last: If True, trailing data will be returned as part\n                               of last segment.  If False, and there is\n                               trailing data, raises ValueError.\n        :returns: list of segments with a length of maxsegs (non-existent\n                  segments will return as None)\n        :raises: ValueError if given an invalid path\n        """'
newline|'\n'
name|'return'
name|'split_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'SCRIPT_NAME'"
op|','
string|"''"
op|')'
op|'+'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
nl|'\n'
name|'minsegs'
op|','
name|'maxsegs'
op|','
name|'rest_with_last'
op|')'
newline|'\n'
nl|'\n'
DECL|member|message_length
dedent|''
name|'def'
name|'message_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Properly determine the message length for this request. It will return\n        an integer if the headers explicitly contain the message length, or\n        None if the headers don\'t contain a length. The ValueError exception\n        will be raised if the headers are invalid.\n\n        :raises ValueError: if either transfer-encoding or content-length\n            headers have bad values\n        :raises AttributeError: if the last value of the transfer-encoding\n            header is not "chunked"\n        """'
newline|'\n'
name|'te'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'transfer-encoding'"
op|')'
newline|'\n'
name|'if'
name|'te'
op|':'
newline|'\n'
indent|'            '
name|'encodings'
op|'='
name|'te'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'encodings'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AttributeError'
op|'('
string|"'Unsupported Transfer-Coding header'"
nl|'\n'
string|"' value specified in Transfer-Encoding'"
nl|'\n'
string|"' header'"
op|')'
newline|'\n'
comment|'# If there are more than one transfer encoding value, the last'
nl|'\n'
comment|'# one must be chunked, see RFC 2616 Sec. 3.6'
nl|'\n'
dedent|''
name|'if'
name|'encodings'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'chunked'"
op|':'
newline|'\n'
indent|'                '
name|'chunked'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Transfer-Encoding header value'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chunked'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'chunked'
op|':'
newline|'\n'
comment|'# Because we are not using chunked transfer encoding we can pay'
nl|'\n'
comment|'# attention to the content-length header.'
nl|'\n'
indent|'            '
name|'fsize'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-length'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'fsize'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fsize'
op|'='
name|'int'
op|'('
name|'fsize'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'Invalid Content-Length header value'"
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fsize'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'fsize'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|content_range_header_value
dedent|''
dedent|''
name|'def'
name|'content_range_header_value'
op|'('
name|'start'
op|','
name|'stop'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'bytes %s-%s/%s'"
op|'%'
op|'('
name|'start'
op|','
op|'('
name|'stop'
op|'-'
number|'1'
op|')'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|content_range_header
dedent|''
name|'def'
name|'content_range_header'
op|'('
name|'start'
op|','
name|'stop'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'"Content-Range: "'
op|'+'
name|'content_range_header_value'
op|'('
name|'start'
op|','
name|'stop'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|multi_range_iterator
dedent|''
name|'def'
name|'multi_range_iterator'
op|'('
name|'ranges'
op|','
name|'content_type'
op|','
name|'boundary'
op|','
name|'size'
op|','
name|'sub_iter_gen'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'start'
op|','
name|'stop'
name|'in'
name|'ranges'
op|':'
newline|'\n'
indent|'        '
name|'yield'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'\\r\\n--'"
op|','
name|'boundary'
op|','
string|"'\\r\\n'"
op|','
nl|'\n'
string|"'Content-Type: '"
op|','
name|'content_type'
op|','
string|"'\\r\\n'"
op|']'
op|')'
newline|'\n'
name|'yield'
name|'content_range_header'
op|'('
name|'start'
op|','
name|'stop'
op|','
name|'size'
op|')'
op|'+'
string|"'\\r\\n\\r\\n'"
newline|'\n'
name|'sub_iter'
op|'='
name|'sub_iter_gen'
op|'('
name|'start'
op|','
name|'stop'
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'sub_iter'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'chunk'
newline|'\n'
dedent|''
dedent|''
name|'yield'
string|"'\\r\\n--'"
op|'+'
name|'boundary'
op|'+'
string|"'--\\r\\n'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Response
dedent|''
name|'class'
name|'Response'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    WSGI Response object.\n    """'
newline|'\n'
DECL|variable|content_length
name|'content_length'
op|'='
name|'_header_int_property'
op|'('
string|"'content-length'"
op|')'
newline|'\n'
DECL|variable|content_type
name|'content_type'
op|'='
name|'_resp_content_type_property'
op|'('
op|')'
newline|'\n'
DECL|variable|content_range
name|'content_range'
op|'='
name|'_header_property'
op|'('
string|"'content-range'"
op|')'
newline|'\n'
DECL|variable|etag
name|'etag'
op|'='
name|'_resp_etag_property'
op|'('
op|')'
newline|'\n'
DECL|variable|status
name|'status'
op|'='
name|'_resp_status_property'
op|'('
op|')'
newline|'\n'
DECL|variable|body
name|'body'
op|'='
name|'_resp_body_property'
op|'('
op|')'
newline|'\n'
DECL|variable|host_url
name|'host_url'
op|'='
name|'_host_url_property'
op|'('
op|')'
newline|'\n'
DECL|variable|last_modified
name|'last_modified'
op|'='
name|'_datetime_property'
op|'('
string|"'last-modified'"
op|')'
newline|'\n'
DECL|variable|location
name|'location'
op|'='
name|'_header_property'
op|'('
string|"'location'"
op|')'
newline|'\n'
DECL|variable|accept_ranges
name|'accept_ranges'
op|'='
name|'_header_property'
op|'('
string|"'accept-ranges'"
op|')'
newline|'\n'
DECL|variable|charset
name|'charset'
op|'='
name|'_resp_charset_property'
op|'('
op|')'
newline|'\n'
DECL|variable|app_iter
name|'app_iter'
op|'='
name|'_resp_app_iter_property'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'body'
op|'='
name|'None'
op|','
name|'status'
op|'='
number|'200'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'app_iter'
op|'='
name|'None'
op|','
nl|'\n'
name|'request'
op|'='
name|'None'
op|','
name|'conditional_response'
op|'='
name|'False'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'headers'
op|'='
name|'HeaderKeyDict'
op|'('
nl|'\n'
op|'['
op|'('
string|"'Content-Type'"
op|','
string|"'text/html; charset=UTF-8'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conditional_response'
op|'='
name|'conditional_response'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
name|'self'
op|'.'
name|'app_iter'
op|'='
name|'app_iter'
newline|'\n'
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'boundary'
op|'='
string|'"%.32x"'
op|'%'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'256'
op|'**'
number|'16'
op|')'
newline|'\n'
name|'if'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'='
name|'request'
op|'.'
name|'environ'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'environ'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'.'
name|'update'
op|'('
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'status_int'
op|'=='
number|'401'
name|'and'
string|"'www-authenticate'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'.'
name|'update'
op|'('
op|'{'
string|"'www-authenticate'"
op|':'
name|'self'
op|'.'
name|'www_authenticate'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
comment|"# When specifying both 'content_type' and 'charset' in the kwargs,"
nl|'\n'
comment|'# charset needs to be applied *after* content_type, otherwise charset'
nl|'\n'
comment|'# can get wiped out when content_type sorts later in dict order.'
nl|'\n'
dedent|''
name|'if'
string|"'charset'"
name|'in'
name|'kw'
name|'and'
string|"'content_type'"
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'charset'
op|'='
name|'kw'
op|'['
string|"'charset'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_prepare_for_ranges
dedent|''
dedent|''
name|'def'
name|'_prepare_for_ranges'
op|'('
name|'self'
op|','
name|'ranges'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Prepare the Response for multiple ranges.\n        """'
newline|'\n'
nl|'\n'
name|'content_size'
op|'='
name|'self'
op|'.'
name|'content_length'
newline|'\n'
name|'content_type'
op|'='
name|'self'
op|'.'
name|'content_type'
newline|'\n'
name|'self'
op|'.'
name|'content_type'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'multipart/byteranges;'"
op|','
nl|'\n'
string|"'boundary='"
op|','
name|'self'
op|'.'
name|'boundary'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# This section calculate the total size of the targeted response'
nl|'\n'
comment|'# The value 12 is the length of total bytes of hyphen, new line'
nl|'\n'
comment|'# form feed for each section header. The value 8 is the length of'
nl|'\n'
comment|'# total bytes of hyphen, new line, form feed characters for the'
nl|'\n'
comment|'# closing boundary which appears only once'
nl|'\n'
name|'section_header_fixed_len'
op|'='
number|'12'
op|'+'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'boundary'
op|')'
op|'+'
nl|'\n'
name|'len'
op|'('
string|"'Content-Type: '"
op|')'
op|'+'
nl|'\n'
name|'len'
op|'('
name|'content_type'
op|')'
op|'+'
nl|'\n'
name|'len'
op|'('
string|"'Content-Range: bytes '"
op|')'
op|')'
newline|'\n'
name|'body_size'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'start'
op|','
name|'end'
name|'in'
name|'ranges'
op|':'
newline|'\n'
indent|'            '
name|'body_size'
op|'+='
name|'section_header_fixed_len'
newline|'\n'
name|'body_size'
op|'+='
name|'len'
op|'('
name|'str'
op|'('
name|'start'
op|')'
op|'+'
string|"'-'"
op|'+'
name|'str'
op|'('
name|'end'
op|'-'
number|'1'
op|')'
op|'+'
string|"'/'"
op|'+'
nl|'\n'
name|'str'
op|'('
name|'content_size'
op|')'
op|')'
op|'+'
op|'('
name|'end'
op|'-'
name|'start'
op|')'
newline|'\n'
dedent|''
name|'body_size'
op|'+='
number|'8'
op|'+'
name|'len'
op|'('
name|'self'
op|'.'
name|'boundary'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
name|'body_size'
newline|'\n'
name|'self'
op|'.'
name|'content_range'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'content_size'
op|','
name|'content_type'
newline|'\n'
nl|'\n'
DECL|member|_response_iter
dedent|''
name|'def'
name|'_response_iter'
op|'('
name|'self'
op|','
name|'app_iter'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'conditional_response'
name|'and'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'etag'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_none_match'
name|'and'
name|'self'
op|'.'
name|'etag'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_none_match'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'304'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'etag'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_match'
name|'and'
name|'self'
op|'.'
name|'etag'
name|'not'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_match'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'412'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'status_int'
op|'=='
number|'404'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_match'
name|'and'
string|"'*'"
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_match'
op|':'
newline|'\n'
comment|'# If none of the entity tags match, or if "*" is given and no'
nl|'\n'
comment|'# current entity exists, the server MUST NOT perform the'
nl|'\n'
comment|'# requested method, and MUST return a 412 (Precondition'
nl|'\n'
comment|'# Failed) response. [RFC 2616 section 14.24]'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'412'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'last_modified'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_modified_since'
name|'and'
name|'self'
op|'.'
name|'last_modified'
op|'<='
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_modified_since'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'304'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'last_modified'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_unmodified_since'
name|'and'
name|'self'
op|'.'
name|'last_modified'
op|'>'
name|'self'
op|'.'
name|'request'
op|'.'
name|'if_unmodified_since'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'412'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'request'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|"'HEAD'"
op|':'
newline|'\n'
comment|'# We explicitly do NOT want to set self.content_length to 0 here'
nl|'\n'
indent|'            '
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'conditional_response'
name|'and'
name|'self'
op|'.'
name|'request'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'range'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'range'
op|'.'
name|'ranges'
name|'and'
name|'not'
name|'self'
op|'.'
name|'content_range'
op|':'
newline|'\n'
indent|'            '
name|'ranges'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'range'
op|'.'
name|'ranges_for_length'
op|'('
name|'self'
op|'.'
name|'content_length'
op|')'
newline|'\n'
name|'if'
name|'ranges'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'status'
op|'='
number|'416'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
number|'0'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'ranges'
op|':'
newline|'\n'
indent|'                '
name|'range_size'
op|'='
name|'len'
op|'('
name|'ranges'
op|')'
newline|'\n'
name|'if'
name|'range_size'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# There is at least one valid range in the request, so try'
nl|'\n'
comment|'# to satisfy the request'
nl|'\n'
indent|'                    '
name|'if'
name|'range_size'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'start'
op|','
name|'end'
op|'='
name|'ranges'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'app_iter'
name|'and'
name|'hasattr'
op|'('
name|'app_iter'
op|','
string|"'app_iter_range'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'status'
op|'='
number|'206'
newline|'\n'
name|'self'
op|'.'
name|'content_range'
op|'='
name|'content_range_header_value'
op|'('
nl|'\n'
name|'start'
op|','
name|'end'
op|','
name|'self'
op|'.'
name|'content_length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
op|'('
name|'end'
op|'-'
name|'start'
op|')'
newline|'\n'
name|'return'
name|'app_iter'
op|'.'
name|'app_iter_range'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'body'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'status'
op|'='
number|'206'
newline|'\n'
name|'self'
op|'.'
name|'content_range'
op|'='
name|'content_range_header_value'
op|'('
nl|'\n'
name|'start'
op|','
name|'end'
op|','
name|'self'
op|'.'
name|'content_length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content_length'
op|'='
op|'('
name|'end'
op|'-'
name|'start'
op|')'
newline|'\n'
name|'return'
op|'['
name|'body'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'range_size'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'app_iter'
name|'and'
name|'hasattr'
op|'('
name|'app_iter'
op|','
string|"'app_iter_ranges'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'status'
op|'='
number|'206'
newline|'\n'
name|'content_size'
op|','
name|'content_type'
op|'='
name|'self'
op|'.'
name|'_prepare_for_ranges'
op|'('
name|'ranges'
op|')'
newline|'\n'
name|'return'
name|'app_iter'
op|'.'
name|'app_iter_ranges'
op|'('
name|'ranges'
op|','
nl|'\n'
name|'content_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'boundary'
op|','
nl|'\n'
name|'content_size'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'body'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'status'
op|'='
number|'206'
newline|'\n'
name|'content_size'
op|','
name|'content_type'
op|','
op|'='
name|'self'
op|'.'
name|'_prepare_for_ranges'
op|'('
name|'ranges'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_body_slicer
name|'def'
name|'_body_slicer'
op|'('
name|'start'
op|','
name|'stop'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'yield'
name|'body'
op|'['
name|'start'
op|':'
name|'stop'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'multi_range_iterator'
op|'('
name|'ranges'
op|','
name|'content_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'boundary'
op|','
nl|'\n'
name|'content_size'
op|','
nl|'\n'
name|'_body_slicer'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'app_iter'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'app_iter'
newline|'\n'
dedent|''
name|'if'
name|'body'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'body'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'status_int'
name|'in'
name|'RESPONSE_REASONS'
op|':'
newline|'\n'
indent|'            '
name|'title'
op|','
name|'exp'
op|'='
name|'RESPONSE_REASONS'
op|'['
name|'self'
op|'.'
name|'status_int'
op|']'
newline|'\n'
name|'if'
name|'exp'
op|':'
newline|'\n'
indent|'                '
name|'body'
op|'='
string|"'<html><h1>%s</h1><p>%s</p></html>'"
op|'%'
op|'('
name|'title'
op|','
name|'exp'
op|')'
newline|'\n'
name|'if'
string|"'%('"
name|'in'
name|'body'
op|':'
newline|'\n'
indent|'                    '
name|'body'
op|'='
name|'body'
op|'%'
name|'defaultdict'
op|'('
name|'lambda'
op|':'
string|"'unknown'"
op|','
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'content_length'
op|'='
name|'len'
op|'('
name|'body'
op|')'
newline|'\n'
name|'return'
op|'['
name|'body'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'['
string|"''"
op|']'
newline|'\n'
nl|'\n'
DECL|member|absolute_location
dedent|''
name|'def'
name|'absolute_location'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attempt to construct an absolute location.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'location'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'location'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'host_url'
op|'+'
name|'self'
op|'.'
name|'location'
newline|'\n'
nl|'\n'
DECL|member|www_authenticate
dedent|''
name|'def'
name|'www_authenticate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Construct a suitable value for WWW-Authenticate response header\n\n        If we have a request and a valid-looking path, the realm\n        is the account; otherwise we set it to \'unknown\'.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vrs'
op|','
name|'realm'
op|','
name|'rest'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'split_path'
op|'('
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
name|'if'
name|'realm'
name|'in'
op|'('
string|"'v1.0'"
op|','
string|"'auth'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'realm'
op|'='
string|"'unknown'"
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'realm'
op|'='
string|"'unknown'"
newline|'\n'
dedent|''
name|'return'
string|'\'Swift realm="%s"\''
op|'%'
name|'urllib2'
op|'.'
name|'quote'
op|'('
name|'realm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|is_success
name|'def'
name|'is_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'status_int'
op|'//'
number|'100'
op|'=='
number|'2'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Respond to the WSGI request.\n\n        .. warning::\n\n            This will translate any relative Location header value to an\n            absolute URL using the WSGI environment\'s HOST_URL as a\n            prefix, as RFC 2616 specifies.\n\n            However, it is quite common to use relative redirects,\n            especially when it is difficult to know the exact HOST_URL\n            the browser would have used when behind several CNAMEs, CDN\n            services, etc. All modern browsers support relative\n            redirects.\n\n            To skip over RFC enforcement of the Location header value,\n            you may set ``env[\'swift.leave_relative_location\'] = True``\n            in the WSGI environment.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'='
name|'Request'
op|'('
name|'env'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'environ'
op|'='
name|'env'
newline|'\n'
name|'app_iter'
op|'='
name|'self'
op|'.'
name|'_response_iter'
op|'('
name|'self'
op|'.'
name|'app_iter'
op|','
name|'self'
op|'.'
name|'_body'
op|')'
newline|'\n'
name|'if'
string|"'location'"
name|'in'
name|'self'
op|'.'
name|'headers'
name|'and'
name|'not'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.leave_relative_location'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'location'
op|'='
name|'self'
op|'.'
name|'absolute_location'
op|'('
op|')'
newline|'\n'
dedent|''
name|'start_response'
op|'('
name|'self'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'app_iter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPException
dedent|''
dedent|''
name|'class'
name|'HTTPException'
op|'('
name|'Response'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Response'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'Exception'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wsgify
dedent|''
dedent|''
name|'def'
name|'wsgify'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A decorator for translating functions which take a swob Request object and\n    return a Response object into WSGI callables.  Also catches any raised\n    HTTPExceptions and treats them as a returned Response.\n    """'
newline|'\n'
name|'argspec'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'func'
op|')'
newline|'\n'
name|'if'
name|'argspec'
op|'.'
name|'args'
name|'and'
name|'argspec'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'self'"
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|_wsgify_self
name|'def'
name|'_wsgify_self'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'func'
op|'('
name|'self'
op|','
name|'Request'
op|'('
name|'env'
op|')'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'HTTPException'
name|'as'
name|'err_resp'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'err_resp'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'_wsgify_self'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|_wsgify_bare
name|'def'
name|'_wsgify_bare'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'func'
op|'('
name|'Request'
op|'('
name|'env'
op|')'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'HTTPException'
name|'as'
name|'err_resp'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'err_resp'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'_wsgify_bare'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StatusMap
dedent|''
dedent|''
name|'class'
name|'StatusMap'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dict-like object that returns HTTPException subclasses/factory functions\n    where the given key is the status code.\n    """'
newline|'\n'
DECL|member|__getitem__
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'partial'
op|'('
name|'HTTPException'
op|','
name|'status'
op|'='
name|'key'
op|')'
newline|'\n'
DECL|variable|status_map
dedent|''
dedent|''
name|'status_map'
op|'='
name|'StatusMap'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|HTTPOk
name|'HTTPOk'
op|'='
name|'status_map'
op|'['
number|'200'
op|']'
newline|'\n'
DECL|variable|HTTPCreated
name|'HTTPCreated'
op|'='
name|'status_map'
op|'['
number|'201'
op|']'
newline|'\n'
DECL|variable|HTTPAccepted
name|'HTTPAccepted'
op|'='
name|'status_map'
op|'['
number|'202'
op|']'
newline|'\n'
DECL|variable|HTTPNoContent
name|'HTTPNoContent'
op|'='
name|'status_map'
op|'['
number|'204'
op|']'
newline|'\n'
DECL|variable|HTTPMovedPermanently
name|'HTTPMovedPermanently'
op|'='
name|'status_map'
op|'['
number|'301'
op|']'
newline|'\n'
DECL|variable|HTTPFound
name|'HTTPFound'
op|'='
name|'status_map'
op|'['
number|'302'
op|']'
newline|'\n'
DECL|variable|HTTPSeeOther
name|'HTTPSeeOther'
op|'='
name|'status_map'
op|'['
number|'303'
op|']'
newline|'\n'
DECL|variable|HTTPNotModified
name|'HTTPNotModified'
op|'='
name|'status_map'
op|'['
number|'304'
op|']'
newline|'\n'
DECL|variable|HTTPTemporaryRedirect
name|'HTTPTemporaryRedirect'
op|'='
name|'status_map'
op|'['
number|'307'
op|']'
newline|'\n'
DECL|variable|HTTPBadRequest
name|'HTTPBadRequest'
op|'='
name|'status_map'
op|'['
number|'400'
op|']'
newline|'\n'
DECL|variable|HTTPUnauthorized
name|'HTTPUnauthorized'
op|'='
name|'status_map'
op|'['
number|'401'
op|']'
newline|'\n'
DECL|variable|HTTPForbidden
name|'HTTPForbidden'
op|'='
name|'status_map'
op|'['
number|'403'
op|']'
newline|'\n'
DECL|variable|HTTPMethodNotAllowed
name|'HTTPMethodNotAllowed'
op|'='
name|'status_map'
op|'['
number|'405'
op|']'
newline|'\n'
DECL|variable|HTTPNotFound
name|'HTTPNotFound'
op|'='
name|'status_map'
op|'['
number|'404'
op|']'
newline|'\n'
DECL|variable|HTTPNotAcceptable
name|'HTTPNotAcceptable'
op|'='
name|'status_map'
op|'['
number|'406'
op|']'
newline|'\n'
DECL|variable|HTTPRequestTimeout
name|'HTTPRequestTimeout'
op|'='
name|'status_map'
op|'['
number|'408'
op|']'
newline|'\n'
DECL|variable|HTTPConflict
name|'HTTPConflict'
op|'='
name|'status_map'
op|'['
number|'409'
op|']'
newline|'\n'
DECL|variable|HTTPLengthRequired
name|'HTTPLengthRequired'
op|'='
name|'status_map'
op|'['
number|'411'
op|']'
newline|'\n'
DECL|variable|HTTPPreconditionFailed
name|'HTTPPreconditionFailed'
op|'='
name|'status_map'
op|'['
number|'412'
op|']'
newline|'\n'
DECL|variable|HTTPRequestEntityTooLarge
name|'HTTPRequestEntityTooLarge'
op|'='
name|'status_map'
op|'['
number|'413'
op|']'
newline|'\n'
DECL|variable|HTTPRequestedRangeNotSatisfiable
name|'HTTPRequestedRangeNotSatisfiable'
op|'='
name|'status_map'
op|'['
number|'416'
op|']'
newline|'\n'
DECL|variable|HTTPUnprocessableEntity
name|'HTTPUnprocessableEntity'
op|'='
name|'status_map'
op|'['
number|'422'
op|']'
newline|'\n'
DECL|variable|HTTPClientDisconnect
name|'HTTPClientDisconnect'
op|'='
name|'status_map'
op|'['
number|'499'
op|']'
newline|'\n'
DECL|variable|HTTPServerError
name|'HTTPServerError'
op|'='
name|'status_map'
op|'['
number|'500'
op|']'
newline|'\n'
DECL|variable|HTTPInternalServerError
name|'HTTPInternalServerError'
op|'='
name|'status_map'
op|'['
number|'500'
op|']'
newline|'\n'
DECL|variable|HTTPNotImplemented
name|'HTTPNotImplemented'
op|'='
name|'status_map'
op|'['
number|'501'
op|']'
newline|'\n'
DECL|variable|HTTPBadGateway
name|'HTTPBadGateway'
op|'='
name|'status_map'
op|'['
number|'502'
op|']'
newline|'\n'
DECL|variable|HTTPServiceUnavailable
name|'HTTPServiceUnavailable'
op|'='
name|'status_map'
op|'['
number|'503'
op|']'
newline|'\n'
DECL|variable|HTTPInsufficientStorage
name|'HTTPInsufficientStorage'
op|'='
name|'status_map'
op|'['
number|'507'
op|']'
newline|'\n'
endmarker|''
end_unit
