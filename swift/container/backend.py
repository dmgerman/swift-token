begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nPluggable Back-ends for Container Server\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'uuid'
name|'import'
name|'uuid4'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
nl|'\n'
name|'import'
name|'sqlite3'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'Timestamp'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'db'
name|'import'
name|'DatabaseBroker'
op|','
name|'utf8encode'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|SQLITE_ARG_LIMIT
name|'SQLITE_ARG_LIMIT'
op|'='
number|'999'
newline|'\n'
nl|'\n'
DECL|variable|DATADIR
name|'DATADIR'
op|'='
string|"'containers'"
newline|'\n'
nl|'\n'
name|'POLICY_STAT_TABLE_CREATE'
op|'='
string|"'''\n    CREATE TABLE policy_stat (\n        storage_policy_index INTEGER PRIMARY KEY,\n        object_count INTEGER DEFAULT 0,\n        bytes_used INTEGER DEFAULT 0\n    );\n'''"
newline|'\n'
nl|'\n'
name|'POLICY_STAT_TRIGGER_SCRIPT'
op|'='
string|"'''\n    CREATE TRIGGER object_insert_policy_stat AFTER INSERT ON object\n    BEGIN\n        UPDATE policy_stat\n        SET object_count = object_count + (1 - new.deleted),\n            bytes_used = bytes_used + new.size\n        WHERE storage_policy_index = new.storage_policy_index;\n        INSERT INTO policy_stat (\n            storage_policy_index, object_count, bytes_used)\n        SELECT new.storage_policy_index,\n               (1 - new.deleted),\n               new.size\n        WHERE NOT EXISTS(\n            SELECT changes() as change\n            FROM policy_stat\n            WHERE change <> 0\n        );\n        UPDATE container_info\n        SET hash = chexor(hash, new.name, new.created_at);\n    END;\n\n    CREATE TRIGGER object_delete_policy_stat AFTER DELETE ON object\n    BEGIN\n        UPDATE policy_stat\n        SET object_count = object_count - (1 - old.deleted),\n            bytes_used = bytes_used - old.size\n        WHERE storage_policy_index = old.storage_policy_index;\n        UPDATE container_info\n        SET hash = chexor(hash, old.name, old.created_at);\n    END;\n'''"
newline|'\n'
nl|'\n'
name|'CONTAINER_INFO_TABLE_SCRIPT'
op|'='
string|"'''\n    CREATE TABLE container_info (\n        account TEXT,\n        container TEXT,\n        created_at TEXT,\n        put_timestamp TEXT DEFAULT '0',\n        delete_timestamp TEXT DEFAULT '0',\n        reported_put_timestamp TEXT DEFAULT '0',\n        reported_delete_timestamp TEXT DEFAULT '0',\n        reported_object_count INTEGER DEFAULT 0,\n        reported_bytes_used INTEGER DEFAULT 0,\n        hash TEXT default '00000000000000000000000000000000',\n        id TEXT,\n        status TEXT DEFAULT '',\n        status_changed_at TEXT DEFAULT '0',\n        metadata TEXT DEFAULT '',\n        x_container_sync_point1 INTEGER DEFAULT -1,\n        x_container_sync_point2 INTEGER DEFAULT -1,\n        storage_policy_index INTEGER DEFAULT 0,\n        reconciler_sync_point INTEGER DEFAULT -1\n    );\n'''"
newline|'\n'
nl|'\n'
name|'CONTAINER_STAT_VIEW_SCRIPT'
op|'='
string|"'''\n    CREATE VIEW container_stat\n    AS SELECT ci.account, ci.container, ci.created_at,\n        ci.put_timestamp, ci.delete_timestamp,\n        ci.reported_put_timestamp, ci.reported_delete_timestamp,\n        ci.reported_object_count, ci.reported_bytes_used, ci.hash,\n        ci.id, ci.status, ci.status_changed_at, ci.metadata,\n        ci.x_container_sync_point1, ci.x_container_sync_point2,\n        ci.reconciler_sync_point,\n        ci.storage_policy_index,\n        coalesce(ps.object_count, 0) AS object_count,\n        coalesce(ps.bytes_used, 0) AS bytes_used\n    FROM container_info ci LEFT JOIN policy_stat ps\n    ON ci.storage_policy_index = ps.storage_policy_index;\n\n    CREATE TRIGGER container_stat_update\n    INSTEAD OF UPDATE ON container_stat\n    BEGIN\n        UPDATE container_info\n        SET account = NEW.account,\n            container = NEW.container,\n            created_at = NEW.created_at,\n            put_timestamp = NEW.put_timestamp,\n            delete_timestamp = NEW.delete_timestamp,\n            reported_put_timestamp = NEW.reported_put_timestamp,\n            reported_delete_timestamp = NEW.reported_delete_timestamp,\n            reported_object_count = NEW.reported_object_count,\n            reported_bytes_used = NEW.reported_bytes_used,\n            hash = NEW.hash,\n            id = NEW.id,\n            status = NEW.status,\n            status_changed_at = NEW.status_changed_at,\n            metadata = NEW.metadata,\n            x_container_sync_point1 = NEW.x_container_sync_point1,\n            x_container_sync_point2 = NEW.x_container_sync_point2,\n            storage_policy_index = NEW.storage_policy_index,\n            reconciler_sync_point = NEW.reconciler_sync_point;\n    END;\n'''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainerBroker
name|'class'
name|'ContainerBroker'
op|'('
name|'DatabaseBroker'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encapsulates working with a container database."""'
newline|'\n'
DECL|variable|db_type
name|'db_type'
op|'='
string|"'container'"
newline|'\n'
DECL|variable|db_contains_type
name|'db_contains_type'
op|'='
string|"'object'"
newline|'\n'
DECL|variable|db_reclaim_timestamp
name|'db_reclaim_timestamp'
op|'='
string|"'created_at'"
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|storage_policy_index
name|'def'
name|'storage_policy_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'_storage_policy_index'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_storage_policy_index'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
op|')'
op|'['
string|"'storage_policy_index'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_storage_policy_index'
newline|'\n'
nl|'\n'
DECL|member|_initialize
dedent|''
name|'def'
name|'_initialize'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|','
name|'storage_policy_index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a brand new container database (tables, indices, triggers, etc.)\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Attempting to create a new database with no account set'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'container'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Attempting to create a new database with no container set'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'storage_policy_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'storage_policy_index'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'create_object_table'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_policy_stat_table'
op|'('
name|'conn'
op|','
name|'storage_policy_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_container_info_table'
op|'('
name|'conn'
op|','
name|'put_timestamp'
op|','
nl|'\n'
name|'storage_policy_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_object_table
dedent|''
name|'def'
name|'create_object_table'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the object table which is specific to the container DB.\n        Not a part of Pluggable Back-ends, internal to the baseline code.\n\n        :param conn: DB connection object\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n            CREATE TABLE object (\n                ROWID INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT,\n                created_at TEXT,\n                size INTEGER,\n                content_type TEXT,\n                etag TEXT,\n                deleted INTEGER DEFAULT 0,\n                storage_policy_index INTEGER DEFAULT 0\n            );\n\n            CREATE INDEX ix_object_deleted_name ON object (deleted, name);\n\n            CREATE TRIGGER object_update BEFORE UPDATE ON object\n            BEGIN\n                SELECT RAISE(FAIL, \'UPDATE not allowed; DELETE and INSERT\');\n            END;\n\n        """'
op|'+'
name|'POLICY_STAT_TRIGGER_SCRIPT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_container_info_table
dedent|''
name|'def'
name|'create_container_info_table'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'put_timestamp'
op|','
nl|'\n'
name|'storage_policy_index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create the container_info table which is specific to the container DB.\n        Not a part of Pluggable Back-ends, internal to the baseline code.\n        Also creates the container_stat view.\n\n        :param conn: DB connection object\n        :param put_timestamp: put timestamp\n        :param storage_policy_index: storage policy index\n        """'
newline|'\n'
name|'if'
name|'put_timestamp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'Timestamp'
op|'('
number|'0'
op|')'
op|'.'
name|'internal'
newline|'\n'
comment|'# The container_stat view is for compatibility; old versions of Swift'
nl|'\n'
comment|'# expected a container_stat table with columns "object_count" and'
nl|'\n'
comment|'# "bytes_used", but when that stuff became per-storage-policy and'
nl|'\n'
comment|'# moved to the policy_stat table, we stopped creating those columns in'
nl|'\n'
comment|'# container_stat.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# To retain compatibility, we create the container_stat view with some'
nl|'\n'
comment|'# triggers to make it behave like the old container_stat table. This'
nl|'\n'
comment|'# way, if an old version of Swift encounters a database with the new'
nl|'\n'
comment|'# schema, it can still work.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that this can occur during a rolling Swift upgrade if a DB gets'
nl|'\n'
comment|"# rsynced from an old node to a new, so it's necessary for"
nl|'\n'
comment|'# availability during upgrades. The fact that it enables downgrades is'
nl|'\n'
comment|'# a nice bonus.'
nl|'\n'
dedent|''
name|'conn'
op|'.'
name|'executescript'
op|'('
name|'CONTAINER_INFO_TABLE_SCRIPT'
op|'+'
nl|'\n'
name|'CONTAINER_STAT_VIEW_SCRIPT'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n            INSERT INTO container_info (account, container, created_at, id,\n                put_timestamp, status_changed_at, storage_policy_index)\n            VALUES (?, ?, ?, ?, ?, ?, ?);\n        """'
op|','
op|'('
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|','
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'str'
op|'('
name|'uuid4'
op|'('
op|')'
op|')'
op|','
name|'put_timestamp'
op|','
name|'put_timestamp'
op|','
nl|'\n'
name|'storage_policy_index'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_policy_stat_table
dedent|''
name|'def'
name|'create_policy_stat_table'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'storage_policy_index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create policy_stat table.\n\n        :param conn: DB connection object\n        :param storage_policy_index: the policy_index the container is\n                                     being created with\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
name|'POLICY_STAT_TABLE_CREATE'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n            INSERT INTO policy_stat (storage_policy_index)\n            VALUES (?)\n        """'
op|','
op|'('
name|'storage_policy_index'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_version
dedent|''
name|'def'
name|'get_db_version'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_db_version'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT name FROM sqlite_master\n                    WHERE name = 'ix_object_deleted_name' '''"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_db_version'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_db_version'
newline|'\n'
nl|'\n'
DECL|member|_newid
dedent|''
name|'def'
name|'_newid'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n            UPDATE container_stat\n            SET reported_put_timestamp = 0, reported_delete_timestamp = 0,\n                reported_object_count = 0, reported_bytes_used = 0'''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_db
dedent|''
name|'def'
name|'_delete_db'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'timestamp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark the DB as deleted\n\n        :param conn: DB connection object\n        :param timestamp: timestamp to mark as deleted\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|'"""\n            UPDATE container_stat\n            SET delete_timestamp = ?,\n                status = \'DELETED\',\n                status_changed_at = ?\n            WHERE delete_timestamp < ? """'
op|','
op|'('
name|'timestamp'
op|','
name|'timestamp'
op|','
name|'timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_commit_puts_load
dedent|''
name|'def'
name|'_commit_puts_load'
op|'('
name|'self'
op|','
name|'item_list'
op|','
name|'entry'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See :func:`swift.common.db.DatabaseBroker._commit_puts_load`"""'
newline|'\n'
name|'data'
op|'='
name|'pickle'
op|'.'
name|'loads'
op|'('
name|'entry'
op|'.'
name|'decode'
op|'('
string|"'base64'"
op|')'
op|')'
newline|'\n'
op|'('
name|'name'
op|','
name|'timestamp'
op|','
name|'size'
op|','
name|'content_type'
op|','
name|'etag'
op|','
name|'deleted'
op|')'
op|'='
name|'data'
op|'['
op|':'
number|'6'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'>'
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'storage_policy_index'
op|'='
name|'data'
op|'['
number|'6'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'storage_policy_index'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'item_list'
op|'.'
name|'append'
op|'('
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'timestamp'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'content_type'"
op|':'
name|'content_type'
op|','
nl|'\n'
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|','
nl|'\n'
string|"'storage_policy_index'"
op|':'
name|'storage_policy_index'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|empty
dedent|''
name|'def'
name|'empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if container DB is empty.\n\n        :returns: True if the database has no active objects, False otherwise\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'SELECT max(object_count) from policy_stat'"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'any'
op|'('
name|'msg'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
name|'for'
name|'msg'
name|'in'
op|'('
nl|'\n'
string|'"no such column: storage_policy_index"'
op|','
nl|'\n'
string|'"no such table: policy_stat"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'row'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'SELECT object_count from container_stat'"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'row'
op|'['
number|'0'
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_object
dedent|''
dedent|''
name|'def'
name|'delete_object'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timestamp'
op|','
name|'storage_policy_index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark an object deleted.\n\n        :param name: object name to be deleted\n        :param timestamp: timestamp when the object was marked as deleted\n        """'
newline|'\n'
name|'self'
op|'.'
name|'put_object'
op|'('
name|'name'
op|','
name|'timestamp'
op|','
number|'0'
op|','
string|"'application/deleted'"
op|','
string|"'noetag'"
op|','
nl|'\n'
name|'deleted'
op|'='
number|'1'
op|','
name|'storage_policy_index'
op|'='
name|'storage_policy_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_tuple_for_pickle
dedent|''
name|'def'
name|'make_tuple_for_pickle'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'record'
op|'['
string|"'name'"
op|']'
op|','
name|'record'
op|'['
string|"'created_at'"
op|']'
op|','
name|'record'
op|'['
string|"'size'"
op|']'
op|','
nl|'\n'
name|'record'
op|'['
string|"'content_type'"
op|']'
op|','
name|'record'
op|'['
string|"'etag'"
op|']'
op|','
name|'record'
op|'['
string|"'deleted'"
op|']'
op|','
nl|'\n'
name|'record'
op|'['
string|"'storage_policy_index'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|put_object
dedent|''
name|'def'
name|'put_object'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'timestamp'
op|','
name|'size'
op|','
name|'content_type'
op|','
name|'etag'
op|','
name|'deleted'
op|'='
number|'0'
op|','
nl|'\n'
name|'storage_policy_index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates an object in the DB with its metadata.\n\n        :param name: object name to be created\n        :param timestamp: timestamp of when the object was created\n        :param size: object size\n        :param content_type: object content-type\n        :param etag: object etag\n        :param deleted: if True, marks the object as deleted and sets the\n                        deleted_at timestamp to timestamp\n        :param storage_policy_index: the storage policy index for the object\n        """'
newline|'\n'
name|'record'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'created_at'"
op|':'
name|'timestamp'
op|','
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'content_type'"
op|':'
name|'content_type'
op|','
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'deleted'
op|','
nl|'\n'
string|"'storage_policy_index'"
op|':'
name|'storage_policy_index'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'put_record'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_deleted_info
dedent|''
name|'def'
name|'_is_deleted_info'
op|'('
name|'self'
op|','
name|'object_count'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Apply delete logic to database info.\n\n        :returns: True if the DB is considered to be deleted, False otherwise\n        """'
newline|'\n'
comment|'# The container is considered deleted if the delete_timestamp'
nl|'\n'
comment|'# value is greater than the put_timestamp, and there are no'
nl|'\n'
comment|'# objects in the container.'
nl|'\n'
name|'return'
op|'('
name|'object_count'
name|'in'
op|'('
name|'None'
op|','
string|"''"
op|','
number|'0'
op|','
string|"'0'"
op|')'
op|')'
name|'and'
op|'('
nl|'\n'
name|'Timestamp'
op|'('
name|'delete_timestamp'
op|')'
op|'>'
name|'Timestamp'
op|'('
name|'put_timestamp'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_deleted
dedent|''
name|'def'
name|'_is_deleted'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check container_stat view and evaluate info.\n\n        :param conn: database conn\n\n        :returns: True if the DB is considered to be deleted, False otherwise\n        """'
newline|'\n'
name|'info'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n            SELECT put_timestamp, delete_timestamp, object_count\n            FROM container_stat'''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_is_deleted_info'
op|'('
op|'**'
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info_is_deleted
dedent|''
name|'def'
name|'get_info_is_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the is_deleted status and info for the container.\n\n        :returns: a tuple, in the form (info, is_deleted) info is a dict as\n                  returned by get_info and is_deleted is a boolean.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'db_file'
op|'!='
string|"':memory:'"
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'db_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
op|','
name|'True'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
op|')'
newline|'\n'
name|'return'
name|'info'
op|','
name|'self'
op|'.'
name|'_is_deleted_info'
op|'('
op|'**'
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get global data for the container.\n\n        :returns: dict with keys: account, container, created_at,\n                  put_timestamp, delete_timestamp, status_changed_at,\n                  object_count, bytes_used, reported_put_timestamp,\n                  reported_delete_timestamp, reported_object_count,\n                  reported_bytes_used, hash, id, x_container_sync_point1,\n                  x_container_sync_point2, and storage_policy_index.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'None'
newline|'\n'
name|'trailing_sync'
op|'='
string|"'x_container_sync_point1, x_container_sync_point2'"
newline|'\n'
name|'trailing_pol'
op|'='
string|"'storage_policy_index'"
newline|'\n'
name|'errors'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'while'
name|'not'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'data'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
op|'('
string|"'''\n                        SELECT account, container, created_at, put_timestamp,\n                            delete_timestamp, status_changed_at,\n                            object_count, bytes_used,\n                            reported_put_timestamp, reported_delete_timestamp,\n                            reported_object_count, reported_bytes_used, hash,\n                            id, %s, %s\n                            FROM container_stat\n                    '''"
op|')'
op|'%'
op|'('
name|'trailing_sync'
op|','
name|'trailing_pol'
op|')'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'err_msg'
op|'='
name|'str'
op|'('
name|'err'
op|')'
newline|'\n'
name|'if'
name|'err_msg'
name|'in'
name|'errors'
op|':'
newline|'\n'
comment|'# only attempt migration once'
nl|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
name|'errors'
op|'.'
name|'add'
op|'('
name|'err_msg'
op|')'
newline|'\n'
name|'if'
string|"'no such column: storage_policy_index'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                        '
name|'trailing_pol'
op|'='
string|"'0 AS storage_policy_index'"
newline|'\n'
dedent|''
name|'elif'
string|"'no such column: x_container_sync_point'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                        '
name|'trailing_sync'
op|'='
string|"'-1 AS x_container_sync_point1, '"
string|"'-1 AS x_container_sync_point2'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'data'
op|'='
name|'dict'
op|'('
name|'data'
op|')'
newline|'\n'
comment|'# populate instance cache'
nl|'\n'
name|'self'
op|'.'
name|'_storage_policy_index'
op|'='
name|'data'
op|'['
string|"'storage_policy_index'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'account'
op|'='
name|'data'
op|'['
string|"'account'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'container'
op|'='
name|'data'
op|'['
string|"'container'"
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|set_x_container_sync_points
dedent|''
dedent|''
name|'def'
name|'set_x_container_sync_points'
op|'('
name|'self'
op|','
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_x_container_sync_points'
op|'('
name|'conn'
op|','
name|'sync_point1'
op|','
nl|'\n'
name|'sync_point2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: x_container_sync_point'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_migrate_add_container_sync_points'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_x_container_sync_points'
op|'('
name|'conn'
op|','
name|'sync_point1'
op|','
nl|'\n'
name|'sync_point2'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_x_container_sync_points
dedent|''
dedent|''
name|'def'
name|'_set_x_container_sync_points'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sync_point1'
name|'is'
name|'not'
name|'None'
name|'and'
name|'sync_point2'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point1 = ?,\n                    x_container_sync_point2 = ?\n            '''"
op|','
op|'('
name|'sync_point1'
op|','
name|'sync_point2'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sync_point1'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point1 = ?\n            '''"
op|','
op|'('
name|'sync_point1'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sync_point2'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET x_container_sync_point2 = ?\n            '''"
op|','
op|'('
name|'sync_point2'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_policy_stats
dedent|''
dedent|''
name|'def'
name|'get_policy_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT storage_policy_index, object_count, bytes_used\n                    FROM policy_stat\n                '''"
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'any'
op|'('
name|'msg'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
name|'for'
name|'msg'
name|'in'
op|'('
nl|'\n'
string|'"no such column: storage_policy_index"'
op|','
nl|'\n'
string|'"no such table: policy_stat"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT 0 as storage_policy_index, object_count, bytes_used\n                    FROM container_stat\n                '''"
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'policy_stats'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'stats'
op|'='
name|'dict'
op|'('
name|'row'
op|')'
newline|'\n'
name|'key'
op|'='
name|'stats'
op|'.'
name|'pop'
op|'('
string|"'storage_policy_index'"
op|')'
newline|'\n'
name|'policy_stats'
op|'['
name|'key'
op|']'
op|'='
name|'stats'
newline|'\n'
dedent|''
name|'return'
name|'policy_stats'
newline|'\n'
nl|'\n'
DECL|member|has_multiple_policies
dedent|''
name|'def'
name|'has_multiple_policies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT count(storage_policy_index)\n                    FROM policy_stat\n                    '''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such table: policy_stat'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
comment|'# no policy_stat row'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'curs'
name|'and'
name|'curs'
op|'['
number|'0'
op|']'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
comment|'# only one policy_stat row'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|set_storage_policy_index
dedent|''
dedent|''
name|'def'
name|'set_storage_policy_index'
op|'('
name|'self'
op|','
name|'policy_index'
op|','
name|'timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update the container_stat policy_index and status_changed_at.\n        """'
newline|'\n'
name|'if'
name|'timestamp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
nl|'\n'
DECL|function|_setit
dedent|''
name|'def'
name|'_setit'
op|'('
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                INSERT OR IGNORE INTO policy_stat (storage_policy_index)\n                VALUES (?)\n             '''"
op|','
op|'('
name|'policy_index'
op|','
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET storage_policy_index = ?,\n                    status_changed_at = MAX(?, status_changed_at)\n                WHERE storage_policy_index <> ?\n            '''"
op|','
op|'('
name|'policy_index'
op|','
name|'timestamp'
op|','
name|'policy_index'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_setit'
op|'('
name|'conn'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'any'
op|'('
name|'msg'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
name|'for'
name|'msg'
name|'in'
op|'('
nl|'\n'
string|'"no such column: storage_policy_index"'
op|','
nl|'\n'
string|'"no such table: policy_stat"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_migrate_add_storage_policy'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'_setit'
op|'('
name|'conn'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_storage_policy_index'
op|'='
name|'policy_index'
newline|'\n'
nl|'\n'
DECL|member|reported
dedent|''
name|'def'
name|'reported'
op|'('
name|'self'
op|','
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
name|'object_count'
op|','
nl|'\n'
name|'bytes_used'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update reported stats, available with container\'s `get_info`.\n\n        :param put_timestamp: put_timestamp to update\n        :param delete_timestamp: delete_timestamp to update\n        :param object_count: object_count to update\n        :param bytes_used: bytes_used to update\n        """'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                UPDATE container_stat\n                SET reported_put_timestamp = ?, reported_delete_timestamp = ?,\n                    reported_object_count = ?, reported_bytes_used = ?\n            '''"
op|','
op|'('
name|'put_timestamp'
op|','
name|'delete_timestamp'
op|','
name|'object_count'
op|','
name|'bytes_used'
op|')'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_objects_iter
dedent|''
dedent|''
name|'def'
name|'list_objects_iter'
op|'('
name|'self'
op|','
name|'limit'
op|','
name|'marker'
op|','
name|'end_marker'
op|','
name|'prefix'
op|','
name|'delimiter'
op|','
nl|'\n'
name|'path'
op|'='
name|'None'
op|','
name|'storage_policy_index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of objects sorted by name starting at marker onward, up\n        to limit entries.  Entries will begin with the prefix and will not\n        have the delimiter after the prefix.\n\n        :param limit: maximum number of entries to get\n        :param marker: marker query\n        :param end_marker: end marker query\n        :param prefix: prefix query\n        :param delimiter: delimiter for query\n        :param path: if defined, will set the prefix and delimiter based on\n                     the path\n\n        :returns: list of tuples of (name, created_at, size, content_type,\n                  etag)\n        """'
newline|'\n'
name|'delim_force_gte'
op|'='
name|'False'
newline|'\n'
op|'('
name|'marker'
op|','
name|'end_marker'
op|','
name|'prefix'
op|','
name|'delimiter'
op|','
name|'path'
op|')'
op|'='
name|'utf8encode'
op|'('
nl|'\n'
name|'marker'
op|','
name|'end_marker'
op|','
name|'prefix'
op|','
name|'delimiter'
op|','
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
name|'path'
newline|'\n'
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'                '
name|'prefix'
op|'='
name|'path'
op|'='
name|'path'
op|'.'
name|'rstrip'
op|'('
string|"'/'"
op|')'
op|'+'
string|"'/'"
newline|'\n'
dedent|''
name|'delimiter'
op|'='
string|"'/'"
newline|'\n'
dedent|''
name|'elif'
name|'delimiter'
name|'and'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'orig_marker'
op|'='
name|'marker'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'results'
op|')'
op|'<'
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'query'
op|'='
string|"'''SELECT name, created_at, size, content_type, etag\n                           FROM object WHERE'''"
newline|'\n'
name|'query_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'end_marker'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name < ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'end_marker'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'delim_force_gte'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name >= ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'marker'
op|')'
newline|'\n'
comment|'# Always set back to False'
nl|'\n'
name|'delim_force_gte'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'elif'
name|'marker'
name|'and'
name|'marker'
op|'>='
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name > ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'marker'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' name >= ? AND'"
newline|'\n'
name|'query_args'
op|'.'
name|'append'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' +deleted = 0'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'query'
op|'+='
string|"' deleted = 0'"
newline|'\n'
dedent|''
name|'orig_tail_query'
op|'='
string|"'''\n                    ORDER BY name LIMIT ?\n                '''"
newline|'\n'
name|'orig_tail_args'
op|'='
op|'['
name|'limit'
op|'-'
name|'len'
op|'('
name|'results'
op|')'
op|']'
newline|'\n'
comment|'# storage policy filter'
nl|'\n'
name|'policy_tail_query'
op|'='
string|"'''\n                    AND storage_policy_index = ?\n                '''"
op|'+'
name|'orig_tail_query'
newline|'\n'
name|'policy_tail_args'
op|'='
op|'['
name|'storage_policy_index'
op|']'
op|'+'
name|'orig_tail_args'
newline|'\n'
name|'tail_query'
op|','
name|'tail_args'
op|'='
name|'policy_tail_query'
op|','
name|'policy_tail_args'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|'+'
name|'tail_query'
op|','
nl|'\n'
name|'tuple'
op|'('
name|'query_args'
op|'+'
name|'tail_args'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'no such column: storage_policy_index'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
newline|'\n'
dedent|''
name|'tail_query'
op|','
name|'tail_args'
op|'='
name|'orig_tail_query'
op|','
name|'orig_tail_args'
newline|'\n'
name|'curs'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|'+'
name|'tail_query'
op|','
nl|'\n'
name|'tuple'
op|'('
name|'query_args'
op|'+'
name|'tail_args'
op|')'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'row_factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# A delimiter without a specified prefix is ignored'
nl|'\n'
indent|'                    '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'delimiter'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'prefix'
op|':'
newline|'\n'
comment|'# It is possible to have a delimiter but no prefix'
nl|'\n'
comment|'# specified. As above, the prefix will be set to the'
nl|'\n'
comment|'# empty string, so avoid performing the extra work to'
nl|'\n'
comment|'# check against an empty prefix.'
nl|'\n'
indent|'                        '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'curs'
name|'if'
name|'r'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# We have a delimiter and a prefix (possibly empty string) to'
nl|'\n'
comment|'# handle'
nl|'\n'
dedent|''
dedent|''
name|'rowcount'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'curs'
op|':'
newline|'\n'
indent|'                    '
name|'rowcount'
op|'+='
number|'1'
newline|'\n'
name|'marker'
op|'='
name|'name'
op|'='
name|'row'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'results'
op|')'
op|'>='
name|'limit'
name|'or'
name|'not'
name|'name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
name|'delimiter'
op|','
name|'len'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'name'
op|'=='
name|'path'
op|':'
newline|'\n'
indent|'                            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'end'
op|'>='
number|'0'
name|'and'
name|'len'
op|'('
name|'name'
op|')'
op|'>'
name|'end'
op|'+'
name|'len'
op|'('
name|'delimiter'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'marker'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|']'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
name|'delimiter'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'end'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'marker'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|']'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
name|'delimiter'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
comment|'# we want result to be inclusive of delim+1'
nl|'\n'
name|'delim_force_gte'
op|'='
name|'True'
newline|'\n'
name|'dir_name'
op|'='
name|'name'
op|'['
op|':'
name|'end'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'if'
name|'dir_name'
op|'!='
name|'orig_marker'
op|':'
newline|'\n'
indent|'                            '
name|'results'
op|'.'
name|'append'
op|'('
op|'['
name|'dir_name'
op|','
string|"'0'"
op|','
number|'0'
op|','
name|'None'
op|','
string|"''"
op|']'
op|')'
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'results'
op|'.'
name|'append'
op|'('
name|'row'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rowcount'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|merge_items
dedent|''
dedent|''
name|'def'
name|'merge_items'
op|'('
name|'self'
op|','
name|'item_list'
op|','
name|'source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Merge items into the object table.\n\n        :param item_list: list of dictionaries of {\'name\', \'created_at\',\n                          \'size\', \'content_type\', \'etag\', \'deleted\',\n                          \'storage_policy_index\'}\n        :param source: if defined, update incoming_sync with the source\n        """'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'item_list'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'item'
op|'['
string|"'name'"
op|']'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'item'
op|'['
string|"'name'"
op|']'
op|'='
name|'item'
op|'['
string|"'name'"
op|']'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_really_merge_items
dedent|''
dedent|''
name|'def'
name|'_really_merge_items'
op|'('
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'curs'
op|'='
name|'conn'
op|'.'
name|'cursor'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_db_version'
op|'('
name|'conn'
op|')'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'query_mod'
op|'='
string|"' deleted IN (0, 1) AND '"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'query_mod'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'curs'
op|'.'
name|'execute'
op|'('
string|"'BEGIN IMMEDIATE'"
op|')'
newline|'\n'
comment|'# Get created_at times for objects in item_list that already exist.'
nl|'\n'
comment|"# We must chunk it up to avoid sqlite's limit of 999 args."
nl|'\n'
name|'created_at'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'offset'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'item_list'
op|')'
op|','
name|'SQLITE_ARG_LIMIT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
op|'['
name|'rec'
op|'['
string|"'name'"
op|']'
name|'for'
name|'rec'
name|'in'
nl|'\n'
name|'item_list'
op|'['
name|'offset'
op|':'
name|'offset'
op|'+'
name|'SQLITE_ARG_LIMIT'
op|']'
op|']'
newline|'\n'
name|'created_at'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'('
op|'('
name|'rec'
op|'['
number|'0'
op|']'
op|','
name|'rec'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'rec'
op|'['
number|'2'
op|']'
op|')'
name|'for'
name|'rec'
name|'in'
name|'curs'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'SELECT name, storage_policy_index, created_at '"
nl|'\n'
string|"'FROM object WHERE '"
op|'+'
name|'query_mod'
op|'+'
string|"' name IN (%s)'"
op|'%'
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
string|"'?'"
op|'*'
name|'len'
op|'('
name|'chunk'
op|')'
op|')'
op|','
name|'chunk'
op|')'
op|')'
newline|'\n'
comment|'# Sort item_list into things that need adding and deleting, based'
nl|'\n'
comment|'# on results of created_at query.'
nl|'\n'
dedent|''
name|'to_delete'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'to_add'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'item_list'
op|':'
newline|'\n'
indent|'                '
name|'item'
op|'.'
name|'setdefault'
op|'('
string|"'storage_policy_index'"
op|','
number|'0'
op|')'
comment|'# legacy'
newline|'\n'
name|'item_ident'
op|'='
op|'('
name|'item'
op|'['
string|"'name'"
op|']'
op|','
name|'item'
op|'['
string|"'storage_policy_index'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'created_at'
op|'.'
name|'get'
op|'('
name|'item_ident'
op|')'
op|'<'
name|'item'
op|'['
string|"'created_at'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'item_ident'
name|'in'
name|'created_at'
op|':'
comment|'# exists with older timestamp'
newline|'\n'
indent|'                        '
name|'to_delete'
op|'['
name|'item_ident'
op|']'
op|'='
name|'item'
newline|'\n'
dedent|''
name|'if'
name|'item_ident'
name|'in'
name|'to_add'
op|':'
comment|'# duplicate entries in item_list'
newline|'\n'
indent|'                        '
name|'to_add'
op|'['
name|'item_ident'
op|']'
op|'='
name|'max'
op|'('
name|'item'
op|','
name|'to_add'
op|'['
name|'item_ident'
op|']'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'i'
op|':'
name|'i'
op|'['
string|"'created_at'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'to_add'
op|'['
name|'item_ident'
op|']'
op|'='
name|'item'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'to_delete'
op|':'
newline|'\n'
indent|'                '
name|'curs'
op|'.'
name|'executemany'
op|'('
nl|'\n'
string|"'DELETE FROM object WHERE '"
op|'+'
name|'query_mod'
op|'+'
nl|'\n'
string|"'name=? AND storage_policy_index=?'"
op|','
nl|'\n'
op|'('
op|'('
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
name|'rec'
op|'['
string|"'storage_policy_index'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'rec'
name|'in'
name|'to_delete'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'to_add'
op|':'
newline|'\n'
indent|'                '
name|'curs'
op|'.'
name|'executemany'
op|'('
nl|'\n'
string|"'INSERT INTO object (name, created_at, size, content_type,'"
nl|'\n'
string|"'etag, deleted, storage_policy_index)'"
nl|'\n'
string|"'VALUES (?, ?, ?, ?, ?, ?, ?)'"
op|','
nl|'\n'
op|'('
op|'('
name|'rec'
op|'['
string|"'name'"
op|']'
op|','
name|'rec'
op|'['
string|"'created_at'"
op|']'
op|','
name|'rec'
op|'['
string|"'size'"
op|']'
op|','
nl|'\n'
name|'rec'
op|'['
string|"'content_type'"
op|']'
op|','
name|'rec'
op|'['
string|"'etag'"
op|']'
op|','
name|'rec'
op|'['
string|"'deleted'"
op|']'
op|','
nl|'\n'
name|'rec'
op|'['
string|"'storage_policy_index'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'rec'
name|'in'
name|'to_add'
op|'.'
name|'itervalues'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'source'
op|':'
newline|'\n'
comment|'# for replication we rely on the remote end sending merges in'
nl|'\n'
comment|'# order with no gaps to increment sync_points'
nl|'\n'
indent|'                '
name|'sync_point'
op|'='
name|'item_list'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'ROWID'"
op|']'
newline|'\n'
name|'curs'
op|'.'
name|'execute'
op|'('
string|"'''\n                    UPDATE incoming_sync SET\n                    sync_point=max(?, sync_point) WHERE remote_id=?\n                '''"
op|','
op|'('
name|'sync_point'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
name|'if'
name|'curs'
op|'.'
name|'rowcount'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'curs'
op|'.'
name|'execute'
op|'('
string|"'''\n                        INSERT INTO incoming_sync (sync_point, remote_id)\n                        VALUES (?, ?)\n                    '''"
op|','
op|'('
name|'sync_point'
op|','
name|'source'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'_really_merge_items'
op|'('
name|'conn'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'no such column: storage_policy_index'"
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_migrate_add_storage_policy'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'return'
name|'_really_merge_items'
op|'('
name|'conn'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_reconciler_sync
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_reconciler_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'''\n                    SELECT reconciler_sync_point FROM container_stat\n                    '''"
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|'"no such column: reconciler_sync_point"'
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|update_reconciler_sync
dedent|''
dedent|''
dedent|''
name|'def'
name|'update_reconciler_sync'
op|'('
name|'self'
op|','
name|'point'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'='
string|"'''\n            UPDATE container_stat\n            SET reconciler_sync_point = ?\n        '''"
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
op|'('
name|'point'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|'"no such column: reconciler_sync_point"'
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_migrate_add_storage_policy'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'execute'
op|'('
name|'query'
op|','
op|'('
name|'point'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_misplaced_since
dedent|''
dedent|''
name|'def'
name|'get_misplaced_since'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a list of objects which are in a storage policy different\n        from the container\'s storage policy.\n\n        :param start: last reconciler sync point\n        :param count: maximum number of entries to get\n\n        :returns: list of dicts with keys: name, created_at, size,\n                  content_type, etag, storage_policy_index\n        """'
newline|'\n'
name|'qry'
op|'='
string|"'''\n            SELECT ROWID, name, created_at, size, content_type, etag,\n                   deleted, storage_policy_index\n            FROM object\n            WHERE ROWID > ?\n            AND storage_policy_index != (\n                SELECT storage_policy_index FROM container_stat LIMIT 1)\n            ORDER BY ROWID ASC LIMIT ?\n        '''"
newline|'\n'
name|'self'
op|'.'
name|'_commit_puts_stale_ok'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'get'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cur'
op|'='
name|'conn'
op|'.'
name|'execute'
op|'('
name|'qry'
op|','
op|'('
name|'start'
op|','
name|'count'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|'"no such column: storage_policy_index"'
name|'not'
name|'in'
name|'str'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'list'
op|'('
name|'dict'
op|'('
name|'row'
op|')'
name|'for'
name|'row'
name|'in'
name|'cur'
op|'.'
name|'fetchall'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_add_container_sync_points
dedent|''
dedent|''
name|'def'
name|'_migrate_add_container_sync_points'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add the x_container_sync_point columns to the \'container_stat\' table.\n        """'
newline|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
string|"'''\n            BEGIN;\n            ALTER TABLE container_stat\n            ADD COLUMN x_container_sync_point1 INTEGER DEFAULT -1;\n            ALTER TABLE container_stat\n            ADD COLUMN x_container_sync_point2 INTEGER DEFAULT -1;\n            COMMIT;\n        '''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_add_storage_policy
dedent|''
name|'def'
name|'_migrate_add_storage_policy'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Migrate the container schema to support tracking objects from\n        multiple storage policies.  If the container_stat table has any\n        pending migrations, they are applied now before copying into\n        container_info.\n\n         * create the \'policy_stat\' table.\n         * copy the current \'object_count\' and \'bytes_used\' columns to a\n           row in the \'policy_stat\' table.\n         * add the storage_policy_index column to the \'object\' table.\n         * drop the \'object_insert\' and \'object_delete\' triggers.\n         * add the \'object_insert_policy_stat\' and\n           \'object_delete_policy_stat\' triggers.\n         * create container_info table for non-policy container info\n         * insert values from container_stat into container_info\n         * drop container_stat table\n         * create container_stat view\n        """'
newline|'\n'
nl|'\n'
comment|'# I tried just getting the list of column names in the current'
nl|'\n'
comment|'# container_stat table with a pragma table_info, but could never get'
nl|'\n'
comment|'# it inside the same transaction as the DDL (non-DML) statements:'
nl|'\n'
comment|'#     https://docs.python.org/2/library/sqlite3.html'
nl|'\n'
comment|'#         #controlling-transactions'
nl|'\n'
comment|'# So we just apply all pending migrations to container_stat and copy a'
nl|'\n'
comment|'# static known list of column names into container_info.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_add_container_sync_points'
op|'('
name|'conn'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'duplicate column'"
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'execute'
op|'('
string|"'ROLLBACK;'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'executescript'
op|'('
string|'"""\n                ALTER TABLE container_stat\n                ADD COLUMN metadata TEXT DEFAULT \'\';\n            """'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlite3'
op|'.'
name|'OperationalError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'duplicate column'"
name|'not'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'column_names'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
op|'('
nl|'\n'
string|"'account'"
op|','
string|"'container'"
op|','
string|"'created_at'"
op|','
string|"'put_timestamp'"
op|','
nl|'\n'
string|"'delete_timestamp'"
op|','
string|"'reported_put_timestamp'"
op|','
nl|'\n'
string|"'reported_object_count'"
op|','
string|"'reported_bytes_used'"
op|','
string|"'hash'"
op|','
string|"'id'"
op|','
nl|'\n'
string|"'status'"
op|','
string|"'status_changed_at'"
op|','
string|"'metadata'"
op|','
nl|'\n'
string|"'x_container_sync_point1'"
op|','
string|"'x_container_sync_point2'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'.'
name|'executescript'
op|'('
nl|'\n'
string|"'BEGIN;'"
op|'+'
nl|'\n'
name|'POLICY_STAT_TABLE_CREATE'
op|'+'
nl|'\n'
string|"'''\n                INSERT INTO policy_stat (\n                    storage_policy_index, object_count, bytes_used)\n                SELECT 0, object_count, bytes_used\n                FROM container_stat;\n\n                ALTER TABLE object\n                ADD COLUMN storage_policy_index INTEGER DEFAULT 0;\n\n                DROP TRIGGER object_insert;\n                DROP TRIGGER object_delete;\n            '''"
op|'+'
nl|'\n'
name|'POLICY_STAT_TRIGGER_SCRIPT'
op|'+'
nl|'\n'
name|'CONTAINER_INFO_TABLE_SCRIPT'
op|'+'
nl|'\n'
string|"'''\n                INSERT INTO container_info (%s)\n                SELECT %s FROM container_stat;\n\n                DROP TABLE IF EXISTS container_stat;\n            '''"
op|'%'
op|'('
name|'column_names'
op|','
name|'column_names'
op|')'
op|'+'
nl|'\n'
name|'CONTAINER_STAT_VIEW_SCRIPT'
op|'+'
nl|'\n'
string|"'COMMIT;'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
