begin_unit
comment|'# Copyright (c) 2010-2011 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clean_acl
name|'def'
name|'clean_acl'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns a cleaned ACL header value, validating that it meets the formatting\n    requirements for standard Swift ACL strings.\n\n    The ACL format is::\n\n        [item[,item...]]\n\n    Each item can be a group name to give access to or a referrer designation\n    to grant or deny based on the HTTP Referer header.\n\n    The referrer designation format is::\n\n        .r:[-]value\n\n    The ``.r`` can also be ``.ref``, ``.referer``, or ``.referrer``; though it\n    will be shortened to just ``.r`` for decreased character count usage.\n\n    The value can be ``*`` to specify any referrer host is allowed access, a\n    specific host name like ``www.example.com``, or if it has a leading period\n    ``.`` or leading ``*.`` it is a domain name specification, like\n    ``.example.com`` or ``*.example.com``. The leading minus sign ``-``\n    indicates referrer hosts that should be denied access.\n\n    Referrer access is applied in the order they are specified. For example,\n    .r:.example.com,.r:-thief.example.com would allow all hosts ending with\n    .example.com except for the specific host thief.example.com.\n\n    Example valid ACLs::\n\n        .r:*\n        .r:*,.r:-.thief.com\n        .r:*,.r:.example.com,.r:-thief.example.com\n        .r:*,.r:-.thief.com,bobs_account,sues_account:sue\n        bobs_account,sues_account:sue\n\n    Example invalid ACLs::\n\n        .r:\n        .r:-\n\n    Also, .r designations aren\'t allowed in headers whose names include the\n    word \'write\'.\n\n    ACLs that are "messy" will be cleaned up. Examples:\n\n    ======================  ======================\n    Original                Cleaned\n    ----------------------  ----------------------\n    ``bob, sue``            ``bob,sue``\n    ``bob , sue``           ``bob,sue``\n    ``bob,,,sue``           ``bob,sue``\n    ``.referrer : *``       ``.r:*``\n    ``.ref:*.example.com``  ``.r:.example.com``\n    ======================  ======================\n\n    :param name: The name of the header being cleaned, such as X-Container-Read\n                 or X-Container-Write.\n    :param value: The value of the header being cleaned.\n    :returns: The value, cleaned of extraneous formatting.\n    :raises ValueError: If the value does not meet the ACL formatting\n                        requirements; the error message will indicate why.\n    """'
newline|'\n'
name|'name'
op|'='
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'raw_value'
name|'in'
name|'value'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raw_value'
op|'='
name|'raw_value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'raw_value'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"':'"
name|'not'
name|'in'
name|'raw_value'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'.'
name|'append'
op|'('
name|'raw_value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'first'
op|','
name|'second'
op|'='
op|'('
name|'v'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'v'
name|'in'
name|'raw_value'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'first'
name|'or'
name|'first'
op|'['
number|'0'
op|']'
op|'!='
string|"'.'"
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'.'
name|'append'
op|'('
name|'raw_value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'first'
name|'in'
op|'('
string|"'.r'"
op|','
string|"'.ref'"
op|','
string|"'.referer'"
op|','
string|"'.referrer'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'write'"
name|'in'
name|'name'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|'('
string|"'Referrers not allowed in write ACL: '"
nl|'\n'
string|"'%s'"
op|'%'
name|'repr'
op|'('
name|'raw_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'negate'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'second'
name|'and'
name|'second'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'                        '
name|'negate'
op|'='
name|'True'
newline|'\n'
name|'second'
op|'='
name|'second'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'second'
name|'and'
name|'second'
op|'!='
string|"'*'"
name|'and'
name|'second'
op|'['
number|'0'
op|']'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'                        '
name|'second'
op|'='
name|'second'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'second'
name|'or'
name|'second'
op|'=='
string|"'.'"
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|'('
string|"'No host/domain value after referrer '"
nl|'\n'
string|"'designation in ACL: %s'"
op|'%'
name|'repr'
op|'('
name|'raw_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'values'
op|'.'
name|'append'
op|'('
string|"'.r:%s%s'"
op|'%'
op|'('
name|'negate'
name|'and'
string|"'-'"
name|'or'
string|"''"
op|','
name|'second'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'Unknown designator %s in ACL: %s'"
op|'%'
nl|'\n'
op|'('
name|'repr'
op|'('
name|'first'
op|')'
op|','
name|'repr'
op|'('
name|'raw_value'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
string|"','"
op|'.'
name|'join'
op|'('
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_acl
dedent|''
name|'def'
name|'parse_acl'
op|'('
name|'acl_string'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parses a standard Swift ACL string into a referrers list and groups list.\n\n    See :func:`clean_acl` for documentation of the standard Swift ACL format.\n\n    :param acl_string: The standard Swift ACL string to parse.\n    :returns: A tuple of (referrers, groups) where referrers is a list of\n              referrer designations (without the leading .r:) and groups is a\n              list of groups to allow access.\n    """'
newline|'\n'
name|'referrers'
op|'='
op|'['
op|']'
newline|'\n'
name|'groups'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'acl_string'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'value'
name|'in'
name|'acl_string'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'value'
op|'.'
name|'startswith'
op|'('
string|"'.r:'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'referrers'
op|'.'
name|'append'
op|'('
name|'value'
op|'['
name|'len'
op|'('
string|"'.r:'"
op|')'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'referrers'
op|','
name|'groups'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|referrer_allowed
dedent|''
name|'def'
name|'referrer_allowed'
op|'('
name|'referrer'
op|','
name|'referrer_acl'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns True if the referrer should be allowed based on the referrer_acl\n    list (as returned by :func:`parse_acl`).\n\n    See :func:`clean_acl` for documentation of the standard Swift ACL format.\n\n    :param referrer: The value of the HTTP Referer header.\n    :param referrer_acl: The list of referrer designations as returned by\n                         :func:`parse_acl`.\n    :returns: True if the referrer should be allowed; False if not.\n    """'
newline|'\n'
name|'allow'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'referrer_acl'
op|':'
newline|'\n'
indent|'        '
name|'rhost'
op|'='
name|'urlparse'
op|'('
name|'referrer'
name|'or'
string|"''"
op|')'
op|'.'
name|'hostname'
name|'or'
string|"'unknown'"
newline|'\n'
name|'for'
name|'mhost'
name|'in'
name|'referrer_acl'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mhost'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'                '
name|'mhost'
op|'='
name|'mhost'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'mhost'
op|'=='
name|'rhost'
name|'or'
op|'('
name|'mhost'
op|'['
number|'0'
op|']'
op|'=='
string|"'.'"
name|'and'
name|'rhost'
op|'.'
name|'endswith'
op|'('
name|'mhost'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'allow'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'mhost'
op|'=='
string|"'*'"
name|'or'
name|'mhost'
op|'=='
name|'rhost'
name|'or'
op|'('
name|'mhost'
op|'['
number|'0'
op|']'
op|'=='
string|"'.'"
name|'and'
name|'rhost'
op|'.'
name|'endswith'
op|'('
name|'mhost'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'allow'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'allow'
newline|'\n'
dedent|''
endmarker|''
end_unit
