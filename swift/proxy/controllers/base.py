begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
comment|'# NOTE: swift_conn'
nl|'\n'
comment|"# You'll see swift_conn passed around a few places in this file. This is the"
nl|'\n'
comment|'# source bufferedhttp connection of whatever it is attached to.'
nl|'\n'
comment|'#   It is used when early termination of reading from the connection should'
nl|'\n'
comment|"# happen, such as when a range request is satisfied but there's still more the"
nl|'\n'
comment|'# source connection would like to send. To prevent having to read all the data'
nl|'\n'
comment|'# that could be left, the source connection can be .close() and then reads'
nl|'\n'
comment|'# commence to empty out any buffers.'
nl|'\n'
comment|'#   These shenanigans are to ensure all related objects can be garbage'
nl|'\n'
comment|"# collected. We've seen objects hang around forever otherwise."
nl|'\n'
nl|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'urllib'
op|'.'
name|'parse'
name|'import'
name|'quote'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'from'
name|'sys'
name|'import'
name|'exc_info'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'sleep'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'timeout'
name|'import'
name|'Timeout'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'wsgi'
name|'import'
name|'make_pre_authed_env'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'Timestamp'
op|','
name|'config_true_value'
op|','
name|'public'
op|','
name|'split_path'
op|','
name|'list_from_csv'
op|','
name|'GreenthreadSafeIterator'
op|','
name|'GreenAsyncPile'
op|','
name|'quorum_size'
op|','
name|'parse_content_type'
op|','
name|'http_response_to_document_iters'
op|','
name|'document_iters_to_http_response_body'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'bufferedhttp'
name|'import'
name|'http_connect'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'ChunkReadTimeout'
op|','
name|'ChunkWriteTimeout'
op|','
name|'ConnectionTimeout'
op|','
name|'RangeAlreadyComplete'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'http'
name|'import'
name|'is_informational'
op|','
name|'is_success'
op|','
name|'is_redirection'
op|','
name|'is_server_error'
op|','
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|','
name|'HTTP_NOT_FOUND'
op|','
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
name|'HTTP_INSUFFICIENT_STORAGE'
op|','
name|'HTTP_UNAUTHORIZED'
op|','
name|'HTTP_CONTINUE'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Request'
op|','
name|'Response'
op|','
name|'HeaderKeyDict'
op|','
name|'Range'
op|','
name|'HTTPException'
op|','
name|'HTTPRequestedRangeNotSatisfiable'
op|','
name|'HTTPServiceUnavailable'
op|','
name|'status_map'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'request_helpers'
name|'import'
name|'strip_sys_meta_prefix'
op|','
name|'strip_user_meta_prefix'
op|','
name|'is_user_meta'
op|','
name|'is_sys_meta'
op|','
name|'is_sys_or_user_meta'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
name|'POLICIES'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_headers
name|'def'
name|'update_headers'
op|'('
name|'response'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to update headers in the response.\n\n    :param response: swob.Response object\n    :param headers: dictionary headers\n    """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'headers'
op|','
string|"'items'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'etag'"
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'not'
name|'in'
op|'('
string|"'date'"
op|','
string|"'content-length'"
op|','
string|"'content-type'"
op|','
nl|'\n'
string|"'connection'"
op|','
string|"'x-put-timestamp'"
op|','
string|"'x-delete-after'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|source_key
dedent|''
dedent|''
dedent|''
name|'def'
name|'source_key'
op|'('
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Provide the timestamp of the swift http response as a floating\n    point value.  Used as a sort key.\n\n    :param resp: bufferedhttp response object\n    """'
newline|'\n'
name|'return'
name|'Timestamp'
op|'('
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-backend-timestamp'"
op|')'
name|'or'
nl|'\n'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-put-timestamp'"
op|')'
name|'or'
nl|'\n'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delay_denial
dedent|''
name|'def'
name|'delay_denial'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods should have any swift.authorize call\n    delayed. This is so the method can load the Request object up with\n    additional information that may be needed by the authorization system.\n\n    :param func: function for which authorization will be delayed\n    """'
newline|'\n'
name|'func'
op|'.'
name|'delay_denial'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account_memcache_key
dedent|''
name|'def'
name|'get_account_memcache_key'
op|'('
name|'account'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'cache_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container_memcache_key
dedent|''
name|'def'
name|'get_container_memcache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"container not provided"'
op|')'
newline|'\n'
dedent|''
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'return'
name|'cache_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_prep_headers_to_info
dedent|''
name|'def'
name|'_prep_headers_to_info'
op|'('
name|'headers'
op|','
name|'server_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper method that iterates once over a dict of headers,\n    converting all keys to lower case and separating\n    into subsets containing user metadata, system metadata\n    and other headers.\n    """'
newline|'\n'
name|'meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sysmeta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'other'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'dict'
op|'('
name|'headers'
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lkey'
op|'='
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'is_user_meta'
op|'('
name|'server_type'
op|','
name|'lkey'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meta'
op|'['
name|'strip_user_meta_prefix'
op|'('
name|'server_type'
op|','
name|'lkey'
op|')'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'is_sys_meta'
op|'('
name|'server_type'
op|','
name|'lkey'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sysmeta'
op|'['
name|'strip_sys_meta_prefix'
op|'('
name|'server_type'
op|','
name|'lkey'
op|')'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'other'
op|'['
name|'lkey'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'other'
op|','
name|'meta'
op|','
name|'sysmeta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_account_info
dedent|''
name|'def'
name|'headers_to_account_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of account info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|','
name|'meta'
op|','
name|'sysmeta'
op|'='
name|'_prep_headers_to_info'
op|'('
name|'headers'
op|','
string|"'account'"
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
comment|"# 'container_count' anomaly:"
nl|'\n'
comment|'# Previous code sometimes expects an int sometimes a string'
nl|'\n'
comment|'# Current code aligns to str and None, yet translates to int in'
nl|'\n'
comment|'# deprecated functions as needed'
nl|'\n'
string|"'container_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-container-count'"
op|')'
op|','
nl|'\n'
string|"'total_object_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-object-count'"
op|')'
op|','
nl|'\n'
string|"'bytes'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-bytes-used'"
op|')'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'meta'
op|','
nl|'\n'
string|"'sysmeta'"
op|':'
name|'sysmeta'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_container_info
dedent|''
name|'def'
name|'headers_to_container_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of container info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|','
name|'meta'
op|','
name|'sysmeta'
op|'='
name|'_prep_headers_to_info'
op|'('
name|'headers'
op|','
string|"'container'"
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
string|"'read_acl'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-read'"
op|')'
op|','
nl|'\n'
string|"'write_acl'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-write'"
op|')'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-sync-key'"
op|')'
op|','
nl|'\n'
string|"'object_count'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-object-count'"
op|')'
op|','
nl|'\n'
string|"'bytes'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-bytes-used'"
op|')'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-versions-location'"
op|')'
op|','
nl|'\n'
string|"'storage_policy'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'X-Backend-Storage-Policy-Index'"
op|'.'
name|'lower'
op|'('
op|')'
op|','
nl|'\n'
string|"'0'"
op|')'
op|','
nl|'\n'
string|"'cors'"
op|':'
op|'{'
nl|'\n'
string|"'allow_origin'"
op|':'
name|'meta'
op|'.'
name|'get'
op|'('
string|"'access-control-allow-origin'"
op|')'
op|','
nl|'\n'
string|"'expose_headers'"
op|':'
name|'meta'
op|'.'
name|'get'
op|'('
string|"'access-control-expose-headers'"
op|')'
op|','
nl|'\n'
string|"'max_age'"
op|':'
name|'meta'
op|'.'
name|'get'
op|'('
string|"'access-control-max-age'"
op|')'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'meta'
op|','
nl|'\n'
string|"'sysmeta'"
op|':'
name|'sysmeta'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|headers_to_object_info
dedent|''
name|'def'
name|'headers_to_object_info'
op|'('
name|'headers'
op|','
name|'status_int'
op|'='
name|'HTTP_OK'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Construct a cacheable dict of object info based on response headers.\n    """'
newline|'\n'
name|'headers'
op|','
name|'meta'
op|','
name|'sysmeta'
op|'='
name|'_prep_headers_to_info'
op|'('
name|'headers'
op|','
string|"'object'"
op|')'
newline|'\n'
name|'info'
op|'='
op|'{'
string|"'status'"
op|':'
name|'status_int'
op|','
nl|'\n'
string|"'length'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-length'"
op|')'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'content-type'"
op|')'
op|','
nl|'\n'
string|"'etag'"
op|':'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|')'
op|','
nl|'\n'
string|"'meta'"
op|':'
name|'meta'
op|','
nl|'\n'
string|"'sysmeta'"
op|':'
name|'sysmeta'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cors_validation
dedent|''
name|'def'
name|'cors_validation'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to check if the request is a CORS request and if so, if it\'s\n    valid.\n\n    :param func: function to check\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'a'
op|'['
number|'0'
op|']'
newline|'\n'
name|'req'
op|'='
name|'a'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# The logic here was interpreted from'
nl|'\n'
comment|'#    http://www.w3.org/TR/cors/#resource-requests'
nl|'\n'
nl|'\n'
comment|'# Is this a CORS request?'
nl|'\n'
name|'req_origin'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Origin'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'req_origin'
op|':'
newline|'\n'
comment|'# Yes, this is a CORS request so test if the origin is allowed'
nl|'\n'
indent|'            '
name|'container_info'
op|'='
name|'controller'
op|'.'
name|'container_info'
op|'('
name|'controller'
op|'.'
name|'account_name'
op|','
nl|'\n'
name|'controller'
op|'.'
name|'container_name'
op|','
name|'req'
op|')'
newline|'\n'
name|'cors_info'
op|'='
name|'container_info'
op|'.'
name|'get'
op|'('
string|"'cors'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call through to the decorated method'
nl|'\n'
name|'resp'
op|'='
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'controller'
op|'.'
name|'app'
op|'.'
name|'strict_cors_mode'
name|'and'
name|'not'
name|'controller'
op|'.'
name|'is_origin_allowed'
op|'('
name|'cors_info'
op|','
name|'req_origin'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
comment|'# Expose,'
nl|'\n'
comment|'#  - simple response headers,'
nl|'\n'
comment|'#    http://www.w3.org/TR/cors/#simple-response-header'
nl|'\n'
comment|'#  - swift specific: etag, x-timestamp, x-trans-id'
nl|'\n'
comment|'#  - user metadata headers'
nl|'\n'
comment|'#  - headers provided by the user in'
nl|'\n'
comment|'#    x-container-meta-access-control-expose-headers'
nl|'\n'
dedent|''
name|'if'
string|"'Access-Control-Expose-Headers'"
name|'not'
name|'in'
name|'resp'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'expose_headers'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
string|"'cache-control'"
op|','
string|"'content-language'"
op|','
string|"'content-type'"
op|','
nl|'\n'
string|"'expires'"
op|','
string|"'last-modified'"
op|','
string|"'pragma'"
op|','
string|"'etag'"
op|','
nl|'\n'
string|"'x-timestamp'"
op|','
string|"'x-trans-id'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'header'
name|'in'
name|'resp'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'header'
op|'.'
name|'startswith'
op|'('
string|"'X-Container-Meta'"
op|')'
name|'or'
name|'header'
op|'.'
name|'startswith'
op|'('
string|"'X-Object-Meta'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'expose_headers'
op|'.'
name|'add'
op|'('
name|'header'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'cors_info'
op|'.'
name|'get'
op|'('
string|"'expose_headers'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'expose_headers'
op|'='
name|'expose_headers'
op|'.'
name|'union'
op|'('
nl|'\n'
op|'['
name|'header_line'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
nl|'\n'
name|'for'
name|'header_line'
name|'in'
nl|'\n'
name|'cors_info'
op|'['
string|"'expose_headers'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
nl|'\n'
name|'if'
name|'header_line'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Expose-Headers'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'expose_headers'
op|')'
newline|'\n'
nl|'\n'
comment|"# The user agent won't process the response if the Allow-Origin"
nl|'\n'
comment|"# header isn't included"
nl|'\n'
dedent|''
name|'if'
string|"'Access-Control-Allow-Origin'"
name|'not'
name|'in'
name|'resp'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cors_info'
op|'['
string|"'allow_origin'"
op|']'
name|'and'
name|'cors_info'
op|'['
string|"'allow_origin'"
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Allow-Origin'"
op|']'
op|'='
string|"'*'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Allow-Origin'"
op|']'
op|'='
name|'req_origin'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Not a CORS request so make the call as normal'
nl|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_object_info
dedent|''
name|'def'
name|'get_object_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for an object, based on env and app.\n    This is useful to middlewares.\n\n    .. note::\n\n        This call bypasses auth. Success does not imply that the request has\n        authorization to the object.\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|'='
name|'split_path'
op|'('
name|'path'
name|'or'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'4'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'_get_object_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_object_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container_info
dedent|''
name|'def'
name|'get_container_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for a container, based on env and app.\n    This is useful to middlewares.\n\n    .. note::\n\n        This call bypasses auth. Success does not imply that the request has\n        authorization to the container.\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'unused'
op|')'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'3'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'ret_not_found'
op|'='
name|'True'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'info'
op|'.'
name|'setdefault'
op|'('
string|"'storage_policy'"
op|','
string|"'0'"
op|')'
newline|'\n'
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account_info
dedent|''
name|'def'
name|'get_account_info'
op|'('
name|'env'
op|','
name|'app'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info structure for an account, based on env and app.\n    This is useful to middlewares.\n\n    .. note::\n\n        This call bypasses auth. Success does not imply that the request has\n        authorization to the account.\n\n    :raises ValueError: when path can\'t be split(path, 2, 4)\n    """'
newline|'\n'
op|'('
name|'version'
op|','
name|'account'
op|','
name|'_junk'
op|','
name|'_junk'
op|')'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'2'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'info'
op|'='
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'ret_not_found'
op|'='
name|'True'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_account_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'info'
op|'.'
name|'get'
op|'('
string|"'container_count'"
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'['
string|"'container_count'"
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'['
string|"'container_count'"
op|']'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'container_count'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_cache_key
dedent|''
name|'def'
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the keys for both memcache (cache_key) and env (env_key)\n    where info about accounts and containers is cached\n\n    :param   account: The name of the account\n    :param container: The name of the container (or None if account)\n    :returns: a tuple of (cache_key, env_key)\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'cache_key'
op|'='
string|"'container/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_key'
op|'='
string|"'account/%s'"
op|'%'
name|'account'
newline|'\n'
comment|'# Use a unique environment cache key per account and one container.'
nl|'\n'
comment|'# This allows caching both account and container and ensures that when we'
nl|'\n'
comment|"# copy this env to form a new request, it won't accidentally reuse the"
nl|'\n'
comment|'# old container or account info'
nl|'\n'
dedent|''
name|'env_key'
op|'='
string|"'swift.%s'"
op|'%'
name|'cache_key'
newline|'\n'
name|'return'
name|'cache_key'
op|','
name|'env_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_object_env_key
dedent|''
name|'def'
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the keys for env (env_key) where info about object is cached\n\n    :param   account: The name of the account\n    :param container: The name of the container\n    :param obj: The name of the object\n    :returns: a string env_key\n    """'
newline|'\n'
name|'env_key'
op|'='
string|"'swift.object/%s/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
nl|'\n'
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'return'
name|'env_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_info_cache
dedent|''
name|'def'
name|'_set_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Cache info in both memcache and env.\n\n    Caching is used to avoid unnecessary calls to account & container servers.\n    This is a private function that is being called by GETorHEAD_base and\n    by clear_info_cache.\n    Any attempt to GET or HEAD from the container/account server should use\n    the GETorHEAD_base interface which would than set the cache.\n\n    :param  app: the application object\n    :param  account: the unquoted account name\n    :param  container: the unquoted container name or None\n    :param resp: the response received or None if info cache should be cleared\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'app'
op|'.'
name|'recheck_container_existence'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'app'
op|'.'
name|'recheck_account_existence'
newline|'\n'
dedent|''
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resp'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'resp'
op|'.'
name|'status_int'
op|'=='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'            '
name|'cache_time'
op|'*='
number|'0.1'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cache_time'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cache_time'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Next actually set both memcache and the env cache'
nl|'\n'
dedent|''
name|'memcache'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'memcache'"
op|','
name|'None'
op|')'
name|'or'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.cache'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cache_time'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'.'
name|'pop'
op|'('
name|'env_key'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'            '
name|'memcache'
op|'.'
name|'delete'
op|'('
name|'cache_key'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'headers_to_account_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'        '
name|'memcache'
op|'.'
name|'set'
op|'('
name|'cache_key'
op|','
name|'info'
op|','
name|'time'
op|'='
name|'cache_time'
op|')'
newline|'\n'
dedent|''
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_object_info_cache
dedent|''
name|'def'
name|'_set_object_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Cache object info env. Do not cache object informations in\n    memcache. This is an intentional omission as it would lead\n    to cache pressure. This is a per-request cache.\n\n    Caching is used to avoid unnecessary calls to object servers.\n    This is a private function that is being called by GETorHEAD_base.\n    Any attempt to GET or HEAD from the object server should use\n    the GETorHEAD_base interface which would then set the cache.\n\n    :param  app: the application object\n    :param  account: the unquoted account name\n    :param  container: the unquoted container name or None\n    :param  object: the unquoted object name or None\n    :param resp: the response received or None if info cache should be cleared\n    """'
newline|'\n'
nl|'\n'
name|'env_key'
op|'='
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'.'
name|'pop'
op|'('
name|'env_key'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'headers_to_object_info'
op|'('
name|'resp'
op|'.'
name|'headers'
op|','
name|'resp'
op|'.'
name|'status_int'
op|')'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clear_info_cache
dedent|''
name|'def'
name|'clear_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Clear the cached info in both memcache and env\n\n    :param  app: the application object\n    :param  account: the account name\n    :param  container: the containr name or None if setting info for containers\n    """'
newline|'\n'
name|'_set_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_info_cache
dedent|''
name|'def'
name|'_get_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the cached info from env or memcache (if used) in that order\n    Used for both account and container info\n    A private function used by get_info\n\n    :param  app: the application object\n    :param  env: the environment used by the current request\n    :returns: the cached info or None if not cached\n    """'
newline|'\n'
nl|'\n'
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'env_key'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'env'
op|'['
name|'env_key'
op|']'
newline|'\n'
dedent|''
name|'memcache'
op|'='
name|'getattr'
op|'('
name|'app'
op|','
string|"'memcache'"
op|','
name|'None'
op|')'
name|'or'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.cache'"
op|')'
newline|'\n'
name|'if'
name|'memcache'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'memcache'
op|'.'
name|'get'
op|'('
name|'cache_key'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
name|'in'
name|'info'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'info'
op|'['
name|'key'
op|']'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'info'
op|'['
name|'key'
op|']'
op|'='
name|'info'
op|'['
name|'key'
op|']'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_prepare_pre_auth_info_request
dedent|''
name|'def'
name|'_prepare_pre_auth_info_request'
op|'('
name|'env'
op|','
name|'path'
op|','
name|'swift_source'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Prepares a pre authed request to obtain info using a HEAD.\n\n    :param env: the environment used by the current request\n    :param path: The unquoted request path\n    :param swift_source: value for swift.source in WSGI environment\n    :returns: the pre authed request\n    """'
newline|'\n'
comment|'# Set the env for the pre_authed call without a query string'
nl|'\n'
name|'newenv'
op|'='
name|'make_pre_authed_env'
op|'('
name|'env'
op|','
string|"'HEAD'"
op|','
name|'path'
op|','
name|'agent'
op|'='
string|"'Swift'"
op|','
nl|'\n'
name|'query_string'
op|'='
string|"''"
op|','
name|'swift_source'
op|'='
name|'swift_source'
op|')'
newline|'\n'
comment|'# This is a sub request for container metadata- drop the Origin header from'
nl|'\n'
comment|'# the request so the it is not treated as a CORS request.'
nl|'\n'
name|'newenv'
op|'.'
name|'pop'
op|'('
string|"'HTTP_ORIGIN'"
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Note that Request.blank expects quoted path'
nl|'\n'
name|'return'
name|'Request'
op|'.'
name|'blank'
op|'('
name|'quote'
op|'('
name|'path'
op|')'
op|','
name|'environ'
op|'='
name|'newenv'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|','
name|'ret_not_found'
op|'='
name|'False'
op|','
nl|'\n'
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info about accounts or containers\n\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the info.\n\n    :param app: the application object\n    :param env: the environment used by the current request\n    :param account: The unquoted name of the account\n    :param container: The unquoted name of the container (or None if account)\n    :returns: the cached info or None if cannot be retrieved\n    """'
newline|'\n'
name|'info'
op|'='
name|'_get_info_cache'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ret_not_found'
name|'or'
name|'is_success'
op|'('
name|'info'
op|'['
string|"'status'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
comment|"# Not in cache, let's try the account servers"
nl|'\n'
dedent|''
name|'path'
op|'='
string|"'/v1/%s'"
op|'%'
name|'account'
newline|'\n'
name|'if'
name|'container'
op|':'
newline|'\n'
comment|'# Stop and check if we have an account?'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|')'
name|'and'
name|'not'
name|'account'
op|'.'
name|'startswith'
op|'('
nl|'\n'
name|'getattr'
op|'('
name|'app'
op|','
string|"'auto_create_account_prefix'"
op|','
string|"'.'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'path'
op|'+='
string|"'/'"
op|'+'
name|'container'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'_prepare_pre_auth_info_request'
op|'('
nl|'\n'
name|'env'
op|','
name|'path'
op|','
op|'('
name|'swift_source'
name|'or'
string|"'GET_INFO'"
op|')'
op|')'
newline|'\n'
comment|'# Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in'
nl|'\n'
comment|'# the environment under environ[env_key] and in memcache. We will'
nl|'\n'
comment|'# pick the one from environ[env_key] and use it to set the caller env'
nl|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'app'
op|')'
newline|'\n'
name|'cache_key'
op|','
name|'env_key'
op|'='
name|'_get_cache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'resp'
op|'.'
name|'environ'
op|'['
name|'env_key'
op|']'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
name|'if'
name|'ret_not_found'
name|'or'
name|'is_success'
op|'('
name|'info'
op|'['
string|"'status'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'info'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_info
dedent|''
name|'def'
name|'_get_object_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
name|'swift_source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the info about object\n\n    Note: This call bypasses auth. Success does not imply that the\n          request has authorization to the info.\n\n    :param app: the application object\n    :param env: the environment used by the current request\n    :param account: The unquoted name of the account\n    :param container: The unquoted name of the container\n    :param obj: The unquoted name of the object\n    :returns: the cached info or None if cannot be retrieved\n    """'
newline|'\n'
name|'env_key'
op|'='
name|'get_object_env_key'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'info'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
name|'env_key'
op|')'
newline|'\n'
name|'if'
name|'info'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'info'
newline|'\n'
comment|"# Not in cached, let's try the object servers"
nl|'\n'
dedent|''
name|'path'
op|'='
string|"'/v1/%s/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
newline|'\n'
name|'req'
op|'='
name|'_prepare_pre_auth_info_request'
op|'('
name|'env'
op|','
name|'path'
op|','
name|'swift_source'
op|')'
newline|'\n'
comment|'# Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in'
nl|'\n'
comment|'# the environment under environ[env_key]. We will'
nl|'\n'
comment|'# pick the one from environ[env_key] and use it to set the caller env'
nl|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'app'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'resp'
op|'.'
name|'environ'
op|'['
name|'env_key'
op|']'
newline|'\n'
name|'env'
op|'['
name|'env_key'
op|']'
op|'='
name|'info'
newline|'\n'
name|'return'
name|'info'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|close_swift_conn
dedent|''
name|'def'
name|'close_swift_conn'
op|'('
name|'src'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Force close the http connection to the backend.\n\n    :param src: the response from the backend\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Since the backends set "Connection: close" in their response'
nl|'\n'
comment|'# headers, the response object (src) is solely responsible for the'
nl|'\n'
comment|'# socket. The connection object (src.swift_conn) has no references'
nl|'\n'
comment|'# to the socket, so calling its close() method does nothing, and'
nl|'\n'
comment|"# therefore we don't do it."
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Also, since calling the response's close() method might not"
nl|'\n'
comment|'# close the underlying socket but only decrement some'
nl|'\n'
comment|'# reference-counter, we have a special method here that really,'
nl|'\n'
comment|'# really kills the underlying socket with a close() syscall.'
nl|'\n'
indent|'        '
name|'src'
op|'.'
name|'nuke_from_orbit'
op|'('
op|')'
comment|"# it's the only way to be sure"
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bytes_to_skip
dedent|''
dedent|''
name|'def'
name|'bytes_to_skip'
op|'('
name|'record_size'
op|','
name|'range_start'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Assume an object is composed of N records, where the first N-1 are all\n    the same size and the last is at most that large, but may be smaller.\n\n    When a range request is made, it might start with a partial record. This\n    must be discarded, lest the consumer get bad data. This is particularly\n    true of suffix-byte-range requests, e.g. "Range: bytes=-12345" where the\n    size of the object is unknown at the time the request is made.\n\n    This function computes the number of bytes that must be discarded to\n    ensure only whole records are yielded. Erasure-code decoding needs this.\n\n    This function could have been inlined, but it took enough tries to get\n    right that some targeted unit tests were desirable, hence its extraction.\n    """'
newline|'\n'
name|'return'
op|'('
name|'record_size'
op|'-'
op|'('
name|'range_start'
op|'%'
name|'record_size'
op|')'
op|')'
op|'%'
name|'record_size'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResumingGetter
dedent|''
name|'class'
name|'ResumingGetter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'req'
op|','
name|'server_type'
op|','
name|'node_iter'
op|','
name|'partition'
op|','
name|'path'
op|','
nl|'\n'
name|'backend_headers'
op|','
name|'client_chunk_size'
op|'='
name|'None'
op|','
name|'newest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'node_iter'
op|'='
name|'node_iter'
newline|'\n'
name|'self'
op|'.'
name|'server_type'
op|'='
name|'server_type'
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'backend_headers'
op|'='
name|'backend_headers'
newline|'\n'
name|'self'
op|'.'
name|'client_chunk_size'
op|'='
name|'client_chunk_size'
newline|'\n'
name|'self'
op|'.'
name|'skip_bytes'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'used_nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'used_source_etag'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# stuff from request'
nl|'\n'
name|'self'
op|'.'
name|'req_method'
op|'='
name|'req'
op|'.'
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'req_path'
op|'='
name|'req'
op|'.'
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'req_query_string'
op|'='
name|'req'
op|'.'
name|'query_string'
newline|'\n'
name|'if'
name|'newest'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'newest'
op|'='
name|'config_true_value'
op|'('
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-newest'"
op|','
string|"'f'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'newest'
op|'='
name|'newest'
newline|'\n'
nl|'\n'
comment|'# populated when finding source'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# populated from response headers'
nl|'\n'
name|'self'
op|'.'
name|'start_byte'
op|'='
name|'self'
op|'.'
name|'end_byte'
op|'='
name|'self'
op|'.'
name|'length'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|fast_forward
dedent|''
name|'def'
name|'fast_forward'
op|'('
name|'self'
op|','
name|'num_bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Will skip num_bytes into the current ranges.\n\n        :params num_bytes: the number of bytes that have already been read on\n                           this request. This will change the Range header\n                           so that the next req will start where it left off.\n\n        :raises ValueError: if invalid range header\n        :raises HTTPRequestedRangeNotSatisfiable: if begin + num_bytes\n                                                  > end of range + 1\n        :raises RangeAlreadyComplete: if begin + num_bytes == end of range + 1\n        """'
newline|'\n'
name|'if'
string|"'Range'"
name|'in'
name|'self'
op|'.'
name|'backend_headers'
op|':'
newline|'\n'
indent|'            '
name|'req_range'
op|'='
name|'Range'
op|'('
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'begin'
op|','
name|'end'
op|'='
name|'req_range'
op|'.'
name|'ranges'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'begin'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# this is a -50 range req (last 50 bytes of file)'
nl|'\n'
indent|'                '
name|'end'
op|'-='
name|'num_bytes'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'begin'
op|'+='
name|'num_bytes'
newline|'\n'
dedent|''
name|'if'
name|'end'
name|'and'
name|'begin'
op|'=='
name|'end'
op|'+'
number|'1'
op|':'
newline|'\n'
comment|"# we sent out exactly the first range's worth of bytes, so"
nl|'\n'
comment|"# we're done with it"
nl|'\n'
indent|'                '
name|'raise'
name|'RangeAlreadyComplete'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'end'
name|'and'
name|'begin'
op|'>'
name|'end'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'HTTPRequestedRangeNotSatisfiable'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'end'
name|'and'
name|'begin'
op|':'
newline|'\n'
indent|'                '
name|'req_range'
op|'.'
name|'ranges'
op|'='
op|'['
op|'('
name|'begin'
op|','
name|'end'
op|')'
op|']'
op|'+'
name|'req_range'
op|'.'
name|'ranges'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'end'
op|':'
newline|'\n'
indent|'                '
name|'req_range'
op|'.'
name|'ranges'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'end'
op|')'
op|']'
op|'+'
name|'req_range'
op|'.'
name|'ranges'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'req_range'
op|'.'
name|'ranges'
op|'='
op|'['
op|'('
name|'begin'
op|','
name|'None'
op|')'
op|']'
op|'+'
name|'req_range'
op|'.'
name|'ranges'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|'='
name|'str'
op|'('
name|'req_range'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|'='
string|"'bytes=%d-'"
op|'%'
name|'num_bytes'
newline|'\n'
nl|'\n'
DECL|member|pop_range
dedent|''
dedent|''
name|'def'
name|'pop_range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the first byterange from our Range header.\n\n        This is used after a byterange has been completely sent to the\n        client; this way, should we need to resume the download from another\n        object server, we do not re-fetch byteranges that the client already\n        has.\n\n        If we have no Range header, this is a no-op.\n        """'
newline|'\n'
name|'if'
string|"'Range'"
name|'in'
name|'self'
op|'.'
name|'backend_headers'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'req_range'
op|'='
name|'Range'
op|'('
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|"# there's a Range header, but it's garbage, so get rid of it"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'backend_headers'
op|'.'
name|'pop'
op|'('
string|"'Range'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'begin'
op|','
name|'end'
op|'='
name|'req_range'
op|'.'
name|'ranges'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'req_range'
op|'.'
name|'ranges'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|'='
name|'str'
op|'('
name|'req_range'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'backend_headers'
op|'.'
name|'pop'
op|'('
string|"'Range'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|learn_size_from_content_range
dedent|''
dedent|''
dedent|''
name|'def'
name|'learn_size_from_content_range'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'end'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If client_chunk_size is set, makes sure we yield things starting on\n        chunk boundaries based on the Content-Range header in the response.\n\n        Sets our Range header\'s first byterange to the value learned from\n        the Content-Range header in the response; if we were given a\n        fully-specified range (e.g. "bytes=123-456"), this is a no-op.\n\n        If we were given a half-specified range (e.g. "bytes=123-" or\n        "bytes=-456"), then this changes the Range header to a\n        semantically-equivalent one *and* it lets us resume on a proper\n        boundary instead of just in the middle of a piece somewhere.\n        """'
newline|'\n'
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'client_chunk_size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'skip_bytes'
op|'='
name|'bytes_to_skip'
op|'('
name|'self'
op|'.'
name|'client_chunk_size'
op|','
name|'start'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'Range'"
name|'in'
name|'self'
op|'.'
name|'backend_headers'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'req_range'
op|'='
name|'Range'
op|'('
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|')'
newline|'\n'
name|'new_ranges'
op|'='
op|'['
op|'('
name|'start'
op|','
name|'end'
op|')'
op|']'
op|'+'
name|'req_range'
op|'.'
name|'ranges'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'new_ranges'
op|'='
op|'['
op|'('
name|'start'
op|','
name|'end'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_ranges'
op|'='
op|'['
op|'('
name|'start'
op|','
name|'end'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'backend_headers'
op|'['
string|"'Range'"
op|']'
op|'='
op|'('
nl|'\n'
string|'"bytes="'
op|'+'
op|'('
string|'","'
op|'.'
name|'join'
op|'('
string|'"%s-%s"'
op|'%'
op|'('
name|'s'
name|'if'
name|'s'
name|'is'
name|'not'
name|'None'
name|'else'
string|"''"
op|','
nl|'\n'
name|'e'
name|'if'
name|'e'
name|'is'
name|'not'
name|'None'
name|'else'
string|"''"
op|')'
nl|'\n'
name|'for'
name|'s'
op|','
name|'e'
name|'in'
name|'new_ranges'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_good_source
dedent|''
name|'def'
name|'is_good_source'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicates whether or not the request made to the backend found\n        what it was looking for.\n\n        :param src: the response from the backend\n        :returns: True if found, False if not\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'server_type'
op|'=='
string|"'Object'"
name|'and'
name|'src'
op|'.'
name|'status'
op|'=='
number|'416'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'is_success'
op|'('
name|'src'
op|'.'
name|'status'
op|')'
name|'or'
name|'is_redirection'
op|'('
name|'src'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|response_parts_iter
dedent|''
name|'def'
name|'response_parts_iter'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'source'
op|','
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_source_and_node'
op|'('
op|')'
newline|'\n'
name|'it'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'            '
name|'it'
op|'='
name|'self'
op|'.'
name|'_get_response_parts_iter'
op|'('
name|'req'
op|','
name|'node'
op|','
name|'source'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'it'
newline|'\n'
nl|'\n'
DECL|member|_get_response_parts_iter
dedent|''
name|'def'
name|'_get_response_parts_iter'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'node'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
comment|'# Someday we can replace this [mess] with python 3\'s "nonlocal"'
nl|'\n'
indent|'        '
name|'source'
op|'='
op|'['
name|'source'
op|']'
newline|'\n'
name|'node'
op|'='
op|'['
name|'node'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'client_chunk_size'
op|'='
name|'self'
op|'.'
name|'client_chunk_size'
newline|'\n'
name|'node_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'server_type'
op|'=='
string|"'Object'"
op|':'
newline|'\n'
indent|'                '
name|'node_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recoverable_node_timeout'
newline|'\n'
nl|'\n'
comment|'# This is safe; it sets up a generator but does not call next()'
nl|'\n'
comment|'# on it, so no IO is performed.'
nl|'\n'
dedent|''
name|'parts_iter'
op|'='
op|'['
nl|'\n'
name|'http_response_to_document_iters'
op|'('
nl|'\n'
name|'source'
op|'['
number|'0'
op|']'
op|','
name|'read_chunk_size'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|function|get_next_doc_part
name|'def'
name|'get_next_doc_part'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
comment|'# This call to next() performs IO when we have a'
nl|'\n'
comment|'# multipart/byteranges response; it reads the MIME'
nl|'\n'
comment|'# boundary and part headers.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# If we don't have a multipart/byteranges response,"
nl|'\n'
comment|'# but just a 200 or a single-range 206, then this'
nl|'\n'
comment|'# performs no IO, and either just returns source or'
nl|'\n'
comment|'# raises StopIteration.'
nl|'\n'
indent|'                        '
name|'with'
name|'ChunkReadTimeout'
op|'('
name|'node_timeout'
op|')'
op|':'
newline|'\n'
comment|'# if StopIteration is raised, it escapes and is'
nl|'\n'
comment|'# handled elsewhere'
nl|'\n'
indent|'                            '
name|'start_byte'
op|','
name|'end_byte'
op|','
name|'length'
op|','
name|'headers'
op|','
name|'part'
op|'='
name|'next'
op|'('
nl|'\n'
name|'parts_iter'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'start_byte'
op|','
name|'end_byte'
op|','
name|'length'
op|','
name|'headers'
op|','
name|'part'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ChunkReadTimeout'
op|':'
newline|'\n'
indent|'                        '
name|'new_source'
op|','
name|'new_node'
op|'='
name|'self'
op|'.'
name|'_get_source_and_node'
op|'('
op|')'
newline|'\n'
name|'if'
name|'new_source'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'exception_occurred'
op|'('
nl|'\n'
name|'node'
op|'['
number|'0'
op|']'
op|','
name|'_'
op|'('
string|"'Object'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to read during GET (retrying)'"
op|')'
op|')'
newline|'\n'
comment|'# Close-out the connection as best as possible.'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|','
string|"'swift_conn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'close_swift_conn'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'source'
op|'['
number|'0'
op|']'
op|'='
name|'new_source'
newline|'\n'
name|'node'
op|'['
number|'0'
op|']'
op|'='
name|'new_node'
newline|'\n'
comment|'# This is safe; it sets up a generator but does'
nl|'\n'
comment|'# not call next() on it, so no IO is performed.'
nl|'\n'
name|'parts_iter'
op|'['
number|'0'
op|']'
op|'='
name|'http_response_to_document_iters'
op|'('
nl|'\n'
name|'new_source'
op|','
nl|'\n'
name|'read_chunk_size'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'StopIteration'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|iter_bytes_from_response_part
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'iter_bytes_from_response_part'
op|'('
name|'part_file'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'nchunks'
op|'='
number|'0'
newline|'\n'
name|'buf'
op|'='
string|"''"
newline|'\n'
name|'bytes_used_from_backend'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'with'
name|'ChunkReadTimeout'
op|'('
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'chunk'
op|'='
name|'part_file'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
newline|'\n'
name|'nchunks'
op|'+='
number|'1'
newline|'\n'
name|'buf'
op|'+='
name|'chunk'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ChunkReadTimeout'
op|':'
newline|'\n'
indent|'                        '
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
op|'='
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'newest'
name|'or'
name|'self'
op|'.'
name|'server_type'
op|'!='
string|"'Object'"
op|':'
newline|'\n'
indent|'                            '
name|'six'
op|'.'
name|'reraise'
op|'('
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'fast_forward'
op|'('
name|'bytes_used_from_backend'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'HTTPException'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'six'
op|'.'
name|'reraise'
op|'('
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'RangeAlreadyComplete'
op|':'
newline|'\n'
indent|'                            '
name|'break'
newline|'\n'
dedent|''
name|'buf'
op|'='
string|"''"
newline|'\n'
name|'new_source'
op|','
name|'new_node'
op|'='
name|'self'
op|'.'
name|'_get_source_and_node'
op|'('
op|')'
newline|'\n'
name|'if'
name|'new_source'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'exception_occurred'
op|'('
nl|'\n'
name|'node'
op|'['
number|'0'
op|']'
op|','
name|'_'
op|'('
string|"'Object'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to read during GET (retrying)'"
op|')'
op|')'
newline|'\n'
comment|'# Close-out the connection as best as possible.'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|','
string|"'swift_conn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'close_swift_conn'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'source'
op|'['
number|'0'
op|']'
op|'='
name|'new_source'
newline|'\n'
name|'node'
op|'['
number|'0'
op|']'
op|'='
name|'new_node'
newline|'\n'
comment|'# This is safe; it just sets up a generator but'
nl|'\n'
comment|'# does not call next() on it, so no IO is'
nl|'\n'
comment|'# performed.'
nl|'\n'
name|'parts_iter'
op|'['
number|'0'
op|']'
op|'='
name|'http_response_to_document_iters'
op|'('
nl|'\n'
name|'new_source'
op|','
nl|'\n'
name|'read_chunk_size'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                                '
name|'_junk'
op|','
name|'_junk'
op|','
name|'_junk'
op|','
name|'_junk'
op|','
name|'part_file'
op|'='
name|'get_next_doc_part'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
comment|'# Tried to find a new node from which to'
nl|'\n'
comment|"# finish the GET, but failed. There's"
nl|'\n'
comment|'# nothing more to do here.'
nl|'\n'
indent|'                                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'six'
op|'.'
name|'reraise'
op|'('
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'exc_traceback'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'buf'
name|'and'
name|'self'
op|'.'
name|'skip_bytes'
op|':'
newline|'\n'
indent|'                            '
name|'if'
name|'self'
op|'.'
name|'skip_bytes'
op|'<'
name|'len'
op|'('
name|'buf'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'buf'
op|'='
name|'buf'
op|'['
name|'self'
op|'.'
name|'skip_bytes'
op|':'
op|']'
newline|'\n'
name|'bytes_used_from_backend'
op|'+='
name|'self'
op|'.'
name|'skip_bytes'
newline|'\n'
name|'self'
op|'.'
name|'skip_bytes'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                                '
name|'self'
op|'.'
name|'skip_bytes'
op|'-='
name|'len'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'bytes_used_from_backend'
op|'+='
name|'len'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'buf'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                            '
name|'if'
name|'buf'
op|':'
newline|'\n'
indent|'                                '
name|'with'
name|'ChunkWriteTimeout'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
op|':'
newline|'\n'
indent|'                                    '
name|'bytes_used_from_backend'
op|'+='
name|'len'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'yield'
name|'buf'
newline|'\n'
dedent|''
name|'buf'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'client_chunk_size'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                            '
name|'while'
name|'len'
op|'('
name|'buf'
op|')'
op|'>='
name|'client_chunk_size'
op|':'
newline|'\n'
indent|'                                '
name|'client_chunk'
op|'='
name|'buf'
op|'['
op|':'
name|'client_chunk_size'
op|']'
newline|'\n'
name|'buf'
op|'='
name|'buf'
op|'['
name|'client_chunk_size'
op|':'
op|']'
newline|'\n'
name|'with'
name|'ChunkWriteTimeout'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
op|':'
newline|'\n'
indent|'                                    '
name|'yield'
name|'client_chunk'
newline|'\n'
dedent|''
name|'bytes_used_from_backend'
op|'+='
name|'len'
op|'('
name|'client_chunk'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'with'
name|'ChunkWriteTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'yield'
name|'buf'
newline|'\n'
dedent|''
name|'bytes_used_from_backend'
op|'+='
name|'len'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'buf'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# This is for fairness; if the network is outpacing'
nl|'\n'
comment|"# the CPU, we'll always be able to read and write"
nl|'\n'
comment|'# data without encountering an EWOULDBLOCK, and so'
nl|'\n'
comment|'# eventlet will not switch greenthreads on its own.'
nl|'\n'
comment|"# We do it manually so that clients don't starve."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The number 5 here was chosen by making stuff up.'
nl|'\n'
comment|"# It's not every single chunk, but it's not too big"
nl|'\n'
comment|'# either, so it seemed like it would probably be an'
nl|'\n'
comment|'# okay choice.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that we may trampoline to other greenthreads'
nl|'\n'
comment|'# more often than once every 5 chunks, depending on'
nl|'\n'
comment|'# how blocking our network IO is; the explicit sleep'
nl|'\n'
comment|'# here simply provides a lower bound on the rate of'
nl|'\n'
comment|'# trampolining.'
nl|'\n'
dedent|''
name|'if'
name|'nchunks'
op|'%'
number|'5'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                            '
name|'sleep'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'start_byte'
op|','
name|'end_byte'
op|','
name|'length'
op|','
name|'headers'
op|','
name|'part'
op|'='
name|'get_next_doc_part'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'learn_size_from_content_range'
op|'('
nl|'\n'
name|'start_byte'
op|','
name|'end_byte'
op|','
name|'length'
op|')'
newline|'\n'
name|'part_iter'
op|'='
name|'iter_bytes_from_response_part'
op|'('
name|'part'
op|')'
newline|'\n'
name|'yield'
op|'{'
string|"'start_byte'"
op|':'
name|'start_byte'
op|','
string|"'end_byte'"
op|':'
name|'end_byte'
op|','
nl|'\n'
string|"'entity_length'"
op|':'
name|'length'
op|','
string|"'headers'"
op|':'
name|'headers'
op|','
nl|'\n'
string|"'part_iter'"
op|':'
name|'part_iter'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'pop_range'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.non_client_disconnect'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'ChunkReadTimeout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|'['
number|'0'
op|']'
op|','
name|'_'
op|'('
string|"'Object'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to read during GET'"
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'ChunkWriteTimeout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Client did not read from proxy within %ss'"
op|')'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'client_timeouts'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'GeneratorExit'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift.non_client_disconnect'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Client disconnected on read'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Trying to send to client'"
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# Close-out the connection as best as possible.'
nl|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|','
string|"'swift_conn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'close_swift_conn'
op|'('
name|'source'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|last_status
name|'def'
name|'last_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'statuses'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'statuses'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|last_headers
name|'def'
name|'last_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'source_headers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'source_headers'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_source_and_node
dedent|''
dedent|''
name|'def'
name|'_get_source_and_node'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'='
op|'['
op|']'
newline|'\n'
name|'sources'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'node_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'server_type'
op|'=='
string|"'Object'"
name|'and'
name|'not'
name|'self'
op|'.'
name|'newest'
op|':'
newline|'\n'
indent|'            '
name|'node_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recoverable_node_timeout'
newline|'\n'
dedent|''
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'node_iter'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'node'
name|'in'
name|'self'
op|'.'
name|'used_nodes'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'start_node_timing'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
nl|'\n'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
name|'node'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'partition'
op|','
name|'self'
op|'.'
name|'req_method'
op|','
name|'self'
op|'.'
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'self'
op|'.'
name|'backend_headers'
op|','
nl|'\n'
name|'query_string'
op|'='
name|'self'
op|'.'
name|'req_query_string'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'set_node_timing'
op|'('
name|'node'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_node_timing'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'Timeout'
op|'('
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'possible_source'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'possible_source'
op|'.'
name|'swift_conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'exception_occurred'
op|'('
nl|'\n'
name|'node'
op|','
name|'self'
op|'.'
name|'server_type'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'self'
op|'.'
name|'req_method'
op|','
string|"'path'"
op|':'
name|'self'
op|'.'
name|'req_path'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'is_good_source'
op|'('
name|'possible_source'
op|')'
op|':'
newline|'\n'
comment|"# 404 if we know we don't have a synced copy"
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'float'
op|'('
name|'possible_source'
op|'.'
name|'getheader'
op|'('
string|"'X-PUT-Timestamp'"
op|','
number|'1'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'HTTP_NOT_FOUND'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'.'
name|'append'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'close_swift_conn'
op|'('
name|'possible_source'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'used_source_etag'
op|':'
newline|'\n'
indent|'                        '
name|'src_headers'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
nl|'\n'
name|'possible_source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'used_source_etag'
op|'!='
name|'src_headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'x-object-sysmeta-ec-etag'"
op|','
nl|'\n'
name|'src_headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|','
string|"''"
op|')'
op|')'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'HTTP_NOT_FOUND'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'.'
name|'append'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'sources'
op|'.'
name|'append'
op|'('
op|'('
name|'possible_source'
op|','
name|'node'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'newest'
op|':'
comment|'# one good source is enough'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bodies'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source_headers'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'possible_source'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR Insufficient Storage'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'is_server_error'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_occurred'
op|'('
nl|'\n'
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR %(status)d %(body)s '"
nl|'\n'
string|"'From %(type)s Server'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'status'"
op|':'
name|'possible_source'
op|'.'
name|'status'
op|','
nl|'\n'
string|"'body'"
op|':'
name|'self'
op|'.'
name|'bodies'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|':'
number|'1024'
op|']'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'self'
op|'.'
name|'server_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'sources'
op|':'
newline|'\n'
indent|'            '
name|'sources'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'s'
op|':'
name|'source_key'
op|'('
name|'s'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'source'
op|','
name|'node'
op|'='
name|'sources'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'for'
name|'src'
op|','
name|'_junk'
name|'in'
name|'sources'
op|':'
newline|'\n'
indent|'                '
name|'close_swift_conn'
op|'('
name|'src'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'used_nodes'
op|'.'
name|'append'
op|'('
name|'node'
op|')'
newline|'\n'
name|'src_headers'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
nl|'\n'
name|'possible_source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Save off the source etag so that, if we lose the connection'
nl|'\n'
comment|'# and have to resume from a different node, we can be sure that'
nl|'\n'
comment|'# we have the same object (replication) or a fragment archive'
nl|'\n'
comment|'# from the same object (EC). Otherwise, if the cluster has two'
nl|'\n'
comment|'# versions of the same object, we might end up switching between'
nl|'\n'
comment|'# old and new mid-stream and giving garbage to the client.'
nl|'\n'
name|'self'
op|'.'
name|'used_source_etag'
op|'='
name|'src_headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'x-object-sysmeta-ec-etag'"
op|','
nl|'\n'
name|'src_headers'
op|'.'
name|'get'
op|'('
string|"'etag'"
op|','
string|"''"
op|')'
op|')'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
name|'return'
name|'source'
op|','
name|'node'
newline|'\n'
dedent|''
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetOrHeadHandler
dedent|''
dedent|''
name|'class'
name|'GetOrHeadHandler'
op|'('
name|'ResumingGetter'
op|')'
op|':'
newline|'\n'
DECL|member|_make_app_iter
indent|'    '
name|'def'
name|'_make_app_iter'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'node'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an iterator over the contents of the source (via its read\n        func).  There is also quite a bit of cleanup to ensure garbage\n        collection works and the underlying socket of the source is closed.\n\n        :param req: incoming request object\n        :param source: The httplib.Response object this iterator should read\n                       from.\n        :param node: The node the source is reading from, for logging purposes.\n        """'
newline|'\n'
nl|'\n'
name|'ct'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
name|'if'
name|'ct'
op|':'
newline|'\n'
indent|'            '
name|'content_type'
op|','
name|'content_type_attrs'
op|'='
name|'parse_content_type'
op|'('
name|'ct'
op|')'
newline|'\n'
name|'is_multipart'
op|'='
name|'content_type'
op|'=='
string|"'multipart/byteranges'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'is_multipart'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'boundary'
op|'='
string|'"dontcare"'
newline|'\n'
name|'if'
name|'is_multipart'
op|':'
newline|'\n'
comment|'# we need some MIME boundary; fortunately, the object server has'
nl|'\n'
comment|"# furnished one for us, so we'll just re-use it"
nl|'\n'
indent|'            '
name|'boundary'
op|'='
name|'dict'
op|'('
name|'content_type_attrs'
op|')'
op|'['
string|'"boundary"'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'parts_iter'
op|'='
name|'self'
op|'.'
name|'_get_response_parts_iter'
op|'('
name|'req'
op|','
name|'node'
op|','
name|'source'
op|')'
newline|'\n'
nl|'\n'
DECL|function|add_content_type
name|'def'
name|'add_content_type'
op|'('
name|'response_part'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response_part'
op|'['
string|'"content_type"'
op|']'
op|'='
name|'HeaderKeyDict'
op|'('
name|'response_part'
op|'['
string|'"headers"'
op|']'
op|')'
op|'.'
name|'get'
op|'('
string|'"Content-Type"'
op|')'
newline|'\n'
name|'return'
name|'response_part'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'document_iters_to_http_response_body'
op|'('
nl|'\n'
op|'('
name|'add_content_type'
op|'('
name|'pi'
op|')'
name|'for'
name|'pi'
name|'in'
name|'parts_iter'
op|')'
op|','
nl|'\n'
name|'boundary'
op|','
name|'is_multipart'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_working_response
dedent|''
name|'def'
name|'get_working_response'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'source'
op|','
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_source_and_node'
op|'('
op|')'
newline|'\n'
name|'res'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'status'
op|'='
name|'source'
op|'.'
name|'status'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
name|'source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'GET'"
name|'and'
name|'source'
op|'.'
name|'status'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'app_iter'
op|'='
name|'self'
op|'.'
name|'_make_app_iter'
op|'('
name|'req'
op|','
name|'node'
op|','
name|'source'
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'res'
op|'.'
name|'swift_conn'
op|'='
name|'source'
op|'.'
name|'swift_conn'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'res'
op|'.'
name|'environ'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'environ'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'environ'
op|'['
string|"'swift_x_timestamp'"
op|']'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
newline|'\n'
name|'res'
op|'.'
name|'accept_ranges'
op|'='
string|"'bytes'"
newline|'\n'
name|'res'
op|'.'
name|'content_length'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
name|'if'
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'charset'
op|'='
name|'None'
newline|'\n'
name|'res'
op|'.'
name|'content_type'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NodeIter
dedent|''
dedent|''
name|'class'
name|'NodeIter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Yields nodes for a ring partition, skipping over error\n    limited nodes and stopping at the configurable number of nodes. If a\n    node yielded subsequently gets error limited, an extra node will be\n    yielded to take its place.\n\n    Note that if you\'re going to iterate over this concurrently from\n    multiple greenthreads, you\'ll want to use a\n    swift.common.utils.GreenthreadSafeIterator to serialize access.\n    Otherwise, you may get ValueErrors from concurrent access. (You also\n    may not, depending on how logging is configured, the vagaries of\n    socket IO and eventlet, and the phase of the moon.)\n\n    :param app: a proxy app\n    :param ring: ring to get yield nodes from\n    :param partition: ring partition to yield nodes for\n    :param node_iter: optional iterable of nodes to try. Useful if you\n        want to filter or reorder the nodes.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'ring'
op|','
name|'partition'
op|','
name|'node_iter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'ring'
op|'='
name|'ring'
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
nl|'\n'
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'node_iter'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node_iter'
op|'='
name|'itertools'
op|'.'
name|'chain'
op|'('
nl|'\n'
name|'part_nodes'
op|','
name|'ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
dedent|''
name|'num_primary_nodes'
op|'='
name|'len'
op|'('
name|'part_nodes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nodes_left'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'request_node_count'
op|'('
name|'num_primary_nodes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expected_handoffs'
op|'='
name|'self'
op|'.'
name|'nodes_left'
op|'-'
name|'num_primary_nodes'
newline|'\n'
nl|'\n'
comment|'# Use of list() here forcibly yanks the first N nodes (the primary'
nl|'\n'
comment|'# nodes) from node_iter, so the rest of its values are handoffs.'
nl|'\n'
name|'self'
op|'.'
name|'primary_nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'sort_nodes'
op|'('
nl|'\n'
name|'list'
op|'('
name|'itertools'
op|'.'
name|'islice'
op|'('
name|'node_iter'
op|','
name|'num_primary_nodes'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'handoff_iter'
op|'='
name|'node_iter'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_node_iter'
op|'='
name|'self'
op|'.'
name|'_node_gen'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|log_handoffs
dedent|''
name|'def'
name|'log_handoffs'
op|'('
name|'self'
op|','
name|'handoffs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Log handoff requests if handoff logging is enabled and the\n        handoff was not expected.\n\n        We only log handoffs when we\'ve pushed the handoff count further\n        than we would normally have expected under normal circumstances,\n        that is (request_node_count - num_primaries), when handoffs goes\n        higher than that it means one of the primaries must have been\n        skipped because of error limiting before we consumed all of our\n        nodes_left.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'app'
op|'.'
name|'log_handoffs'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'extra_handoffs'
op|'='
name|'handoffs'
op|'-'
name|'self'
op|'.'
name|'expected_handoffs'
newline|'\n'
name|'if'
name|'extra_handoffs'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_count'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
nl|'\n'
string|"'Handoff requested (%d)'"
op|'%'
name|'handoffs'
op|')'
newline|'\n'
name|'if'
op|'('
name|'extra_handoffs'
op|'=='
name|'len'
op|'('
name|'self'
op|'.'
name|'primary_nodes'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# all the primaries were skipped, and handoffs didn't help"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_all_count'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_node_gen
dedent|''
dedent|''
dedent|''
name|'def'
name|'_node_gen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'primary_nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'handoffs'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'handoff_iter'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'handoffs'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'log_handoffs'
op|'('
name|'handoffs'
op|')'
newline|'\n'
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'next'
op|'('
name|'self'
op|'.'
name|'_node_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__next__
dedent|''
name|'def'
name|'__next__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
dedent|''
dedent|''
name|'class'
name|'Controller'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base WSGI controller class for the proxy"""'
newline|'\n'
DECL|variable|server_type
name|'server_type'
op|'='
string|"'Base'"
newline|'\n'
nl|'\n'
comment|'# Ensure these are all lowercase'
nl|'\n'
DECL|variable|pass_through_headers
name|'pass_through_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a controller attached to an application instance\n\n        :param app: the application instance\n        """'
newline|'\n'
name|'self'
op|'.'
name|'account_name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'trans_id'
op|'='
string|"'-'"
newline|'\n'
name|'self'
op|'.'
name|'_allowed_methods'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|allowed_methods
name|'def'
name|'allowed_methods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_allowed_methods'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_allowed_methods'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'all_methods'
op|'='
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'self'
op|','
name|'predicate'
op|'='
name|'inspect'
op|'.'
name|'ismethod'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'m'
name|'in'
name|'all_methods'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'getattr'
op|'('
name|'m'
op|','
string|"'publicly_accessible'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_allowed_methods'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_allowed_methods'
newline|'\n'
nl|'\n'
DECL|member|_x_remove_headers
dedent|''
name|'def'
name|'_x_remove_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of headers that must not be sent to the backend\n\n        :returns: a list of header\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|transfer_headers
dedent|''
name|'def'
name|'transfer_headers'
op|'('
name|'self'
op|','
name|'src_headers'
op|','
name|'dst_headers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Transfer legal headers from an original client request to dictionary\n        that will be used as headers by the backend request\n\n        :param src_headers: A dictionary of the original client request headers\n        :param dst_headers: A dictionary of the backend request headers\n        """'
newline|'\n'
name|'st'
op|'='
name|'self'
op|'.'
name|'server_type'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'x_remove'
op|'='
string|"'x-remove-%s-meta-'"
op|'%'
name|'st'
newline|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'-remove'"
op|','
string|"''"
op|','
number|'1'
op|')'
op|','
string|"''"
op|')'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'src_headers'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'x_remove'
op|')'
name|'or'
nl|'\n'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'_x_remove_headers'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'src_headers'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'pass_through_headers'
name|'or'
nl|'\n'
name|'is_sys_or_user_meta'
op|'('
name|'st'
op|','
name|'k'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_request_headers
dedent|''
name|'def'
name|'generate_request_headers'
op|'('
name|'self'
op|','
name|'orig_req'
op|'='
name|'None'
op|','
name|'additional'
op|'='
name|'None'
op|','
nl|'\n'
name|'transfer'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a list of headers to be used in backend requests\n\n        :param orig_req: the original request sent by the client to the proxy\n        :param additional: additional headers to send to the backend\n        :param transfer: If True, transfer headers from original client request\n        :returns: a dictionary of headers\n        """'
newline|'\n'
comment|"# Use the additional headers first so they don't overwrite the headers"
nl|'\n'
comment|'# we require.'
nl|'\n'
name|'headers'
op|'='
name|'HeaderKeyDict'
op|'('
name|'additional'
op|')'
name|'if'
name|'additional'
name|'else'
name|'HeaderKeyDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'transfer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transfer_headers'
op|'('
name|'orig_req'
op|'.'
name|'headers'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'.'
name|'setdefault'
op|'('
string|"'x-timestamp'"
op|','
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'if'
name|'orig_req'
op|':'
newline|'\n'
indent|'            '
name|'referer'
op|'='
name|'orig_req'
op|'.'
name|'as_referer'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'referer'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'x-trans-id'"
op|']'
op|'='
name|'self'
op|'.'
name|'trans_id'
newline|'\n'
name|'headers'
op|'['
string|"'connection'"
op|']'
op|'='
string|"'close'"
newline|'\n'
name|'headers'
op|'['
string|"'user-agent'"
op|']'
op|'='
string|"'proxy-server %s'"
op|'%'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'referer'"
op|']'
op|'='
name|'referer'
newline|'\n'
name|'return'
name|'headers'
newline|'\n'
nl|'\n'
DECL|member|account_info
dedent|''
name|'def'
name|'account_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'req'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get account information, and also verify that the account exists.\n\n        :param account: name of the account to get the info for\n        :param req: caller\'s HTTP request context object (optional)\n        :returns: tuple of (account partition, account nodes, container_count)\n                  or (None, None, None) if it does not exist\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|')'
newline|'\n'
name|'if'
name|'req'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
string|"'environ'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'get_info'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'env'
op|','
name|'account'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'info'
op|'.'
name|'get'
op|'('
string|"'container_count'"
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'container_count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'container_count'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'container_count'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'container_count'
newline|'\n'
nl|'\n'
DECL|member|container_info
dedent|''
name|'def'
name|'container_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'container'
op|','
name|'req'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get container information and thusly verify container existence.\n        This will also verify account existence.\n\n        :param account: account name for the container\n        :param container: container name to look up\n        :param req: caller\'s HTTP request context object (optional)\n        :returns: dict containing at least container partition (\'partition\'),\n                  container nodes (\'containers\'), container read\n                  acl (\'read_acl\'), container write acl (\'write_acl\'),\n                  and container sync key (\'sync_key\').\n                  Values are set to None if the container does not exist.\n        """'
newline|'\n'
name|'part'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'req'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
string|"'environ'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'env'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'info'
op|'='
name|'get_info'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
name|'headers_to_container_info'
op|'('
op|'{'
op|'}'
op|','
number|'0'
op|')'
newline|'\n'
name|'info'
op|'['
string|"'partition'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'info'
op|'['
string|"'nodes'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'partition'"
op|']'
op|'='
name|'part'
newline|'\n'
name|'info'
op|'['
string|"'nodes'"
op|']'
op|'='
name|'nodes'
newline|'\n'
dedent|''
name|'if'
name|'info'
op|'.'
name|'get'
op|'('
string|"'storage_policy'"
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'storage_policy'"
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
DECL|member|_make_request
dedent|''
name|'def'
name|'_make_request'
op|'('
name|'self'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'query'
op|','
nl|'\n'
name|'logger_thread_locals'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Iterates over the given node iterator, sending an HTTP request to one\n        node at a time.  The first non-informational, non-server-error\n        response is returned.  If no non-informational, non-server-error\n        response is received from any of the nodes, returns None.\n\n        :param nodes: an iterator of the backend server and handoff servers\n        :param part: the partition number\n        :param method: the method to send to the backend\n        :param path: the path to send to the backend\n                     (full path ends up being /<$device>/<$part>/<$path>)\n        :param headers: dictionary of headers\n        :param query: query string to send to the backend.\n        :param logger_thread_locals: The thread local values to be set on the\n                                     self.app.logger to retain transaction\n                                     logging information.\n        :returns: a swob.Response object, or None if no responses were received\n        """'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|'='
name|'logger_thread_locals'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start_node_timing'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'query_string'
op|'='
name|'query'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'node'
op|'='
name|'node'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'set_node_timing'
op|'('
name|'node'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_node_timing'
op|')'
newline|'\n'
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'is_informational'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
name|'and'
name|'not'
name|'is_server_error'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'resp'
op|'.'
name|'status'
op|','
name|'resp'
op|'.'
name|'reason'
op|','
name|'resp'
op|'.'
name|'getheaders'
op|'('
op|')'
op|','
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|','
nl|'\n'
name|'_'
op|'('
string|"'ERROR Insufficient Storage'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'is_server_error'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_occurred'
op|'('
nl|'\n'
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR %(status)d '"
nl|'\n'
string|"'Trying to %(method)s %(path)s'"
nl|'\n'
string|"'From Container Server'"
op|')'
op|'%'
op|'{'
nl|'\n'
string|"'status'"
op|':'
name|'resp'
op|'.'
name|'status'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'path'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'exception_occurred'
op|'('
nl|'\n'
name|'node'
op|','
name|'self'
op|'.'
name|'server_type'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'path'"
op|':'
name|'path'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_requests
dedent|''
dedent|''
dedent|''
name|'def'
name|'make_requests'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'ring'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
name|'query_string'
op|'='
string|"''"
op|','
name|'overrides'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sends an HTTP request to multiple nodes and aggregates the results.\n        It attempts the primary nodes concurrently, then iterates over the\n        handoff nodes as needed.\n\n        :param req: a request sent by the client\n        :param ring: the ring used for finding backend servers\n        :param part: the partition number\n        :param method: the method to send to the backend\n        :param path: the path to send to the backend\n                     (full path ends up being  /<$device>/<$part>/<$path>)\n        :param headers: a list of dicts, where each dict represents one\n                        backend request that should be made.\n        :param query_string: optional query string to send to the backend\n        :param overrides: optional return status override map used to override\n                          the returned status of a request.\n        :returns: a swob.Response object\n        """'
newline|'\n'
name|'start_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'part'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'GreenthreadSafeIterator'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'iter_nodes'
op|'('
name|'ring'
op|','
name|'part'
op|')'
op|')'
newline|'\n'
name|'pile'
op|'='
name|'GreenAsyncPile'
op|'('
name|'len'
op|'('
name|'start_nodes'
op|')'
op|')'
newline|'\n'
name|'for'
name|'head'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'pile'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_make_request'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'head'
op|','
name|'query_string'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
op|'['
op|']'
newline|'\n'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'resp'
name|'in'
name|'pile'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'append'
op|'('
name|'resp'
op|')'
newline|'\n'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'resp'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'have_quorum'
op|'('
name|'statuses'
op|','
name|'len'
op|'('
name|'start_nodes'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
comment|'# give any pending requests *some* chance to finish'
nl|'\n'
dedent|''
dedent|''
name|'finished_quickly'
op|'='
name|'pile'
op|'.'
name|'waitall'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'post_quorum_timeout'
op|')'
newline|'\n'
name|'for'
name|'resp'
name|'in'
name|'finished_quickly'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'append'
op|'('
name|'resp'
op|')'
newline|'\n'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'resp'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'while'
name|'len'
op|'('
name|'response'
op|')'
op|'<'
name|'len'
op|'('
name|'start_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'append'
op|'('
op|'('
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'statuses'
op|','
name|'reasons'
op|','
name|'resp_headers'
op|','
name|'bodies'
op|'='
name|'zip'
op|'('
op|'*'
name|'response'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'best_response'
op|'('
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|','
nl|'\n'
name|'overrides'
op|'='
name|'overrides'
op|','
name|'headers'
op|'='
name|'resp_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_quorum_size
dedent|''
name|'def'
name|'_quorum_size'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Number of successful backend responses needed for the proxy to\n        consider the client request successful.\n        """'
newline|'\n'
name|'return'
name|'quorum_size'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|have_quorum
dedent|''
name|'def'
name|'have_quorum'
op|'('
name|'self'
op|','
name|'statuses'
op|','
name|'node_count'
op|','
name|'quorum'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of statuses from several requests, determine if\n        a quorum response can already be decided.\n\n        :param statuses: list of statuses returned\n        :param node_count: number of nodes being queried (basically ring count)\n        :param quorum: number of statuses required for quorum\n        :returns: True or False, depending on if quorum is established\n        """'
newline|'\n'
name|'if'
name|'quorum'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'quorum'
op|'='
name|'self'
op|'.'
name|'_quorum_size'
op|'('
name|'node_count'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'statuses'
op|')'
op|'>='
name|'quorum'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'hundred'
name|'in'
op|'('
name|'HTTP_CONTINUE'
op|','
name|'HTTP_OK'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
nl|'\n'
name|'HTTP_BAD_REQUEST'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sum'
op|'('
number|'1'
name|'for'
name|'s'
name|'in'
name|'statuses'
nl|'\n'
name|'if'
name|'hundred'
op|'<='
name|'s'
op|'<'
name|'hundred'
op|'+'
number|'100'
op|')'
op|'>='
name|'quorum'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|best_response
dedent|''
name|'def'
name|'best_response'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'server_type'
op|','
nl|'\n'
name|'etag'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'overrides'
op|'='
name|'None'
op|','
nl|'\n'
name|'quorum_size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of responses from several servers, choose the best to\n        return to the API.\n\n        :param req: swob.Request object\n        :param statuses: list of statuses returned\n        :param reasons: list of reasons for each status\n        :param bodies: bodies of each response\n        :param server_type: type of server the responses came from\n        :param etag: etag\n        :param headers: headers of each response\n        :param overrides: overrides to apply when lacking quorum\n        :param quorum_size: quorum size to use\n        :returns: swob.Response object with the correct status, body, etc. set\n        """'
newline|'\n'
name|'if'
name|'quorum_size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'quorum_size'
op|'='
name|'self'
op|'.'
name|'_quorum_size'
op|'('
name|'len'
op|'('
name|'statuses'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'resp'
op|'='
name|'self'
op|'.'
name|'_compute_quorum_response'
op|'('
nl|'\n'
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'etag'
op|','
name|'headers'
op|','
nl|'\n'
name|'quorum_size'
op|'='
name|'quorum_size'
op|')'
newline|'\n'
name|'if'
name|'overrides'
name|'and'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'            '
name|'faked_up_status_indices'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'transformed'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'i'
op|','
op|'('
name|'status'
op|','
name|'reason'
op|','
name|'hdrs'
op|','
name|'body'
op|')'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'zip'
op|'('
nl|'\n'
name|'statuses'
op|','
name|'reasons'
op|','
name|'headers'
op|','
name|'bodies'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'status'
name|'in'
name|'overrides'
op|':'
newline|'\n'
indent|'                    '
name|'faked_up_status_indices'
op|'.'
name|'add'
op|'('
name|'i'
op|')'
newline|'\n'
name|'transformed'
op|'.'
name|'append'
op|'('
op|'('
name|'overrides'
op|'['
name|'status'
op|']'
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'transformed'
op|'.'
name|'append'
op|'('
op|'('
name|'status'
op|','
name|'reason'
op|','
name|'hdrs'
op|','
name|'body'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'statuses'
op|','
name|'reasons'
op|','
name|'headers'
op|','
name|'bodies'
op|'='
name|'zip'
op|'('
op|'*'
name|'transformed'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_compute_quorum_response'
op|'('
nl|'\n'
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'etag'
op|','
name|'headers'
op|','
nl|'\n'
name|'indices_to_avoid'
op|'='
name|'faked_up_status_indices'
op|','
nl|'\n'
name|'quorum_size'
op|'='
name|'quorum_size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'HTTPServiceUnavailable'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(type)s returning 503 for %(statuses)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'server_type'
op|','
string|"'statuses'"
op|':'
name|'statuses'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|member|_compute_quorum_response
dedent|''
name|'def'
name|'_compute_quorum_response'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'etag'
op|','
nl|'\n'
name|'headers'
op|','
name|'quorum_size'
op|','
name|'indices_to_avoid'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'statuses'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'for'
name|'hundred'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hstatuses'
op|'='
op|'['
op|'('
name|'i'
op|','
name|'s'
op|')'
name|'for'
name|'i'
op|','
name|'s'
name|'in'
name|'enumerate'
op|'('
name|'statuses'
op|')'
nl|'\n'
name|'if'
name|'hundred'
op|'<='
name|'s'
op|'<'
name|'hundred'
op|'+'
number|'100'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hstatuses'
op|')'
op|'>='
name|'quorum_size'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'status_index'
op|','
name|'status'
op|'='
name|'max'
op|'('
nl|'\n'
op|'('
op|'('
name|'i'
op|','
name|'stat'
op|')'
name|'for'
name|'i'
op|','
name|'stat'
name|'in'
name|'hstatuses'
nl|'\n'
name|'if'
name|'i'
name|'not'
name|'in'
name|'indices_to_avoid'
op|')'
op|','
nl|'\n'
name|'key'
op|'='
name|'operator'
op|'.'
name|'itemgetter'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|'# All statuses were indices to avoid'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'status_map'
op|'['
name|'status'
op|']'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'status'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'status'
op|','
name|'reasons'
op|'['
name|'status_index'
op|']'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'body'
op|'='
name|'bodies'
op|'['
name|'status_index'
op|']'
newline|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'                    '
name|'update_headers'
op|'('
name|'resp'
op|','
name|'headers'
op|'['
name|'status_index'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|'='
name|'etag'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|GET
name|'def'
name|'GET'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handler for HTTP GET requests.\n\n        :param req: The client request\n        :returns: the response to the client\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|HEAD
name|'def'
name|'HEAD'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handler for HTTP HEAD requests.\n\n        :param req: The client request\n        :returns: the response to the client\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|autocreate_account
dedent|''
name|'def'
name|'autocreate_account'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'account'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Autocreate an account\n\n        :param env: the environment of the request leading to this autocreate\n        :param account: the unquoted account name\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'/%s'"
op|'%'
name|'account'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Trans-Id'"
op|':'
name|'self'
op|'.'
name|'trans_id'
op|','
nl|'\n'
string|"'Connection'"
op|':'
string|"'close'"
op|'}'
newline|'\n'
comment|'# transfer any x-account-sysmeta headers from original request'
nl|'\n'
comment|'# to the autocreate PUT'
nl|'\n'
name|'headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'is_sys_meta'
op|'('
string|"'account'"
op|','
name|'k'
op|')'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'make_requests'
op|'('
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1'"
op|'+'
name|'path'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|','
name|'partition'
op|','
string|"'PUT'"
op|','
nl|'\n'
name|'path'
op|','
op|'['
name|'headers'
op|']'
op|'*'
name|'len'
op|'('
name|'nodes'
op|')'
op|')'
newline|'\n'
name|'if'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'autocreate account %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
name|'clear_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|'.'
name|'environ'
op|','
name|'account'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
string|"'Could not autocreate account %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|GETorHEAD_base
dedent|''
dedent|''
name|'def'
name|'GETorHEAD_base'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'server_type'
op|','
name|'node_iter'
op|','
name|'partition'
op|','
name|'path'
op|','
nl|'\n'
name|'client_chunk_size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Base handler for HTTP GET or HEAD requests.\n\n        :param req: swob.Request object\n        :param server_type: server type used in logging\n        :param node_iter: an iterator to obtain nodes from\n        :param partition: partition\n        :param path: path for the request\n        :param client_chunk_size: chunk size for response body iterator\n        :returns: swob.Response object\n        """'
newline|'\n'
name|'backend_headers'
op|'='
name|'self'
op|'.'
name|'generate_request_headers'
op|'('
nl|'\n'
name|'req'
op|','
name|'additional'
op|'='
name|'req'
op|'.'
name|'headers'
op|')'
newline|'\n'
nl|'\n'
name|'handler'
op|'='
name|'GetOrHeadHandler'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|','
name|'self'
op|'.'
name|'server_type'
op|','
name|'node_iter'
op|','
nl|'\n'
name|'partition'
op|','
name|'path'
op|','
name|'backend_headers'
op|','
nl|'\n'
name|'client_chunk_size'
op|'='
name|'client_chunk_size'
op|')'
newline|'\n'
name|'res'
op|'='
name|'handler'
op|'.'
name|'get_working_response'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'res'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'self'
op|'.'
name|'best_response'
op|'('
nl|'\n'
name|'req'
op|','
name|'handler'
op|'.'
name|'statuses'
op|','
name|'handler'
op|'.'
name|'reasons'
op|','
name|'handler'
op|'.'
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|','
nl|'\n'
name|'headers'
op|'='
name|'handler'
op|'.'
name|'source_headers'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'vrs'
op|','
name|'account'
op|','
name|'container'
op|')'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'_set_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|'.'
name|'environ'
op|','
name|'account'
op|','
name|'container'
op|','
name|'res'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'vrs'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'4'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'_set_object_info_cache'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'req'
op|'.'
name|'environ'
op|','
name|'account'
op|','
nl|'\n'
name|'container'
op|','
name|'obj'
op|','
name|'res'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# if a backend policy index is present in resp headers, translate it'
nl|'\n'
comment|'# here with the friendly policy name'
nl|'\n'
dedent|''
name|'if'
string|"'X-Backend-Storage-Policy-Index'"
name|'in'
name|'res'
op|'.'
name|'headers'
name|'and'
name|'is_success'
op|'('
name|'res'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'get_by_index'
op|'('
nl|'\n'
name|'res'
op|'.'
name|'headers'
op|'['
string|"'X-Backend-Storage-Policy-Index'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'policy'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'headers'
op|'['
string|"'X-Storage-Policy'"
op|']'
op|'='
name|'policy'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
nl|'\n'
string|"'Could not translate %s (%r) from %r to policy'"
op|','
nl|'\n'
string|"'X-Backend-Storage-Policy-Index'"
op|','
nl|'\n'
name|'res'
op|'.'
name|'headers'
op|'['
string|"'X-Backend-Storage-Policy-Index'"
op|']'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
DECL|member|is_origin_allowed
dedent|''
name|'def'
name|'is_origin_allowed'
op|'('
name|'self'
op|','
name|'cors_info'
op|','
name|'origin'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Is the given Origin allowed to make requests to this resource\n\n        :param cors_info: the resource\'s CORS related metadata headers\n        :param origin: the origin making the request\n        :return: True or False\n        """'
newline|'\n'
name|'allowed_origins'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'if'
name|'cors_info'
op|'.'
name|'get'
op|'('
string|"'allow_origin'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'allowed_origins'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'['
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'cors_info'
op|'['
string|"'allow_origin'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
nl|'\n'
name|'if'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'cors_allow_origin'
op|':'
newline|'\n'
indent|'            '
name|'allowed_origins'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'cors_allow_origin'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'origin'
name|'in'
name|'allowed_origins'
name|'or'
string|"'*'"
name|'in'
name|'allowed_origins'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|OPTIONS
name|'def'
name|'OPTIONS'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Base handler for OPTIONS requests\n\n        :param req: swob.Request object\n        :returns: swob.Response object\n        """'
newline|'\n'
comment|'# Prepare the default response'
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Allow'"
op|':'
string|"', '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'allowed_methods'
op|')'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'Response'
op|'('
name|'status'
op|'='
number|'200'
op|','
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
comment|"# If this isn't a CORS pre-flight request then return now"
nl|'\n'
name|'req_origin_value'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Origin'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'req_origin_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
comment|"# This is a CORS preflight request so check it's allowed"
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'container_info'
op|'='
name|'self'
op|'.'
name|'container_info'
op|'('
name|'self'
op|'.'
name|'account_name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'container_name'
op|','
name|'req'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
comment|'# This should only happen for requests to the Account. A future'
nl|'\n'
comment|'# change could allow CORS requests to the Account level as well.'
nl|'\n'
indent|'            '
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
name|'cors'
op|'='
name|'container_info'
op|'.'
name|'get'
op|'('
string|"'cors'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|"# If the CORS origin isn't allowed return a 401"
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'is_origin_allowed'
op|'('
name|'cors'
op|','
name|'req_origin_value'
op|')'
name|'or'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Access-Control-Request-Method'"
op|')'
name|'not'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'allowed_methods'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'.'
name|'status'
op|'='
name|'HTTP_UNAUTHORIZED'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
comment|'# Allow all headers requested in the request. The CORS'
nl|'\n'
comment|'# specification does leave the door open for this, as mentioned in'
nl|'\n'
comment|'# http://www.w3.org/TR/cors/#resource-preflight-requests'
nl|'\n'
comment|'# Note: Since the list of headers can be unbounded'
nl|'\n'
comment|'# simply returning headers can be enough.'
nl|'\n'
dedent|''
name|'allow_headers'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Access-Control-Request-Headers'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'allow_headers'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'list_from_csv'
op|'('
name|'req'
op|'.'
name|'headers'
op|'['
string|"'Access-Control-Request-Headers'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Populate the response with the CORS preflight headers'
nl|'\n'
dedent|''
name|'if'
name|'cors'
op|'.'
name|'get'
op|'('
string|"'allow_origin'"
op|')'
name|'and'
name|'cors'
op|'.'
name|'get'
op|'('
string|"'allow_origin'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-allow-origin'"
op|']'
op|'='
string|"'*'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-allow-origin'"
op|']'
op|'='
name|'req_origin_value'
newline|'\n'
dedent|''
name|'if'
name|'cors'
op|'.'
name|'get'
op|'('
string|"'max_age'"
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-max-age'"
op|']'
op|'='
name|'cors'
op|'.'
name|'get'
op|'('
string|"'max_age'"
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'access-control-allow-methods'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'allowed_methods'
op|')'
newline|'\n'
name|'if'
name|'allow_headers'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'access-control-allow-headers'"
op|']'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'allow_headers'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
nl|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
