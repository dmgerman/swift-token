begin_unit
comment|'# Copyright (c) 2010-2011 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nThis StaticWeb WSGI middleware will serve container data as a static web site\nwith index file and error file resolution and optional file listings. This mode\nis normally only active for anonymous requests. If you want to use it with\nauthenticated requests, set the ``X-Web-Mode: true`` header on the request.\n\nThe ``staticweb`` filter should be added to the pipeline in your\n``/etc/swift/proxy-server.conf`` file just after any auth middleware. Also, the\nconfiguration section for the ``staticweb`` middleware itself needs to be\nadded. For example::\n\n    [DEFAULT]\n    ...\n\n    [pipeline:main]\n    pipeline = healthcheck cache swauth staticweb proxy-server\n\n    ...\n\n    [filter:staticweb]\n    use = egg:swift#staticweb\n    # Seconds to cache container x-container-meta-index,\n    # x-container-meta-error, and x-container-listing-css header values.\n    # cache_timeout = 300\n\nAny publicly readable containers (for example, ``X-Container-Read: .r:*``, see\n`acls`_ for more information on this) will be checked for\nX-Container-Meta-Index and X-Container-Meta-Error header values::\n\n    X-Container-Meta-Index  <index.name>\n    X-Container-Meta-Error  <error.name.suffix>\n\nIf X-Container-Meta-Index is set, any <index.name> files will be served without\nhaving to specify the <index.name> part. For instance, setting\n``X-Container-Meta-Index: index.html`` will be able to serve the object\n.../pseudo/path/index.html with just .../pseudo/path or .../pseudo/path/\n\nIf X-Container-Meta-Error is set, any errors (currently just 401 Unauthorized\nand 404 Not Found) will instead serve the .../<status.code><error.name.suffix>\nobject. For instance, setting ``X-Container-Meta-Error: error.html`` will serve\n.../404error.html for requests for paths not found.\n\nFor psuedo paths that have no <index.name>, this middleware will serve HTML\nfile listings by default. If you don\'t want to serve such listings, you can\nturn this off via the `acls`_ X-Container-Read setting of ``.rnolisting``. For\nexample, instead of ``X-Container-Read: .r:*`` you would use\n``X-Container-Read: .r:*,.rnolisting``\n\nIf listings are enabled, the listings can have a custom style sheet by setting\nthe X-Container-Meta-Listing-CSS header. For instance, setting\n``X-Container-Meta-Listing-CSS: listing.css`` will make listings link to the\n.../listing.css style sheet. If you "view source" in your browser on a listing\npage, you will see the well defined document structure that can be styled.\n\nExample usage of this middleware via ``st``:\n\n    Make the container publicly readable::\n\n        st post -r \'.r:*\' container\n\n    You should be able to get objects and do direct container listings now,\n    though they\'ll be in the REST API format.\n\n    Set an index file directive::\n\n        st post -m \'index:index.html\' container\n\n    You should be able to hit paths that have an index.html without needing to\n    type the index.html part and listings will now be HTML.\n\n    Turn off listings::\n\n        st post -r \'.r:*,.rnolisting\' container\n\n    Set an error file::\n\n        st post -m \'error:error.html\' container\n\n    Now 401\'s should load 401error.html, 404\'s should load 404error.html, etc.\n\n    Turn listings back on::\n\n        st post -r \'.r:*\' container\n\n    Enable a custom listing style sheet::\n\n        st post -m \'listing-css:listing.css\' container\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'simplejson'
name|'as'
name|'json'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'json'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
nl|'\n'
name|'from'
name|'webob'
name|'import'
name|'Response'
op|','
name|'Request'
newline|'\n'
name|'from'
name|'webob'
op|'.'
name|'exc'
name|'import'
name|'HTTPMovedPermanently'
op|','
name|'HTTPNotFound'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'cache_from_env'
op|','
name|'human_readable'
op|','
name|'split_path'
op|','
name|'TRUE_VALUES'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticWeb
name|'class'
name|'StaticWeb'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The Static Web WSGI middleware filter; serves container data as a static\n    web site. See `staticweb`_ for an overview.\n\n    :param app: The next WSGI application/filter in the paste.deploy pipeline.\n    :param conf: The filter configuration dict.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
comment|'#: The next WSGI application/filter in the paste.deploy pipeline.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
comment|'#: The filter configuration dict.'
nl|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
comment|'#: The seconds to cache the x-container-meta-index,'
nl|'\n'
comment|'#: x-container-meta-error, and x-container-listing-css headers for a'
nl|'\n'
comment|'#: container.'
nl|'\n'
name|'self'
op|'.'
name|'cache_timeout'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'cache_timeout'"
op|','
number|'300'
op|')'
op|')'
newline|'\n'
comment|'# Results from the last call to self._start_response.'
nl|'\n'
name|'self'
op|'.'
name|'_response_status'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_response_headers'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|'='
name|'None'
newline|'\n'
comment|'# Results from the last call to self._get_container_info.'
nl|'\n'
name|'self'
op|'.'
name|'_index'
op|'='
name|'self'
op|'.'
name|'_error'
op|'='
name|'self'
op|'.'
name|'_listing_css'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_start_response
dedent|''
name|'def'
name|'_start_response'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Saves response info without sending it to the remote client.\n        Uses the same semantics as the usual WSGI start_response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_response_status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'_response_headers'
op|'='
name|'headers'
newline|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|'='
name|'exc_info'
newline|'\n'
nl|'\n'
DECL|member|_error_response
dedent|''
name|'def'
name|'_error_response'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sends the error response to the remote client, possibly resolving a\n        custom error response body based on x-container-meta-error.\n\n        :param response: The error response we should default to sending.\n        :param env: The original request WSGI environment.\n        :param start_response: The WSGI start_response hook.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_error'
op|':'
newline|'\n'
indent|'            '
name|'start_response'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|','
name|'self'
op|'.'
name|'_response_headers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'save_response_status'
op|'='
name|'self'
op|'.'
name|'_response_status'
newline|'\n'
name|'save_response_headers'
op|'='
name|'self'
op|'.'
name|'_response_headers'
newline|'\n'
name|'save_response_exc_info'
op|'='
name|'self'
op|'.'
name|'_response_exc_info'
newline|'\n'
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_strip_ifs'
op|'('
name|'tmp_env'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
string|"'/%s/%s/%s/%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
nl|'\n'
name|'self'
op|'.'
name|'container'
op|','
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_error'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'REQUEST_METHOD'"
op|']'
op|'='
string|"'GET'"
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
op|'//'
number|'100'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'start_response'
op|'('
name|'save_response_status'
op|','
name|'self'
op|'.'
name|'_response_headers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'start_response'
op|'('
name|'save_response_status'
op|','
name|'save_response_headers'
op|','
nl|'\n'
name|'save_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|_get_status_int
dedent|''
name|'def'
name|'_get_status_int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the HTTP status int from the last called self._start_response\n        result.\n        """'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_strip_ifs
dedent|''
name|'def'
name|'_strip_ifs'
op|'('
name|'self'
op|','
name|'env'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Strips any HTTP_IF_* keys from the env dict. """'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'env'
op|'.'
name|'keys'
op|'('
op|')'
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'HTTP_IF_'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'env'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_container_info
dedent|''
dedent|''
name|'def'
name|'_get_container_info'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves x-container-meta-index, x-container-meta-error, and\n        x-container-meta-listing-css from memcache or from the cluster and\n        stores the result in memcache and in self._index, self._error, and\n        self._listing_css.\n\n        :param env: The WSGI environment dict.\n        :param start_response: The WSGI start_response hook.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_index'
op|'='
name|'self'
op|'.'
name|'_error'
op|'='
name|'self'
op|'.'
name|'_listing_css'
op|'='
name|'None'
newline|'\n'
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'memcache_key'
op|'='
string|"'/staticweb/%s/%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
nl|'\n'
name|'self'
op|'.'
name|'container'
op|')'
newline|'\n'
name|'cached_data'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_key'
op|')'
newline|'\n'
name|'if'
name|'cached_data'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_index'
op|','
name|'self'
op|'.'
name|'_error'
op|','
name|'self'
op|'.'
name|'_listing_css'
op|'='
name|'cached_data'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'tmp_env'
op|'='
op|'{'
string|"'REQUEST_METHOD'"
op|':'
string|"'HEAD'"
op|','
string|"'HTTP_USER_AGENT'"
op|':'
string|"'StaticWeb'"
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
op|'('
string|"'swift.cache'"
op|','
string|"'HTTP_X_CF_TRANS_ID'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                '
name|'tmp_env'
op|'['
name|'name'
op|']'
op|'='
name|'env'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'req'
op|'='
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/%s/%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
nl|'\n'
name|'self'
op|'.'
name|'container'
op|')'
op|','
name|'environ'
op|'='
name|'tmp_env'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status_int'
op|'//'
number|'100'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_index'
op|'='
name|'resp'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-meta-index'"
op|','
string|"''"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_listing_css'
op|'='
name|'resp'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-meta-listing-css'"
op|','
string|"''"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_error'
op|'='
name|'resp'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-meta-error'"
op|','
string|"''"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'memcache_client'
op|':'
newline|'\n'
indent|'                '
name|'memcache_client'
op|'.'
name|'set'
op|'('
name|'memcache_key'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'_index'
op|','
name|'self'
op|'.'
name|'_error'
op|','
name|'self'
op|'.'
name|'_listing_css'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'self'
op|'.'
name|'cache_timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_listing
dedent|''
dedent|''
dedent|''
name|'def'
name|'_listing'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|','
name|'prefix'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sends an HTML object listing to the remote client.\n\n        :param env: The original WSGI environment dict.\n        :param start_response: The original WSGI start_response hook.\n        :param prefix: Any prefix desired for the container listing.\n        """'
newline|'\n'
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_strip_ifs'
op|'('
name|'tmp_env'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'REQUEST_METHOD'"
op|']'
op|'='
string|"'GET'"
newline|'\n'
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
string|"'/%s/%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'QUERY_STRING'"
op|']'
op|'='
string|"'delimiter=/&format=json'"
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'tmp_env'
op|'['
string|"'QUERY_STRING'"
op|']'
op|'+='
string|"'&prefix=%s'"
op|'%'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
op|'//'
number|'100'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_error_response'
op|'('
name|'resp'
op|','
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'listing'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'resp'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'listing'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'HTTPNotFound'
op|'('
op|')'
op|'('
name|'env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_error_response'
op|'('
name|'resp'
op|','
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'text/html'"
op|'}'
newline|'\n'
name|'body'
op|'='
string|'\'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 \''
string|'\'Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\\n\''
string|"'<html>\\n'"
string|"' <head>\\n'"
string|"'  <title>Listing of %s</title>\\n'"
op|'%'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_listing_css'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'+='
string|'\'  <link rel="stylesheet" type="text/css" \''
string|'\'href="/%s/%s/%s/%s" />\\n\''
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|','
nl|'\n'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'self'
op|'.'
name|'_listing_css'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'+='
string|'\'  <style type="text/css">\\n\''
string|"'   h1 {font-size: 1em; font-weight: bold;}\\n'"
string|"'   th {text-align: left; padding: 0px 1em 0px 1em;}\\n'"
string|"'   td {padding: 0px 1em 0px 1em;}\\n'"
string|"'   a {text-decoration: none;}\\n'"
string|"'  </style>\\n'"
newline|'\n'
dedent|''
name|'body'
op|'+='
string|"' </head>\\n'"
string|"' <body>\\n'"
string|'\'  <h1 id="title">Listing of %s</h1>\\n\''
string|'\'  <table id="listing">\\n\''
string|'\'   <tr id="heading">\\n\''
string|'\'    <th class="colname">Name</th>\\n\''
string|'\'    <th class="colsize">Size</th>\\n\''
string|'\'    <th class="coldate">Date</th>\\n\''
string|"'   </tr>\\n'"
op|'%'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'+='
string|'\'   <tr id="parent" class="item">\\n\''
string|'\'    <td class="colname"><a href="../">../</a></td>\\n\''
string|'\'    <td class="colsize">&nbsp;</td>\\n\''
string|'\'    <td class="coldate">&nbsp;</td>\\n\''
string|"'   </tr>\\n'"
newline|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'listing'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'subdir'"
name|'in'
name|'item'
op|':'
newline|'\n'
indent|'                '
name|'subdir'
op|'='
name|'item'
op|'['
string|"'subdir'"
op|']'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'subdir'
op|'='
name|'subdir'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'body'
op|'+='
string|'\'   <tr class="item subdir">\\n\''
string|'\'    <td class="colname"><a href="%s">%s</a></td>\\n\''
string|'\'    <td class="colsize">&nbsp;</td>\\n\''
string|'\'    <td class="coldate">&nbsp;</td>\\n\''
string|"'   </tr>\\n'"
op|'%'
op|'('
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'subdir'
op|')'
op|','
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'subdir'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'item'
name|'in'
name|'listing'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'name'"
name|'in'
name|'item'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'item'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
name|'name'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'body'
op|'+='
string|'\'   <tr class="item %s">\\n\''
string|'\'    <td class="colname"><a href="%s">%s</a></td>\\n\''
string|'\'    <td class="colsize">%s</td>\\n\''
string|'\'    <td class="coldate">%s</td>\\n\''
string|"'   </tr>\\n'"
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
string|"'type-'"
op|'+'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'t'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'quote'
op|'='
name|'True'
op|')'
nl|'\n'
name|'for'
name|'t'
name|'in'
name|'item'
op|'['
string|"'content_type'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|')'
op|','
nl|'\n'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'name'
op|')'
op|','
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'name'
op|')'
op|','
nl|'\n'
name|'human_readable'
op|'('
name|'item'
op|'['
string|"'bytes'"
op|']'
op|')'
op|','
nl|'\n'
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'item'
op|'['
string|"'last_modified'"
op|']'
op|')'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
nl|'\n'
name|'replace'
op|'('
string|"'T'"
op|','
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'body'
op|'+='
string|"'  </table>\\n'"
string|"' </body>\\n'"
string|"'</html>\\n'"
newline|'\n'
name|'return'
name|'Response'
op|'('
name|'headers'
op|'='
name|'headers'
op|','
name|'body'
op|'='
name|'body'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_container
dedent|''
name|'def'
name|'_handle_container'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handles a possible static web request for a container.\n\n        :param env: The original WSGI environment dict.\n        :param start_response: The original WSGI start_response hook.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_get_container_info'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_index'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'HTTPMovedPermanently'
op|'('
nl|'\n'
name|'location'
op|'='
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+'
string|"'/'"
op|')'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+='
name|'self'
op|'.'
name|'_index'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'status_int'
op|'='
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status_int'
op|'=='
number|'404'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_listing'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
op|'//'
number|'100'
name|'not'
name|'in'
op|'('
number|'2'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_error_response'
op|'('
name|'resp'
op|','
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'start_response'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|','
name|'self'
op|'.'
name|'_response_headers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|member|_handle_object
dedent|''
name|'def'
name|'_handle_object'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handles a possible static web request for an object. This object could\n        resolve into an index or listing request.\n\n        :param env: The original WSGI environment dict.\n        :param start_response: The original WSGI start_response hook.\n        """'
newline|'\n'
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'status_int'
op|'='
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status_int'
op|'//'
number|'100'
name|'in'
op|'('
number|'2'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_response'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|','
name|'self'
op|'.'
name|'_response_headers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'if'
name|'status_int'
op|'!='
number|'404'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_error_response'
op|'('
name|'resp'
op|','
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_get_container_info'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_index'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+='
string|"'/'"
newline|'\n'
dedent|''
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+='
name|'self'
op|'.'
name|'_index'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'status_int'
op|'='
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status_int'
op|'//'
number|'100'
name|'in'
op|'('
number|'2'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'HTTPMovedPermanently'
op|'('
nl|'\n'
name|'location'
op|'='
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+'
string|"'/'"
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'start_response'
op|'('
name|'self'
op|'.'
name|'_response_status'
op|','
name|'self'
op|'.'
name|'_response_headers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_response_exc_info'
op|')'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
dedent|''
name|'elif'
name|'status_int'
op|'=='
number|'404'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'                '
name|'tmp_env'
op|'='
name|'dict'
op|'('
name|'env'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_strip_ifs'
op|'('
name|'tmp_env'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'REQUEST_METHOD'"
op|']'
op|'='
string|"'GET'"
newline|'\n'
name|'tmp_env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
string|"'/%s/%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|')'
newline|'\n'
name|'tmp_env'
op|'['
string|"'QUERY_STRING'"
op|']'
op|'='
string|"'limit=1&format=json&delimiter'"
string|"'=/&limit=1&prefix=%s'"
op|'%'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'self'
op|'.'
name|'obj'
op|'+'
string|"'/'"
op|')'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'app'
op|'('
name|'tmp_env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_get_status_int'
op|'('
op|')'
op|'//'
number|'100'
op|'!='
number|'2'
name|'or'
name|'not'
name|'json'
op|'.'
name|'loads'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'resp'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'HTTPNotFound'
op|'('
op|')'
op|'('
name|'env'
op|','
name|'self'
op|'.'
name|'_start_response'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_error_response'
op|'('
name|'resp'
op|','
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'HTTPMovedPermanently'
op|'('
name|'location'
op|'='
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'+'
nl|'\n'
string|"'/'"
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_listing'
op|'('
name|'env'
op|','
name|'start_response'
op|','
name|'self'
op|'.'
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Main hook into the WSGI paste.deploy filter/app pipeline.\n\n        :param env: The WSGI environment dict.\n        :param start_response: The WSGI start_response hook.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|','
name|'self'
op|'.'
name|'obj'
op|')'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
number|'2'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'env'
op|'['
string|"'REQUEST_METHOD'"
op|']'
name|'in'
op|'('
string|"'PUT'"
op|','
string|"'POST'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj'
name|'and'
name|'self'
op|'.'
name|'container'
op|':'
newline|'\n'
indent|'                    '
name|'memcache_key'
op|'='
string|"'/staticweb/%s/%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'account'
op|','
name|'self'
op|'.'
name|'container'
op|')'
newline|'\n'
name|'memcache_client'
op|'.'
name|'delete'
op|'('
name|'memcache_key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'env'
op|'['
string|"'REQUEST_METHOD'"
op|']'
name|'not'
name|'in'
op|'('
string|"'HEAD'"
op|','
string|"'GET'"
op|')'
name|'or'
op|'('
name|'env'
op|'.'
name|'get'
op|'('
string|"'REMOTE_USER'"
op|')'
name|'and'
nl|'\n'
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_WEB_MODE'"
op|','
string|"''"
op|')'
name|'not'
name|'in'
name|'TRUE_VALUES'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'obj'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_handle_object'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'container'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_handle_container'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filter_factory
dedent|''
dedent|''
name|'def'
name|'filter_factory'
op|'('
name|'global_conf'
op|','
op|'**'
name|'local_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Returns a Static Web WSGI filter for use with paste.deploy. """'
newline|'\n'
name|'conf'
op|'='
name|'global_conf'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'update'
op|'('
name|'local_conf'
op|')'
newline|'\n'
nl|'\n'
DECL|function|staticweb_filter
name|'def'
name|'staticweb_filter'
op|'('
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'StaticWeb'
op|'('
name|'app'
op|','
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'staticweb_filter'
newline|'\n'
dedent|''
endmarker|''
end_unit
