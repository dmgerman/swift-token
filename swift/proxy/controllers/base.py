begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
comment|'# NOTE: swift_conn'
nl|'\n'
comment|"# You'll see swift_conn passed around a few places in this file. This is the"
nl|'\n'
comment|'# source httplib connection of whatever it is attached to.'
nl|'\n'
comment|'#   It is used when early termination of reading from the connection should'
nl|'\n'
comment|"# happen, such as when a range request is satisfied but there's still more the"
nl|'\n'
comment|'# source connection would like to send. To prevent having to read all the data'
nl|'\n'
comment|'# that could be left, the source connection can be .close() and then reads'
nl|'\n'
comment|'# commence to empty out any buffers.'
nl|'\n'
comment|'#   These shenanigans are to ensure all related objects can be garbage'
nl|'\n'
comment|"# collected. We've seen objects hang around forever otherwise."
nl|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'spawn_n'
op|','
name|'GreenPile'
op|','
name|'Timeout'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'queue'
name|'import'
name|'Queue'
op|','
name|'Empty'
op|','
name|'Full'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'timeout'
name|'import'
name|'Timeout'
newline|'\n'
name|'from'
name|'webob'
op|'.'
name|'exc'
name|'import'
name|'status_map'
newline|'\n'
name|'from'
name|'webob'
name|'import'
name|'Request'
op|','
name|'Response'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'normalize_timestamp'
op|','
name|'TRUE_VALUES'
op|','
name|'public'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'bufferedhttp'
name|'import'
name|'http_connect'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'constraints'
name|'import'
name|'MAX_ACCOUNT_NAME_LENGTH'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'ChunkReadTimeout'
op|','
name|'ConnectionTimeout'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'http'
name|'import'
name|'is_informational'
op|','
name|'is_success'
op|','
name|'is_redirection'
op|','
name|'is_server_error'
op|','
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|','
name|'HTTP_NOT_FOUND'
op|','
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
name|'HTTP_INSUFFICIENT_STORAGE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_headers
name|'def'
name|'update_headers'
op|'('
name|'response'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper function to update headers in the response.\n\n    :param response: webob.Response object\n    :param headers: dictionary headers\n    """'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'headers'
op|','
string|"'items'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'etag'"
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'not'
name|'in'
op|'('
string|"'date'"
op|','
string|"'content-length'"
op|','
string|"'content-type'"
op|','
nl|'\n'
string|"'connection'"
op|','
string|"'x-put-timestamp'"
op|','
string|"'x-delete-after'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delay_denial
dedent|''
dedent|''
dedent|''
name|'def'
name|'delay_denial'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Decorator to declare which methods should have any swift.authorize call\n    delayed. This is so the method can load the Request object up with\n    additional information that may be needed by the authorization system.\n\n    :param func: function for which authorization will be delayed\n    """'
newline|'\n'
name|'func'
op|'.'
name|'delay_denial'
op|'='
name|'True'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_account_memcache_key
dedent|''
name|'def'
name|'get_account_memcache_key'
op|'('
name|'account'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'account/%s'"
op|'%'
name|'account'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_container_memcache_key
dedent|''
name|'def'
name|'get_container_memcache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'container/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
dedent|''
name|'class'
name|'Controller'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base WSGI controller class for the proxy"""'
newline|'\n'
DECL|variable|server_type
name|'server_type'
op|'='
string|"'Base'"
newline|'\n'
nl|'\n'
comment|'# Ensure these are all lowercase'
nl|'\n'
DECL|variable|pass_through_headers
name|'pass_through_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'account_name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'trans_id'
op|'='
string|"'-'"
newline|'\n'
nl|'\n'
DECL|member|transfer_headers
dedent|''
name|'def'
name|'transfer_headers'
op|'('
name|'self'
op|','
name|'src_headers'
op|','
name|'dst_headers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x_remove'
op|'='
string|"'x-remove-%s-meta-'"
op|'%'
name|'self'
op|'.'
name|'server_type'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'x_meta'
op|'='
string|"'x-%s-meta-'"
op|'%'
name|'self'
op|'.'
name|'server_type'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
string|"'-remove'"
op|','
string|"''"
op|','
number|'1'
op|')'
op|','
string|"''"
op|')'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'src_headers'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'x_remove'
op|')'
op|')'
newline|'\n'
name|'dst_headers'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'src_headers'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'self'
op|'.'
name|'pass_through_headers'
name|'or'
nl|'\n'
name|'k'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
name|'x_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_increment
dedent|''
name|'def'
name|'error_increment'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handles incrementing error counts when talking to nodes.\n\n        :param node: dictionary of node to increment the error count for\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'node'
op|'.'
name|'get'
op|'('
string|"'errors'"
op|','
number|'0'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_occurred
dedent|''
name|'def'
name|'error_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging, and handling of errors.\n\n        :param node: dictionary of node to handle errors for\n        :param msg: error message\n        """'
newline|'\n'
name|'self'
op|'.'
name|'error_increment'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(msg)s %(ip)s:%(port)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'msg'"
op|':'
name|'msg'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exception_occurred
dedent|''
name|'def'
name|'exception_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'typ'
op|','
name|'additional_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging of generic exceptions.\n\n        :param node: dictionary of node to log the error for\n        :param typ: server type\n        :param additional_info: additional information to log\n        """'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'ERROR with %(type)s server %(ip)s:%(port)s/%(device)s re: '"
nl|'\n'
string|"'%(info)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'typ'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
string|"'info'"
op|':'
name|'additional_info'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_limited
dedent|''
name|'def'
name|'error_limited'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the node is currently error limited.\n\n        :param node: dictionary of node to check\n        :returns: True if error limited, False otherwise\n        """'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
string|"'errors'"
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
string|"'last_error'"
name|'in'
name|'node'
name|'and'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'<'
name|'now'
op|'-'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_interval'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'node'
op|'['
string|"'last_error'"
op|']'
newline|'\n'
name|'if'
string|"'errors'"
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'node'
op|'['
string|"'errors'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'limited'
op|'='
name|'node'
op|'['
string|"'errors'"
op|']'
op|'>'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
newline|'\n'
name|'if'
name|'limited'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Node error limited %(ip)s:%(port)s (%(device)s)'"
op|')'
op|','
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'limited'
newline|'\n'
nl|'\n'
DECL|member|error_limit
dedent|''
name|'def'
name|'error_limit'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark a node as error limited.\n\n        :param node: dictionary of node to error limit\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|account_info
dedent|''
name|'def'
name|'account_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'autocreate'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get account information, and also verify that the account exists.\n\n        :param account: name of the account to get the info for\n        :returns: tuple of (account partition, account nodes, container_count)\n                  or (None, None, None) if it does not exist\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|'.'
name|'get_nodes'
op|'('
name|'account'
op|')'
newline|'\n'
comment|'# 0 = no responses, 200 = found, 404 = not found, -1 = mixed responses'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|':'
newline|'\n'
indent|'            '
name|'cache_key'
op|'='
name|'get_account_memcache_key'
op|'('
name|'account'
op|')'
newline|'\n'
name|'cache_value'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|'.'
name|'get'
op|'('
name|'cache_key'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'cache_value'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result_code'
op|'='
name|'cache_value'
newline|'\n'
name|'container_count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result_code'
op|'='
name|'cache_value'
op|'['
string|"'status'"
op|']'
newline|'\n'
name|'container_count'
op|'='
name|'cache_value'
op|'['
string|"'container_count'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'result_code'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'container_count'
newline|'\n'
dedent|''
name|'elif'
name|'result_code'
op|'=='
name|'HTTP_NOT_FOUND'
name|'and'
name|'not'
name|'autocreate'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'result_code'
op|'='
number|'0'
newline|'\n'
name|'container_count'
op|'='
number|'0'
newline|'\n'
name|'attempts_left'
op|'='
name|'len'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'/%s'"
op|'%'
name|'account'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'x-trans-id'"
op|':'
name|'self'
op|'.'
name|'trans_id'
op|','
string|"'Connection'"
op|':'
string|"'close'"
op|'}'
newline|'\n'
name|'iternodes'
op|'='
name|'self'
op|'.'
name|'iter_nodes'
op|'('
name|'partition'
op|','
name|'nodes'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|')'
newline|'\n'
name|'while'
name|'attempts_left'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'iternodes'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'attempts_left'
op|'-='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
string|"'HEAD'"
op|','
name|'path'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'result_code'
op|'='
name|'HTTP_OK'
newline|'\n'
name|'container_count'
op|'='
name|'int'
op|'('
nl|'\n'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-account-container-count'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'result_code'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                            '
name|'result_code'
op|'='
name|'HTTP_NOT_FOUND'
newline|'\n'
dedent|''
name|'elif'
name|'result_code'
op|'!='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'                            '
name|'result_code'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'result_code'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'Account'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to get account info for %s'"
op|')'
op|'%'
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'result_code'
op|'=='
name|'HTTP_NOT_FOUND'
name|'and'
name|'autocreate'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'account'
op|')'
op|'>'
name|'MAX_ACCOUNT_NAME_LENGTH'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
name|'headers'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'normalize_timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'X-Trans-Id'"
op|':'
name|'self'
op|'.'
name|'trans_id'
op|','
nl|'\n'
string|"'Connection'"
op|':'
string|"'close'"
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'make_requests'
op|'('
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1'"
op|'+'
name|'path'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'account_ring'
op|','
name|'partition'
op|','
string|"'PUT'"
op|','
nl|'\n'
name|'path'
op|','
op|'['
name|'headers'
op|']'
op|'*'
name|'len'
op|'('
name|'nodes'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
string|"'Could not autocreate account %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
name|'result_code'
op|'='
name|'HTTP_OK'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
name|'and'
name|'result_code'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_NOT_FOUND'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result_code'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'                '
name|'cache_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recheck_account_existence'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cache_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recheck_account_existence'
op|'*'
number|'0.1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|'.'
name|'set'
op|'('
name|'cache_key'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
name|'result_code'
op|','
string|"'container_count'"
op|':'
name|'container_count'
op|'}'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'cache_timeout'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'result_code'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'container_count'
newline|'\n'
dedent|''
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
DECL|member|container_info
dedent|''
name|'def'
name|'container_info'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'container'
op|','
name|'account_autocreate'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get container information and thusly verify container existance.\n        This will also make a call to account_info to verify that the\n        account exists.\n\n        :param account: account name for the container\n        :param container: container name to look up\n        :returns: tuple of (container partition, container nodes, container\n                  read acl, container write acl, container sync key) or (None,\n                  None, None, None, None) if the container does not exist\n        """'
newline|'\n'
name|'partition'
op|','
name|'nodes'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_ring'
op|'.'
name|'get_nodes'
op|'('
nl|'\n'
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|':'
newline|'\n'
indent|'            '
name|'cache_key'
op|'='
name|'get_container_memcache_key'
op|'('
name|'account'
op|','
name|'container'
op|')'
newline|'\n'
name|'cache_value'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|'.'
name|'get'
op|'('
name|'cache_key'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'cache_value'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|'='
name|'cache_value'
op|'['
string|"'status'"
op|']'
newline|'\n'
name|'read_acl'
op|'='
name|'cache_value'
op|'['
string|"'read_acl'"
op|']'
newline|'\n'
name|'write_acl'
op|'='
name|'cache_value'
op|'['
string|"'write_acl'"
op|']'
newline|'\n'
name|'sync_key'
op|'='
name|'cache_value'
op|'.'
name|'get'
op|'('
string|"'sync_key'"
op|')'
newline|'\n'
name|'versions'
op|'='
name|'cache_value'
op|'.'
name|'get'
op|'('
string|"'versions'"
op|')'
newline|'\n'
name|'if'
name|'status'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'read_acl'
op|','
name|'write_acl'
op|','
name|'sync_key'
op|','
name|'versions'
newline|'\n'
dedent|''
name|'elif'
name|'status'
op|'=='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'account_info'
op|'('
name|'account'
op|','
name|'autocreate'
op|'='
name|'account_autocreate'
op|')'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
dedent|''
name|'result_code'
op|'='
number|'0'
newline|'\n'
name|'read_acl'
op|'='
name|'None'
newline|'\n'
name|'write_acl'
op|'='
name|'None'
newline|'\n'
name|'sync_key'
op|'='
name|'None'
newline|'\n'
name|'container_size'
op|'='
name|'None'
newline|'\n'
name|'versions'
op|'='
name|'None'
newline|'\n'
name|'attempts_left'
op|'='
name|'len'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'x-trans-id'"
op|':'
name|'self'
op|'.'
name|'trans_id'
op|','
string|"'Connection'"
op|':'
string|"'close'"
op|'}'
newline|'\n'
name|'iternodes'
op|'='
name|'self'
op|'.'
name|'iter_nodes'
op|'('
name|'partition'
op|','
name|'nodes'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_ring'
op|')'
newline|'\n'
name|'while'
name|'attempts_left'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'iternodes'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'attempts_left'
op|'-='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
string|"'HEAD'"
op|','
name|'path'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'is_success'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'result_code'
op|'='
name|'HTTP_OK'
newline|'\n'
name|'read_acl'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-container-read'"
op|')'
newline|'\n'
name|'write_acl'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-container-write'"
op|')'
newline|'\n'
name|'sync_key'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-container-sync-key'"
op|')'
newline|'\n'
name|'container_size'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'X-Container-Object-Count'"
op|')'
newline|'\n'
name|'versions'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-versions-location'"
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'result_code'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                            '
name|'result_code'
op|'='
name|'HTTP_NOT_FOUND'
newline|'\n'
dedent|''
name|'elif'
name|'result_code'
op|'!='
name|'HTTP_NOT_FOUND'
op|':'
newline|'\n'
indent|'                            '
name|'result_code'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'result_code'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'Container'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to get container info for %s'"
op|')'
op|'%'
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
name|'and'
name|'result_code'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_NOT_FOUND'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'result_code'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'                '
name|'cache_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recheck_container_existence'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cache_timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'recheck_container_existence'
op|'*'
number|'0.1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'memcache'
op|'.'
name|'set'
op|'('
name|'cache_key'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
name|'result_code'
op|','
nl|'\n'
string|"'read_acl'"
op|':'
name|'read_acl'
op|','
nl|'\n'
string|"'write_acl'"
op|':'
name|'write_acl'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'sync_key'
op|','
nl|'\n'
string|"'container_size'"
op|':'
name|'container_size'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'versions'
op|'}'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'cache_timeout'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'result_code'
op|'=='
name|'HTTP_OK'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'partition'
op|','
name|'nodes'
op|','
name|'read_acl'
op|','
name|'write_acl'
op|','
name|'sync_key'
op|','
name|'versions'
newline|'\n'
dedent|''
name|'return'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
DECL|member|iter_nodes
dedent|''
name|'def'
name|'iter_nodes'
op|'('
name|'self'
op|','
name|'partition'
op|','
name|'nodes'
op|','
name|'ring'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Node iterator that will first iterate over the normal nodes for a\n        partition and then the handoff partitions for the node.\n\n        :param partition: partition to iterate nodes for\n        :param nodes: list of node dicts from the ring\n        :param ring: ring to get handoff nodes from\n        """'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'node'
newline|'\n'
dedent|''
dedent|''
name|'handoffs'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'handoffs'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'app'
op|'.'
name|'log_handoffs'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_count'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
nl|'\n'
string|"'Handoff requested (%d)'"
op|'%'
name|'handoffs'
op|')'
newline|'\n'
name|'if'
name|'handoffs'
op|'=='
name|'len'
op|'('
name|'nodes'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_all_count'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'node'
newline|'\n'
nl|'\n'
DECL|member|_make_request
dedent|''
dedent|''
dedent|''
name|'def'
name|'_make_request'
op|'('
name|'self'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'query'
op|','
nl|'\n'
name|'logger_thread_locals'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|'='
name|'logger_thread_locals'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'query_string'
op|'='
name|'query'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'node'
op|'='
name|'node'
newline|'\n'
dedent|''
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'is_informational'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
name|'and'
name|'not'
name|'is_server_error'
op|'('
name|'resp'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'resp'
op|'.'
name|'status'
op|','
name|'resp'
op|'.'
name|'reason'
op|','
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'self'
op|'.'
name|'server_type'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'path'"
op|':'
name|'path'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_requests
dedent|''
dedent|''
dedent|''
name|'def'
name|'make_requests'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'ring'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
name|'query_string'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sends an HTTP request to multiple nodes and aggregates the results.\n        It attempts the primary nodes concurrently, then iterates over the\n        handoff nodes as needed.\n\n        :param headers: a list of dicts, where each dict represents one\n                        backend request that should be made.\n        :returns: a webob Response object\n        """'
newline|'\n'
name|'start_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'part'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'self'
op|'.'
name|'iter_nodes'
op|'('
name|'part'
op|','
name|'start_nodes'
op|','
name|'ring'
op|')'
newline|'\n'
name|'pile'
op|'='
name|'GreenPile'
op|'('
name|'len'
op|'('
name|'start_nodes'
op|')'
op|')'
newline|'\n'
name|'for'
name|'head'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'pile'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_make_request'
op|','
name|'nodes'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'head'
op|','
name|'query_string'
op|','
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
op|'['
name|'resp'
name|'for'
name|'resp'
name|'in'
name|'pile'
name|'if'
name|'resp'
op|']'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'response'
op|')'
op|'<'
name|'len'
op|'('
name|'start_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'append'
op|'('
op|'('
name|'HTTP_SERVICE_UNAVAILABLE'
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|'='
name|'zip'
op|'('
op|'*'
name|'response'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'best_response'
op|'('
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|best_response
dedent|''
name|'def'
name|'best_response'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
name|'server_type'
op|','
nl|'\n'
name|'etag'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of responses from several servers, choose the best to\n        return to the API.\n\n        :param req: webob.Request object\n        :param statuses: list of statuses returned\n        :param reasons: list of reasons for each status\n        :param bodies: bodies of each response\n        :param server_type: type of server the responses came from\n        :param etag: etag\n        :returns: webob.Response object with the correct status, body, etc. set\n        """'
newline|'\n'
name|'resp'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'statuses'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'hundred'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_MULTIPLE_CHOICES'
op|','
name|'HTTP_BAD_REQUEST'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hstatuses'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'statuses'
name|'if'
name|'hundred'
op|'<='
name|'s'
op|'<'
name|'hundred'
op|'+'
number|'100'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hstatuses'
op|')'
op|'>'
name|'len'
op|'('
name|'statuses'
op|')'
op|'/'
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'status'
op|'='
name|'max'
op|'('
name|'hstatuses'
op|')'
newline|'\n'
name|'status_index'
op|'='
name|'statuses'
op|'.'
name|'index'
op|'('
name|'status'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'status'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'status'
op|','
name|'reasons'
op|'['
name|'status_index'
op|']'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'body'
op|'='
name|'bodies'
op|'['
name|'status_index'
op|']'
newline|'\n'
name|'resp'
op|'.'
name|'content_type'
op|'='
string|"'text/html'"
newline|'\n'
name|'if'
name|'etag'
op|':'
newline|'\n'
indent|'                        '
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|'='
name|'etag'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(type)s returning 503 for %(statuses)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'server_type'
op|','
string|"'statuses'"
op|':'
name|'statuses'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'.'
name|'status'
op|'='
string|"'503 Internal Server Error'"
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|GET
name|'def'
name|'GET'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handler for HTTP GET requests."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'public'
newline|'\n'
DECL|member|HEAD
name|'def'
name|'HEAD'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handler for HTTP HEAD requests."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GETorHEAD'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_app_iter_reader
dedent|''
name|'def'
name|'_make_app_iter_reader'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'source'
op|','
name|'queue'
op|','
name|'logger_thread_locals'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reads from the source and places data in the queue. It expects\n        something else be reading from the queue and, if nothing does within\n        self.app.client_timeout seconds, the process will be aborted.\n\n        :param node: The node dict that the source is connected to, for\n                     logging/error-limiting purposes.\n        :param source: The httplib.Response object to read from.\n        :param queue: The eventlet.queue.Queue to place read source data into.\n        :param logger_thread_locals: The thread local values to be set on the\n                                     self.app.logger to retain transaction\n                                     logging information.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|'='
name|'logger_thread_locals'
newline|'\n'
name|'success'
op|'='
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'ChunkReadTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'chunk'
op|'='
name|'source'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'queue'
op|'.'
name|'put'
op|'('
name|'chunk'
op|','
name|'timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Full'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Client did not read from queue within %ss'"
op|')'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'client_timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'client_timeouts'"
op|')'
newline|'\n'
name|'success'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'Object'"
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to read during GET'"
op|')'
op|')'
newline|'\n'
name|'success'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# Ensure the queue getter gets a terminator.'
nl|'\n'
indent|'            '
name|'queue'
op|'.'
name|'resize'
op|'('
number|'2'
op|')'
newline|'\n'
name|'queue'
op|'.'
name|'put'
op|'('
name|'success'
op|')'
newline|'\n'
comment|'# Close-out the connection as best as possible.'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'source'
op|','
string|"'swift_conn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close_swift_conn'
op|'('
name|'source'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_app_iter
dedent|''
dedent|''
dedent|''
name|'def'
name|'_make_app_iter'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'source'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns an iterator over the contents of the source (via its read\n        func).  There is also quite a bit of cleanup to ensure garbage\n        collection works and the underlying socket of the source is closed.\n\n        :param response: The webob.Response object this iterator should be\n                         assigned to via response.app_iter.\n        :param source: The httplib.Response object this iterator should read\n                       from.\n        :param node: The node the source is reading from, for logging purposes.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Spawn reader to read from the source and place in the queue.'
nl|'\n'
comment|'# We then drop any reference to the source or node, for garbage'
nl|'\n'
comment|'# collection purposes.'
nl|'\n'
indent|'                '
name|'queue'
op|'='
name|'Queue'
op|'('
number|'1'
op|')'
newline|'\n'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'_make_app_iter_reader'
op|','
name|'node'
op|','
name|'source'
op|','
name|'queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|')'
newline|'\n'
name|'source'
op|'='
name|'node'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'chunk'
op|'='
name|'queue'
op|'.'
name|'get'
op|'('
name|'timeout'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'chunk'
op|','
name|'bool'
op|')'
op|':'
comment|'# terminator'
newline|'\n'
indent|'                        '
name|'success'
op|'='
name|'chunk'
newline|'\n'
name|'if'
name|'not'
name|'success'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Failed to read all data'"
nl|'\n'
string|"' from the source'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'yield'
name|'chunk'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ChunkReadTimeout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'GeneratorExit'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Client disconnected on read'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'app'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Trying to send to client'"
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'app_iter'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|close_swift_conn
dedent|''
dedent|''
name|'def'
name|'close_swift_conn'
op|'('
name|'self'
op|','
name|'src'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'src'
op|'.'
name|'swift_conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'src'
op|'.'
name|'swift_conn'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'src'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'object_chunk_size'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'src'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|GETorHEAD_base
dedent|''
dedent|''
name|'def'
name|'GETorHEAD_base'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'server_type'
op|','
name|'partition'
op|','
name|'nodes'
op|','
name|'path'
op|','
nl|'\n'
name|'attempts'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Base handler for HTTP GET or HEAD requests.\n\n        :param req: webob.Request object\n        :param server_type: server type\n        :param partition: partition\n        :param nodes: nodes\n        :param path: path for the request\n        :param attempts: number of attempts to try\n        :returns: webob.Response object\n        """'
newline|'\n'
name|'statuses'
op|'='
op|'['
op|']'
newline|'\n'
name|'reasons'
op|'='
op|'['
op|']'
newline|'\n'
name|'bodies'
op|'='
op|'['
op|']'
newline|'\n'
name|'source'
op|'='
name|'None'
newline|'\n'
name|'sources'
op|'='
op|'['
op|']'
newline|'\n'
name|'newest'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-newest'"
op|','
string|"'f'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'TRUE_VALUES'
newline|'\n'
name|'nodes'
op|'='
name|'iter'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'statuses'
op|')'
op|'<'
name|'attempts'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'nodes'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ConnectionTimeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'headers'
op|'='
name|'dict'
op|'('
name|'req'
op|'.'
name|'headers'
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'Connection'"
op|']'
op|'='
string|"'close'"
newline|'\n'
name|'conn'
op|'='
name|'http_connect'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
name|'partition'
op|','
name|'req'
op|'.'
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
nl|'\n'
name|'query_string'
op|'='
name|'req'
op|'.'
name|'query_string'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'Timeout'
op|'('
name|'self'
op|'.'
name|'app'
op|'.'
name|'node_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'possible_source'
op|'='
name|'conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'possible_source'
op|'.'
name|'swift_conn'
op|'='
name|'conn'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'exception_occurred'
op|'('
name|'node'
op|','
name|'server_type'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Trying to %(method)s %(path)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'req'
op|'.'
name|'method'
op|','
string|"'path'"
op|':'
name|'req'
op|'.'
name|'path'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'possible_source'
op|'.'
name|'status'
op|'=='
name|'HTTP_INSUFFICIENT_STORAGE'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'error_limit'
op|'('
name|'node'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'is_success'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
name|'or'
name|'is_redirection'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
comment|"# 404 if we know we don't have a synced copy"
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'float'
op|'('
name|'possible_source'
op|'.'
name|'getheader'
op|'('
string|"'X-PUT-Timestamp'"
op|','
number|'1'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'statuses'
op|'.'
name|'append'
op|'('
name|'HTTP_NOT_FOUND'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'possible_source'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'newest'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sources'
op|':'
newline|'\n'
indent|'                        '
name|'ts'
op|'='
name|'float'
op|'('
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-put-timestamp'"
op|')'
name|'or'
nl|'\n'
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
name|'pts'
op|'='
name|'float'
op|'('
nl|'\n'
name|'possible_source'
op|'.'
name|'getheader'
op|'('
string|"'x-put-timestamp'"
op|')'
name|'or'
nl|'\n'
name|'possible_source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
name|'if'
name|'pts'
op|'>'
name|'ts'
op|':'
newline|'\n'
indent|'                            '
name|'sources'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'possible_source'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'sources'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'sources'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'possible_source'
op|')'
newline|'\n'
dedent|''
name|'source'
op|'='
name|'sources'
op|'['
number|'0'
op|']'
newline|'\n'
name|'statuses'
op|'.'
name|'append'
op|'('
name|'source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'source'
op|'='
name|'possible_source'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'statuses'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'reasons'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'reason'
op|')'
newline|'\n'
name|'bodies'
op|'.'
name|'append'
op|'('
name|'possible_source'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'is_server_error'
op|'('
name|'possible_source'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'error_occurred'
op|'('
name|'node'
op|','
name|'_'
op|'('
string|"'ERROR %(status)d %(body)s '"
string|"'From %(type)s Server'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'status'"
op|':'
name|'possible_source'
op|'.'
name|'status'
op|','
nl|'\n'
string|"'body'"
op|':'
name|'bodies'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|':'
number|'1024'
op|']'
op|','
string|"'type'"
op|':'
name|'server_type'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'GET'"
name|'and'
name|'source'
op|'.'
name|'status'
name|'in'
op|'('
name|'HTTP_OK'
op|','
name|'HTTP_PARTIAL_CONTENT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'newest'
op|':'
newline|'\n'
comment|'# we need to close all hanging swift_conns'
nl|'\n'
indent|'                    '
name|'sources'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'for'
name|'src'
name|'in'
name|'sources'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'close_swift_conn'
op|'('
name|'src'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'res'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'conditional_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'app_iter'
op|'='
name|'self'
op|'.'
name|'_make_app_iter'
op|'('
name|'node'
op|','
name|'source'
op|','
name|'res'
op|')'
newline|'\n'
comment|'# See NOTE: swift_conn at top of file about this.'
nl|'\n'
name|'res'
op|'.'
name|'swift_conn'
op|'='
name|'source'
op|'.'
name|'swift_conn'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
name|'source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# Used by container sync feature'
nl|'\n'
name|'if'
name|'res'
op|'.'
name|'environ'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'environ'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'environ'
op|'['
string|"'swift_x_timestamp'"
op|']'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
op|'{'
string|"'accept-ranges'"
op|':'
string|"'bytes'"
op|'}'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'status'
op|'='
name|'source'
op|'.'
name|'status'
newline|'\n'
name|'res'
op|'.'
name|'content_length'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
name|'if'
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'charset'
op|'='
name|'None'
newline|'\n'
name|'res'
op|'.'
name|'content_type'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
dedent|''
name|'elif'
name|'is_success'
op|'('
name|'source'
op|'.'
name|'status'
op|')'
name|'or'
name|'is_redirection'
op|'('
name|'source'
op|'.'
name|'status'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'='
name|'status_map'
op|'['
name|'source'
op|'.'
name|'status'
op|']'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
name|'source'
op|'.'
name|'getheaders'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# Used by container sync feature'
nl|'\n'
name|'if'
name|'res'
op|'.'
name|'environ'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'environ'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'res'
op|'.'
name|'environ'
op|'['
string|"'swift_x_timestamp'"
op|']'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'x-timestamp'"
op|')'
newline|'\n'
name|'update_headers'
op|'('
name|'res'
op|','
op|'{'
string|"'accept-ranges'"
op|':'
string|"'bytes'"
op|'}'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'content_length'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
name|'if'
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'charset'
op|'='
name|'None'
newline|'\n'
name|'res'
op|'.'
name|'content_type'
op|'='
name|'source'
op|'.'
name|'getheader'
op|'('
string|"'Content-Type'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'best_response'
op|'('
name|'req'
op|','
name|'statuses'
op|','
name|'reasons'
op|','
name|'bodies'
op|','
nl|'\n'
string|"'%s %s'"
op|'%'
op|'('
name|'server_type'
op|','
name|'req'
op|'.'
name|'method'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
