begin_unit
comment|'# Copyright (c) 2011-2014 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
nl|'\n'
name|'from'
name|'time'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'traceback'
name|'import'
name|'format_exc'
newline|'\n'
name|'from'
name|'urllib'
name|'import'
name|'unquote'
newline|'\n'
name|'from'
name|'uuid'
name|'import'
name|'uuid4'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'sha1'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'Response'
op|','
name|'Request'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'HTTPBadRequest'
op|','
name|'HTTPForbidden'
op|','
name|'HTTPNotFound'
op|','
name|'HTTPUnauthorized'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'request_helpers'
name|'import'
name|'get_sys_meta_prefix'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'middleware'
op|'.'
name|'acl'
name|'import'
op|'('
nl|'\n'
name|'clean_acl'
op|','
name|'parse_acl'
op|','
name|'referrer_allowed'
op|','
name|'acls_from_account_info'
op|')'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'cache_from_env'
op|','
name|'get_logger'
op|','
name|'split_path'
op|','
name|'config_true_value'
op|','
name|'register_swift_info'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'config_read_reseller_options'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'base'
name|'import'
name|'get_account_info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TempAuth
name|'class'
name|'TempAuth'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test authentication and authorization system.\n\n    Add to your pipeline in proxy-server.conf, such as::\n\n        [pipeline:main]\n        pipeline = catch_errors cache tempauth proxy-server\n\n    Set account auto creation to true in proxy-server.conf::\n\n        [app:proxy-server]\n        account_autocreate = true\n\n    And add a tempauth filter section, such as::\n\n        [filter:tempauth]\n        use = egg:swift#tempauth\n        user_admin_admin = admin .admin .reseller_admin\n        user_test_tester = testing .admin\n        user_test2_tester2 = testing2 .admin\n        user_test_tester3 = testing3\n        # To allow accounts/users with underscores you can base64 encode them.\n        # Here is the account "under_score" and username "a_b" (note the lack\n        # of padding equal signs):\n        user64_dW5kZXJfc2NvcmU_YV9i = testing4\n\n\n    See the proxy-server.conf-sample for more information.\n\n    Multiple Reseller Prefix Items:\n\n    The reseller prefix specifies which parts of the account namespace this\n    middleware is responsible for managing authentication and authorization.\n    By default, the prefix is AUTH so accounts and tokens are prefixed\n    by AUTH_. When a request\'s token and/or path start with AUTH_, this\n    middleware knows it is responsible.\n\n    We allow the reseller prefix to be a list. In tempauth, the first item\n    in the list is used as the prefix for tokens and user groups. The\n    other prefixes provide alternate accounts that user\'s can access. For\n    example if the reseller prefix list is \'AUTH, OTHER\', a user with\n    admin access to AUTH_account also has admin access to\n    OTHER_account.\n\n    Required Group:\n\n    The group .admin is normally needed to access an account (ACLs provide\n    an additional way to access an account). You can specify the\n    ``require_group`` parameter. This means that you also need the named group\n    to access an account. If you have several reseller prefix items, prefix\n    the ``require_group`` parameter with the appropriate prefix.\n\n     X-Service-Token:\n\n     If an X-Service-Token is presented in the request headers, the groups\n     derived from the token are appended to the roles derived form\n     X-Auth-Token. If X-Auth-Token is missing or invalid, X-Service-Token\n     is not processed.\n\n     The X-Service-Token is useful when combined with multiple reseller prefix\n     items. In the following configuration, accounts prefixed SERVICE_\n     are only accessible if X-Auth-Token is form the end-user and\n     X-Service-Token is from the ``glance`` user::\n\n        [filter:tempauth]\n        use = egg:swift#tempauth\n        reseller_prefix = AUTH, SERVICE\n        SERVICE_require_group = .service\n        user_admin_admin = admin .admin .reseller_admin\n        user_joeacct_joe = joepw .admin\n        user_maryacct_mary = marypw .admin\n        user_glance_glance = glancepw .service\n\n     The name .service is an example. Unlike .admin and .reseller_admin\n     it is not a reserved name.\n\n    Account ACLs:\n        If a swift_owner issues a POST or PUT to the account, with the\n        X-Account-Access-Control header set in the request, then this may\n        allow certain types of access for additional users.\n\n        * Read-Only: Users with read-only access can list containers in the\n          account, list objects in any container, retrieve objects, and view\n          unprivileged account/container/object metadata.\n        * Read-Write: Users with read-write access can (in addition to the\n          read-only privileges) create objects, overwrite existing objects,\n          create new containers, and set unprivileged container/object\n          metadata.\n        * Admin: Users with admin access are swift_owners and can perform\n          any action, including viewing/setting privileged metadata (e.g.\n          changing account ACLs).\n\n    To generate headers for setting an account ACL::\n\n        from swift.common.middleware.acl import format_acl\n        acl_data = { \'admin\': [\'alice\'], \'read-write\': [\'bob\', \'carol\'] }\n        header_value = format_acl(version=2, acl_dict=acl_data)\n\n    To generate a curl command line from the above::\n\n        token=...\n        storage_url=...\n        python -c \'\n          from swift.common.middleware.acl import format_acl\n          acl_data = { \'admin\': [\'alice\'], \'read-write\': [\'bob\', \'carol\'] }\n          headers = {\'X-Account-Access-Control\':\n                     format_acl(version=2, acl_dict=acl_data)}\n          header_str = \' \'.join(["-H \'%s: %s\'" % (k, v)\n                                 for k, v in headers.items()])\n          print (\'curl -D- -X POST -H "x-auth-token: $token" %s \'\n                 \'$storage_url\' % header_str)\n        \'\n\n    :param app: The next WSGI app in the pipeline\n    :param conf: The dict of configuration values from the Paste config file\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'get_logger'
op|'('
name|'conf'
op|','
name|'log_route'
op|'='
string|"'tempauth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'log_headers'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_headers'"
op|','
string|"'f'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reseller_prefixes'
op|','
name|'self'
op|'.'
name|'account_rules'
op|'='
name|'config_read_reseller_options'
op|'('
name|'conf'
op|','
name|'dict'
op|'('
name|'require_group'
op|'='
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reseller_prefix'
op|'='
name|'self'
op|'.'
name|'reseller_prefixes'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'tempauth.%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'reseller_prefix'
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
name|'else'
string|"'NONE'"
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_prefix'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'auth_prefix'"
op|','
string|"'/auth/'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'auth_prefix'
name|'or'
name|'not'
name|'self'
op|'.'
name|'auth_prefix'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
string|'\'Rewriting invalid auth prefix "%s" to \''
nl|'\n'
string|'\'"/auth/" (Non-empty auth prefix path \''
nl|'\n'
string|"'is required)'"
op|'%'
name|'self'
op|'.'
name|'auth_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_prefix'
op|'='
string|"'/auth/'"
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|'['
number|'0'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'auth_prefix'
op|'='
string|"'/'"
op|'+'
name|'self'
op|'.'
name|'auth_prefix'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"'/'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'auth_prefix'
op|'+='
string|"'/'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'token_life'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'token_life'"
op|','
number|'86400'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allow_overrides'
op|'='
name|'config_true_value'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'allow_overrides'"
op|','
string|"'t'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'storage_url_scheme'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'storage_url_scheme'"
op|','
string|"'default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'users'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'conf_key'
name|'in'
name|'conf'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user_'"
op|')'
name|'or'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user64_'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'account'
op|','
name|'username'
op|'='
name|'conf_key'
op|'.'
name|'split'
op|'('
string|"'_'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'_'"
op|')'
newline|'\n'
name|'if'
name|'conf_key'
op|'.'
name|'startswith'
op|'('
string|"'user64_'"
op|')'
op|':'
newline|'\n'
comment|'# Because trailing equal signs would screw up config file'
nl|'\n'
comment|"# parsing, we auto-pad with '=' chars."
nl|'\n'
indent|'                    '
name|'account'
op|'+='
string|"'='"
op|'*'
op|'('
name|'len'
op|'('
name|'account'
op|')'
op|'%'
number|'4'
op|')'
newline|'\n'
name|'account'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'account'
op|')'
newline|'\n'
name|'username'
op|'+='
string|"'='"
op|'*'
op|'('
name|'len'
op|'('
name|'username'
op|')'
op|'%'
number|'4'
op|')'
newline|'\n'
name|'username'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'username'
op|')'
newline|'\n'
dedent|''
name|'values'
op|'='
name|'conf'
op|'['
name|'conf_key'
op|']'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'values'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|"'%s has no key set'"
op|'%'
name|'conf_key'
op|')'
newline|'\n'
dedent|''
name|'key'
op|'='
name|'values'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'values'
name|'and'
op|'('
string|"'://'"
name|'in'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
name|'or'
string|"'$HOST'"
name|'in'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'url'
op|'='
name|'values'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'url'
op|'='
string|"'$HOST/v1/%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'users'
op|'['
name|'account'
op|'+'
string|"':'"
op|'+'
name|'username'
op|']'
op|'='
op|'{'
nl|'\n'
string|"'key'"
op|':'
name|'key'
op|','
string|"'url'"
op|':'
name|'url'
op|','
string|"'groups'"
op|':'
name|'values'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Accepts a standard WSGI application call, authenticating the request\n        and installing callback hooks for authorization and ACL header\n        validation. For an authenticated request, REMOTE_USER will be set to a\n        comma separated list of the user\'s groups.\n\n        With a non-empty reseller prefix, acts as the definitive auth service\n        for just tokens and accounts that begin with that prefix, but will deny\n        requests outside this prefix if no other auth middleware overrides it.\n\n        With an empty reseller prefix, acts as the definitive auth service only\n        for tokens that validate to a non-empty set of groups. For all other\n        requests, acts as the fallback auth service when no other auth\n        middleware overrides it.\n\n        Alternatively, if the request matches the self.auth_prefix, the request\n        will be routed through the internal auth request handler (self.handle).\n        This is to handle granting tokens, etc.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'allow_overrides'
name|'and'
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.authorize_override'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'env'
op|'.'
name|'get'
op|'('
string|"'PATH_INFO'"
op|','
string|"''"
op|')'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'auth_prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'handle'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'s3'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_AUTHORIZATION'"
op|')'
newline|'\n'
name|'token'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_AUTH_TOKEN'"
op|','
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_STORAGE_TOKEN'"
op|')'
op|')'
newline|'\n'
name|'service_token'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_X_SERVICE_TOKEN'"
op|')'
newline|'\n'
name|'if'
name|'s3'
name|'or'
op|'('
name|'token'
name|'and'
name|'token'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Note: Empty reseller_prefix will match all tokens.'
nl|'\n'
indent|'            '
name|'groups'
op|'='
name|'self'
op|'.'
name|'get_groups'
op|'('
name|'env'
op|','
name|'token'
op|')'
newline|'\n'
name|'if'
name|'service_token'
op|':'
newline|'\n'
indent|'                '
name|'service_groups'
op|'='
name|'self'
op|'.'
name|'get_groups'
op|'('
name|'env'
op|','
name|'service_token'
op|')'
newline|'\n'
name|'if'
name|'groups'
name|'and'
name|'service_groups'
op|':'
newline|'\n'
indent|'                    '
name|'groups'
op|'+='
string|"','"
op|'+'
name|'service_groups'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'user'
op|'='
name|'groups'
name|'and'
name|'groups'
op|'.'
name|'split'
op|'('
string|"','"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
name|'or'
string|"''"
newline|'\n'
name|'trans_id'
op|'='
name|'env'
op|'.'
name|'get'
op|'('
string|"'swift.trans_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'User: %s uses token %s (trans_id %s)'"
op|'%'
nl|'\n'
op|'('
name|'user'
op|','
string|"'s3'"
name|'if'
name|'s3'
name|'else'
name|'token'
op|','
name|'trans_id'
op|')'
op|')'
newline|'\n'
name|'env'
op|'['
string|"'REMOTE_USER'"
op|']'
op|'='
name|'groups'
newline|'\n'
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
name|'if'
string|"'.reseller_admin'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'reseller_request'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Unauthorized token'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'reseller_prefix'
name|'and'
name|'not'
name|'s3'
op|':'
newline|'\n'
comment|"# Because I know I'm the definitive auth for this token, I"
nl|'\n'
comment|'# can deny it outright.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'unauthorized'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'vrs'
op|','
name|'realm'
op|','
name|'rest'
op|'='
name|'split_path'
op|'('
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|','
nl|'\n'
number|'2'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'realm'
op|'='
string|"'unknown'"
newline|'\n'
dedent|''
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Www-Authenticate'"
op|':'
string|'\'Swift realm="%s"\''
op|'%'
name|'realm'
op|'}'
op|')'
op|'('
nl|'\n'
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
comment|"# Because I'm not certain if I'm the definitive auth for empty"
nl|'\n'
comment|"# reseller_prefixed tokens, I won't overwrite swift.authorize."
nl|'\n'
dedent|''
name|'elif'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'denied_response'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_is_definitive_auth'
op|'('
name|'env'
op|'.'
name|'get'
op|'('
string|"'PATH_INFO'"
op|','
string|"''"
op|')'
op|')'
op|':'
newline|'\n'
comment|"# Handle anonymous access to accounts I'm the definitive"
nl|'\n'
comment|'# auth for.'
nl|'\n'
indent|'                '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'reseller_prefix'
op|'=='
string|"''"
op|':'
newline|'\n'
comment|"# Because I'm not certain if I'm the definitive auth, I won't"
nl|'\n'
comment|'# overwrite swift.authorize.'
nl|'\n'
indent|'                '
name|'if'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'authorize'
newline|'\n'
name|'env'
op|'['
string|"'swift.clean_acl'"
op|']'
op|'='
name|'clean_acl'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# Not my token, not my account, I can't authorize this request,"
nl|'\n'
comment|'# deny all is a good idea if not already set...'
nl|'\n'
indent|'                '
name|'if'
string|"'swift.authorize'"
name|'not'
name|'in'
name|'env'
op|':'
newline|'\n'
indent|'                    '
name|'env'
op|'['
string|"'swift.authorize'"
op|']'
op|'='
name|'self'
op|'.'
name|'denied_response'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'app'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_definitive_auth
dedent|''
name|'def'
name|'_is_definitive_auth'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine if we are the definitive auth\n\n        Determines if we are the definitive auth for a given path.\n        If the account name is prefixed with something matching one\n        of the reseller_prefix items, then we are the auth (return True)\n        Non-matching: we are not the auth.\n        However, one of the reseller_prefix items can be blank. If\n        so, we cannot always be definite so return False.\n\n        :param path: A path (e.g., /v1/AUTH_joesaccount/c/o)\n        :return:True if we are definitive auth\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|','
name|'account'
op|','
name|'rest'
op|'='
name|'split_path'
op|'('
name|'path'
op|','
number|'1'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'_get_account_prefix'
op|'('
name|'account'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_non_empty_reseller_prefixes
dedent|''
name|'def'
name|'_non_empty_reseller_prefixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
op|'['
name|'pre'
name|'for'
name|'pre'
name|'in'
name|'self'
op|'.'
name|'reseller_prefixes'
name|'if'
name|'pre'
op|'!='
string|"''"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_account_prefix
dedent|''
name|'def'
name|'_get_account_prefix'
op|'('
name|'self'
op|','
name|'account'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the prefix of an account\n\n        Determines which reseller prefix matches the account and returns\n        that prefix. If account does not start with one of the known\n        reseller prefixes, returns None.\n\n        :param account: Account name (e.g., AUTH_joesaccount) or None\n        :return: The prefix string (examples: \'AUTH_\', \'SERVICE_\', \'\')\n                 If we can\'t match the prefix of the account, return None\n        """'
newline|'\n'
name|'if'
name|'account'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
comment|'# Empty prefix matches everything, so try to match others first'
nl|'\n'
dedent|''
name|'for'
name|'prefix'
name|'in'
name|'self'
op|'.'
name|'_non_empty_reseller_prefixes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'account'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'prefix'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"''"
name|'in'
name|'self'
op|'.'
name|'reseller_prefixes'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_dot_account
dedent|''
name|'def'
name|'_dot_account'
op|'('
name|'self'
op|','
name|'account'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Detect if account starts with dot character after the prefix\n\n        :param account: account in path (e.g., AUTH_joesaccount)\n        :return:True if name starts with dot character\n        """'
newline|'\n'
name|'prefix'
op|'='
name|'self'
op|'.'
name|'_get_account_prefix'
op|'('
name|'account'
op|')'
newline|'\n'
name|'return'
name|'prefix'
name|'is'
name|'not'
name|'None'
name|'and'
name|'account'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|']'
op|'=='
string|"'.'"
newline|'\n'
nl|'\n'
DECL|member|_get_user_groups
dedent|''
name|'def'
name|'_get_user_groups'
op|'('
name|'self'
op|','
name|'account'
op|','
name|'account_user'
op|','
name|'account_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param account: example: test\n        :param account_user: example: test:tester\n        :param account_id: example: AUTH_test\n        :return: a comma separated string of group names. The group names are\n                 as follows: account,account_user,groups...\n                 If .admin is in the groups, this is replaced by all the\n                 possible account ids. For example, for user joe, account acct\n                 and resellers AUTH_, OTHER_, the returned string is as\n                 follows: acct,acct:joe,AUTH_acct,OTHER_acct\n        """'
newline|'\n'
name|'groups'
op|'='
op|'['
name|'account'
op|','
name|'account_user'
op|']'
newline|'\n'
name|'groups'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'groups'"
op|']'
op|')'
newline|'\n'
name|'if'
string|"'.admin'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'            '
name|'groups'
op|'.'
name|'remove'
op|'('
string|"'.admin'"
op|')'
newline|'\n'
name|'for'
name|'prefix'
name|'in'
name|'self'
op|'.'
name|'_non_empty_reseller_prefixes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'.'
name|'append'
op|'('
string|"'%s%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'account'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'account_id'
name|'not'
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'.'
name|'append'
op|'('
name|'account_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'groups'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'groups'
op|')'
newline|'\n'
name|'return'
name|'groups'
newline|'\n'
nl|'\n'
DECL|member|get_groups
dedent|''
name|'def'
name|'get_groups'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'token'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get groups for the given token.\n\n        :param env: The current WSGI environment dictionary.\n        :param token: Token to validate and return a group string for.\n        :returns: None if the token is invalid or a string containing a comma\n                  separated list of groups the authenticated user is a member\n                  of. The first group in the list is also considered a unique\n                  identifier for that user.\n        """'
newline|'\n'
name|'groups'
op|'='
name|'None'
newline|'\n'
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Memcache required'"
op|')'
newline|'\n'
dedent|''
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'token'
op|')'
newline|'\n'
name|'cached_auth_data'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_token_key'
op|')'
newline|'\n'
name|'if'
name|'cached_auth_data'
op|':'
newline|'\n'
indent|'            '
name|'expires'
op|','
name|'groups'
op|'='
name|'cached_auth_data'
newline|'\n'
name|'if'
name|'expires'
op|'<'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'env'
op|'.'
name|'get'
op|'('
string|"'HTTP_AUTHORIZATION'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'account_user'
op|','
name|'sign'
op|'='
name|'env'
op|'['
string|"'HTTP_AUTHORIZATION'"
op|']'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'rsplit'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'account_user'
name|'not'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'account'
op|','
name|'user'
op|'='
name|'account_user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'account_id'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'path'
op|'='
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
newline|'\n'
name|'env'
op|'['
string|"'PATH_INFO'"
op|']'
op|'='
name|'path'
op|'.'
name|'replace'
op|'('
name|'account_user'
op|','
name|'account_id'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'base64'
op|'.'
name|'urlsafe_b64decode'
op|'('
name|'unquote'
op|'('
name|'token'
op|')'
op|')'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'key'"
op|']'
newline|'\n'
name|'s'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'hmac'
op|'.'
name|'new'
op|'('
name|'key'
op|','
name|'msg'
op|','
name|'sha1'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'s'
op|'!='
name|'sign'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'groups'
op|'='
name|'self'
op|'.'
name|'_get_user_groups'
op|'('
name|'account'
op|','
name|'account_user'
op|','
name|'account_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'groups'
newline|'\n'
nl|'\n'
DECL|member|account_acls
dedent|''
name|'def'
name|'account_acls'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a dict of ACL data from the account server via get_account_info.\n\n        Auth systems may define their own format, serialization, structure,\n        and capabilities implemented in the ACL headers and persisted in the\n        sysmeta data.  However, auth systems are strongly encouraged to be\n        interoperable with Tempauth.\n\n        Account ACLs are set and retrieved via the header\n           X-Account-Access-Control\n\n        For header format and syntax, see:\n         * :func:`swift.common.middleware.acl.parse_acl()`\n         * :func:`swift.common.middleware.acl.format_acl()`\n        """'
newline|'\n'
name|'info'
op|'='
name|'get_account_info'
op|'('
name|'req'
op|'.'
name|'environ'
op|','
name|'self'
op|'.'
name|'app'
op|','
name|'swift_source'
op|'='
string|"'TA'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'acls'
op|'='
name|'acls_from_account_info'
op|'('
name|'info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'e1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
string|'"Invalid ACL stored in metadata: %r"'
op|'%'
name|'e1'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
name|'as'
name|'e2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
string|'"ACL version exceeds middleware version: %r"'
op|'%'
name|'e2'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'acls'
newline|'\n'
nl|'\n'
DECL|member|extract_acl_and_report_errors
dedent|''
name|'def'
name|'extract_acl_and_report_errors'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a user-readable string indicating the errors in the input ACL,\n        or None if there are no errors.\n        """'
newline|'\n'
name|'acl_header'
op|'='
string|"'x-account-access-control'"
newline|'\n'
name|'acl_data'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'acl_header'
op|')'
newline|'\n'
name|'result'
op|'='
name|'parse_acl'
op|'('
name|'version'
op|'='
number|'2'
op|','
name|'data'
op|'='
name|'acl_data'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'Syntax error in input (%r)'"
op|'%'
name|'acl_data'
newline|'\n'
nl|'\n'
dedent|''
name|'tempauth_acl_keys'
op|'='
string|"'admin read-write read-only'"
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'result'
op|':'
newline|'\n'
comment|'# While it is possible to construct auth systems that collaborate'
nl|'\n'
comment|'# on ACLs, TempAuth is not such an auth system.  At this point,'
nl|'\n'
comment|'# it thinks it is authoritative.'
nl|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'tempauth_acl_keys'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'"Key \'%s\' not recognized"'
op|'%'
name|'key'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'key'
name|'in'
name|'tempauth_acl_keys'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'result'
op|'['
name|'key'
op|']'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'"Value for key \'%s\' must be a list"'
op|'%'
name|'key'
newline|'\n'
dedent|''
name|'for'
name|'grantee'
name|'in'
name|'result'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'grantee'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
string|'"Elements of \'%s\' list must be strings"'
op|'%'
name|'key'
newline|'\n'
nl|'\n'
comment|'# Everything looks fine, no errors found'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'internal_hdr'
op|'='
name|'get_sys_meta_prefix'
op|'('
string|"'account'"
op|')'
op|'+'
string|"'core-access-control'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
name|'internal_hdr'
op|']'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'pop'
op|'('
name|'acl_header'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|authorize
dedent|''
name|'def'
name|'authorize'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns None if the request is authorized to continue or a standard\n        WSGI response callable if not.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_junk'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'1'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_get_account_prefix'
op|'('
name|'account'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"Account name: %s doesn\'t start with "'
nl|'\n'
string|'"reseller_prefix(s): %s."'
nl|'\n'
op|'%'
op|'('
name|'account'
op|','
string|"','"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'reseller_prefixes'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
comment|'# At this point, TempAuth is convinced that it is authoritative.'
nl|'\n'
comment|'# If you are sending an ACL header, it must be syntactically valid'
nl|'\n'
comment|"# according to TempAuth's rules for ACL syntax."
nl|'\n'
dedent|''
name|'acl_data'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-account-access-control'"
op|')'
newline|'\n'
name|'if'
name|'acl_data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'self'
op|'.'
name|'extract_acl_and_report_errors'
op|'('
name|'req'
op|')'
newline|'\n'
name|'if'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
string|"'X-Account-Access-Control invalid: %s\\n\\nInput: %s\\n'"
op|'%'
op|'('
nl|'\n'
name|'error'
op|','
name|'acl_data'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'['
op|'('
string|"'Content-Type'"
op|','
string|"'text/plain; charset=UTF-8'"
op|')'
op|']'
newline|'\n'
name|'return'
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
name|'headers'
op|','
name|'body'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'user_groups'
op|'='
op|'('
name|'req'
op|'.'
name|'remote_user'
name|'or'
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'account_user'
op|'='
name|'user_groups'
op|'['
number|'1'
op|']'
name|'if'
name|'len'
op|'('
name|'user_groups'
op|')'
op|'>'
number|'1'
name|'else'
name|'None'
newline|'\n'
nl|'\n'
name|'if'
string|"'.reseller_admin'"
name|'in'
name|'user_groups'
name|'and'
name|'account'
name|'not'
name|'in'
name|'self'
op|'.'
name|'reseller_prefixes'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_dot_account'
op|'('
name|'account'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"User %s has reseller admin authorizing."'
nl|'\n'
op|'%'
name|'account_user'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'account'
name|'in'
name|'user_groups'
name|'and'
op|'('
name|'req'
op|'.'
name|'method'
name|'not'
name|'in'
op|'('
string|"'DELETE'"
op|','
string|"'PUT'"
op|')'
name|'or'
name|'container'
op|')'
op|':'
newline|'\n'
comment|'# The user is admin for the account and is not trying to do an'
nl|'\n'
comment|'# account DELETE or PUT'
nl|'\n'
indent|'            '
name|'account_prefix'
op|'='
name|'self'
op|'.'
name|'_get_account_prefix'
op|'('
name|'account'
op|')'
newline|'\n'
name|'require_group'
op|'='
name|'self'
op|'.'
name|'account_rules'
op|'.'
name|'get'
op|'('
name|'account_prefix'
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'require_group'"
op|')'
newline|'\n'
name|'if'
name|'require_group'
name|'and'
name|'require_group'
name|'in'
name|'user_groups'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"User %s has admin and %s group."'
nl|'\n'
string|'" Authorizing."'
op|'%'
op|'('
name|'account_user'
op|','
nl|'\n'
name|'require_group'
op|')'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'require_group'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"User %s has admin authorizing."'
nl|'\n'
op|'%'
name|'account_user'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift_sync_key'"
op|')'
nl|'\n'
name|'and'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_sync_key'"
op|']'
op|'=='
nl|'\n'
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-container-sync-key'"
op|','
name|'None'
op|')'
op|')'
nl|'\n'
name|'and'
string|"'x-timestamp'"
name|'in'
name|'req'
op|'.'
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"Allow request with container sync-key: %s."'
nl|'\n'
op|'%'
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_sync_key'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'OPTIONS'"
op|':'
newline|'\n'
comment|'# allow OPTIONS requests to proceed as normal'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"Allow OPTIONS request."'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'referrers'
op|','
name|'groups'
op|'='
name|'parse_acl'
op|'('
name|'getattr'
op|'('
name|'req'
op|','
string|"'acl'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'referrer_allowed'
op|'('
name|'req'
op|'.'
name|'referer'
op|','
name|'referrers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'obj'
name|'or'
string|"'.rlistings'"
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"Allow authorizing %s via referer ACL."'
nl|'\n'
op|'%'
name|'req'
op|'.'
name|'referer'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'user_group'
name|'in'
name|'user_groups'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'user_group'
name|'in'
name|'groups'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"User %s allowed in ACL: %s authorizing."'
nl|'\n'
op|'%'
op|'('
name|'account_user'
op|','
name|'user_group'
op|')'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Check for access via X-Account-Access-Control'
nl|'\n'
dedent|''
dedent|''
name|'acct_acls'
op|'='
name|'self'
op|'.'
name|'account_acls'
op|'('
name|'req'
op|')'
newline|'\n'
name|'if'
name|'acct_acls'
op|':'
newline|'\n'
comment|"# At least one account ACL is set in this account's sysmeta data,"
nl|'\n'
comment|'# so we should see whether this user is authorized by the ACLs.'
nl|'\n'
indent|'            '
name|'user_group_set'
op|'='
name|'set'
op|'('
name|'user_groups'
op|')'
newline|'\n'
name|'if'
name|'user_group_set'
op|'.'
name|'intersection'
op|'('
name|'acct_acls'
op|'['
string|"'admin'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift_owner'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'User %s allowed by X-Account-Access-Control'"
nl|'\n'
string|"' (admin)'"
op|'%'
name|'account_user'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'user_group_set'
op|'.'
name|'intersection'
op|'('
name|'acct_acls'
op|'['
string|"'read-write'"
op|']'
op|')'
name|'and'
nl|'\n'
op|'('
name|'container'
name|'or'
name|'req'
op|'.'
name|'method'
name|'in'
op|'('
string|"'GET'"
op|','
string|"'HEAD'"
op|')'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# The RW ACL allows all operations to containers/objects, but'
nl|'\n'
comment|'# only GET/HEAD to accounts (and OPTIONS, above)'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'User %s allowed by X-Account-Access-Control'"
nl|'\n'
string|"' (read-write)'"
op|'%'
name|'account_user'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'user_group_set'
op|'.'
name|'intersection'
op|'('
name|'acct_acls'
op|'['
string|"'read-only'"
op|']'
op|')'
name|'and'
nl|'\n'
name|'req'
op|'.'
name|'method'
name|'in'
op|'('
string|"'GET'"
op|','
string|"'HEAD'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|"'User %s allowed by X-Account-Access-Control'"
nl|'\n'
string|"' (read-only)'"
op|'%'
name|'account_user'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'denied_response'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|denied_response
dedent|''
name|'def'
name|'denied_response'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a standard WSGI response callable with the status of 403 or 401\n        depending on whether the REMOTE_USER is set or not.\n        """'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'remote_user'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'forbidden'"
op|')'
newline|'\n'
name|'return'
name|'HTTPForbidden'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'unauthorized'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle
dedent|''
dedent|''
name|'def'
name|'handle'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        WSGI entry point for auth requests (ones that match the\n        self.auth_prefix).\n        Wraps env in swob.Request object and passes it down.\n\n        :param env: WSGI environment dictionary\n        :param start_response: WSGI callable\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
name|'Request'
op|'('
name|'env'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'auth_prefix'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'path_info_pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'req'
op|'.'
name|'bytes_transferred'
op|'='
string|"'-'"
newline|'\n'
name|'req'
op|'.'
name|'client_disconnect'
op|'='
name|'False'
newline|'\n'
name|'if'
string|"'x-storage-token'"
name|'in'
name|'req'
op|'.'
name|'headers'
name|'and'
string|"'x-auth-token'"
name|'not'
name|'in'
name|'req'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-auth-token'"
op|']'
op|'='
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-storage-token'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'handle_request'
op|'('
name|'req'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'('
string|'"EXCEPTION IN handle: %s: %s"'
op|'%'
op|'('
name|'format_exc'
op|'('
op|')'
op|','
name|'env'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'start_response'
op|'('
string|"'500 Server Error'"
op|','
nl|'\n'
op|'['
op|'('
string|"'Content-Type'"
op|','
string|"'text/plain'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
string|"'Internal server error.\\n'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|handle_request
dedent|''
dedent|''
name|'def'
name|'handle_request'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Entry point for auth requests (ones that match the self.auth_prefix).\n        Should return a WSGI-style callable (such as swob.Response).\n\n        :param req: swob.Request object\n        """'
newline|'\n'
name|'req'
op|'.'
name|'start_time'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'handler'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|','
name|'account'
op|','
name|'user'
op|','
name|'_junk'
op|'='
name|'req'
op|'.'
name|'split_path'
op|'('
number|'1'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'version'
name|'in'
op|'('
string|"'v1'"
op|','
string|"'v1.0'"
op|','
string|"'auth'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'req'
op|'.'
name|'method'
op|'=='
string|"'GET'"
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'='
name|'self'
op|'.'
name|'handle_get_token'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'handler'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'response'
op|'='
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'response'
op|'='
name|'handler'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'req'
op|'.'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|handle_get_token
dedent|''
name|'def'
name|'handle_get_token'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handles the various `request for token and service end point(s)` calls.\n        There are various formats to support the various auth servers in the\n        past. Examples::\n\n            GET <auth-prefix>/v1/<act>/auth\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n            GET <auth-prefix>/auth\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n            GET <auth-prefix>/v1.0\n                X-Auth-User: <act>:<usr>  or  X-Storage-User: <act>:<usr>\n                X-Auth-Key: <key>         or  X-Storage-Pass: <key>\n\n        On successful authentication, the response will have X-Auth-Token and\n        X-Storage-Token set to the token to use with Swift and X-Storage-URL\n        set to the URL to the default Swift cluster to use.\n\n        :param req: The swob.Request to process.\n        :returns: swob.Response, 2xx on success with data set as explained\n                  above.\n        """'
newline|'\n'
comment|'# Validate the request info'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pathsegs'
op|'='
name|'split_path'
op|'('
name|'req'
op|'.'
name|'path_info'
op|','
number|'1'
op|','
number|'3'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'pathsegs'
op|'['
number|'0'
op|']'
op|'=='
string|"'v1'"
name|'and'
name|'pathsegs'
op|'['
number|'2'
op|']'
op|'=='
string|"'auth'"
op|':'
newline|'\n'
indent|'            '
name|'account'
op|'='
name|'pathsegs'
op|'['
number|'1'
op|']'
newline|'\n'
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
name|'or'
string|"':'"
name|'not'
name|'in'
name|'user'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
nl|'\n'
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="%s"\''
op|'%'
name|'account'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'account2'
op|','
name|'user'
op|'='
name|'user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'account'
op|'!='
name|'account2'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
nl|'\n'
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="%s"\''
op|'%'
name|'account'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-pass'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-key'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'pathsegs'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"'auth'"
op|','
string|"'v1.0'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-user'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'user'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-user'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'user'
name|'or'
string|"':'"
name|'not'
name|'in'
name|'user'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
nl|'\n'
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="unknown"\''
op|'}'
op|')'
newline|'\n'
dedent|''
name|'account'
op|','
name|'user'
op|'='
name|'user'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-auth-key'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-storage-pass'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'all'
op|'('
op|'('
name|'account'
op|','
name|'user'
op|','
name|'key'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'realm'
op|'='
name|'account'
name|'or'
string|"'unknown'"
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="%s"\''
op|'%'
nl|'\n'
name|'realm'
op|'}'
op|')'
newline|'\n'
comment|'# Authenticate user'
nl|'\n'
dedent|''
name|'account_user'
op|'='
name|'account'
op|'+'
string|"':'"
op|'+'
name|'user'
newline|'\n'
name|'if'
name|'account_user'
name|'not'
name|'in'
name|'self'
op|'.'
name|'users'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
nl|'\n'
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="%s"\''
op|'%'
name|'account'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'key'"
op|']'
op|'!='
name|'key'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'token_denied'"
op|')'
newline|'\n'
name|'return'
name|'HTTPUnauthorized'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
nl|'\n'
op|'{'
string|"'Www-Authenticate'"
op|':'
nl|'\n'
string|'\'Swift realm="unknown"\''
op|'}'
op|')'
newline|'\n'
dedent|''
name|'account_id'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
comment|'# Get memcache client'
nl|'\n'
name|'memcache_client'
op|'='
name|'cache_from_env'
op|'('
name|'req'
op|'.'
name|'environ'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'memcache_client'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Memcache required'"
op|')'
newline|'\n'
comment|"# See if a token already exists and hasn't expired"
nl|'\n'
dedent|''
name|'token'
op|'='
name|'None'
newline|'\n'
name|'memcache_user_key'
op|'='
string|"'%s/user/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account_user'
op|')'
newline|'\n'
name|'candidate_token'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_user_key'
op|')'
newline|'\n'
name|'if'
name|'candidate_token'
op|':'
newline|'\n'
indent|'            '
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'candidate_token'
op|')'
newline|'\n'
name|'cached_auth_data'
op|'='
name|'memcache_client'
op|'.'
name|'get'
op|'('
name|'memcache_token_key'
op|')'
newline|'\n'
name|'if'
name|'cached_auth_data'
op|':'
newline|'\n'
indent|'                '
name|'expires'
op|','
name|'old_groups'
op|'='
name|'cached_auth_data'
newline|'\n'
name|'old_groups'
op|'='
name|'old_groups'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'new_groups'
op|'='
name|'self'
op|'.'
name|'_get_user_groups'
op|'('
name|'account'
op|','
name|'account_user'
op|','
nl|'\n'
name|'account_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expires'
op|'>'
name|'time'
op|'('
op|')'
name|'and'
name|'set'
op|'('
name|'old_groups'
op|')'
op|'=='
name|'set'
op|'('
name|'new_groups'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'token'
op|'='
name|'candidate_token'
newline|'\n'
comment|"# Create a new token if one didn't exist"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
comment|'# Generate new token'
nl|'\n'
indent|'            '
name|'token'
op|'='
string|"'%stk%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
name|'expires'
op|'='
name|'time'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'token_life'
newline|'\n'
name|'groups'
op|'='
name|'self'
op|'.'
name|'_get_user_groups'
op|'('
name|'account'
op|','
name|'account_user'
op|','
name|'account_id'
op|')'
newline|'\n'
comment|'# Save token'
nl|'\n'
name|'memcache_token_key'
op|'='
string|"'%s/token/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'token'
op|')'
newline|'\n'
name|'memcache_client'
op|'.'
name|'set'
op|'('
name|'memcache_token_key'
op|','
op|'('
name|'expires'
op|','
name|'groups'
op|')'
op|','
nl|'\n'
name|'time'
op|'='
name|'float'
op|'('
name|'expires'
op|'-'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# Record the token with the user info for future use.'
nl|'\n'
name|'memcache_user_key'
op|'='
string|"'%s/user/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'reseller_prefix'
op|','
name|'account_user'
op|')'
newline|'\n'
name|'memcache_client'
op|'.'
name|'set'
op|'('
name|'memcache_user_key'
op|','
name|'token'
op|','
nl|'\n'
name|'time'
op|'='
name|'float'
op|'('
name|'expires'
op|'-'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'resp'
op|'='
name|'Response'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'x-auth-token'"
op|':'
name|'token'
op|','
string|"'x-storage-token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'users'
op|'['
name|'account_user'
op|']'
op|'['
string|"'url'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'$HOST'"
op|','
name|'resp'
op|'.'
name|'host_url'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'storage_url_scheme'
op|'!='
string|"'default'"
op|':'
newline|'\n'
indent|'            '
name|'url'
op|'='
name|'self'
op|'.'
name|'storage_url_scheme'
op|'+'
string|"':'"
op|'+'
name|'url'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'x-storage-url'"
op|']'
op|'='
name|'url'
newline|'\n'
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filter_factory
dedent|''
dedent|''
name|'def'
name|'filter_factory'
op|'('
name|'global_conf'
op|','
op|'**'
name|'local_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a WSGI filter app for use with paste.deploy."""'
newline|'\n'
name|'conf'
op|'='
name|'global_conf'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'update'
op|'('
name|'local_conf'
op|')'
newline|'\n'
name|'register_swift_info'
op|'('
string|"'tempauth'"
op|','
name|'account_acls'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|auth_filter
name|'def'
name|'auth_filter'
op|'('
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'TempAuth'
op|'('
name|'app'
op|','
name|'conf'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'auth_filter'
newline|'\n'
dedent|''
endmarker|''
end_unit
