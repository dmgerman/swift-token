begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'email'
op|'.'
name|'parser'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'collections'
name|'import'
name|'defaultdict'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'contextmanager'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
name|'from'
name|'six'
name|'import'
name|'BytesIO'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'range'
newline|'\n'
nl|'\n'
name|'import'
name|'swift'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
op|','
name|'swob'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'proxy'
name|'import'
name|'server'
name|'as'
name|'proxy_server'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
name|'import'
name|'obj'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'base'
name|'import'
name|'get_info'
name|'as'
name|'_real_get_info'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
name|'POLICIES'
op|','
name|'ECDriverError'
op|','
name|'StoragePolicy'
newline|'\n'
nl|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
name|'import'
name|'FakeRing'
op|','
name|'FakeMemcache'
op|','
name|'fake_http_connect'
op|','
name|'debug_logger'
op|','
name|'patch_policies'
op|','
name|'SlowBody'
op|','
name|'FakeStatus'
newline|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
op|'.'
name|'proxy'
op|'.'
name|'test_server'
name|'import'
name|'node_error_count'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unchunk_body
name|'def'
name|'unchunk_body'
op|'('
name|'chunked_body'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'body'
op|'='
string|"''"
newline|'\n'
name|'remaining'
op|'='
name|'chunked_body'
newline|'\n'
name|'while'
name|'remaining'
op|':'
newline|'\n'
indent|'        '
name|'hex_length'
op|','
name|'remaining'
op|'='
name|'remaining'
op|'.'
name|'split'
op|'('
string|"'\\r\\n'"
op|','
number|'1'
op|')'
newline|'\n'
name|'length'
op|'='
name|'int'
op|'('
name|'hex_length'
op|','
number|'16'
op|')'
newline|'\n'
name|'body'
op|'+='
name|'remaining'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
name|'remaining'
op|'='
name|'remaining'
op|'['
name|'length'
op|'+'
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'body'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|set_http_connect
name|'def'
name|'set_http_connect'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'old_connect'
op|'='
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'base'
op|'.'
name|'http_connect'
newline|'\n'
name|'new_connect'
op|'='
name|'fake_http_connect'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'base'
op|'.'
name|'http_connect'
op|'='
name|'new_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'obj'
op|'.'
name|'http_connect'
op|'='
name|'new_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'account'
op|'.'
name|'http_connect'
op|'='
name|'new_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'container'
op|'.'
name|'http_connect'
op|'='
name|'new_connect'
newline|'\n'
name|'yield'
name|'new_connect'
newline|'\n'
name|'left_over_status'
op|'='
name|'list'
op|'('
name|'new_connect'
op|'.'
name|'code_iter'
op|')'
newline|'\n'
name|'if'
name|'left_over_status'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AssertionError'
op|'('
string|"'left over status %r'"
op|'%'
name|'left_over_status'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'base'
op|'.'
name|'http_connect'
op|'='
name|'old_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'obj'
op|'.'
name|'http_connect'
op|'='
name|'old_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'account'
op|'.'
name|'http_connect'
op|'='
name|'old_connect'
newline|'\n'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
op|'.'
name|'container'
op|'.'
name|'http_connect'
op|'='
name|'old_connect'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PatchedObjControllerApp
dedent|''
dedent|''
name|'class'
name|'PatchedObjControllerApp'
op|'('
name|'proxy_server'
op|'.'
name|'Application'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This patch is just a hook over the proxy server\'s __call__ to ensure\n    that calls to get_info will return the stubbed value for\n    container_info if it\'s a container info call.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|container_info
name|'container_info'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|per_container_info
name|'per_container_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_fake_get_info
indent|'        '
name|'def'
name|'_fake_get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'container'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'container'
name|'in'
name|'self'
op|'.'
name|'per_container_info'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'per_container_info'
op|'['
name|'container'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'container_info'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'_real_get_info'
op|'('
name|'app'
op|','
name|'env'
op|','
name|'account'
op|','
name|'container'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'mock_path'
op|'='
string|"'swift.proxy.controllers.base.get_info'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'mock_path'
op|','
name|'new'
op|'='
name|'_fake_get_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
nl|'\n'
name|'PatchedObjControllerApp'
op|','
name|'self'
op|')'
op|'.'
name|'__call__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseObjectControllerMixin
dedent|''
dedent|''
dedent|''
name|'class'
name|'BaseObjectControllerMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|container_info
indent|'    '
name|'container_info'
op|'='
op|'{'
nl|'\n'
string|"'write_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'read_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'storage_policy'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# this needs to be set on the test case'
nl|'\n'
DECL|variable|controller_cls
name|'controller_cls'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup fake rings with handoffs'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'max_more_nodes'
op|'='
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'proxy-server'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'thread_locals'
op|'='
op|'('
string|"'txn1'"
op|','
string|"'127.0.0.2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'PatchedObjControllerApp'
op|'('
nl|'\n'
name|'None'
op|','
name|'FakeMemcache'
op|'('
op|')'
op|','
name|'account_ring'
op|'='
name|'FakeRing'
op|'('
op|')'
op|','
nl|'\n'
name|'container_ring'
op|'='
name|'FakeRing'
op|'('
op|')'
op|','
name|'logger'
op|'='
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
comment|'# you can over-ride the container_info just by setting it on the app'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'container_info'
op|')'
newline|'\n'
comment|'# default policy and ring references'
nl|'\n'
name|'self'
op|'.'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'obj_ring'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
newline|'\n'
name|'self'
op|'.'
name|'_ts_iter'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
nl|'\n'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ts
dedent|''
name|'def'
name|'ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'next'
op|'('
name|'self'
op|'.'
name|'_ts_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|replicas
dedent|''
name|'def'
name|'replicas'
op|'('
name|'self'
op|','
name|'policy'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'return'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'replicas'
newline|'\n'
nl|'\n'
DECL|member|quorum
dedent|''
name|'def'
name|'quorum'
op|'('
name|'self'
op|','
name|'policy'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'return'
name|'policy'
op|'.'
name|'quorum'
newline|'\n'
nl|'\n'
DECL|member|test_iter_nodes_local_first_noops_when_no_affinity
dedent|''
name|'def'
name|'test_iter_nodes_local_first_noops_when_no_affinity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# this test needs a stable node order - most don't"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'sort_nodes'
op|'='
name|'lambda'
name|'l'
op|':'
name|'l'
newline|'\n'
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_is_local_fn'
op|'='
name|'None'
newline|'\n'
name|'object_ring'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'get_object_ring'
op|'('
name|'None'
op|')'
newline|'\n'
name|'all_nodes'
op|'='
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'1'
op|')'
newline|'\n'
name|'all_nodes'
op|'.'
name|'extend'
op|'('
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'local_first_nodes'
op|'='
name|'list'
op|'('
name|'controller'
op|'.'
name|'iter_nodes_local_first'
op|'('
nl|'\n'
name|'object_ring'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'maxDiff'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'all_nodes'
op|','
name|'local_first_nodes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_iter_nodes_local_first_moves_locals_first
dedent|''
name|'def'
name|'test_iter_nodes_local_first_moves_locals_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_is_local_fn'
op|'='
op|'('
nl|'\n'
name|'lambda'
name|'node'
op|':'
name|'node'
op|'['
string|"'region'"
op|']'
op|'=='
number|'1'
op|')'
newline|'\n'
comment|"# we'll write to one more than replica count local nodes"
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_node_count'
op|'='
name|'lambda'
name|'r'
op|':'
name|'r'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
name|'object_ring'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'get_object_ring'
op|'('
name|'None'
op|')'
newline|'\n'
comment|'# make our fake ring have plenty of nodes, and not get limited'
nl|'\n'
comment|'# artificially by the proxy max request node count'
nl|'\n'
name|'object_ring'
op|'.'
name|'max_more_nodes'
op|'='
number|'100000'
newline|'\n'
comment|'# nothing magic about * 2 + 3, just a way to make it bigger'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'request_node_count'
op|'='
name|'lambda'
name|'r'
op|':'
name|'r'
op|'*'
number|'2'
op|'+'
number|'3'
newline|'\n'
nl|'\n'
name|'all_nodes'
op|'='
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'1'
op|')'
newline|'\n'
name|'all_nodes'
op|'.'
name|'extend'
op|'('
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# limit to the number we're going to look at in this request"
nl|'\n'
name|'nodes_requested'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'request_node_count'
op|'('
name|'object_ring'
op|'.'
name|'replicas'
op|')'
newline|'\n'
name|'all_nodes'
op|'='
name|'all_nodes'
op|'['
op|':'
name|'nodes_requested'
op|']'
newline|'\n'
nl|'\n'
comment|'# make sure we have enough local nodes (sanity)'
nl|'\n'
name|'all_local_nodes'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'all_nodes'
name|'if'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_is_local_fn'
op|'('
name|'n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'all_local_nodes'
op|')'
op|'>='
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# finally, create the local_first_nodes iter and flatten it out'
nl|'\n'
name|'local_first_nodes'
op|'='
name|'list'
op|'('
name|'controller'
op|'.'
name|'iter_nodes_local_first'
op|'('
nl|'\n'
name|'object_ring'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# the local nodes move up in the ordering'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'+'
number|'1'
op|')'
op|','
op|'['
nl|'\n'
name|'node'
op|'['
string|"'region'"
op|']'
name|'for'
name|'node'
name|'in'
name|'local_first_nodes'
op|'['
nl|'\n'
op|':'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'+'
number|'1'
op|']'
op|']'
op|')'
newline|'\n'
comment|"# we don't skip any nodes"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'all_nodes'
op|')'
op|','
name|'len'
op|'('
name|'local_first_nodes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'all_nodes'
op|')'
op|','
name|'sorted'
op|'('
name|'local_first_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_iter_nodes_local_first_best_effort
dedent|''
name|'def'
name|'test_iter_nodes_local_first_best_effort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_is_local_fn'
op|'='
op|'('
nl|'\n'
name|'lambda'
name|'node'
op|':'
name|'node'
op|'['
string|"'region'"
op|']'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'object_ring'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'get_object_ring'
op|'('
name|'None'
op|')'
newline|'\n'
name|'all_nodes'
op|'='
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
number|'1'
op|')'
newline|'\n'
name|'all_nodes'
op|'.'
name|'extend'
op|'('
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'local_first_nodes'
op|'='
name|'list'
op|'('
name|'controller'
op|'.'
name|'iter_nodes_local_first'
op|'('
nl|'\n'
name|'object_ring'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# we won't have quite enough local nodes..."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'all_nodes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'+'
nl|'\n'
name|'POLICIES'
op|'.'
name|'default'
op|'.'
name|'object_ring'
op|'.'
name|'max_more_nodes'
op|')'
newline|'\n'
name|'all_local_nodes'
op|'='
op|'['
name|'n'
name|'for'
name|'n'
name|'in'
name|'all_nodes'
name|'if'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'write_affinity_is_local_fn'
op|'('
name|'n'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'all_local_nodes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# but the local nodes we do have are at the front of the local iter'
nl|'\n'
name|'first_n_local_first_nodes'
op|'='
name|'local_first_nodes'
op|'['
op|':'
name|'len'
op|'('
name|'all_local_nodes'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'all_local_nodes'
op|')'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'first_n_local_first_nodes'
op|')'
op|')'
newline|'\n'
comment|"# but we *still* don't *skip* any nodes"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'all_nodes'
op|')'
op|','
name|'len'
op|'('
name|'local_first_nodes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'all_nodes'
op|')'
op|','
name|'sorted'
op|'('
name|'local_first_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connect_put_node_timeout
dedent|''
name|'def'
name|'test_connect_put_node_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'conn_timeout'
op|'='
number|'0.05'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
name|'slow_connect'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'='
op|'['
name|'dict'
op|'('
name|'ip'
op|'='
string|"''"
op|','
name|'port'
op|'='
string|"''"
op|','
name|'device'
op|'='
string|"''"
op|')'
op|']'
newline|'\n'
name|'res'
op|'='
name|'controller'
op|'.'
name|'_connect_put_node'
op|'('
name|'nodes'
op|','
string|"''"
op|','
string|"''"
op|','
op|'{'
op|'}'
op|','
op|'('
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
name|'is'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_simple
dedent|''
name|'def'
name|'test_DELETE_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'204'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_missing_one
dedent|''
name|'def'
name|'test_DELETE_missing_one'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Obviously this test doesn't work if we're testing 1 replica."
nl|'\n'
comment|"# In that case, we don't have any failovers to check."
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'404'
op|']'
op|'+'
op|'['
number|'204'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_not_found
dedent|''
name|'def'
name|'test_DELETE_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Obviously this test doesn't work if we're testing 1 replica."
nl|'\n'
comment|"# In that case, we don't have any failovers to check."
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'404'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|'+'
op|'['
number|'204'
op|']'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'404'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_mostly_found
dedent|''
name|'def'
name|'test_DELETE_mostly_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'mostly_204s'
op|'='
op|'['
number|'204'
op|']'
op|'*'
name|'self'
op|'.'
name|'quorum'
op|'('
op|')'
newline|'\n'
name|'codes'
op|'='
name|'mostly_204s'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
name|'len'
op|'('
name|'mostly_204s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'codes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_mostly_not_found
dedent|''
name|'def'
name|'test_DELETE_mostly_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'mostly_404s'
op|'='
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'quorum'
op|'('
op|')'
newline|'\n'
name|'codes'
op|'='
name|'mostly_404s'
op|'+'
op|'['
number|'204'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
name|'len'
op|'('
name|'mostly_404s'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'codes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'404'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_half_not_found_statuses
dedent|''
name|'def'
name|'test_DELETE_half_not_found_statuses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'set_replicas'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'404'
op|','
number|'204'
op|','
number|'404'
op|','
number|'204'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_half_not_found_headers_and_body
dedent|''
name|'def'
name|'test_DELETE_half_not_found_headers_and_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Transformed responses have bogus bodies and headers, so make sure we'
nl|'\n'
comment|"# send the client headers and body from a real node's response."
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'set_replicas'
op|'('
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'status_codes'
op|'='
op|'('
number|'404'
op|','
number|'404'
op|','
number|'204'
op|','
number|'204'
op|')'
newline|'\n'
name|'bodies'
op|'='
op|'('
string|"'not found'"
op|','
string|"'not found'"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'headers'
op|'='
op|'['
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
string|"'Pick-Me'"
op|':'
string|"'yes'"
op|'}'
op|','
op|'{'
string|"'Pick-Me'"
op|':'
string|"'yes'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'bodies'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Pick-Me'"
op|')'
op|','
string|"'yes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'body'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_DELETE_handoff
dedent|''
name|'def'
name|'test_DELETE_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'204'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'507'
op|','
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'204'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_non_int_delete_after
dedent|''
name|'def'
name|'test_POST_non_int_delete_after'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'100'
op|')'
op|')'
op|'+'
string|"'.1'"
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-After'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Non-integer X-Delete-After'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_non_int_delete_after
dedent|''
name|'def'
name|'test_PUT_non_int_delete_after'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'100'
op|')'
op|')'
op|'+'
string|"'.1'"
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-After'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Non-integer X-Delete-After'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_negative_delete_after
dedent|''
name|'def'
name|'test_POST_negative_delete_after'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-After'"
op|':'
string|"'-60'"
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'X-Delete-After in past'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_negative_delete_after
dedent|''
name|'def'
name|'test_PUT_negative_delete_after'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-After'"
op|':'
string|"'-60'"
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'X-Delete-After in past'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_delete_at_non_integer
dedent|''
name|'def'
name|'test_POST_delete_at_non_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'100'
op|')'
op|')'
op|'+'
string|"'.1'"
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Non-integer X-Delete-At'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_delete_at_non_integer
dedent|''
name|'def'
name|'test_PUT_delete_at_non_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
number|'100'
op|')'
op|')'
op|'+'
string|"'.1'"
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Non-integer X-Delete-At'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_delete_at_in_past
dedent|''
name|'def'
name|'test_POST_delete_at_in_past'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
number|'100'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'X-Delete-At in past'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_delete_at_in_past
dedent|''
name|'def'
name|'test_PUT_delete_at_in_past'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
number|'100'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'X-Delete-At in past'"
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_HEAD_simple
dedent|''
name|'def'
name|'test_HEAD_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'200'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_HEAD_x_newest
dedent|''
name|'def'
name|'test_HEAD_x_newest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Newest'"
op|':'
string|"'true'"
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
op|'('
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_HEAD_x_newest_different_timestamps
dedent|''
name|'def'
name|'test_HEAD_x_newest_different_timestamps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Newest'"
op|':'
string|"'true'"
op|'}'
op|')'
newline|'\n'
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'timestamps'
op|'='
op|'['
name|'next'
op|'('
name|'ts'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'newest_timestamp'
op|'='
name|'timestamps'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'timestamps'
op|')'
newline|'\n'
name|'backend_response_headers'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'t'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'t'
op|'.'
name|'normal'
nl|'\n'
op|'}'
name|'for'
name|'t'
name|'in'
name|'timestamps'
op|']'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
op|'('
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'headers'
op|'='
name|'backend_response_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'x-timestamp'"
op|']'
op|','
name|'newest_timestamp'
op|'.'
name|'normal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_HEAD_x_newest_with_two_vector_timestamps
dedent|''
name|'def'
name|'test_HEAD_x_newest_with_two_vector_timestamps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Newest'"
op|':'
string|"'true'"
op|'}'
op|')'
newline|'\n'
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
name|'offset'
op|'='
name|'offset'
op|')'
nl|'\n'
name|'for'
name|'offset'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
op|')'
op|')'
newline|'\n'
name|'timestamps'
op|'='
op|'['
name|'next'
op|'('
name|'ts'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'newest_timestamp'
op|'='
name|'timestamps'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'timestamps'
op|')'
newline|'\n'
name|'backend_response_headers'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'X-Backend-Timestamp'"
op|':'
name|'t'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'t'
op|'.'
name|'normal'
nl|'\n'
op|'}'
name|'for'
name|'t'
name|'in'
name|'timestamps'
op|']'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
op|'('
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'headers'
op|'='
name|'backend_response_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'x-backend-timestamp'"
op|']'
op|','
nl|'\n'
name|'newest_timestamp'
op|'.'
name|'internal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_HEAD_x_newest_with_some_missing
dedent|''
name|'def'
name|'test_HEAD_x_newest_with_some_missing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Newest'"
op|':'
string|"'true'"
op|'}'
op|')'
newline|'\n'
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'request_count'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'request_node_count'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|')'
newline|'\n'
name|'backend_response_headers'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'x-timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'normal'
op|','
nl|'\n'
op|'}'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'request_count'
op|')'
op|']'
newline|'\n'
name|'responses'
op|'='
op|'['
number|'404'
op|']'
op|'*'
op|'('
name|'request_count'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'append'
op|'('
number|'200'
op|')'
newline|'\n'
name|'request_log'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|capture_requests
name|'def'
name|'capture_requests'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'device'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
nl|'\n'
name|'headers'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'part'"
op|':'
name|'part'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'path'
op|','
nl|'\n'
string|"'headers'"
op|':'
name|'headers'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'request_log'
op|'.'
name|'append'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'responses'
op|','
nl|'\n'
name|'headers'
op|'='
name|'backend_response_headers'
op|','
nl|'\n'
name|'give_connect'
op|'='
name|'capture_requests'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'for'
name|'req'
name|'in'
name|'request_log'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'['
string|"'method'"
op|']'
op|','
string|"'HEAD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'['
string|"'path'"
op|']'
op|','
string|"'/a/c/o'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_delete
dedent|''
dedent|''
name|'def'
name|'test_container_sync_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'ts_iter'
op|'='
name|'itertools'
op|'.'
name|'repeat'
op|'('
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'409'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_requires_length
dedent|''
dedent|''
name|'def'
name|'test_PUT_requires_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'411'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_update_backend_requests
dedent|''
name|'def'
name|'test_container_update_backend_requests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'X-Backend-Storage-Policy-Index'"
op|':'
name|'int'
op|'('
name|'policy'
op|')'
op|'}'
op|')'
newline|'\n'
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
comment|"# This is the number of container updates we're doing, simulating"
nl|'\n'
comment|'# 1 to 15 container replicas.'
nl|'\n'
name|'for'
name|'num_containers'
name|'in'
name|'range'
op|'('
number|'1'
op|','
number|'16'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'containers'
op|'='
op|'['
op|'{'
string|"'ip'"
op|':'
string|"'1.0.0.%s'"
op|'%'
name|'i'
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'60%s'"
op|'%'
name|'str'
op|'('
name|'i'
op|')'
op|'.'
name|'zfill'
op|'('
number|'2'
op|')'
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sdb'"
op|'}'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_containers'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'backend_headers'
op|'='
name|'controller'
op|'.'
name|'_backend_requests'
op|'('
nl|'\n'
name|'req'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
name|'policy'
op|')'
op|','
number|'1'
op|','
name|'containers'
op|')'
newline|'\n'
nl|'\n'
comment|'# how many of the backend headers have a container update'
nl|'\n'
name|'container_updates'
op|'='
name|'len'
op|'('
nl|'\n'
op|'['
name|'headers'
name|'for'
name|'headers'
name|'in'
name|'backend_headers'
nl|'\n'
name|'if'
string|"'X-Container-Partition'"
name|'in'
name|'headers'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_containers'
op|'<='
name|'self'
op|'.'
name|'quorum'
op|'('
name|'policy'
op|')'
op|':'
newline|'\n'
comment|'# filling case'
nl|'\n'
indent|'                    '
name|'expected'
op|'='
name|'min'
op|'('
name|'self'
op|'.'
name|'quorum'
op|'('
name|'policy'
op|')'
op|'+'
number|'1'
op|','
nl|'\n'
name|'self'
op|'.'
name|'replicas'
op|'('
name|'policy'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# container updates >= object replicas'
nl|'\n'
indent|'                    '
name|'expected'
op|'='
name|'min'
op|'('
name|'num_containers'
op|','
nl|'\n'
name|'self'
op|'.'
name|'replicas'
op|'('
name|'policy'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'container_updates'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# end of BaseObjectControllerMixin'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
op|')'
newline|'\n'
name|'class'
name|'TestReplicatedObjController'
op|'('
name|'BaseObjectControllerMixin'
op|','
nl|'\n'
DECL|class|TestReplicatedObjController
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|controller_cls
indent|'    '
name|'controller_cls'
op|'='
name|'obj'
op|'.'
name|'ReplicatedObjectController'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_simple
name|'def'
name|'test_PUT_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'content-length'"
op|']'
op|'='
string|"'0'"
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'201'
op|','
number|'201'
op|','
number|'201'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_if_none_match
dedent|''
name|'def'
name|'test_PUT_if_none_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'if-none-match'"
op|']'
op|'='
string|"'*'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'content-length'"
op|']'
op|'='
string|"'0'"
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'201'
op|','
number|'201'
op|','
number|'201'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_if_none_match_denied
dedent|''
name|'def'
name|'test_PUT_if_none_match_denied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'if-none-match'"
op|']'
op|'='
string|"'*'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'content-length'"
op|']'
op|'='
string|"'0'"
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'201'
op|','
number|'412'
op|','
number|'201'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'412'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_if_none_match_not_star
dedent|''
name|'def'
name|'test_PUT_if_none_match_not_star'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'if-none-match'"
op|']'
op|'='
string|"'somethingelse'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'content-length'"
op|']'
op|'='
string|"'0'"
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'400'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_connect_exceptions
dedent|''
name|'def'
name|'test_PUT_connect_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'object_ring'
op|'='
name|'self'
op|'.'
name|'app'
op|'.'
name|'get_object_ring'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'sort_nodes'
op|'='
name|'lambda'
name|'n'
op|':'
name|'n'
comment|'# disable shuffle'
newline|'\n'
nl|'\n'
DECL|function|test_status_map
name|'def'
name|'test_status_map'
op|'('
name|'statuses'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'_error_limiting'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o.jpg'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"'test body'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'statuses'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'base_status'
op|'='
op|'['
number|'201'
op|']'
op|'*'
number|'3'
newline|'\n'
comment|'# test happy path'
nl|'\n'
name|'test_status_map'
op|'('
name|'list'
op|'('
name|'base_status'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_error_count'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
name|'i'
op|']'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# single node errors and test isolation'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'status_list'
op|'='
name|'list'
op|'('
name|'base_status'
op|')'
newline|'\n'
name|'status_list'
op|'['
name|'i'
op|']'
op|'='
number|'503'
newline|'\n'
name|'test_status_map'
op|'('
name|'status_list'
op|','
number|'201'
op|')'
newline|'\n'
name|'for'
name|'j'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_error_count'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
name|'j'
op|']'
op|')'
op|','
number|'1'
name|'if'
name|'j'
op|'=='
name|'i'
name|'else'
number|'0'
op|')'
newline|'\n'
comment|'# connect errors'
nl|'\n'
dedent|''
dedent|''
name|'test_status_map'
op|'('
op|'('
number|'201'
op|','
name|'Timeout'
op|'('
op|')'
op|','
number|'201'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_error_count'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'1'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'test_status_map'
op|'('
op|'('
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|','
number|'201'
op|','
number|'201'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_error_count'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'0'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# expect errors'
nl|'\n'
name|'test_status_map'
op|'('
op|'('
number|'201'
op|','
number|'201'
op|','
op|'('
number|'503'
op|','
name|'None'
op|')'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_error_count'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'2'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'test_status_map'
op|'('
op|'('
op|'('
number|'507'
op|','
name|'None'
op|')'
op|','
number|'201'
op|','
number|'201'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'node_error_count'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
op|'+'
number|'1'
op|')'
newline|'\n'
comment|'# response errors'
nl|'\n'
name|'test_status_map'
op|'('
op|'('
op|'('
number|'100'
op|','
name|'Timeout'
op|'('
op|')'
op|')'
op|','
number|'201'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'node_error_count'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'0'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'test_status_map'
op|'('
op|'('
number|'201'
op|','
number|'201'
op|','
op|'('
number|'100'
op|','
name|'Exception'
op|'('
op|')'
op|')'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'node_error_count'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'2'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'test_status_map'
op|'('
op|'('
number|'201'
op|','
op|'('
number|'100'
op|','
number|'507'
op|')'
op|','
number|'201'
op|')'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'node_error_count'
op|'('
name|'self'
op|'.'
name|'app'
op|','
name|'object_ring'
op|'.'
name|'devs'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'error_suppression_limit'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_simple
dedent|''
name|'def'
name|'test_GET_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'200'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_error
dedent|''
name|'def'
name|'test_GET_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
number|'503'
op|','
number|'200'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_handoff
dedent|''
name|'def'
name|'test_GET_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'503'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'200'
op|']'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_not_found
dedent|''
name|'def'
name|'test_GET_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'404'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
nl|'\n'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'404'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_as_COPY_simple
dedent|''
name|'def'
name|'test_POST_as_COPY_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|')'
newline|'\n'
name|'get_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
name|'put_resp'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
name|'get_resp'
op|'+'
name|'put_resp'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'QUERY_STRING'"
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'swift.post_as_copy'"
name|'in'
name|'req'
op|'.'
name|'environ'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_as_COPY_static_large_object
dedent|''
name|'def'
name|'test_POST_as_COPY_static_large_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|')'
newline|'\n'
name|'get_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
name|'put_resp'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
name|'get_resp'
op|'+'
name|'put_resp'
newline|'\n'
name|'slo_headers'
op|'='
op|'['
op|'{'
string|"'X-Static-Large-Object'"
op|':'
name|'True'
op|'}'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'get_headers'
op|'='
name|'slo_headers'
op|'+'
op|'['
op|'{'
op|'}'
op|']'
op|'*'
op|'('
name|'len'
op|'('
name|'codes'
op|')'
op|'-'
name|'len'
op|'('
name|'slo_headers'
op|')'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'headers'"
op|':'
name|'get_headers'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
op|'**'
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'QUERY_STRING'"
op|']'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'swift.post_as_copy'"
name|'in'
name|'req'
op|'.'
name|'environ'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_POST_delete_at
dedent|''
name|'def'
name|'test_POST_delete_at'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'100'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'POST'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'post_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|capture_headers
name|'def'
name|'capture_headers'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'device'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'method'
op|'=='
string|"'POST'"
op|':'
newline|'\n'
indent|'                '
name|'post_headers'
op|'.'
name|'append'
op|'('
name|'headers'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'x_newest_responses'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
name|'post_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
name|'x_newest_responses'
op|'+'
name|'post_resp'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'give_connect'
op|'='
name|'capture_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'QUERY_STRING'"
op|']'
op|','
string|"''"
op|')'
comment|'# sanity'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'swift.post_as_copy'"
name|'in'
name|'req'
op|'.'
name|'environ'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'given_headers'
name|'in'
name|'post_headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'given_headers'
op|'.'
name|'get'
op|'('
string|"'X-Delete-At'"
op|')'
op|','
name|'t'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Host'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Device'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Partition'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Container'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_delete_at
dedent|''
dedent|''
name|'def'
name|'test_PUT_delete_at'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
number|'100'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-At'"
op|':'
name|'t'
op|'}'
op|')'
newline|'\n'
name|'put_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|capture_headers
name|'def'
name|'capture_headers'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'device'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'method'
op|'=='
string|"'PUT'"
op|':'
newline|'\n'
indent|'                '
name|'put_headers'
op|'.'
name|'append'
op|'('
name|'headers'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'give_connect'
op|'='
name|'capture_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
name|'for'
name|'given_headers'
name|'in'
name|'put_headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'given_headers'
op|'.'
name|'get'
op|'('
string|"'X-Delete-At'"
op|')'
op|','
name|'t'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Host'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Device'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Partition'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Container'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_converts_delete_after_to_delete_at
dedent|''
dedent|''
name|'def'
name|'test_PUT_converts_delete_after_to_delete_at'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'body'
op|'='
string|"''"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'foo/bar'"
op|','
nl|'\n'
string|"'X-Delete-After'"
op|':'
string|"'60'"
op|'}'
op|')'
newline|'\n'
name|'put_headers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|capture_headers
name|'def'
name|'capture_headers'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'device'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'method'
op|'=='
string|"'PUT'"
op|':'
newline|'\n'
indent|'                '
name|'put_headers'
op|'.'
name|'append'
op|'('
name|'headers'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'t'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'give_connect'
op|'='
name|'capture_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'time.time'"
op|','
name|'lambda'
op|':'
name|'t'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
name|'expected_delete_at'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'t'
op|')'
op|'+'
number|'60'
op|')'
newline|'\n'
name|'for'
name|'given_headers'
name|'in'
name|'put_headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'given_headers'
op|'.'
name|'get'
op|'('
string|"'X-Delete-At'"
op|')'
op|','
nl|'\n'
name|'expected_delete_at'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Host'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Device'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Partition'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Delete-At-Container'"
name|'in'
name|'given_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_not_found
dedent|''
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'['
string|"'storage_policy'"
op|']'
op|'='
name|'policy_index'
newline|'\n'
name|'put_timestamp'
op|'='
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'normal'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'put_timestamp'
op|'}'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_match
dedent|''
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'['
string|"'storage_policy'"
op|']'
op|'='
name|'policy_index'
newline|'\n'
name|'put_timestamp'
op|'='
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'normal'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'put_timestamp'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'itertools'
op|'.'
name|'repeat'
op|'('
name|'put_timestamp'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_older
dedent|''
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_older'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'['
string|"'storage_policy'"
op|']'
op|'='
name|'policy_index'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'itertools'
op|'.'
name|'repeat'
op|'('
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_newer
dedent|''
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_newer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'orig_timestamp'
op|'='
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'itertools'
op|'.'
name|'repeat'
op|'('
name|'orig_timestamp'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_put_x_timestamp_conflict
dedent|''
dedent|''
name|'def'
name|'test_put_x_timestamp_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
op|'['
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|','
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'+'
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_put_x_timestamp_conflict_with_missing_backend_timestamp
dedent|''
name|'def'
name|'test_put_x_timestamp_conflict_with_missing_backend_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'next'
op|'('
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
op|'['
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_put_x_timestamp_conflict_with_other_weird_success_response
dedent|''
name|'def'
name|'test_put_x_timestamp_conflict_with_other_weird_success_response'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'next'
op|'('
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
op|'['
name|'ts'
op|'.'
name|'next'
op|'('
op|')'
op|'.'
name|'internal'
op|','
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'+'
op|'['
op|'('
number|'201'
op|','
string|"'notused'"
op|')'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_put_x_timestamp_conflict_with_if_none_match
dedent|''
name|'def'
name|'test_put_x_timestamp_conflict_with_if_none_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'If-None-Match'"
op|':'
string|"'*'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'next'
op|'('
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
op|'['
name|'ts'
op|'.'
name|'next'
op|'('
op|')'
op|'.'
name|'internal'
op|','
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'+'
op|'['
op|'('
number|'412'
op|','
string|"'notused'"
op|')'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'412'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_race
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_race'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'put_timestamp'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# object nodes they respond 409 because another in-flight request'
nl|'\n'
comment|'# finished and now the on disk timestamp is equal to the request.'
nl|'\n'
name|'put_ts'
op|'='
op|'['
name|'put_timestamp'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'409'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
nl|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
name|'put_ts'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_container_sync_put_x_timestamp_unsynced_race
dedent|''
dedent|''
name|'def'
name|'test_container_sync_put_x_timestamp_unsynced_race'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
op|'('
name|'utils'
op|'.'
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'test_indexes'
op|'='
op|'['
name|'None'
op|']'
op|'+'
op|'['
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'POLICIES'
op|']'
newline|'\n'
name|'for'
name|'policy_index'
name|'in'
name|'test_indexes'
op|':'
newline|'\n'
indent|'            '
name|'put_timestamp'
op|'='
name|'next'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'put_timestamp'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# only one in-flight request finished'
nl|'\n'
name|'put_ts'
op|'='
op|'['
name|'None'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'put_resp'
op|'='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'put_ts'
op|'+='
op|'['
name|'put_timestamp'
op|']'
newline|'\n'
name|'put_resp'
op|'+='
op|'['
number|'409'
op|']'
newline|'\n'
nl|'\n'
name|'ts_iter'
op|'='
name|'iter'
op|'('
name|'put_ts'
op|')'
newline|'\n'
name|'codes'
op|'='
name|'put_resp'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'timestamps'
op|'='
name|'ts_iter'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_simple
dedent|''
dedent|''
name|'def'
name|'test_COPY_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'COPY'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'Destination'"
op|':'
string|"'c/o-copy'"
op|'}'
op|')'
newline|'\n'
name|'head_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
name|'put_resp'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
name|'head_resp'
op|'+'
name|'put_resp'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_log_info
dedent|''
name|'def'
name|'test_PUT_log_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-copy-from'"
op|']'
op|'='
string|"'some/where'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|'='
number|'0'
newline|'\n'
comment|'# override FakeConn default resp headers to keep log_info clean'
nl|'\n'
name|'resp_headers'
op|'='
op|'{'
string|"'x-delete-at'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'head_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
op|'+'
op|'['
number|'404'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
name|'put_resp'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'codes'
op|'='
name|'head_resp'
op|'+'
name|'put_resp'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'headers'
op|'='
name|'resp_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift.log_info'"
op|')'
op|','
op|'['
string|"'x-copy-from:some/where'"
op|']'
op|')'
newline|'\n'
comment|"# and then check that we don't do that for originating POSTs"
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'req'
op|'.'
name|'method'
op|'='
string|"'POST'"
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-copy-from'"
op|']'
op|'='
string|"'else/where'"
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'headers'
op|'='
name|'resp_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'202'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'swift.log_info'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
nl|'\n'
op|'['
name|'StoragePolicy'
op|'('
number|'0'
op|','
string|"'1-replica'"
op|','
name|'True'
op|')'
op|','
nl|'\n'
name|'StoragePolicy'
op|'('
number|'1'
op|','
string|"'5-replica'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'StoragePolicy'
op|'('
number|'2'
op|','
string|"'8-replica'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'StoragePolicy'
op|'('
number|'3'
op|','
string|"'15-replica'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
DECL|variable|fake_ring_args
name|'fake_ring_args'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'replicas'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'replicas'"
op|':'
number|'5'
op|'}'
op|','
op|'{'
string|"'replicas'"
op|':'
number|'8'
op|'}'
op|','
op|'{'
string|"'replicas'"
op|':'
number|'15'
op|'}'
op|']'
op|')'
newline|'\n'
name|'class'
name|'TestReplicatedObjControllerVariousReplicas'
op|'('
name|'BaseObjectControllerMixin'
op|','
nl|'\n'
DECL|class|TestReplicatedObjControllerVariousReplicas
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|controller_cls
indent|'    '
name|'controller_cls'
op|'='
name|'obj'
op|'.'
name|'ReplicatedObjectController'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'legacy_only'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestObjControllerLegacyCache
name|'class'
name|'TestObjControllerLegacyCache'
op|'('
name|'TestReplicatedObjController'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This test pretends like memcache returned a stored value that should\n    resemble whatever "old" format.  It catches KeyErrors you\'d get if your\n    code was expecting some new format during a rolling upgrade.\n    """'
newline|'\n'
nl|'\n'
comment|'# in this case policy_index is missing'
nl|'\n'
DECL|variable|container_info
name|'container_info'
op|'='
op|'{'
nl|'\n'
string|"'read_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'write_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_storage_policy_cache
name|'def'
name|'test_invalid_storage_policy_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'['
string|"'storage_policy'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'method'
name|'in'
op|'('
string|"'GET'"
op|','
string|"'HEAD'"
op|','
string|"'POST'"
op|','
string|"'PUT'"
op|','
string|"'COPY'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
name|'method'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubResponse
dedent|''
dedent|''
dedent|''
name|'class'
name|'StubResponse'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'body'
op|'='
string|"''"
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
name|'self'
op|'.'
name|'readable'
op|'='
name|'BytesIO'
op|'('
name|'body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'swob'
op|'.'
name|'HeaderKeyDict'
op|'('
name|'headers'
op|')'
newline|'\n'
name|'fake_reason'
op|'='
op|'('
string|"'Fake'"
op|','
string|"'This response is a lie.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'swob'
op|'.'
name|'RESPONSE_REASONS'
op|'.'
name|'get'
op|'('
name|'status'
op|','
name|'fake_reason'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|getheader
dedent|''
name|'def'
name|'getheader'
op|'('
name|'self'
op|','
name|'header_name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
name|'header_name'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getheaders
dedent|''
name|'def'
name|'getheaders'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'Content-Length'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'body'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'amt'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'readable'
op|'.'
name|'read'
op|'('
name|'amt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|capture_http_requests
name|'def'
name|'capture_http_requests'
op|'('
name|'get_response'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|FakeConn
indent|'    '
name|'class'
name|'FakeConn'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'req'
op|'='
name|'req'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getresponse
dedent|''
name|'def'
name|'getresponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resp'
op|'='
name|'get_response'
op|'('
name|'self'
op|'.'
name|'req'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'resp'
newline|'\n'
nl|'\n'
DECL|class|ConnectionLog
dedent|''
dedent|''
name|'class'
name|'ConnectionLog'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connections'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'connections'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'connections'
op|'['
name|'i'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'connections'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'ip'
op|','
name|'port'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
name|'qs'
op|','
name|'ssl'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'='
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'path'
op|','
nl|'\n'
string|"'headers'"
op|':'
name|'headers'
op|','
nl|'\n'
string|"'qs'"
op|':'
name|'qs'
op|','
nl|'\n'
string|"'ssl'"
op|':'
name|'ssl'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'conn'
op|'='
name|'FakeConn'
op|'('
name|'req'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connections'
op|'.'
name|'append'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fake_conn'
op|'='
name|'ConnectionLog'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.common.bufferedhttp.http_connect_raw'"
op|','
nl|'\n'
name|'new'
op|'='
name|'fake_conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'fake_conn'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestECObjController
name|'class'
name|'TestECObjController'
op|'('
name|'BaseObjectControllerMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|container_info
indent|'    '
name|'container_info'
op|'='
op|'{'
nl|'\n'
string|"'read_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'write_acl'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'sync_key'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'versions'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'storage_policy'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|controller_cls
name|'controller_cls'
op|'='
name|'obj'
op|'.'
name|'ECObjectController'
newline|'\n'
nl|'\n'
DECL|member|test_determine_chunk_destinations
name|'def'
name|'test_determine_chunk_destinations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|FakePutter
indent|'        '
name|'class'
name|'FakePutter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'node_index'
op|'='
name|'index'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'controller'
op|'='
name|'self'
op|'.'
name|'controller_cls'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a dummy list of putters, check no handoffs'
nl|'\n'
name|'putters'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'putters'
op|'.'
name|'append'
op|'('
name|'FakePutter'
op|'('
name|'index'
op|')'
op|')'
newline|'\n'
dedent|''
name|'got'
op|'='
name|'controller'
op|'.'
name|'_determine_chunk_destinations'
op|'('
name|'putters'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
op|','
name|'p'
name|'in'
name|'enumerate'
op|'('
name|'putters'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
name|'p'
op|']'
op|'='
name|'i'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# now lets make a handoff at the end'
nl|'\n'
name|'putters'
op|'['
number|'3'
op|']'
op|'.'
name|'node_index'
op|'='
name|'None'
newline|'\n'
name|'got'
op|'='
name|'controller'
op|'.'
name|'_determine_chunk_destinations'
op|'('
name|'putters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got'
op|','
name|'expected'
op|')'
newline|'\n'
name|'putters'
op|'['
number|'3'
op|']'
op|'.'
name|'node_index'
op|'='
number|'3'
newline|'\n'
nl|'\n'
comment|'# now lets make a handoff at the start'
nl|'\n'
name|'putters'
op|'['
number|'0'
op|']'
op|'.'
name|'node_index'
op|'='
name|'None'
newline|'\n'
name|'got'
op|'='
name|'controller'
op|'.'
name|'_determine_chunk_destinations'
op|'('
name|'putters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got'
op|','
name|'expected'
op|')'
newline|'\n'
name|'putters'
op|'['
number|'0'
op|']'
op|'.'
name|'node_index'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# now lets make a handoff in the middle'
nl|'\n'
name|'putters'
op|'['
number|'2'
op|']'
op|'.'
name|'node_index'
op|'='
name|'None'
newline|'\n'
name|'got'
op|'='
name|'controller'
op|'.'
name|'_determine_chunk_destinations'
op|'('
name|'putters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got'
op|','
name|'expected'
op|')'
newline|'\n'
name|'putters'
op|'['
number|'2'
op|']'
op|'.'
name|'node_index'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# now lets make all of them handoffs'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'putters'
op|'['
name|'index'
op|']'
op|'.'
name|'node_index'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'got'
op|'='
name|'controller'
op|'.'
name|'_determine_chunk_destinations'
op|'('
name|'putters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_simple
dedent|''
name|'def'
name|'test_GET_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'get_resp'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'get_resp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_simple_x_newest
dedent|''
name|'def'
name|'test_GET_simple_x_newest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Newest'"
op|':'
string|"'true'"
op|'}'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_error
dedent|''
name|'def'
name|'test_GET_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'get_resp'
op|'='
op|'['
number|'503'
op|']'
op|'+'
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'get_resp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_body
dedent|''
name|'def'
name|'test_GET_with_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
comment|'# turn a real body into fragments'
nl|'\n'
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'real_body'
op|'='
op|'('
string|"'asdf'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'10'
op|']'
newline|'\n'
comment|'# split it up into chunks'
nl|'\n'
name|'chunks'
op|'='
op|'['
name|'real_body'
op|'['
name|'x'
op|':'
name|'x'
op|'+'
name|'segment_size'
op|']'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'real_body'
op|')'
op|','
name|'segment_size'
op|')'
op|']'
newline|'\n'
name|'fragment_payloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'chunks'
op|':'
newline|'\n'
indent|'            '
name|'fragments'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'encode'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fragments'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'fragment_payloads'
op|'.'
name|'append'
op|'('
name|'fragments'
op|')'
newline|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
name|'sanity_body'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'fragment_payload'
name|'in'
name|'fragment_payloads'
op|':'
newline|'\n'
indent|'            '
name|'sanity_body'
op|'+='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'decode'
op|'('
nl|'\n'
name|'fragment_payload'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'real_body'
op|')'
op|','
name|'len'
op|'('
name|'sanity_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'real_body'
op|','
name|'sanity_body'
op|')'
newline|'\n'
nl|'\n'
comment|'# list(zip(...)) for py3 compatibility (zip is lazy there)'
nl|'\n'
name|'node_fragments'
op|'='
name|'list'
op|'('
name|'zip'
op|'('
op|'*'
name|'fragment_payloads'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'node_fragments'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'str'
op|'('
name|'len'
op|'('
name|'real_body'
op|')'
op|')'
op|'}'
newline|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'node_fragments'
op|'['
name|'i'
op|']'
op|')'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|'.'
name|'ec_ndata'
op|')'
op|']'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'real_body'
op|')'
op|','
name|'len'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'real_body'
op|','
name|'resp'
op|'.'
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_simple
dedent|''
name|'def'
name|'test_PUT_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_with_explicit_commit_status
dedent|''
name|'def'
name|'test_PUT_with_explicit_commit_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
op|'('
number|'100'
op|','
number|'100'
op|','
number|'201'
op|')'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_error
dedent|''
name|'def'
name|'test_PUT_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'503'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_mostly_success
dedent|''
name|'def'
name|'test_PUT_mostly_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'quorum'
op|'('
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
number|'503'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
name|'len'
op|'('
name|'codes'
op|')'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_error_commit
dedent|''
name|'def'
name|'test_PUT_error_commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
op|'('
number|'100'
op|','
number|'503'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_mostly_success_commit
dedent|''
name|'def'
name|'test_PUT_mostly_success_commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'quorum'
op|'('
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
op|'('
number|'100'
op|','
number|'503'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|']'
op|'*'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
name|'len'
op|'('
name|'codes'
op|')'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_mostly_error_commit
dedent|''
name|'def'
name|'test_PUT_mostly_error_commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
op|'('
number|'100'
op|','
number|'503'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|']'
op|'*'
name|'self'
op|'.'
name|'quorum'
op|'('
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
name|'len'
op|'('
name|'codes'
op|')'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_commit_timeout
dedent|''
name|'def'
name|'test_PUT_commit_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'codes'
op|'.'
name|'append'
op|'('
op|'('
number|'100'
op|','
name|'Timeout'
op|'('
op|')'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_commit_exception
dedent|''
name|'def'
name|'test_PUT_commit_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'codes'
op|'.'
name|'append'
op|'('
op|'('
number|'100'
op|','
name|'Exception'
op|'('
string|"'kaboom!'"
op|')'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_with_body
dedent|''
name|'def'
name|'test_PUT_with_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|')'
newline|'\n'
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_body'
op|'='
op|'('
string|"'asdf'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'10'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'size'
op|'='
name|'len'
op|'('
name|'test_body'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'body'
op|'='
name|'test_body'
newline|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'put_requests'
op|'='
name|'defaultdict'
op|'('
name|'lambda'
op|':'
op|'{'
string|"'boundary'"
op|':'
name|'None'
op|','
string|"'chunks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|capture_body
name|'def'
name|'capture_body'
op|'('
name|'conn_id'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'put_requests'
op|'['
name|'conn_id'
op|']'
op|'['
string|"'chunks'"
op|']'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
DECL|function|capture_headers
dedent|''
name|'def'
name|'capture_headers'
op|'('
name|'ip'
op|','
name|'port'
op|','
name|'device'
op|','
name|'part'
op|','
name|'method'
op|','
name|'path'
op|','
name|'headers'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn_id'
op|'='
name|'kwargs'
op|'['
string|"'connection_id'"
op|']'
newline|'\n'
name|'put_requests'
op|'['
name|'conn_id'
op|']'
op|'['
string|"'boundary'"
op|']'
op|'='
name|'headers'
op|'['
nl|'\n'
string|"'X-Backend-Obj-Multipart-Mime-Boundary'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|','
nl|'\n'
name|'give_send'
op|'='
name|'capture_body'
op|','
nl|'\n'
name|'give_connect'
op|'='
name|'capture_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
name|'frag_archives'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'connection_id'
op|','
name|'info'
name|'in'
name|'put_requests'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'unchunk_body'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'info'
op|'['
string|"'chunks'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'info'
op|'['
string|"'boundary'"
op|']'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
string|'"didn\'t get boundary for conn %r"'
op|'%'
op|'('
nl|'\n'
name|'connection_id'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# email.parser.FeedParser doesn't know how to take a multipart"
nl|'\n'
comment|'# message and boundary together and parse it; it only knows how'
nl|'\n'
comment|'# to take a string, parse the headers, and figure out the'
nl|'\n'
comment|'# boundary on its own.'
nl|'\n'
name|'parser'
op|'='
name|'email'
op|'.'
name|'parser'
op|'.'
name|'FeedParser'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'feed'
op|'('
nl|'\n'
string|'"Content-Type: multipart/nobodycares; boundary=%s\\r\\n\\r\\n"'
op|'%'
nl|'\n'
name|'info'
op|'['
string|"'boundary'"
op|']'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'feed'
op|'('
name|'body'
op|')'
newline|'\n'
name|'message'
op|'='
name|'parser'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'message'
op|'.'
name|'is_multipart'
op|'('
op|')'
op|')'
comment|'# sanity check'
newline|'\n'
name|'mime_parts'
op|'='
name|'message'
op|'.'
name|'get_payload'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'mime_parts'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'obj_part'
op|','
name|'footer_part'
op|','
name|'commit_part'
op|'='
name|'mime_parts'
newline|'\n'
nl|'\n'
comment|'# attach the body to frag_archives list'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj_part'
op|'['
string|"'X-Document'"
op|']'
op|','
string|"'object body'"
op|')'
newline|'\n'
name|'frag_archives'
op|'.'
name|'append'
op|'('
name|'obj_part'
op|'.'
name|'get_payload'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# validate some footer metadata'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'footer_part'
op|'['
string|"'X-Document'"
op|']'
op|','
string|"'object metadata'"
op|')'
newline|'\n'
name|'footer_metadata'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'footer_part'
op|'.'
name|'get_payload'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'footer_metadata'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-EC-Content-Length'"
op|':'
name|'str'
op|'('
name|'size'
op|')'
op|','
nl|'\n'
string|"'X-Backend-Container-Update-Override-Size'"
op|':'
name|'str'
op|'('
name|'size'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-EC-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Backend-Container-Update-Override-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-EC-Segment-Size'"
op|':'
name|'str'
op|'('
name|'segment_size'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'header'
op|','
name|'value'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'footer_metadata'
op|'['
name|'header'
op|']'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity on commit message'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'commit_part'
op|'['
string|"'X-Document'"
op|']'
op|','
string|"'put commit'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'frag_archives'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'fragment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'fragment_size'
newline|'\n'
name|'node_payloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fa'
name|'in'
name|'frag_archives'
op|':'
newline|'\n'
indent|'            '
name|'payload'
op|'='
op|'['
name|'fa'
op|'['
name|'x'
op|':'
name|'x'
op|'+'
name|'fragment_size'
op|']'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'fa'
op|')'
op|','
name|'fragment_size'
op|')'
op|']'
newline|'\n'
name|'node_payloads'
op|'.'
name|'append'
op|'('
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'fragment_payloads'
op|'='
name|'zip'
op|'('
op|'*'
name|'node_payloads'
op|')'
newline|'\n'
nl|'\n'
name|'expected_body'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'fragment_payload'
name|'in'
name|'fragment_payloads'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fragment_payload'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'fragment_payload'
op|'='
name|'list'
op|'('
name|'fragment_payload'
op|')'
newline|'\n'
dedent|''
name|'expected_body'
op|'+='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'decode'
op|'('
nl|'\n'
name|'fragment_payload'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'test_body'
op|')'
op|','
name|'len'
op|'('
name|'expected_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'test_body'
op|','
name|'expected_body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_old_obj_server
dedent|''
name|'def'
name|'test_PUT_old_obj_server'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
name|'responses'
op|'='
op|'['
nl|'\n'
comment|'# one server will response 100-continue but not include the'
nl|'\n'
comment|'# needful expect headers and the connection will be dropped'
nl|'\n'
op|'('
op|'('
number|'100'
op|','
name|'Exception'
op|'('
string|"'not used'"
op|')'
op|')'
op|','
op|'{'
op|'}'
op|')'
op|','
nl|'\n'
op|']'
op|'+'
op|'['
nl|'\n'
comment|'# and pleanty of successful responses too'
nl|'\n'
op|'('
number|'201'
op|','
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
op|','
nl|'\n'
op|'}'
op|')'
op|','
nl|'\n'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'responses'
op|')'
newline|'\n'
name|'if'
name|'responses'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|'!='
number|'201'
op|':'
newline|'\n'
comment|'# whoops, stupid random'
nl|'\n'
indent|'            '
name|'responses'
op|'='
name|'responses'
op|'['
number|'1'
op|':'
op|']'
op|'+'
op|'['
name|'responses'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
dedent|''
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_cross_policy_type_from_replicated
dedent|''
name|'def'
name|'test_COPY_cross_policy_type_from_replicated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'='
op|'{'
nl|'\n'
string|"'c1'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
string|"'c2'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# make c2 use replicated storage policy 1'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'['
string|"'c2'"
op|']'
op|'['
string|"'storage_policy'"
op|']'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
comment|'# a put request with copy from source c2'
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c1/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Copy-From'"
op|':'
string|"'c2/o'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# c2 get'
nl|'\n'
name|'codes'
op|'='
op|'['
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
number|'404'
op|']'
op|'*'
name|'POLICIES'
op|'['
number|'1'
op|']'
op|'.'
name|'object_ring'
op|'.'
name|'max_more_nodes'
newline|'\n'
comment|'# c1 put'
nl|'\n'
name|'codes'
op|'+='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_cross_policy_type_to_replicated
dedent|''
name|'def'
name|'test_COPY_cross_policy_type_to_replicated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'='
op|'{'
nl|'\n'
string|"'c1'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
string|"'c2'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# make c1 use replicated storage policy 1'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'['
string|"'c1'"
op|']'
op|'['
string|"'storage_policy'"
op|']'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
comment|'# a put request with copy from source c2'
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c1/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Copy-From'"
op|':'
string|"'c2/o'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# c2 get'
nl|'\n'
name|'codes'
op|'='
op|'['
number|'404'
op|','
number|'200'
op|']'
op|'*'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
newline|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# c1 put'
nl|'\n'
name|'codes'
op|'+='
op|'['
number|'201'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_cross_policy_type_unknown
dedent|''
name|'def'
name|'test_COPY_cross_policy_type_unknown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'='
op|'{'
nl|'\n'
string|"'c1'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
string|"'c2'"
op|':'
name|'self'
op|'.'
name|'app'
op|'.'
name|'container_info'
op|'.'
name|'copy'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# make c1 use some made up storage policy index'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'per_container_info'
op|'['
string|"'c1'"
op|']'
op|'['
string|"'storage_policy'"
op|']'
op|'='
string|"'13'"
newline|'\n'
nl|'\n'
comment|'# a COPY request of c2 with destination in c1'
nl|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c2/o'"
op|','
name|'method'
op|'='
string|"'COPY'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Destination'"
op|':'
string|"'c1/o'"
op|'}'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_ec_archive_bodies
dedent|''
name|'def'
name|'_make_ec_archive_bodies'
op|'('
name|'self'
op|','
name|'test_body'
op|','
name|'policy'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'self'
op|'.'
name|'policy'
newline|'\n'
name|'segment_size'
op|'='
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
comment|'# split up the body into buffers'
nl|'\n'
name|'chunks'
op|'='
op|'['
name|'test_body'
op|'['
name|'x'
op|':'
name|'x'
op|'+'
name|'segment_size'
op|']'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'test_body'
op|')'
op|','
name|'segment_size'
op|')'
op|']'
newline|'\n'
comment|'# encode the buffers into fragment payloads'
nl|'\n'
name|'fragment_payloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'chunks'
op|':'
newline|'\n'
indent|'            '
name|'fragments'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'encode'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fragments'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'fragment_payloads'
op|'.'
name|'append'
op|'('
name|'fragments'
op|')'
newline|'\n'
nl|'\n'
comment|'# join up the fragment payloads per node'
nl|'\n'
dedent|''
name|'ec_archive_bodies'
op|'='
op|'['
string|"''"
op|'.'
name|'join'
op|'('
name|'fragments'
op|')'
nl|'\n'
name|'for'
name|'fragments'
name|'in'
name|'zip'
op|'('
op|'*'
name|'fragment_payloads'
op|')'
op|']'
newline|'\n'
name|'return'
name|'ec_archive_bodies'
newline|'\n'
nl|'\n'
DECL|member|_make_ec_object_stub
dedent|''
name|'def'
name|'_make_ec_object_stub'
op|'('
name|'self'
op|','
name|'test_body'
op|'='
name|'None'
op|','
name|'policy'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'self'
op|'.'
name|'policy'
newline|'\n'
name|'segment_size'
op|'='
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_body'
op|'='
name|'test_body'
name|'or'
op|'('
nl|'\n'
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'1000'
op|')'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_body'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'body'"
op|':'
name|'test_body'
op|','
nl|'\n'
string|"'etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'frags'"
op|':'
name|'ec_archive_bodies'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_fake_ec_node_response
dedent|''
name|'def'
name|'_fake_ec_node_response'
op|'('
name|'self'
op|','
name|'node_frags'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a list of entries for each node in ring order, where the\n        entries are a dict (or list of dicts) which describe all of the\n        fragment(s); create a function suitable for use with\n        capture_http_requests that will accept a req object and return a\n        response that will suitably fake the behavior of an object\n        server who had the given fragments on disk at the time.\n        """'
newline|'\n'
name|'node_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'all_nodes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_build_node_map
name|'def'
name|'_build_node_map'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node_key'
op|'='
name|'lambda'
name|'n'
op|':'
op|'('
name|'n'
op|'['
string|"'ip'"
op|']'
op|','
name|'n'
op|'['
string|"'port'"
op|']'
op|')'
newline|'\n'
name|'part'
op|'='
name|'utils'
op|'.'
name|'split_path'
op|'('
name|'req'
op|'['
string|"'path'"
op|']'
op|','
number|'5'
op|','
number|'5'
op|','
name|'True'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'['
name|'int'
op|'('
nl|'\n'
name|'req'
op|'['
string|"'headers'"
op|']'
op|'['
string|"'X-Backend-Storage-Policy-Index'"
op|']'
op|')'
op|']'
newline|'\n'
name|'all_nodes'
op|'.'
name|'extend'
op|'('
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'part'
op|')'
op|')'
newline|'\n'
name|'all_nodes'
op|'.'
name|'extend'
op|'('
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'part'
op|')'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'node'
name|'in'
name|'enumerate'
op|'('
name|'all_nodes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'node_map'
op|'['
name|'node_key'
op|'('
name|'node'
op|')'
op|']'
op|'='
name|'i'
newline|'\n'
nl|'\n'
comment|'# normalize node_frags to a list of fragments for each node even'
nl|'\n'
comment|"# if there's only one fragment in the dataset provided."
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'i'
op|','
name|'frags'
name|'in'
name|'enumerate'
op|'('
name|'node_frags'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'frags'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'node_frags'
op|'['
name|'i'
op|']'
op|'='
op|'['
name|'frags'
op|']'
newline|'\n'
nl|'\n'
DECL|function|get_response
dedent|''
dedent|''
name|'def'
name|'get_response'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'node_map'
op|':'
newline|'\n'
indent|'                '
name|'_build_node_map'
op|'('
name|'req'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node_index'
op|'='
name|'node_map'
op|'['
op|'('
name|'req'
op|'['
string|"'ip'"
op|']'
op|','
name|'req'
op|'['
string|"'port'"
op|']'
op|')'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
string|'"Couldn\'t find node %s:%s in %r"'
op|'%'
op|'('
nl|'\n'
name|'req'
op|'['
string|"'ip'"
op|']'
op|','
name|'req'
op|'['
string|"'port'"
op|']'
op|','
name|'all_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'frags'
op|'='
name|'node_frags'
op|'['
name|'node_index'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
string|"'Found node %r:%r at index %s - '"
nl|'\n'
string|"'but only got %s stub response nodes'"
op|'%'
op|'('
nl|'\n'
name|'req'
op|'['
string|"'ip'"
op|']'
op|','
name|'req'
op|'['
string|"'port'"
op|']'
op|','
name|'node_index'
op|','
nl|'\n'
name|'len'
op|'('
name|'node_frags'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'stub'
op|'='
name|'random'
op|'.'
name|'choice'
op|'('
name|'frags'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'stub'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'stub'
op|':'
newline|'\n'
indent|'                '
name|'body'
op|'='
name|'stub'
op|'['
string|"'obj'"
op|']'
op|'['
string|"'frags'"
op|']'
op|'['
name|'stub'
op|'['
string|"'frag'"
op|']'
op|']'
newline|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'len'
op|'('
nl|'\n'
name|'stub'
op|'['
string|"'obj'"
op|']'
op|'['
string|"'body'"
op|']'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'stub'
op|'['
string|"'obj'"
op|']'
op|'['
string|"'etag'"
op|']'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'stub'
op|'['
string|"'frag'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'StubResponse'
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'resp'
op|'='
name|'StubResponse'
op|'('
number|'404'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'get_response'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_frags_swapped_around
dedent|''
name|'def'
name|'test_GET_with_frags_swapped_around'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_data'
op|'='
op|'('
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'657'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_data'
op|')'
newline|'\n'
nl|'\n'
name|'_part'
op|','
name|'primary_nodes'
op|'='
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'get_nodes'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
name|'node_key'
op|'='
name|'lambda'
name|'n'
op|':'
op|'('
name|'n'
op|'['
string|"'ip'"
op|']'
op|','
name|'n'
op|'['
string|"'port'"
op|']'
op|')'
newline|'\n'
name|'response_map'
op|'='
op|'{'
nl|'\n'
name|'node_key'
op|'('
name|'n'
op|')'
op|':'
name|'StubResponse'
op|'('
number|'200'
op|','
name|'ec_archive_bodies'
op|'['
name|'i'
op|']'
op|','
op|'{'
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'i'
op|','
nl|'\n'
op|'}'
op|')'
name|'for'
name|'i'
op|','
name|'n'
name|'in'
name|'enumerate'
op|'('
name|'primary_nodes'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# swap a parity response into a data node'
nl|'\n'
name|'data_node'
op|'='
name|'random'
op|'.'
name|'choice'
op|'('
name|'primary_nodes'
op|'['
op|':'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|']'
op|')'
newline|'\n'
name|'parity_node'
op|'='
name|'random'
op|'.'
name|'choice'
op|'('
name|'primary_nodes'
op|'['
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|':'
op|']'
op|')'
newline|'\n'
op|'('
name|'response_map'
op|'['
name|'node_key'
op|'('
name|'data_node'
op|')'
op|']'
op|','
nl|'\n'
name|'response_map'
op|'['
name|'node_key'
op|'('
name|'parity_node'
op|')'
op|']'
op|')'
op|'='
op|'('
name|'response_map'
op|'['
name|'node_key'
op|'('
name|'parity_node'
op|')'
op|']'
op|','
nl|'\n'
name|'response_map'
op|'['
name|'node_key'
op|'('
name|'data_node'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_response
name|'def'
name|'get_response'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'req_key'
op|'='
op|'('
name|'req'
op|'['
string|"'ip'"
op|']'
op|','
name|'req'
op|'['
string|"'port'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'response_map'
op|'.'
name|'pop'
op|'('
name|'req_key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'get_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'response_map'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'primary_nodes'
op|')'
op|'-'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_single_missed_overwrite_does_not_need_handoff
dedent|''
name|'def'
name|'test_GET_with_single_missed_overwrite_does_not_need_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'node_frags'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
comment|'# missed over write'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'9'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'10'
op|'}'
op|','
comment|'# parity'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'11'
op|'}'
op|','
comment|'# parity'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'12'
op|'}'
op|','
comment|'# parity'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'13'
op|'}'
op|','
comment|'# parity'
nl|'\n'
comment|"# {'obj': obj2, 'frag': 2},  # handoff (not used in this test)"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'fake_response'
op|'='
name|'self'
op|'.'
name|'_fake_ec_node_response'
op|'('
name|'node_frags'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'fake_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'collected_responses'
op|'='
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Etag'"
op|']'
newline|'\n'
name|'index'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
newline|'\n'
name|'collected_responses'
op|'['
name|'etag'
op|']'
op|'.'
name|'add'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
comment|"# because the primary nodes are shuffled, it's possible the proxy"
nl|'\n'
comment|"# didn't even notice the missed overwrite frag - but it might have"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertLessEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertLessEqual'
op|'('
name|'len'
op|'('
name|'collected_responses'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... regardless we should never need to fetch more than ec_ndata'
nl|'\n'
comment|'# frags for any given etag'
nl|'\n'
name|'for'
name|'etag'
op|','
name|'frags'
name|'in'
name|'collected_responses'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'frags'
op|')'
op|'<='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|','
nl|'\n'
string|"'collected %s frags for etag %s'"
op|'%'
op|'('
nl|'\n'
name|'len'
op|'('
name|'frags'
op|')'
op|','
name|'etag'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_many_missed_overwrite_will_need_handoff
dedent|''
dedent|''
name|'def'
name|'test_GET_with_many_missed_overwrite_will_need_handoff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'node_frags'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
comment|'# missed'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
comment|'# missed'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'9'
op|'}'
op|','
comment|'# missed'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'10'
op|'}'
op|','
comment|'# missed'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'11'
op|'}'
op|','
comment|'# missed'
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'12'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'13'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
comment|'# handoff'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'fake_response'
op|'='
name|'self'
op|'.'
name|'_fake_ec_node_response'
op|'('
name|'node_frags'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'fake_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'collected_responses'
op|'='
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Etag'"
op|']'
newline|'\n'
name|'index'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
newline|'\n'
name|'collected_responses'
op|'['
name|'etag'
op|']'
op|'.'
name|'add'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
comment|"# there's not enough of the obj2 etag on the primaries, we would"
nl|'\n'
comment|'# have collected responses for both etags, and would have made'
nl|'\n'
comment|'# one more request to the handoff node'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'collected_responses'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... regardless we should never need to fetch more than ec_ndata'
nl|'\n'
comment|'# frags for any given etag'
nl|'\n'
name|'for'
name|'etag'
op|','
name|'frags'
name|'in'
name|'collected_responses'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'frags'
op|')'
op|'<='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|','
nl|'\n'
string|"'collected %s frags for etag %s'"
op|'%'
op|'('
nl|'\n'
name|'len'
op|'('
name|'frags'
op|')'
op|','
name|'etag'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_missing_and_mixed_frags_will_dig_deep_but_succeed
dedent|''
dedent|''
name|'def'
name|'test_GET_with_missing_and_mixed_frags_will_dig_deep_but_succeed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'node_frags'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'9'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'fake_response'
op|'='
name|'self'
op|'.'
name|'_fake_ec_node_response'
op|'('
name|'node_frags'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'fake_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'etag'"
op|']'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'obj2'
op|'['
string|"'etag'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'collected_responses'
op|'='
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Etag'"
op|']'
newline|'\n'
name|'index'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
newline|'\n'
name|'collected_responses'
op|'['
name|'etag'
op|']'
op|'.'
name|'add'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
comment|'# we go exactly as long as we have to, finding two different'
nl|'\n'
comment|"# etags and some 404's (i.e. collected_responses[None])"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'len'
op|'('
name|'node_frags'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'collected_responses'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... regardless we should never need to fetch more than ec_ndata'
nl|'\n'
comment|'# frags for any given etag'
nl|'\n'
name|'for'
name|'etag'
op|','
name|'frags'
name|'in'
name|'collected_responses'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'frags'
op|')'
op|'<='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|','
nl|'\n'
string|"'collected %s frags for etag %s'"
op|'%'
op|'('
nl|'\n'
name|'len'
op|'('
name|'frags'
op|')'
op|','
name|'etag'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_missing_and_mixed_frags_will_dig_deep_but_stop
dedent|''
dedent|''
name|'def'
name|'test_GET_with_missing_and_mixed_frags_will_dig_deep_but_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'node_frags'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'4'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'6'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'7'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj1'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'obj'"
op|':'
name|'obj2'
op|','
string|"'frag'"
op|':'
number|'8'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'fake_response'
op|'='
name|'self'
op|'.'
name|'_fake_ec_node_response'
op|'('
name|'node_frags'
op|')'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'fake_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'404'
op|')'
newline|'\n'
nl|'\n'
name|'collected_responses'
op|'='
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Etag'"
op|']'
newline|'\n'
name|'index'
op|'='
name|'conn'
op|'.'
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
newline|'\n'
name|'collected_responses'
op|'['
name|'etag'
op|']'
op|'.'
name|'add'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
comment|'# default node_iter will exhaust at 2 * replicas'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
number|'2'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'collected_responses'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... regardless we should never need to fetch more than ec_ndata'
nl|'\n'
comment|'# frags for any given etag'
nl|'\n'
name|'for'
name|'etag'
op|','
name|'frags'
name|'in'
name|'collected_responses'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'frags'
op|')'
op|'<='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|','
nl|'\n'
string|"'collected %s frags for etag %s'"
op|'%'
op|'('
nl|'\n'
name|'len'
op|'('
name|'frags'
op|')'
op|','
name|'etag'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_mixed_success_with_range
dedent|''
dedent|''
name|'def'
name|'test_GET_mixed_success_with_range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fragment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'fragment_size'
newline|'\n'
nl|'\n'
name|'ec_stub'
op|'='
name|'self'
op|'.'
name|'_make_ec_object_stub'
op|'('
op|')'
newline|'\n'
name|'frag_archives'
op|'='
name|'ec_stub'
op|'['
string|"'frags'"
op|']'
newline|'\n'
name|'frag_archive_size'
op|'='
name|'len'
op|'('
name|'ec_stub'
op|'['
string|"'frags'"
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'fragment_size'
op|','
nl|'\n'
string|"'Content-Range'"
op|':'
string|"'bytes 0-%s/%s'"
op|'%'
op|'('
name|'fragment_size'
op|'-'
number|'1'
op|','
nl|'\n'
name|'frag_archive_size'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'len'
op|'('
name|'ec_stub'
op|'['
string|"'body'"
op|']'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'ec_stub'
op|'['
string|"'etag'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'responses'
op|'='
op|'['
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'0'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'1'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'2'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'3'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'4'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
comment|'# data nodes with old frag'
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'7'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'8'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'9'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
comment|'# hopefully we ask for two more'
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'10'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'frag_archives'
op|'['
number|'11'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'headers'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|get_response
name|'def'
name|'get_response'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'responses'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
name|'if'
name|'responses'
name|'else'
name|'StubResponse'
op|'('
number|'404'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'headers'
op|'='
op|'{'
string|"'Range'"
op|':'
string|"'bytes=0-3'"
op|'}'
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'get_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'206'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'body'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_range_unsatisfiable_mixed_success
dedent|''
name|'def'
name|'test_GET_with_range_unsatisfiable_mixed_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'responses'
op|'='
op|'['
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
comment|'# sneak in bogus extra responses'
nl|'\n'
name|'StubResponse'
op|'('
number|'404'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|')'
op|','
nl|'\n'
comment|'# and then just "enough" more 416\'s'
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'416'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|get_response
name|'def'
name|'get_response'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'responses'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
name|'if'
name|'responses'
name|'else'
name|'StubResponse'
op|'('
number|'404'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'headers'
op|'='
op|'{'
nl|'\n'
string|"'Range'"
op|':'
string|"'bytes=%s-'"
op|'%'
number|'100000000000000'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'get_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'416'
op|')'
newline|'\n'
comment|'# ec_ndata responses that must agree, plus the bogus extras'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_mixed_ranged_responses_success
dedent|''
name|'def'
name|'test_GET_mixed_ranged_responses_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'fragment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'fragment_size'
newline|'\n'
name|'new_data'
op|'='
op|'('
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'492'
op|']'
newline|'\n'
name|'new_etag'
op|'='
name|'md5'
op|'('
name|'new_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'new_archives'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'new_data'
op|')'
newline|'\n'
name|'old_data'
op|'='
op|'('
string|"'junk'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'492'
op|']'
newline|'\n'
name|'old_etag'
op|'='
name|'md5'
op|'('
name|'old_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'old_archives'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'old_data'
op|')'
newline|'\n'
name|'frag_archive_size'
op|'='
name|'len'
op|'('
name|'new_archives'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'new_headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'fragment_size'
op|','
nl|'\n'
string|"'Content-Range'"
op|':'
string|"'bytes 0-%s/%s'"
op|'%'
op|'('
name|'fragment_size'
op|'-'
number|'1'
op|','
nl|'\n'
name|'frag_archive_size'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'len'
op|'('
name|'new_data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'new_etag'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'old_headers'
op|'='
op|'{'
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'text/plain'"
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'fragment_size'
op|','
nl|'\n'
string|"'Content-Range'"
op|':'
string|"'bytes 0-%s/%s'"
op|'%'
op|'('
name|'fragment_size'
op|'-'
number|'1'
op|','
nl|'\n'
name|'frag_archive_size'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'len'
op|'('
name|'old_data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'old_etag'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# 7 primaries with stale frags, 3 handoffs failed to get new frags'
nl|'\n'
name|'responses'
op|'='
op|'['
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'0'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'1'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'2'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'3'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'4'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'5'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'6'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'7'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'8'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'9'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'10'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'11'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'old_archives'
op|'['
number|'12'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'old_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'13'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'0'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'404'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'404'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'6'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'404'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'10'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
name|'StubResponse'
op|'('
number|'206'
op|','
name|'new_archives'
op|'['
number|'12'
op|']'
op|'['
op|':'
name|'fragment_size'
op|']'
op|','
name|'new_headers'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|get_response
name|'def'
name|'get_response'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'responses'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
name|'if'
name|'responses'
name|'else'
name|'StubResponse'
op|'('
number|'404'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
name|'with'
name|'capture_http_requests'
op|'('
name|'get_response'
op|')'
name|'as'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'body'
op|','
name|'new_data'
op|'['
op|':'
name|'segment_size'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'log'
op|')'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_mismatched_fragment_archives
dedent|''
name|'def'
name|'test_GET_mismatched_fragment_archives'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_data1'
op|'='
op|'('
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'333'
op|']'
newline|'\n'
comment|'# N.B. the object data *length* here is different'
nl|'\n'
name|'test_data2'
op|'='
op|'('
string|"'blah1'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'333'
op|']'
newline|'\n'
nl|'\n'
name|'etag1'
op|'='
name|'md5'
op|'('
name|'test_data1'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'etag2'
op|'='
name|'md5'
op|'('
name|'test_data2'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ec_archive_bodies1'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_data1'
op|')'
newline|'\n'
name|'ec_archive_bodies2'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_data2'
op|')'
newline|'\n'
nl|'\n'
name|'headers1'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag1'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
string|"'333'"
op|'}'
newline|'\n'
comment|"# here we're going to *lie* and say the etag here matches"
nl|'\n'
name|'headers2'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag1'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
string|"'333'"
op|'}'
newline|'\n'
nl|'\n'
name|'responses1'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers1'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies1'
op|']'
newline|'\n'
name|'responses2'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers2'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies2'
op|']'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity check responses1'
nl|'\n'
name|'responses'
op|'='
name|'responses1'
op|'['
op|':'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|']'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'etag1'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity check responses2'
nl|'\n'
name|'responses'
op|'='
name|'responses2'
op|'['
op|':'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|']'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'etag2'
op|')'
newline|'\n'
nl|'\n'
comment|'# now mix the responses a bit'
nl|'\n'
name|'mix_index'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'mixed_responses'
op|'='
name|'responses1'
op|'['
op|':'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|']'
newline|'\n'
name|'mixed_responses'
op|'['
name|'mix_index'
op|']'
op|'='
name|'responses2'
op|'['
name|'mix_index'
op|']'
newline|'\n'
nl|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'mixed_responses'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'.'
name|'body'
newline|'\n'
dedent|''
name|'except'
name|'ECDriverError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'invalid ec fragment response body did not blow up!'"
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'error_lines'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'error_lines'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Error decoding fragments'"
name|'in'
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'/a/c/o'"
name|'in'
name|'msg'
op|')'
newline|'\n'
name|'log_msg_args'
op|','
name|'log_msg_kwargs'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'log_dict'
op|'['
string|"'error'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'log_msg_kwargs'
op|'['
string|"'exc_info'"
op|']'
op|'['
number|'0'
op|']'
op|','
name|'ECDriverError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_read_timeout
dedent|''
name|'def'
name|'test_GET_read_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_data'
op|'='
op|'('
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'333'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'recoverable_node_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'SlowBody'
op|'('
name|'body'
op|','
number|'0.1'
op|')'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|']'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
nl|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|'+'
op|'['
nl|'\n'
op|'('
number|'404'
op|','
string|"''"
op|','
op|'{'
op|'}'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'object_ring'
op|'.'
name|'max_more_nodes'
op|')'
op|']'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
comment|"# do this inside the fake http context manager, it'll try to"
nl|'\n'
comment|"# resume but won't be able to give us all the right bytes"
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'etag'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|','
name|'len'
op|'('
name|'error_lines'
op|')'
op|')'
newline|'\n'
name|'nparity'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_nparity'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|'['
op|':'
name|'nparity'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'retrying'"
name|'in'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|'['
name|'nparity'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'ChunkReadTimeout (0.01s)'"
name|'in'
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_read_timeout_resume
dedent|''
dedent|''
name|'def'
name|'test_GET_read_timeout_resume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'test_data'
op|'='
op|'('
string|"'test'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'333'
op|']'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ec_archive_bodies'
op|'='
name|'self'
op|'.'
name|'_make_ec_archive_bodies'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
name|'etag'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'recoverable_node_timeout'
op|'='
number|'0.05'
newline|'\n'
comment|'# first one is slow'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
name|'SlowBody'
op|'('
name|'ec_archive_bodies'
op|'['
number|'0'
op|']'
op|','
number|'0.1'
op|')'
op|','
name|'headers'
op|')'
op|']'
newline|'\n'
comment|'# ... the rest are fine'
nl|'\n'
name|'responses'
op|'+='
op|'['
op|'('
number|'200'
op|','
name|'body'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'body'
name|'in'
name|'ec_archive_bodies'
op|'['
number|'1'
op|':'
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'req'
op|'='
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|')'
newline|'\n'
nl|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
nl|'\n'
op|'*'
name|'responses'
op|'['
op|':'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'1'
op|']'
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'md5'
op|'('
name|'resp'
op|'.'
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
name|'etag'
op|')'
newline|'\n'
dedent|''
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'error_lines'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'retrying'"
name|'in'
name|'error_lines'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fix_response_HEAD
dedent|''
name|'def'
name|'test_fix_response_HEAD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
string|"'10'"
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Etag'"
op|':'
string|"'foo'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# sucsessful HEAD'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
string|"''"
op|','
name|'headers'
op|')'
op|']'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'200'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'body'
op|','
string|"''"
op|')'
newline|'\n'
comment|'# 200OK shows original object content length'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|','
string|"'10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Etag'"
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
comment|'# not found HEAD'
nl|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'404'
op|','
string|"''"
op|','
op|'{'
op|'}'
op|')'
op|']'
op|'*'
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|'*'
number|'2'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'HEAD'"
op|')'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'404'
op|')'
newline|'\n'
comment|'# 404 shows actual response body size (i.e. 0 for HEAD)'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|','
string|"'0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_with_slow_commits
dedent|''
name|'def'
name|'test_PUT_with_slow_commits'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# It's important that this timeout be much less than the delay in"
nl|'\n'
comment|'# the slow commit responses so that the slow commits are not waited'
nl|'\n'
comment|'# for.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'.'
name|'post_quorum_timeout'
op|'='
number|'0.01'
newline|'\n'
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
comment|'# plenty of slow commits'
nl|'\n'
name|'response_sleep'
op|'='
number|'5.0'
newline|'\n'
name|'codes'
op|'='
op|'['
name|'FakeStatus'
op|'('
number|'201'
op|','
name|'response_sleep'
op|'='
name|'response_sleep'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
comment|'# swap out some with regular fast responses'
nl|'\n'
name|'number_of_fast_responses_needed_to_be_quick_enough'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'quorum'
newline|'\n'
name|'fast_indexes'
op|'='
name|'random'
op|'.'
name|'sample'
op|'('
nl|'\n'
name|'range'
op|'('
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'number_of_fast_responses_needed_to_be_quick_enough'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'fast_indexes'
op|':'
newline|'\n'
indent|'            '
name|'codes'
op|'['
name|'i'
op|']'
op|'='
number|'201'
newline|'\n'
dedent|''
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
name|'response_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'response_time'
op|'<'
name|'response_sleep'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_with_just_enough_durable_responses
dedent|''
name|'def'
name|'test_PUT_with_just_enough_durable_responses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
number|'503'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_nparity'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'codes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_PUT_with_less_durable_responses
dedent|''
name|'def'
name|'test_PUT_with_less_durable_responses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'body'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'codes'
op|'='
op|'['
number|'201'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_ndata'
op|')'
newline|'\n'
name|'codes'
op|'+='
op|'['
number|'503'
op|']'
op|'*'
op|'('
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_nparity'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'codes'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'codes'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'codes'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'503'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_with_ranges
dedent|''
name|'def'
name|'test_COPY_with_ranges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
string|"'COPY'"
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Destination'"
op|':'
string|"'c1/o'"
op|','
nl|'\n'
string|"'Range'"
op|':'
string|"'bytes=5-10'"
op|'}'
op|')'
newline|'\n'
comment|'# turn a real body into fragments'
nl|'\n'
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'real_body'
op|'='
op|'('
string|"'asdf'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'10'
op|']'
newline|'\n'
nl|'\n'
comment|'# split it up into chunks'
nl|'\n'
name|'chunks'
op|'='
op|'['
name|'real_body'
op|'['
name|'x'
op|':'
name|'x'
op|'+'
name|'segment_size'
op|']'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'real_body'
op|')'
op|','
name|'segment_size'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# we need only first chunk to rebuild 5-10 range'
nl|'\n'
name|'fragments'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'encode'
op|'('
name|'chunks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'fragment_payloads'
op|'='
op|'['
op|']'
newline|'\n'
name|'fragment_payloads'
op|'.'
name|'append'
op|'('
name|'fragments'
op|')'
newline|'\n'
nl|'\n'
name|'node_fragments'
op|'='
name|'zip'
op|'('
op|'*'
name|'fragment_payloads'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'node_fragments'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'str'
op|'('
name|'len'
op|'('
name|'real_body'
op|')'
op|')'
op|'}'
newline|'\n'
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'node_fragments'
op|'['
name|'i'
op|']'
op|')'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|'.'
name|'ec_ndata'
op|')'
op|']'
newline|'\n'
name|'responses'
op|'+='
op|'['
op|'('
number|'201'
op|','
string|"''"
op|','
op|'{'
op|'}'
op|')'
op|']'
op|'*'
name|'self'
op|'.'
name|'obj_ring'
op|'.'
name|'replicas'
newline|'\n'
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'201'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GET_with_invalid_ranges
dedent|''
name|'def'
name|'test_GET_with_invalid_ranges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# reall body size is segment_size - 10 (just 1 segment)'
nl|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'real_body'
op|'='
op|'('
string|"'a'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'10'
op|']'
newline|'\n'
nl|'\n'
comment|'# range is out of real body but in segment size'
nl|'\n'
name|'self'
op|'.'
name|'_test_invalid_ranges'
op|'('
string|"'GET'"
op|','
name|'real_body'
op|','
nl|'\n'
name|'segment_size'
op|','
string|"'%s-'"
op|'%'
op|'('
name|'segment_size'
op|'-'
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# range is out of both real body and segment size'
nl|'\n'
name|'self'
op|'.'
name|'_test_invalid_ranges'
op|'('
string|"'GET'"
op|','
name|'real_body'
op|','
nl|'\n'
name|'segment_size'
op|','
string|"'%s-'"
op|'%'
op|'('
name|'segment_size'
op|'+'
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_COPY_with_invalid_ranges
dedent|''
name|'def'
name|'test_COPY_with_invalid_ranges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# reall body size is segment_size - 10 (just 1 segment)'
nl|'\n'
indent|'        '
name|'segment_size'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'ec_segment_size'
newline|'\n'
name|'real_body'
op|'='
op|'('
string|"'a'"
op|'*'
name|'segment_size'
op|')'
op|'['
op|':'
op|'-'
number|'10'
op|']'
newline|'\n'
nl|'\n'
comment|'# range is out of real body but in segment size'
nl|'\n'
name|'self'
op|'.'
name|'_test_invalid_ranges'
op|'('
string|"'COPY'"
op|','
name|'real_body'
op|','
nl|'\n'
name|'segment_size'
op|','
string|"'%s-'"
op|'%'
op|'('
name|'segment_size'
op|'-'
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# range is out of both real body and segment size'
nl|'\n'
name|'self'
op|'.'
name|'_test_invalid_ranges'
op|'('
string|"'COPY'"
op|','
name|'real_body'
op|','
nl|'\n'
name|'segment_size'
op|','
string|"'%s-'"
op|'%'
op|'('
name|'segment_size'
op|'+'
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_invalid_ranges
dedent|''
name|'def'
name|'_test_invalid_ranges'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'real_body'
op|','
name|'segment_size'
op|','
name|'req_range'
op|')'
op|':'
newline|'\n'
comment|'# make a request with range starts from more than real size.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/v1/a/c/o'"
op|','
name|'method'
op|'='
name|'method'
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Destination'"
op|':'
string|"'c1/o'"
op|','
nl|'\n'
string|"'Range'"
op|':'
string|"'bytes=%s'"
op|'%'
op|'('
name|'req_range'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'fragments'
op|'='
name|'self'
op|'.'
name|'policy'
op|'.'
name|'pyeclib_driver'
op|'.'
name|'encode'
op|'('
name|'real_body'
op|')'
newline|'\n'
name|'fragment_payloads'
op|'='
op|'['
name|'fragments'
op|']'
newline|'\n'
nl|'\n'
name|'node_fragments'
op|'='
name|'zip'
op|'('
op|'*'
name|'fragment_payloads'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'node_fragments'
op|')'
op|','
name|'self'
op|'.'
name|'replicas'
op|'('
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Content-Length'"
op|':'
name|'str'
op|'('
name|'len'
op|'('
name|'real_body'
op|')'
op|')'
op|'}'
newline|'\n'
name|'start'
op|'='
name|'int'
op|'('
name|'req_range'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'start'
op|'>='
number|'0'
op|')'
comment|'# sanity'
newline|'\n'
name|'title'
op|','
name|'exp'
op|'='
name|'swob'
op|'.'
name|'RESPONSE_REASONS'
op|'['
number|'416'
op|']'
newline|'\n'
name|'range_not_satisfiable_body'
op|'='
string|"'<html><h1>%s</h1><p>%s</p></html>'"
op|'%'
op|'('
name|'title'
op|','
name|'exp'
op|')'
newline|'\n'
name|'if'
name|'start'
op|'>='
name|'segment_size'
op|':'
newline|'\n'
indent|'            '
name|'responses'
op|'='
op|'['
op|'('
number|'416'
op|','
name|'range_not_satisfiable_body'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|'.'
name|'ec_ndata'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'responses'
op|'='
op|'['
op|'('
number|'200'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'node_fragments'
op|'['
name|'i'
op|']'
op|')'
op|','
name|'headers'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|'.'
name|'ec_ndata'
op|')'
op|']'
newline|'\n'
dedent|''
name|'status_codes'
op|','
name|'body_iter'
op|','
name|'headers'
op|'='
name|'zip'
op|'('
op|'*'
name|'responses'
op|')'
newline|'\n'
name|'expect_headers'
op|'='
op|'{'
nl|'\n'
string|"'X-Obj-Metadata-Footer'"
op|':'
string|"'yes'"
op|','
nl|'\n'
string|"'X-Obj-Multiphase-Commit'"
op|':'
string|"'yes'"
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'set_http_connect'
op|'('
op|'*'
name|'status_codes'
op|','
name|'body_iter'
op|'='
name|'body_iter'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'expect_headers'
op|'='
name|'expect_headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'status_int'
op|','
number|'416'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'content_length'
op|','
name|'len'
op|'('
name|'range_not_satisfiable_body'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resp'
op|'.'
name|'body'
op|','
name|'range_not_satisfiable_body'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
