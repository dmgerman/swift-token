begin_unit
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'configparser'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'get_valid_utf8_str'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainerSyncRealms
name|'class'
name|'ContainerSyncRealms'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Loads and parses the container-sync-realms.conf, occasionally\n    checking the file\'s mtime to see if it needs to be reloaded.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf_path'
op|','
name|'logger'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf_path'
op|'='
name|'conf_path'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
name|'self'
op|'.'
name|'next_mtime_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'mtime_check_interval'
op|'='
number|'300'
newline|'\n'
name|'self'
op|'.'
name|'conf_path_mtime'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'reload'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reload
dedent|''
name|'def'
name|'reload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Forces a reload of the conf file."""'
newline|'\n'
name|'self'
op|'.'
name|'next_mtime_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'conf_path_mtime'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reload
dedent|''
name|'def'
name|'_reload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'now'
op|'>='
name|'self'
op|'.'
name|'next_mtime_check'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'next_mtime_check'
op|'='
name|'now'
op|'+'
name|'self'
op|'.'
name|'mtime_check_interval'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'self'
op|'.'
name|'conf_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                    '
name|'log_func'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'log_func'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
newline|'\n'
dedent|''
name|'log_func'
op|'('
name|'_'
op|'('
string|"'Could not load %r: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'conf_path'
op|','
name|'err'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'mtime'
op|'!='
name|'self'
op|'.'
name|'conf_path_mtime'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'conf_path_mtime'
op|'='
name|'mtime'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'conf'
op|'='
name|'configparser'
op|'.'
name|'SafeConfigParser'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'conf_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'configparser'
op|'.'
name|'ParsingError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Could not load %r: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'conf_path'
op|','
name|'err'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'mtime_check_interval'
op|'='
name|'conf'
op|'.'
name|'getint'
op|'('
nl|'\n'
string|"'DEFAULT'"
op|','
string|"'mtime_check_interval'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'next_mtime_check'
op|'='
name|'now'
op|'+'
name|'self'
op|'.'
name|'mtime_check_interval'
newline|'\n'
dedent|''
name|'except'
name|'configparser'
op|'.'
name|'NoOptionError'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'mtime_check_interval'
op|'='
number|'300'
newline|'\n'
name|'self'
op|'.'
name|'next_mtime_check'
op|'='
name|'now'
op|'+'
name|'self'
op|'.'
name|'mtime_check_interval'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'configparser'
op|'.'
name|'ParsingError'
op|','
name|'ValueError'
op|')'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Error in %r with mtime_check_interval: %s'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conf_path'
op|','
name|'err'
op|')'
newline|'\n'
dedent|''
name|'realms'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'section'
name|'in'
name|'conf'
op|'.'
name|'sections'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'realm'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'clusters'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'option'
op|','
name|'value'
name|'in'
name|'conf'
op|'.'
name|'items'
op|'('
name|'section'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'if'
name|'option'
name|'in'
op|'('
string|"'key'"
op|','
string|"'key2'"
op|')'
op|':'
newline|'\n'
indent|'                                    '
name|'realm'
op|'['
name|'option'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'option'
op|'.'
name|'startswith'
op|'('
string|"'cluster_'"
op|')'
op|':'
newline|'\n'
indent|'                                    '
name|'clusters'
op|'['
name|'option'
op|'['
number|'8'
op|':'
op|']'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'realm'
op|'['
string|"'clusters'"
op|']'
op|'='
name|'clusters'
newline|'\n'
name|'realms'
op|'['
name|'section'
op|'.'
name|'upper'
op|'('
op|')'
op|']'
op|'='
name|'realm'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'='
name|'realms'
newline|'\n'
nl|'\n'
DECL|member|realms
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'realms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of realms."""'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|key
dedent|''
name|'def'
name|'key'
op|'('
name|'self'
op|','
name|'realm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the key for the realm."""'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'data'
op|'.'
name|'get'
op|'('
name|'realm'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'result'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|key2
dedent|''
name|'def'
name|'key2'
op|'('
name|'self'
op|','
name|'realm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the key2 for the realm."""'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'data'
op|'.'
name|'get'
op|'('
name|'realm'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'result'
op|'.'
name|'get'
op|'('
string|"'key2'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|clusters
dedent|''
name|'def'
name|'clusters'
op|'('
name|'self'
op|','
name|'realm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of clusters for the realm."""'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'data'
op|'.'
name|'get'
op|'('
name|'realm'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'result'
op|'.'
name|'get'
op|'('
string|"'clusters'"
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'result'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
name|'or'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|endpoint
dedent|''
name|'def'
name|'endpoint'
op|'('
name|'self'
op|','
name|'realm'
op|','
name|'cluster'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the endpoint for the cluster in the realm."""'
newline|'\n'
name|'self'
op|'.'
name|'_reload'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'realm_data'
op|'='
name|'self'
op|'.'
name|'data'
op|'.'
name|'get'
op|'('
name|'realm'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'realm_data'
op|':'
newline|'\n'
indent|'            '
name|'cluster_data'
op|'='
name|'realm_data'
op|'.'
name|'get'
op|'('
string|"'clusters'"
op|')'
newline|'\n'
name|'if'
name|'cluster_data'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'cluster_data'
op|'.'
name|'get'
op|'('
name|'cluster'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|get_sig
dedent|''
name|'def'
name|'get_sig'
op|'('
name|'self'
op|','
name|'request_method'
op|','
name|'path'
op|','
name|'x_timestamp'
op|','
name|'nonce'
op|','
name|'realm_key'
op|','
nl|'\n'
name|'user_key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the hexdigest string of the HMAC-SHA1 (RFC 2104) for\n        the information given.\n\n        :param request_method: HTTP method of the request.\n        :param path: The path to the resource.\n        :param x_timestamp: The X-Timestamp header value for the request.\n        :param nonce: A unique value for the request.\n        :param realm_key: Shared secret at the cluster operator level.\n        :param user_key: Shared secret at the user\'s container level.\n        :returns: hexdigest str of the HMAC-SHA1 for the request.\n        """'
newline|'\n'
name|'nonce'
op|'='
name|'get_valid_utf8_str'
op|'('
name|'nonce'
op|')'
newline|'\n'
name|'realm_key'
op|'='
name|'get_valid_utf8_str'
op|'('
name|'realm_key'
op|')'
newline|'\n'
name|'user_key'
op|'='
name|'get_valid_utf8_str'
op|'('
name|'user_key'
op|')'
newline|'\n'
name|'return'
name|'hmac'
op|'.'
name|'new'
op|'('
nl|'\n'
name|'realm_key'
op|','
nl|'\n'
string|"'%s\\n%s\\n%s\\n%s\\n%s'"
op|'%'
op|'('
nl|'\n'
name|'request_method'
op|','
name|'path'
op|','
name|'x_timestamp'
op|','
name|'nonce'
op|','
name|'user_key'
op|')'
op|','
nl|'\n'
name|'hashlib'
op|'.'
name|'sha1'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
