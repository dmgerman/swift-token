begin_unit
comment|'# -*- coding:utf-8 -*-'
nl|'\n'
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for swift.obj.diskfile"""'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'from'
name|'unittest'
op|'.'
name|'util'
name|'import'
name|'safe_repr'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'email'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'import'
name|'xattr'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'from'
name|'collections'
name|'import'
name|'defaultdict'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'shuffle'
op|','
name|'randint'
newline|'\n'
name|'from'
name|'shutil'
name|'import'
name|'rmtree'
newline|'\n'
name|'from'
name|'time'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'tempfile'
name|'import'
name|'mkdtemp'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
name|'from'
name|'contextlib'
name|'import'
name|'closing'
op|','
name|'contextmanager'
newline|'\n'
name|'from'
name|'gzip'
name|'import'
name|'GzipFile'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'hubs'
op|','
name|'timeout'
op|','
name|'tpool'
newline|'\n'
name|'from'
name|'test'
op|'.'
name|'unit'
name|'import'
op|'('
name|'FakeLogger'
op|','
name|'mock'
name|'as'
name|'unit_mock'
op|','
name|'temptree'
op|','
nl|'\n'
name|'patch_policies'
op|','
name|'debug_logger'
op|','
name|'EMPTY_ETAG'
op|','
nl|'\n'
name|'make_timestamp_iter'
op|','
name|'DEFAULT_TEST_EC_TYPE'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'nose'
name|'import'
name|'SkipTest'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'obj'
name|'import'
name|'diskfile'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'hash_path'
op|','
name|'mkdirs'
op|','
name|'Timestamp'
op|','
name|'encode_timestamps'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'ring'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'splice'
name|'import'
name|'splice'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'exceptions'
name|'import'
name|'DiskFileNotExist'
op|','
name|'DiskFileQuarantined'
op|','
name|'DiskFileDeviceUnavailable'
op|','
name|'DiskFileDeleted'
op|','
name|'DiskFileNotOpen'
op|','
name|'DiskFileError'
op|','
name|'ReplicationLockTimeout'
op|','
name|'DiskFileCollision'
op|','
name|'DiskFileExpired'
op|','
name|'SwiftException'
op|','
name|'DiskFileNoSpace'
op|','
name|'DiskFileXattrNotSupported'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
op|'('
nl|'\n'
name|'POLICIES'
op|','
name|'get_policy_string'
op|','
name|'StoragePolicy'
op|','
name|'ECStoragePolicy'
op|','
nl|'\n'
name|'BaseStoragePolicy'
op|','
name|'REPL_POLICY'
op|','
name|'EC_POLICY'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|test_policies
name|'test_policies'
op|'='
op|'['
nl|'\n'
name|'StoragePolicy'
op|'('
number|'0'
op|','
name|'name'
op|'='
string|"'zero'"
op|','
name|'is_default'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'ECStoragePolicy'
op|'('
number|'1'
op|','
name|'name'
op|'='
string|"'one'"
op|','
name|'is_default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|ec_type
name|'ec_type'
op|'='
name|'DEFAULT_TEST_EC_TYPE'
op|','
nl|'\n'
name|'ec_ndata'
op|'='
number|'10'
op|','
name|'ec_nparity'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_paths_with_matching_suffixes
name|'def'
name|'find_paths_with_matching_suffixes'
op|'('
name|'needed_matches'
op|'='
number|'2'
op|','
name|'needed_suffixes'
op|'='
number|'3'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'paths'
op|'='
name|'defaultdict'
op|'('
name|'list'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
name|'hash_'
op|'='
name|'hash_path'
op|'('
op|'*'
name|'path'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'hash_'
op|'['
op|'-'
number|'3'
op|':'
op|']'
newline|'\n'
name|'paths'
op|'['
name|'suffix'
op|']'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'paths'
op|')'
op|'<'
name|'needed_suffixes'
op|':'
newline|'\n'
comment|'# in the extreamly unlikely situation where you land the matches'
nl|'\n'
comment|"# you need before you get the total suffixes you need - it's"
nl|'\n'
comment|'# simpler to just ignore this suffix for now'
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'paths'
op|'['
name|'suffix'
op|']'
op|')'
op|'>='
name|'needed_matches'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'paths'
op|','
name|'suffix'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_test_ring
dedent|''
name|'def'
name|'_create_test_ring'
op|'('
name|'path'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'ring_name'
op|'='
name|'get_policy_string'
op|'('
string|"'object'"
op|','
name|'policy'
op|')'
newline|'\n'
name|'testgz'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'ring_name'
op|'+'
string|"'.ring.gz'"
op|')'
newline|'\n'
name|'intended_replica2part2dev_id'
op|'='
op|'['
nl|'\n'
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
nl|'\n'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'0'
op|','
number|'5'
op|','
number|'6'
op|','
number|'4'
op|']'
op|','
nl|'\n'
op|'['
number|'2'
op|','
number|'3'
op|','
number|'0'
op|','
number|'1'
op|','
number|'6'
op|','
number|'4'
op|','
number|'5'
op|']'
op|']'
newline|'\n'
name|'intended_devs'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'0'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.0'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'1'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'2'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.2'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'4'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.3'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'4'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'5'
op|','
string|"'ip'"
op|':'
string|"'127.0.0.4'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'5'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'fe80::202:b3ff:fe1e:8329'"
op|','
string|"'port'"
op|':'
number|'6000'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'6'
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|','
string|"'zone'"
op|':'
number|'7'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'2001:0db8:85a3:0000:0000:8a2e:0370:7334'"
op|','
nl|'\n'
string|"'port'"
op|':'
number|'6000'
op|'}'
op|']'
newline|'\n'
name|'intended_part_shift'
op|'='
number|'30'
newline|'\n'
name|'intended_reload_time'
op|'='
number|'15'
newline|'\n'
name|'with'
name|'closing'
op|'('
name|'GzipFile'
op|'('
name|'testgz'
op|','
string|"'wb'"
op|')'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'pickle'
op|'.'
name|'dump'
op|'('
nl|'\n'
name|'ring'
op|'.'
name|'RingData'
op|'('
name|'intended_replica2part2dev_id'
op|','
name|'intended_devs'
op|','
nl|'\n'
name|'intended_part_shift'
op|')'
op|','
nl|'\n'
name|'f'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ring'
op|'.'
name|'Ring'
op|'('
name|'path'
op|','
name|'ring_name'
op|'='
name|'ring_name'
op|','
nl|'\n'
name|'reload_time'
op|'='
name|'intended_reload_time'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'patch_policies'
newline|'\n'
DECL|class|TestDiskFileModuleMethods
name|'class'
name|'TestDiskFileModuleMethods'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'HASH_PATH_SUFFIX'
op|'='
string|"'endcap'"
newline|'\n'
name|'utils'
op|'.'
name|'HASH_PATH_PREFIX'
op|'='
string|"''"
newline|'\n'
comment|'# Setup a test ring per policy (stolen from common/test_ring.py)'
nl|'\n'
name|'self'
op|'.'
name|'testdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'devices'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'node'"
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'testdir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'devices'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existing_device'
op|'='
string|"'sda1'"
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objects'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
string|"'objects'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'part'
name|'in'
op|'['
string|"'0'"
op|','
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parts'
op|'['
name|'part'
op|']'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects'
op|','
name|'part'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'objects'
op|','
name|'part'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'ring'
op|'='
name|'_create_test_ring'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'swift_dir'
op|'='
name|'self'
op|'.'
name|'testdir'
op|','
name|'devices'
op|'='
name|'self'
op|'.'
name|'devices'
op|','
name|'mount_check'
op|'='
string|"'false'"
op|','
nl|'\n'
name|'timeout'
op|'='
string|"'300'"
op|','
name|'stats_interval'
op|'='
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileManager'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'FakeLogger'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_diskfile
dedent|''
name|'def'
name|'_create_diskfile'
op|'('
name|'self'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_extract_policy
dedent|''
name|'def'
name|'test_extract_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# good path names'
nl|'\n'
indent|'        '
name|'pn'
op|'='
string|"'objects/0/606/1984527ed7ef6247c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'pn'
op|'='
string|"'objects-1/0/606/198452b6ef6247c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# leading slash'
nl|'\n'
name|'pn'
op|'='
string|"'/objects/0/606/1984527ed7ef6247c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'pn'
op|'='
string|"'/objects-1/0/606/198452b6ef6247c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# full paths'
nl|'\n'
name|'good_path'
op|'='
string|"'/srv/node/sda1/objects-1/1/abc/def/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'good_path'
op|')'
op|','
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'good_path'
op|'='
string|"'/srv/node/sda1/objects/1/abc/def/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'good_path'
op|')'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# short paths'
nl|'\n'
name|'path'
op|'='
string|"'/srv/node/sda1/objects/1/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'path'
op|')'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'path'
op|'='
string|"'/srv/node/sda1/objects-1/1/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'path'
op|')'
op|','
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# well formatted but, unknown policy index'
nl|'\n'
name|'pn'
op|'='
string|"'objects-2/0/606/198427efcff042c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# malformed path'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
string|"''"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'bad_path'
op|'='
string|"'/srv/node/sda1/objects-t/1/abc/def/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'bad_path'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'pn'
op|'='
string|"'XXXX/0/606/1984527ed42b6ef6247c78606/1401379842.14643.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'pn'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'bad_path'
op|'='
string|"'/srv/node/sda1/foo-1/1/abc/def/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'bad_path'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'bad_path'
op|'='
string|"'/srv/node/sda1/obj1/1/abc/def/1234.data'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'extract_policy'
op|'('
name|'bad_path'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_renamer
dedent|''
name|'def'
name|'test_quarantine_renamer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
comment|'# we use this for convenience, not really about a diskfile layout'
nl|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_diskfile'
op|'('
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'mkdirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'exp_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'quarantined'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'qbit'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
string|"'qbit'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'qbit'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
string|"'abc'"
op|')'
newline|'\n'
dedent|''
name|'to_dir'
op|'='
name|'diskfile'
op|'.'
name|'quarantine_renamer'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'qbit'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'to_dir'
op|','
name|'exp_dir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'diskfile'
op|'.'
name|'quarantine_renamer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'qbit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_data_dir
dedent|''
dedent|''
name|'def'
name|'test_get_data_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'DATADIR_BASE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'DATADIR_BASE'
op|'+'
string|'"-1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|','
string|"'junk'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|','
number|'99'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_async_dir
dedent|''
name|'def'
name|'test_get_async_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_async_dir'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'ASYNCDIR_BASE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_async_dir'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'ASYNCDIR_BASE'
op|'+'
string|'"-1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_async_dir'
op|','
string|"'junk'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_async_dir'
op|','
number|'99'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_tmp_dir
dedent|''
name|'def'
name|'test_get_tmp_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'TMP_BASE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'TMP_BASE'
op|'+'
string|'"-1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|','
string|"'junk'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|','
number|'99'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pickle_async_update_tmp_dir
dedent|''
name|'def'
name|'test_pickle_async_update_tmp_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'int'
op|'('
name|'policy'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'tmp_part'
op|'='
string|"'tmp'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'tmp_part'
op|'='
string|"'tmp-%d'"
op|'%'
name|'policy'
newline|'\n'
dedent|''
name|'tmp_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
name|'tmp_part'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'tmp_path'
op|')'
op|')'
newline|'\n'
name|'pickle_args'
op|'='
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
string|"'data'"
op|','
number|'0.0'
op|','
name|'policy'
op|')'
newline|'\n'
comment|"# async updates don't create their tmpdir on their own"
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'pickle_async_update'
op|','
nl|'\n'
op|'*'
name|'pickle_args'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'tmp_path'
op|')'
newline|'\n'
comment|'# now create a async update'
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'pickle_async_update'
op|'('
op|'*'
name|'pickle_args'
op|')'
newline|'\n'
comment|'# check tempdir'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'tmp_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
newline|'\n'
DECL|class|TestObjectAuditLocationGenerator
name|'class'
name|'TestObjectAuditLocationGenerator'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_make_file
indent|'    '
name|'def'
name|'_make_file'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EEXIST'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'open'
op|'('
name|'path'
op|','
string|"'w'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_audit_location_class
dedent|''
dedent|''
name|'def'
name|'test_audit_location_class'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'al'
op|'='
name|'diskfile'
op|'.'
name|'AuditLocation'
op|'('
string|"'abc'"
op|','
string|"'123'"
op|','
string|"'_-_'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'al'
op|')'
op|','
string|"'abc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finding_of_hashdirs
dedent|''
name|'def'
name|'test_finding_of_hashdirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
comment|'# the good'
nl|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"aca"'
op|','
nl|'\n'
string|'"5c1fdc1ffb12e5eaf84edc30d8b67aca"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"aca"'
op|','
nl|'\n'
string|'"fdfd184d39080020bc8b487f8a7beaca"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"df2"'
op|','
nl|'\n'
string|'"b0fe7af831cc7b1af5bf486b1c841df2"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"9720"'
op|','
string|'"ca5"'
op|','
nl|'\n'
string|'"4a943bc72c2e647c4675923d58cf4ca5"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects"'
op|','
string|'"3071"'
op|','
string|'"8eb"'
op|','
nl|'\n'
string|'"fcd938702024c25fef6c32fef05298eb"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects-1"'
op|','
string|'"9970"'
op|','
string|'"ca5"'
op|','
nl|'\n'
string|'"4a943bc72c2e647c4675923d58cf4ca5"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects-2"'
op|','
string|'"9971"'
op|','
string|'"8eb"'
op|','
nl|'\n'
string|'"fcd938702024c25fef6c32fef05298eb"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects-99"'
op|','
string|'"9972"'
op|','
nl|'\n'
string|'"8eb"'
op|','
nl|'\n'
string|'"fcd938702024c25fef6c32fef05298eb"'
op|')'
op|')'
newline|'\n'
comment|'# the bad'
nl|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects-"'
op|','
string|'"1135"'
op|','
nl|'\n'
string|'"6c3"'
op|','
nl|'\n'
string|'"fcd938702024c25fef6c32fef05298eb"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects-fud"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects-+1"'
op|','
string|'"foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_make_file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
nl|'\n'
string|'"fed"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_make_file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects"'
op|','
string|'"9876"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# the empty'
nl|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdr"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sds"'
op|','
string|'"objects"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdt"'
op|','
string|'"objects"'
op|','
string|'"9601"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdu"'
op|','
string|'"objects"'
op|','
string|'"6499"'
op|','
string|'"f80"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# the irrelevant'
nl|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdv"'
op|','
string|'"accounts"'
op|','
string|'"77"'
op|','
string|'"421"'
op|','
nl|'\n'
string|'"4b8c86149a6d532f4af018578fd9f421"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdw"'
op|','
string|'"containers"'
op|','
string|'"28"'
op|','
string|'"51e"'
op|','
nl|'\n'
string|'"4f9eee668b66c6f0250bfa3c7ab9e51e"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'logger'
op|'='
name|'debug_logger'
op|'('
op|')'
newline|'\n'
name|'locations'
op|'='
op|'['
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'False'
op|','
nl|'\n'
name|'logger'
op|'='
name|'logger'
op|')'
op|']'
newline|'\n'
name|'locations'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# expect some warnings about those bad dirs'
nl|'\n'
name|'warnings'
op|'='
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'warnings'
op|')'
op|','
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|'"Directory \'objects-\' does not map to a valid policy "'
nl|'\n'
string|'"(Unknown policy, for index \'\')"'
op|')'
op|','
nl|'\n'
op|'('
string|'"Directory \'objects-2\' does not map to a valid policy "'
nl|'\n'
string|'"(Unknown policy, for index \'2\')"'
op|')'
op|','
nl|'\n'
op|'('
string|'"Directory \'objects-99\' does not map to a valid policy "'
nl|'\n'
string|'"(Unknown policy, for index \'99\')"'
op|')'
op|','
nl|'\n'
op|'('
string|'"Directory \'objects-fud\' does not map to a valid policy "'
nl|'\n'
string|'"(Unknown policy, for index \'fud\')"'
op|')'
op|','
nl|'\n'
op|'('
string|'"Directory \'objects-+1\' does not map to a valid policy "'
nl|'\n'
string|'"(Unknown policy, for index \'+1\')"'
op|')'
op|','
nl|'\n'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'['
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects-1"'
op|','
string|'"9970"'
op|','
string|'"ca5"'
op|','
nl|'\n'
string|'"4a943bc72c2e647c4675923d58cf4ca5"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"9970"'
op|','
name|'POLICIES'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"aca"'
op|','
nl|'\n'
string|'"5c1fdc1ffb12e5eaf84edc30d8b67aca"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"1519"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"aca"'
op|','
nl|'\n'
string|'"fdfd184d39080020bc8b487f8a7beaca"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"1519"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"1519"'
op|','
string|'"df2"'
op|','
nl|'\n'
string|'"b0fe7af831cc7b1af5bf486b1c841df2"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"1519"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
string|'"9720"'
op|','
string|'"ca5"'
op|','
nl|'\n'
string|'"4a943bc72c2e647c4675923d58cf4ca5"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"9720"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects"'
op|','
string|'"3071"'
op|','
string|'"8eb"'
op|','
nl|'\n'
string|'"fcd938702024c25fef6c32fef05298eb"'
op|')'
op|','
nl|'\n'
string|'"sdq"'
op|','
string|'"3071"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'locations'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset status file for next run'
nl|'\n'
name|'diskfile'
op|'.'
name|'clear_auditor_status'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
comment|'# now without a logger'
nl|'\n'
name|'locations'
op|'='
op|'['
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'False'
op|')'
op|']'
newline|'\n'
name|'locations'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'locations'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skipping_unmounted_devices
dedent|''
dedent|''
name|'def'
name|'test_skipping_unmounted_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|mock_ismount
indent|'        '
name|'def'
name|'mock_ismount'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'path'
op|'.'
name|'endswith'
op|'('
string|"'sdp'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.ismount'"
op|','
name|'mock_ismount'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"2607"'
op|','
string|'"df3"'
op|','
nl|'\n'
string|'"ec2871fe724411f91787462f97d30df3"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdq"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"9785"'
op|','
string|'"a10"'
op|','
nl|'\n'
string|'"4993d582f41be9771505a8d4cb237a10"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'locations'
op|'='
op|'['
nl|'\n'
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'True'
op|')'
op|']'
newline|'\n'
name|'locations'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'locations'
op|','
nl|'\n'
op|'['
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"2607"'
op|','
string|'"df3"'
op|','
nl|'\n'
string|'"ec2871fe724411f91787462f97d30df3"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"2607"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do it again, this time with a logger.'
nl|'\n'
name|'ml'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'locations'
op|'='
op|'['
nl|'\n'
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'True'
op|','
name|'logger'
op|'='
name|'ml'
op|')'
op|']'
newline|'\n'
name|'ml'
op|'.'
name|'debug'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'Skipping %s as it is not mounted'"
op|','
nl|'\n'
string|"'sdq'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skipping_files
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_skipping_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"2607"'
op|','
string|'"df3"'
op|','
nl|'\n'
string|'"ec2871fe724411f91787462f97d30df3"'
op|')'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"garbage"'
op|')'
op|','
string|'"wb"'
op|')'
name|'as'
name|'fh'
op|':'
newline|'\n'
indent|'                '
name|'fh'
op|'.'
name|'write'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'locations'
op|'='
op|'['
nl|'\n'
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'False'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'locations'
op|','
nl|'\n'
op|'['
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdp"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"2607"'
op|','
string|'"df3"'
op|','
nl|'\n'
string|'"ec2871fe724411f91787462f97d30df3"'
op|')'
op|','
nl|'\n'
string|'"sdp"'
op|','
string|'"2607"'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do it again, this time with a logger.'
nl|'\n'
name|'ml'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'locations'
op|'='
op|'['
nl|'\n'
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'tmpdir'
op|','
name|'mount_check'
op|'='
name|'False'
op|','
name|'logger'
op|'='
name|'ml'
op|')'
op|']'
newline|'\n'
name|'ml'
op|'.'
name|'debug'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'Skipping %s: Not a directory'"
op|'%'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"garbage"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_only_catch_expected_errors
dedent|''
dedent|''
name|'def'
name|'test_only_catch_expected_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Crazy exceptions should still escape object_audit_location_generator'
nl|'\n'
comment|"# so that errors get logged and a human can see what's going wrong;"
nl|'\n'
comment|'# only normal FS corruption should be skipped over silently.'
nl|'\n'
nl|'\n'
DECL|function|list_locations
indent|'        '
name|'def'
name|'list_locations'
op|'('
name|'dirname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|'('
name|'loc'
op|'.'
name|'path'
op|','
name|'loc'
op|'.'
name|'device'
op|','
name|'loc'
op|'.'
name|'partition'
op|','
name|'loc'
op|'.'
name|'policy'
op|')'
nl|'\n'
name|'for'
name|'loc'
name|'in'
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
nl|'\n'
name|'devices'
op|'='
name|'dirname'
op|','
name|'mount_check'
op|'='
name|'False'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'real_listdir'
op|'='
name|'os'
op|'.'
name|'listdir'
newline|'\n'
nl|'\n'
DECL|function|splode_if_endswith
name|'def'
name|'splode_if_endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
DECL|function|sploder
indent|'            '
name|'def'
name|'sploder'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
string|'"don\'t try to ad-lib"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'real_listdir'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'sploder'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdf"'
op|','
string|'"objects"'
op|','
nl|'\n'
string|'"2607"'
op|','
string|'"b54"'
op|','
nl|'\n'
string|'"fe450ec990a88cc4b252b181bab04b54"'
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'splode_if_endswith'
op|'('
string|'"sdf/objects"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'list_locations'
op|','
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'splode_if_endswith'
op|'('
string|'"2607"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'list_locations'
op|','
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'splode_if_endswith'
op|'('
string|'"b54"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'list_locations'
op|','
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_auditor_status
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_auditor_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'temptree'
op|'('
op|'['
op|']'
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdf"'
op|','
string|'"objects"'
op|','
string|'"1"'
op|','
string|'"a"'
op|','
string|'"b"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|'"sdf"'
op|','
string|'"objects"'
op|','
string|'"2"'
op|','
string|'"a"'
op|','
string|'"b"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Auditor starts, there are two partitions to check'
nl|'\n'
name|'gen'
op|'='
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
name|'tmpdir'
op|','
name|'False'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Auditor stopped for some reason without raising StopIterator in'
nl|'\n'
comment|'# the generator and restarts There is now only one remaining'
nl|'\n'
comment|'# partition to check'
nl|'\n'
name|'gen'
op|'='
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
name|'tmpdir'
op|','
name|'False'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# There are no more remaining partitions'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'StopIteration'
op|','
name|'gen'
op|'.'
name|'next'
op|')'
newline|'\n'
nl|'\n'
comment|'# There are no partitions to check if the auditor restarts another'
nl|'\n'
comment|'# time and the status files have not been cleared'
nl|'\n'
name|'gen'
op|'='
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
name|'tmpdir'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'StopIteration'
op|','
name|'gen'
op|'.'
name|'next'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset status file'
nl|'\n'
name|'diskfile'
op|'.'
name|'clear_auditor_status'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
comment|'# If the auditor restarts another time, we expect to'
nl|'\n'
comment|'# check two partitions again, because the remaining'
nl|'\n'
comment|'# partitions were empty and a new listdir was executed'
nl|'\n'
name|'gen'
op|'='
name|'diskfile'
op|'.'
name|'object_audit_location_generator'
op|'('
name|'tmpdir'
op|','
name|'False'
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDiskFileRouter
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestDiskFileRouter'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_register
indent|'    '
name|'def'
name|'test_register'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'dict'
op|'('
nl|'\n'
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'.'
name|'policy_type_to_manager_cls'
op|','
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'.'
name|'register'
op|'('
string|"'test-policy'"
op|')'
newline|'\n'
DECL|class|TestDiskFileManager
name|'class'
name|'TestDiskFileManager'
op|'('
name|'diskfile'
op|'.'
name|'DiskFileManager'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'BaseStoragePolicy'
op|'.'
name|'register'
op|'('
string|"'test-policy'"
op|')'
newline|'\n'
DECL|class|TestStoragePolicy
name|'class'
name|'TestStoragePolicy'
op|'('
name|'BaseStoragePolicy'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'patch_policies'
op|'('
op|'['
name|'TestStoragePolicy'
op|'('
number|'0'
op|','
string|"'test'"
op|')'
op|']'
op|')'
op|':'
newline|'\n'
DECL|variable|router
indent|'                '
name|'router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
op|'{'
op|'}'
op|','
name|'debug_logger'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
DECL|variable|manager
name|'manager'
op|'='
name|'router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'manager'
op|','
name|'TestDiskFileManager'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseDiskFileTestMixin
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'BaseDiskFileTestMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Bag of helpers that are useful in the per-policy DiskFile test classes.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_manager_mock
name|'def'
name|'_manager_mock'
op|'('
name|'self'
op|','
name|'manager_attribute_name'
op|','
name|'df'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr_cls'
op|'='
name|'df'
op|'.'
name|'_manager'
op|'.'
name|'__class__'
name|'if'
name|'df'
name|'else'
name|'self'
op|'.'
name|'mgr_cls'
newline|'\n'
name|'return'
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
name|'mgr_cls'
op|'.'
name|'__module__'
op|','
name|'mgr_cls'
op|'.'
name|'__name__'
op|','
name|'manager_attribute_name'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertDictContainsSubset
dedent|''
name|'def'
name|'_assertDictContainsSubset'
op|'('
name|'self'
op|','
name|'subset'
op|','
name|'dictionary'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks whether dictionary is a superset of subset."""'
newline|'\n'
comment|'# This is almost identical to the method in python3.4 version of'
nl|'\n'
comment|'# unitest.case.TestCase.assertDictContainsSubset, reproduced here to'
nl|'\n'
comment|'# avoid the deprecation warning in the original when using python3.'
nl|'\n'
name|'missing'
op|'='
op|'['
op|']'
newline|'\n'
name|'mismatched'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'subset'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'dictionary'
op|':'
newline|'\n'
indent|'                '
name|'missing'
op|'.'
name|'append'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'value'
op|'!='
name|'dictionary'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'mismatched'
op|'.'
name|'append'
op|'('
string|"'%s, expected: %s, actual: %s'"
op|'%'
nl|'\n'
op|'('
name|'safe_repr'
op|'('
name|'key'
op|')'
op|','
name|'safe_repr'
op|'('
name|'value'
op|')'
op|','
nl|'\n'
name|'safe_repr'
op|'('
name|'dictionary'
op|'['
name|'key'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
op|'('
name|'missing'
name|'or'
name|'mismatched'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'standardMsg'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'missing'
op|':'
newline|'\n'
indent|'            '
name|'standardMsg'
op|'='
string|"'Missing: %s'"
op|'%'
string|"','"
op|'.'
name|'join'
op|'('
name|'safe_repr'
op|'('
name|'m'
op|')'
name|'for'
name|'m'
name|'in'
nl|'\n'
name|'missing'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'mismatched'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'standardMsg'
op|':'
newline|'\n'
indent|'                '
name|'standardMsg'
op|'+='
string|"'; '"
newline|'\n'
dedent|''
name|'standardMsg'
op|'+='
string|"'Mismatched values: %s'"
op|'%'
string|"','"
op|'.'
name|'join'
op|'('
name|'mismatched'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
name|'self'
op|'.'
name|'_formatMessage'
op|'('
name|'msg'
op|','
name|'standardMsg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskFileManagerMixin
dedent|''
dedent|''
name|'class'
name|'DiskFileManagerMixin'
op|'('
name|'BaseDiskFileTestMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Abstract test method mixin for concrete test cases - this class\n    won\'t get picked up by test runners because it doesn\'t subclass\n    unittest.TestCase and doesn\'t have [Tt]est in the name.\n    """'
newline|'\n'
nl|'\n'
comment|'# set mgr_cls on subclasses'
nl|'\n'
DECL|variable|mgr_cls
name|'mgr_cls'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'tmp_test_obj_server_DiskFile'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existing_device1'
op|'='
string|"'sda1'"
newline|'\n'
name|'self'
op|'.'
name|'existing_device2'
op|'='
string|"'sda2'"
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device1'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'policy'
op|')'
op|')'
op|')'
newline|'\n'
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device2'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'policy'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_orig_tpool_exc'
op|'='
name|'tpool'
op|'.'
name|'execute'
newline|'\n'
name|'tpool'
op|'.'
name|'execute'
op|'='
name|'lambda'
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'dict'
op|'('
name|'devices'
op|'='
name|'self'
op|'.'
name|'testdir'
op|','
name|'mount_check'
op|'='
string|"'false'"
op|','
nl|'\n'
name|'keep_cache_size'
op|'='
number|'2'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'test-'"
op|'+'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'mgr_cls'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_diskfile
dedent|''
name|'def'
name|'_get_diskfile'
op|'('
name|'self'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'return'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_get_ondisk_files
dedent|''
name|'def'
name|'_test_get_ondisk_files'
op|'('
name|'self'
op|','
name|'scenarios'
op|','
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'policy'
op|','
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
comment|"# test => [('filename.ext', '.ext'|False, ...), ...]"
nl|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'ext'
op|'['
number|'1'
op|':'
op|']'
op|'+'
string|"'_file'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'class_under_test'
op|'.'
name|'_datadir'
op|','
name|'filename'
op|')'
nl|'\n'
name|'for'
op|'('
name|'filename'
op|','
name|'ext'
op|')'
name|'in'
op|'['
name|'v'
op|'['
op|':'
number|'2'
op|']'
name|'for'
name|'v'
name|'in'
name|'test'
op|']'
nl|'\n'
name|'if'
name|'ext'
name|'in'
op|'('
string|"'.data'"
op|','
string|"'.meta'"
op|','
string|"'.ts'"
op|')'
op|'}'
newline|'\n'
comment|'# list(zip(...)) for py3 compatibility (zip is lazy there)'
nl|'\n'
name|'files'
op|'='
name|'list'
op|'('
name|'list'
op|'('
name|'zip'
op|'('
op|'*'
name|'test'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'_order'
name|'in'
op|'('
string|"'ordered'"
op|','
string|"'shuffled'"
op|','
string|"'shuffled'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'policy'
op|','
name|'frag_index'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'actual'
op|'='
name|'class_under_test'
op|'.'
name|'_get_ondisk_files'
op|'('
name|'files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertDictContainsSubset'
op|'('
nl|'\n'
name|'expected'
op|','
name|'actual'
op|','
nl|'\n'
string|"'Expected %s from %s but got %s'"
nl|'\n'
op|'%'
op|'('
name|'expected'
op|','
name|'files'
op|','
name|'actual'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'%s with files %s'"
op|'%'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
name|'files'
op|')'
op|')'
newline|'\n'
dedent|''
name|'shuffle'
op|'('
name|'files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_hash_cleanup_listdir_files
dedent|''
dedent|''
dedent|''
name|'def'
name|'_test_hash_cleanup_listdir_files'
op|'('
name|'self'
op|','
name|'scenarios'
op|','
name|'policy'
op|','
nl|'\n'
name|'reclaim_age'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# check that expected files are left in hashdir after cleanup'
nl|'\n'
indent|'        '
name|'for'
name|'test'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
indent|'            '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# list(zip(...)) for py3 compatibility (zip is lazy there)'
nl|'\n'
name|'files'
op|'='
name|'list'
op|'('
name|'list'
op|'('
name|'zip'
op|'('
op|'*'
name|'test'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'hashdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'hashdir'
op|')'
newline|'\n'
name|'for'
name|'fname'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                '
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'hashdir'
op|','
name|'fname'
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
dedent|''
name|'expected_after_cleanup'
op|'='
name|'set'
op|'('
op|'['
name|'f'
op|'['
number|'0'
op|']'
name|'for'
name|'f'
name|'in'
name|'test'
nl|'\n'
name|'if'
op|'('
name|'f'
op|'['
number|'2'
op|']'
name|'if'
name|'len'
op|'('
name|'f'
op|')'
op|'>'
number|'2'
name|'else'
name|'f'
op|'['
number|'1'
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'reclaim_age'
op|':'
newline|'\n'
indent|'                '
name|'class_under_test'
op|'.'
name|'cleanup_ondisk_files'
op|'('
nl|'\n'
name|'hashdir'
op|','
name|'reclaim_age'
op|'='
name|'reclaim_age'
op|')'
op|'['
string|"'files'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.time'"
op|')'
name|'as'
name|'mock_time'
op|':'
newline|'\n'
comment|"# don't reclaim anything"
nl|'\n'
indent|'                    '
name|'mock_time'
op|'.'
name|'time'
op|'.'
name|'return_value'
op|'='
number|'0.0'
newline|'\n'
name|'class_under_test'
op|'.'
name|'cleanup_ondisk_files'
op|'('
name|'hashdir'
op|')'
op|'['
string|"'files'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'after_cleanup'
op|'='
name|'set'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'hashdir'
op|')'
op|')'
newline|'\n'
name|'errmsg'
op|'='
string|'"expected %r, got %r for test %r"'
op|'%'
op|'('
nl|'\n'
name|'sorted'
op|'('
name|'expected_after_cleanup'
op|')'
op|','
name|'sorted'
op|'('
name|'after_cleanup'
op|')'
op|','
name|'test'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_after_cleanup'
op|','
name|'after_cleanup'
op|','
name|'errmsg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_yield_hashes_cleanup
dedent|''
dedent|''
name|'def'
name|'_test_yield_hashes_cleanup'
op|'('
name|'self'
op|','
name|'scenarios'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
comment|'# opportunistic test to check that yield_hashes cleans up dir using'
nl|'\n'
comment|'# same scenarios as passed to _test_hash_cleanup_listdir_files'
nl|'\n'
indent|'        '
name|'for'
name|'test'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
indent|'            '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# list(zip(...)) for py3 compatibility (zip is lazy there)'
nl|'\n'
name|'files'
op|'='
name|'list'
op|'('
name|'list'
op|'('
name|'zip'
op|'('
op|'*'
name|'test'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'hashdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'dev_path'
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
nl|'\n'
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'9373a92d072897b136b3fc06595b4abc'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'hashdir'
op|')'
newline|'\n'
name|'for'
name|'fname'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                '
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'hashdir'
op|','
name|'fname'
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
dedent|''
name|'expected_after_cleanup'
op|'='
name|'set'
op|'('
op|'['
name|'f'
op|'['
number|'0'
op|']'
name|'for'
name|'f'
name|'in'
name|'test'
nl|'\n'
name|'if'
name|'f'
op|'['
number|'1'
op|']'
name|'or'
name|'len'
op|'('
name|'f'
op|')'
op|'>'
number|'2'
name|'and'
name|'f'
op|'['
number|'2'
op|']'
op|']'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.time'"
op|')'
name|'as'
name|'mock_time'
op|':'
newline|'\n'
comment|"# don't reclaim anything"
nl|'\n'
indent|'                '
name|'mock_time'
op|'.'
name|'time'
op|'.'
name|'return_value'
op|'='
number|'0.0'
newline|'\n'
name|'mocked'
op|'='
string|"'swift.obj.diskfile.BaseDiskFileManager.get_dev_path'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'mocked'
op|')'
name|'as'
name|'mock_path'
op|':'
newline|'\n'
indent|'                    '
name|'mock_path'
op|'.'
name|'return_value'
op|'='
name|'dev_path'
newline|'\n'
name|'for'
name|'_'
name|'in'
name|'class_under_test'
op|'.'
name|'yield_hashes'
op|'('
nl|'\n'
string|"'ignored'"
op|','
string|"'0'"
op|','
name|'policy'
op|','
name|'suffixes'
op|'='
op|'['
string|"'abc'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# return values are tested in test_yield_hashes_*'
nl|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'after_cleanup'
op|'='
name|'set'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'hashdir'
op|')'
op|')'
newline|'\n'
name|'errmsg'
op|'='
string|'"expected %r, got %r for test %r"'
op|'%'
op|'('
nl|'\n'
name|'sorted'
op|'('
name|'expected_after_cleanup'
op|')'
op|','
name|'sorted'
op|'('
name|'after_cleanup'
op|')'
op|','
name|'test'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_after_cleanup'
op|','
name|'after_cleanup'
op|','
name|'errmsg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_empty_dir
dedent|''
dedent|''
name|'def'
name|'test_get_ondisk_files_with_empty_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'files'
op|'='
op|'['
op|']'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'data_file'
op|'='
name|'None'
op|','
name|'meta_file'
op|'='
name|'None'
op|','
name|'ctype_file'
op|'='
name|'None'
op|','
name|'ts_file'
op|'='
name|'None'
op|')'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'frag_index'
name|'in'
op|'('
number|'0'
op|','
name|'None'
op|','
string|"'14'"
op|')'
op|':'
newline|'\n'
comment|'# check manager'
nl|'\n'
indent|'                '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'datadir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/srv/node/sdb1/'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df_mgr'
op|'.'
name|'get_ondisk_files'
op|'('
name|'files'
op|','
name|'datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertDictContainsSubset'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
comment|'# check diskfile under the hood'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'policy'
op|','
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'_get_ondisk_files'
op|'('
name|'files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertDictContainsSubset'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
comment|'# check diskfile open'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_unexpected_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_get_ondisk_files_with_unexpected_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unexpected_files'
op|'='
op|'['
string|"'junk'"
op|','
string|"'junk.data'"
op|','
string|"'.junk'"
op|']'
newline|'\n'
name|'timestamp'
op|'='
name|'next'
op|'('
name|'make_timestamp_iter'
op|'('
op|')'
op|')'
newline|'\n'
name|'tomb_file'
op|'='
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'unexpected'
name|'in'
name|'unexpected_files'
op|':'
newline|'\n'
indent|'                '
name|'files'
op|'='
op|'['
name|'unexpected'
op|','
name|'tomb_file'
op|']'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df_mgr'
op|'.'
name|'logger'
op|'='
name|'FakeLogger'
op|'('
op|')'
newline|'\n'
name|'datadir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/srv/node/sdb1/'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
name|'df_mgr'
op|'.'
name|'get_ondisk_files'
op|'('
name|'files'
op|','
name|'datadir'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'ts_file'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir'
op|','
name|'tomb_file'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_assertDictContainsSubset'
op|'('
name|'expected'
op|','
name|'results'
op|')'
newline|'\n'
nl|'\n'
name|'log_lines'
op|'='
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'log_lines'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
nl|'\n'
string|"'Unexpected file %s'"
nl|'\n'
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'datadir'
op|','
name|'unexpected'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_construct_dev_path
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_construct_dev_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res_path'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'construct_dev_path'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'devices'
op|','
string|"'abc'"
op|')'
op|','
name|'res_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pickle_async_update
dedent|''
name|'def'
name|'test_pickle_async_update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'Timestamp'
op|'('
number|'10000.0'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.write_pickle'"
op|')'
name|'as'
name|'wp'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'pickle_async_update'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
op|','
name|'ts'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'dp'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'construct_dev_path'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|')'
newline|'\n'
name|'ohash'
op|'='
name|'diskfile'
op|'.'
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
newline|'\n'
name|'wp'
op|'.'
name|'assert_called_with'
op|'('
op|'{'
string|"'a'"
op|':'
number|'1'
op|','
string|"'b'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'dp'
op|','
name|'diskfile'
op|'.'
name|'get_async_dir'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'ohash'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|','
name|'ohash'
op|'+'
string|"'-'"
op|'+'
name|'ts'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dp'
op|','
string|"'tmp'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'.'
name|'assert_called_with'
op|'('
string|"'async_pendings'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_audit_location_generator
dedent|''
name|'def'
name|'test_object_audit_location_generator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'locations'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'object_audit_location_generator'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'locations'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_replication_lock_on
dedent|''
name|'def'
name|'test_replication_lock_on'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Double check settings'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_one_per_device'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock_timeout'
op|'='
number|'0.1'
newline|'\n'
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device1'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lock_exc'
op|'='
name|'None'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'%r was not replication locked!'"
op|'%'
name|'dev_path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ReplicationLockTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'lock_exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'lock_exc'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exc'
name|'is'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_replication_lock_off
dedent|''
dedent|''
name|'def'
name|'test_replication_lock_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Double check settings'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_one_per_device'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock_timeout'
op|'='
number|'0.1'
newline|'\n'
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device1'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'dev_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lock_exc'
op|'='
name|'None'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'dev_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
string|"'%r was not replication locked!'"
op|'%'
name|'dev_path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ReplicationLockTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'lock_exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'lock_exc'
name|'is'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exc'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_replication_lock_another_device_fine
dedent|''
dedent|''
name|'def'
name|'test_replication_lock_another_device_fine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Double check settings'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_one_per_device'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock_timeout'
op|'='
number|'0.1'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lock_exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'replication_lock'
op|'('
name|'self'
op|'.'
name|'existing_device2'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ReplicationLockTimeout'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'lock_exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'lock_exc'
name|'is'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_splice_warning
dedent|''
dedent|''
name|'def'
name|'test_missing_splice_warning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'='
name|'FakeLogger'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.common.splice.splice._c_splice'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conf'
op|'['
string|"'splice'"
op|']'
op|'='
string|"'yes'"
newline|'\n'
name|'mgr'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileManager'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'logger'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'warnings'
op|'='
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'warnings'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'splice()'"
name|'in'
name|'warnings'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mgr'
op|'.'
name|'use_splice'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_dev_path_fail
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_dev_path_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
string|"'1381679759.90941.data'"
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileDeviceUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_not_dir
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_not_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'quarantine_renamer'"
op|')'
op|')'
name|'as'
name|'quarantine_renamer'
op|':'
newline|'\n'
indent|'            '
name|'osexc'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'osexc'
op|'.'
name|'errno'
op|'='
name|'errno'
op|'.'
name|'ENOTDIR'
newline|'\n'
name|'hclistdir'
op|'.'
name|'side_effect'
op|'='
name|'osexc'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNotExist'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'quarantine_renamer'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'/srv/dev/'"
op|','
nl|'\n'
string|"'/srv/dev/objects/9/900/9a7175077c01a23ade5956b8a2bba900'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_no_dir
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_no_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'osexc'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'osexc'
op|'.'
name|'errno'
op|'='
name|'errno'
op|'.'
name|'ENOENT'
newline|'\n'
name|'hclistdir'
op|'.'
name|'side_effect'
op|'='
name|'osexc'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNotExist'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_other_oserror
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_other_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'osexc'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'hclistdir'
op|'.'
name|'side_effect'
op|'='
name|'osexc'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'OSError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_no_actual_files
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_no_actual_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNotExist'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_read_metadata_problem
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_read_metadata_problem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
string|"'1381679759.90941.data'"
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'side_effect'
op|'='
name|'EOFError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNotExist'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_no_meta_name
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_no_meta_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
string|"'1381679759.90941.data'"
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|'('
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
nl|'\n'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_bad_meta_name
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_bad_meta_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
string|"'1381679759.90941.data'"
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'bad'"
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|'('
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
nl|'\n'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash
dedent|''
dedent|''
name|'def'
name|'test_get_diskfile_from_hash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
string|"'/srv/dev/'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'diskfile_cls'"
op|')'
op|')'
name|'as'
name|'dfclass'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|')'
op|')'
name|'as'
name|'hclistdir'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.read_metadata'"
op|')'
name|'as'
name|'readmeta'
op|':'
newline|'\n'
indent|'            '
name|'hclistdir'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'files'"
op|':'
op|'['
string|"'1381679759.90941.data'"
op|']'
op|'}'
newline|'\n'
name|'readmeta'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'/a/c/o'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|'('
nl|'\n'
string|"'dev'"
op|','
string|"'9'"
op|','
string|"'9a7175077c01a23ade5956b8a2bba900'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'dfclass'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|','
string|"'/srv/dev/'"
op|','
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'threadpools'
op|'['
string|"'dev'"
op|']'
op|','
string|"'9'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'hclistdir'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'/srv/dev/objects/9/900/9a7175077c01a23ade5956b8a2bba900'"
op|','
nl|'\n'
number|'604800'
op|')'
newline|'\n'
name|'readmeta'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'/srv/dev/objects/9/900/9a7175077c01a23ade5956b8a2bba900/'"
nl|'\n'
string|"'1381679759.90941.data'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_listdir_enoent
dedent|''
dedent|''
name|'def'
name|'test_listdir_enoent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oserror'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'oserror'
op|'.'
name|'errno'
op|'='
name|'errno'
op|'.'
name|'ENOENT'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'side_effect'
op|'='
name|'oserror'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'_listdir'
op|'('
string|"'path'"
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'.'
name|'mock_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_listdir_other_oserror
dedent|''
dedent|''
name|'def'
name|'test_listdir_other_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'oserror'
op|'='
name|'OSError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'side_effect'
op|'='
name|'oserror'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'_listdir'
op|'('
string|"'path'"
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|"'ERROR: Skipping %r due to error with listdir attempt: %s'"
op|','
nl|'\n'
string|"'path'"
op|','
name|'oserror'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_listdir
dedent|''
dedent|''
name|'def'
name|'test_listdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'return_value'
op|'='
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'_listdir'
op|'('
string|"'path'"
op|')'
op|','
op|'['
string|"'abc'"
op|','
string|"'def'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'.'
name|'mock_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_suffixes_dev_path_fail
dedent|''
dedent|''
name|'def'
name|'test_yield_suffixes_dev_path_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'yield_suffixes'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'9'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeviceUnavailable'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_suffixes
dedent|''
name|'def'
name|'test_yield_suffixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'_listdir'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
op|'['
nl|'\n'
string|"'abc'"
op|','
string|"'def'"
op|','
string|"'ghi'"
op|','
string|"'abcd'"
op|','
string|"'012'"
op|']'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'existing_device1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'yield_suffixes'
op|'('
name|'dev'
op|','
string|"'9'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|')'
op|','
nl|'\n'
op|'['
op|'('
name|'self'
op|'.'
name|'testdir'
op|'+'
string|"'/'"
op|'+'
name|'dev'
op|'+'
string|"'/objects/9/abc'"
op|','
string|"'abc'"
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'testdir'
op|'+'
string|"'/'"
op|'+'
name|'dev'
op|'+'
string|"'/objects/9/def'"
op|','
string|"'def'"
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'testdir'
op|'+'
string|"'/'"
op|'+'
name|'dev'
op|'+'
string|"'/objects/9/012'"
op|','
string|"'012'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_dev_path_fail
dedent|''
name|'def'
name|'test_yield_hashes_dev_path_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'yield_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'9'"
op|','
nl|'\n'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeviceUnavailable'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_empty
dedent|''
name|'def'
name|'test_yield_hashes_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_listdir
indent|'        '
name|'def'
name|'_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'_listdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'yield_hashes'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'9'"
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_empty_suffixes
dedent|''
dedent|''
name|'def'
name|'test_yield_hashes_empty_suffixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_listdir
indent|'        '
name|'def'
name|'_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'_listdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'list'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'yield_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'9'"
op|','
nl|'\n'
name|'POLICIES'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'suffixes'
op|'='
op|'['
string|"'456'"
op|']'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_yield_hashes
dedent|''
dedent|''
name|'def'
name|'_check_yield_hashes'
op|'('
name|'self'
op|','
name|'policy'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
name|'self'
op|'.'
name|'existing_device1'
newline|'\n'
name|'part'
op|'='
string|"'9'"
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'testdir'
op|','
name|'device'
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
name|'part'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_listdir
name|'def'
name|'_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|'=='
name|'part_path'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'suffix_map'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'suff'
op|','
name|'hash_map'
name|'in'
name|'suffix_map'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'path'
op|'=='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'suff'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'hash_map'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'hash_'
op|','
name|'files'
name|'in'
name|'hash_map'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'path'
op|'=='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'suff'
op|','
name|'hash_'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'files'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unexpected listdir of %r'"
op|'%'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'expected_items'
op|'='
op|'['
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'hash_'
op|'['
op|'-'
number|'3'
op|':'
op|']'
op|','
name|'hash_'
op|')'
op|','
name|'hash_'
op|','
name|'timestamps'
op|')'
nl|'\n'
name|'for'
name|'hash_'
op|','
name|'timestamps'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'_listdir'
op|')'
op|','
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.unlink'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'hash_items'
op|'='
name|'list'
op|'('
name|'df_mgr'
op|'.'
name|'yield_hashes'
op|'('
nl|'\n'
name|'device'
op|','
name|'part'
op|','
name|'policy'
op|','
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'sorted'
op|'('
name|'expected_items'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'sorted'
op|'('
name|'hash_items'
op|')'
newline|'\n'
comment|'# default list diff easiest to debug'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_tombstones
dedent|''
dedent|''
name|'def'
name|'test_yield_hashes_tombstones'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts3'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'27e'"
op|':'
op|'{'
nl|'\n'
string|"'1111111111111111111111111111127e'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
string|"'2222222222222222222222222222227e'"
op|':'
op|'['
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'d41'"
op|':'
op|'{'
nl|'\n'
string|"'aaaaaaaaaaaaaaaaaaaaaaaaaaaaad41'"
op|':'
op|'['
op|']'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'d98'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'00b'"
op|':'
op|'{'
nl|'\n'
string|"'3333333333333333333333333333300b'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'204'"
op|':'
op|'{'
nl|'\n'
string|"'bbbbbbbbbbbbbbbbbbbbbbbbbbbbb204'"
op|':'
op|'['
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'1111111111111111111111111111127e'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'.'
name|'internal'
op|'}'
op|','
nl|'\n'
string|"'2222222222222222222222222222227e'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts2'
op|'.'
name|'internal'
op|'}'
op|','
nl|'\n'
string|"'3333333333333333333333333333300b'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts3'
op|'.'
name|'internal'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'policy'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'suffixes'
op|'='
op|'['
string|"'27e'"
op|','
string|"'00b'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
newline|'\n'
DECL|class|TestDiskFileManager
name|'class'
name|'TestDiskFileManager'
op|'('
name|'DiskFileManagerMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|mgr_cls
indent|'    '
name|'mgr_cls'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileManager'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_repl_policy
name|'def'
name|'test_get_ondisk_files_with_repl_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Each scenario specifies a list of (filename, extension) tuples. If'
nl|'\n'
comment|'# extension is set then that filename should be returned by the method'
nl|'\n'
comment|'# under test for that extension type.'
nl|'\n'
indent|'        '
name|'scenarios'
op|'='
op|'['
op|'['
op|'('
string|"'0000000007.00000.data'"
op|','
string|"'.data'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# older tombstone is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# older data is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# newest meta trumps older meta'
nl|'\n'
op|'['
op|'('
string|"'0000000009.00000.meta'"
op|','
string|"'.meta'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000008.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# meta older than data is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# meta without data is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.meta'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.data'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone trumps meta and data at same timestamp'
nl|'\n'
op|'['
op|'('
string|"'0000000006.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.data'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_get_ondisk_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_hash_cleanup_listdir_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_yield_hashes_cleanup'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_stray_meta
dedent|''
name|'def'
name|'test_get_ondisk_files_with_stray_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# get_ondisk_files ignores a stray .meta file'
nl|'\n'
nl|'\n'
indent|'        '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'POLICIES'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'files'
op|'='
op|'['
string|"'0000000007.00000.meta'"
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.os.listdir'"
op|','
name|'lambda'
op|'*'
name|'args'
op|':'
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'class_under_test'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verify_ondisk_files
dedent|''
dedent|''
name|'def'
name|'test_verify_ondisk_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ._verify_ondisk_files should only return False if get_ondisk_files'
nl|'\n'
comment|'# has produced a bad set of files due to a bug, so to test it we need'
nl|'\n'
comment|'# to probe it directly.'
nl|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'ok_scenarios'
op|'='
op|'('
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
name|'None'
op|','
string|"'meta_file'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
string|"'a_file'"
op|','
string|"'meta_file'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
string|"'a_file'"
op|','
string|"'meta_file'"
op|':'
string|"'a_file'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
string|"'a_file'"
op|','
string|"'data_file'"
op|':'
name|'None'
op|','
string|"'meta_file'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'scenario'
name|'in'
name|'ok_scenarios'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mgr'
op|'.'
name|'_verify_ondisk_files'
op|'('
name|'scenario'
op|')'
op|','
nl|'\n'
string|"'Unexpected result for scenario %s'"
op|'%'
name|'scenario'
op|')'
newline|'\n'
nl|'\n'
comment|'# construct every possible invalid combination of results'
nl|'\n'
dedent|''
name|'vals'
op|'='
op|'('
name|'None'
op|','
string|"'a_file'"
op|')'
newline|'\n'
name|'for'
name|'ts_file'
op|','
name|'data_file'
op|','
name|'meta_file'
name|'in'
op|'['
nl|'\n'
op|'('
name|'a'
op|','
name|'b'
op|','
name|'c'
op|')'
name|'for'
name|'a'
name|'in'
name|'vals'
name|'for'
name|'b'
name|'in'
name|'vals'
name|'for'
name|'c'
name|'in'
name|'vals'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'scenario'
op|'='
op|'{'
nl|'\n'
string|"'ts_file'"
op|':'
name|'ts_file'
op|','
nl|'\n'
string|"'data_file'"
op|':'
name|'data_file'
op|','
nl|'\n'
string|"'meta_file'"
op|':'
name|'meta_file'
op|'}'
newline|'\n'
name|'if'
name|'scenario'
name|'in'
name|'ok_scenarios'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mgr'
op|'.'
name|'_verify_ondisk_files'
op|'('
name|'scenario'
op|')'
op|','
nl|'\n'
string|"'Unexpected result for scenario %s'"
op|'%'
name|'scenario'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_on_disk_filename
dedent|''
dedent|''
name|'def'
name|'test_parse_on_disk_filename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'for'
name|'ts'
name|'in'
op|'('
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|')'
op|','
nl|'\n'
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|','
name|'offset'
op|'='
number|'17'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'ext'
name|'in'
op|'('
string|"'.meta'"
op|','
string|"'.data'"
op|','
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'ext'
op|')'
newline|'\n'
name|'info'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'fname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'info'
op|'['
string|"'timestamp'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ext'
op|','
name|'info'
op|'['
string|"'ext'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_on_disk_filename_errors
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_parse_on_disk_filename_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|')'
name|'as'
name|'cm'
op|':'
newline|'\n'
indent|'            '
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
string|"'junk'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"Invalid Timestamp value in filename \'junk\'"'
op|','
nl|'\n'
name|'str'
op|'('
name|'cm'
op|'.'
name|'exception'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_reclaim
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_reclaim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Each scenario specifies a list of (filename, extension, [survives])'
nl|'\n'
comment|"# tuples. If extension is set or 'survives' is True, the filename"
nl|'\n'
comment|'# should still be in the dir after cleanup.'
nl|'\n'
indent|'        '
name|'much_older'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'2000'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'older'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1001'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'newer'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'900'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'scenarios'
op|'='
op|'['
op|'['
op|'('
string|"'%s.ts'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# fresh tombstone is preserved'
nl|'\n'
op|'['
op|'('
string|"'%s.ts'"
op|'%'
name|'newer'
op|','
string|"'.ts'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# .data files are not reclaimed, ever'
nl|'\n'
op|'['
op|'('
string|"'%s.data'"
op|'%'
name|'older'
op|','
string|"'.data'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
op|'['
op|'('
string|"'%s.data'"
op|'%'
name|'newer'
op|','
string|"'.data'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# ... and we could have a mixture of fresh and stale .data'
nl|'\n'
op|'['
op|'('
string|"'%s.data'"
op|'%'
name|'newer'
op|','
string|"'.data'"
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone reclaimed despite newer data'
nl|'\n'
op|'['
op|'('
string|"'%s.data'"
op|'%'
name|'newer'
op|','
string|"'.data'"
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.ts'"
op|'%'
name|'much_older'
op|','
string|"'.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone reclaimed despite junk file'
nl|'\n'
op|'['
op|'('
string|"'junk'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.ts'"
op|'%'
name|'much_older'
op|','
string|"'.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_hash_cleanup_listdir_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
nl|'\n'
name|'reclaim_age'
op|'='
number|'1000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes
dedent|''
name|'def'
name|'test_yield_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_ts'
op|'='
string|"'1383180000.12345'"
newline|'\n'
name|'fresh_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'10'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'fresher_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'old_ts'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'def'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresh_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'old_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresher_ts'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_yields_meta_timestamp
dedent|''
name|'def'
name|'test_yield_hashes_yields_meta_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts3'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
comment|'# only tombstone is yield/sync -able'
nl|'\n'
string|"'9333a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
comment|'# only latest metadata timestamp'
nl|'\n'
string|"'9444a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
comment|'# exemplary datadir with .meta'
nl|'\n'
string|"'9555a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9333a92d072897b136b3fc06595b4abc'"
op|':'
nl|'\n'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
string|"'9444a92d072897b136b3fc06595b0456'"
op|':'
nl|'\n'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
string|"'ts_meta'"
op|':'
name|'ts3'
op|'}'
op|','
nl|'\n'
string|"'9555a92d072897b136b3fc06595b7456'"
op|':'
nl|'\n'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
string|"'ts_meta'"
op|':'
name|'ts2'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_yields_content_type_timestamp
dedent|''
name|'def'
name|'test_yield_hashes_yields_content_type_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hash_'
op|'='
string|"'9373a92d072897b136b3fc06595b4abc'"
newline|'\n'
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'ts0'
op|','
name|'ts1'
op|','
name|'ts2'
op|','
name|'ts3'
op|','
name|'ts4'
op|'='
op|'('
name|'next'
op|'('
name|'ts_iter'
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'5'
op|')'
op|')'
newline|'\n'
name|'data_file'
op|'='
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
newline|'\n'
nl|'\n'
comment|'# no content-type delta'
nl|'\n'
name|'meta_file'
op|'='
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts2'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# non-zero content-type delta'
nl|'\n'
name|'delta'
op|'='
name|'ts3'
op|'.'
name|'raw'
op|'-'
name|'ts2'
op|'.'
name|'raw'
newline|'\n'
name|'meta_file'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'ts3'
op|'.'
name|'internal'
op|','
name|'delta'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts3'
op|','
nl|'\n'
string|"'ts_ctype'"
op|':'
name|'ts2'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# zero content-type delta'
nl|'\n'
name|'meta_file'
op|'='
string|"'%s+0.meta'"
op|'%'
name|'ts3'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts3'
op|','
nl|'\n'
string|"'ts_ctype'"
op|':'
name|'ts3'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# content-type in second meta file'
nl|'\n'
name|'delta'
op|'='
name|'ts3'
op|'.'
name|'raw'
op|'-'
name|'ts2'
op|'.'
name|'raw'
newline|'\n'
name|'meta_file1'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'ts3'
op|'.'
name|'internal'
op|','
name|'delta'
op|')'
newline|'\n'
name|'meta_file2'
op|'='
string|"'%s.meta'"
op|'%'
name|'ts4'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file1'
op|','
name|'meta_file2'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts4'
op|','
nl|'\n'
string|"'ts_ctype'"
op|':'
name|'ts2'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# obsolete content-type in second meta file, older than data file'
nl|'\n'
name|'delta'
op|'='
name|'ts3'
op|'.'
name|'raw'
op|'-'
name|'ts0'
op|'.'
name|'raw'
newline|'\n'
name|'meta_file1'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'ts3'
op|'.'
name|'internal'
op|','
name|'delta'
op|')'
newline|'\n'
name|'meta_file2'
op|'='
string|"'%s.meta'"
op|'%'
name|'ts4'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file1'
op|','
name|'meta_file2'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts4'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# obsolete content-type in second meta file, same time as data file'
nl|'\n'
name|'delta'
op|'='
name|'ts3'
op|'.'
name|'raw'
op|'-'
name|'ts1'
op|'.'
name|'raw'
newline|'\n'
name|'meta_file1'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'ts3'
op|'.'
name|'internal'
op|','
name|'delta'
op|')'
newline|'\n'
name|'meta_file2'
op|'='
string|"'%s.meta'"
op|'%'
name|'ts4'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
string|"'abc'"
op|':'
op|'{'
name|'hash_'
op|':'
op|'['
name|'data_file'
op|','
name|'meta_file1'
op|','
name|'meta_file2'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'hash_'
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts4'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_suffix_filter
dedent|''
name|'def'
name|'test_yield_hashes_suffix_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test again with limited suffixes'
nl|'\n'
indent|'        '
name|'old_ts'
op|'='
string|"'1383180000.12345'"
newline|'\n'
name|'fresh_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'10'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'fresher_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'old_ts'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'def'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'old_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresher_ts'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'suffixes'
op|'='
op|'['
string|"'456'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_fails_with_bad_ondisk_filesets
dedent|''
name|'def'
name|'test_yield_hashes_fails_with_bad_ondisk_filesets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595ba456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected AssertionError'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestECDiskFileManager
name|'class'
name|'TestECDiskFileManager'
op|'('
name|'DiskFileManagerMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|mgr_cls
indent|'    '
name|'mgr_cls'
op|'='
name|'diskfile'
op|'.'
name|'ECDiskFileManager'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_ec_policy
name|'def'
name|'test_get_ondisk_files_with_ec_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Each scenario specifies a list of (filename, extension, [survives])'
nl|'\n'
comment|'# tuples. If extension is set then that filename should be returned by'
nl|'\n'
comment|'# the method under test for that extension type. If the optional'
nl|'\n'
comment|"# 'survives' is True, the filename should still be in the dir after"
nl|'\n'
comment|'# cleanup.'
nl|'\n'
indent|'        '
name|'scenarios'
op|'='
op|'['
op|'['
op|'('
string|"'0000000007.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# highest frag index is chosen by default'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data with no durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data newer than tombstone with no durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
string|"'.ts'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data newer than durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000008.00000#1.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data newer than durable ignored, even if its only data'
nl|'\n'
op|'['
op|'('
string|"'0000000008.00000#1.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data older than durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000#1.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# data older than durable ignored, even if its only data'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.durable'"
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000#1.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# newer meta trumps older meta'
nl|'\n'
op|'['
op|'('
string|"'0000000009.00000.meta'"
op|','
string|"'.meta'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000008.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#14.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# older meta is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#14.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone trumps meta, data, durable at older timestamp'
nl|'\n'
op|'['
op|'('
string|"'0000000006.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000005.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000.durable'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000004.00000#0.data'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone trumps meta, data, durable at same timestamp'
nl|'\n'
op|'['
op|'('
string|"'0000000006.00000.meta'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.durable'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000#0.data'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# missing durable invalidates data'
nl|'\n'
op|'['
op|'('
string|"'0000000006.00000.meta'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_get_ondisk_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_hash_cleanup_listdir_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_yield_hashes_cleanup'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_ec_policy_and_frag_index
dedent|''
name|'def'
name|'test_get_ondisk_files_with_ec_policy_and_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Each scenario specifies a list of (filename, extension) tuples. If'
nl|'\n'
comment|'# extension is set then that filename should be returned by the method'
nl|'\n'
comment|'# under test for that extension type.'
nl|'\n'
indent|'        '
name|'scenarios'
op|'='
op|'['
op|'['
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# specific frag newer than durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000006.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# specific frag older than durable is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000008.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# specific frag older than newest durable is ignored'
nl|'\n'
comment|'# even if is also has a durable'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000008.00000#0.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000008.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# meta included when frag index is specified'
nl|'\n'
op|'['
op|'('
string|"'0000000009.00000.meta'"
op|','
string|"'.meta'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
string|"'.data'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# specific frag older than tombstone is ignored'
nl|'\n'
op|'['
op|'('
string|"'0000000009.00000.ts'"
op|','
string|"'.ts'"
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#1.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# no data file returned if specific frag index missing'
nl|'\n'
op|'['
op|'('
string|"'0000000007.00000#2.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#14.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# meta ignored if specific frag index missing'
nl|'\n'
op|'['
op|'('
string|"'0000000008.00000.meta'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#14.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000#0.data'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000007.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# meta ignored if no data files'
nl|'\n'
comment|'# Note: this is anomalous, because we are specifying a'
nl|'\n'
comment|'# frag_index, get_ondisk_files will tolerate .meta with'
nl|'\n'
comment|'# no .data'
nl|'\n'
op|'['
op|'('
string|"'0000000088.00000.meta'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'0000000077.00000.durable'"
op|','
string|"'.durable'"
op|')'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_get_ondisk_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'frag_index'
op|'='
number|'1'
op|')'
newline|'\n'
comment|'# note: not calling self._test_hash_cleanup_listdir_files(scenarios, 0)'
nl|'\n'
comment|'# here due to the anomalous scenario as commented above'
nl|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_reclaim
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_reclaim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Each scenario specifies a list of (filename, extension, [survives])'
nl|'\n'
comment|"# tuples. If extension is set or 'survives' is True, the filename"
nl|'\n'
comment|'# should still be in the dir after cleanup.'
nl|'\n'
indent|'        '
name|'much_older'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'2000'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'older'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1001'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'newer'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'900'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'scenarios'
op|'='
op|'['
op|'['
op|'('
string|"'%s.ts'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# fresh tombstone is preserved'
nl|'\n'
op|'['
op|'('
string|"'%s.ts'"
op|'%'
name|'newer'
op|','
string|"'.ts'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# isolated .durable is cleaned up immediately'
nl|'\n'
op|'['
op|'('
string|"'%s.durable'"
op|'%'
name|'newer'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# ...even when other older files are in dir'
nl|'\n'
op|'['
op|'('
string|"'%s.durable'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.ts'"
op|'%'
name|'much_older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# isolated .data files are cleaned up when stale'
nl|'\n'
op|'['
op|'('
string|"'%s#2.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# ...even when there is an older durable fileset'
nl|'\n'
op|'['
op|'('
string|"'%s#2.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#2.data'"
op|'%'
name|'much_older'
op|','
string|"'.data'"
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'much_older'
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.durable'"
op|'%'
name|'much_older'
op|','
string|"'.durable'"
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# ... but preserved if still fresh'
nl|'\n'
op|'['
op|'('
string|"'%s#2.data'"
op|'%'
name|'newer'
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'newer'
op|','
name|'False'
op|','
name|'True'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# ... and we could have a mixture of fresh and stale .data'
nl|'\n'
op|'['
op|'('
string|"'%s#2.data'"
op|'%'
name|'newer'
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone reclaimed despite newer non-durable data'
nl|'\n'
op|'['
op|'('
string|"'%s#2.data'"
op|'%'
name|'newer'
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s#4.data'"
op|'%'
name|'older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.ts'"
op|'%'
name|'much_older'
op|','
string|"'.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone reclaimed despite much older durable'
nl|'\n'
op|'['
op|'('
string|"'%s.ts'"
op|'%'
name|'older'
op|','
string|"'.ts'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.durable'"
op|'%'
name|'much_older'
op|','
name|'False'
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
nl|'\n'
comment|'# tombstone reclaimed despite junk file'
nl|'\n'
op|'['
op|'('
string|"'junk'"
op|','
name|'False'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'%s.ts'"
op|'%'
name|'much_older'
op|','
string|"'.ts'"
op|','
name|'False'
op|')'
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_hash_cleanup_listdir_files'
op|'('
name|'scenarios'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
nl|'\n'
name|'reclaim_age'
op|'='
number|'1000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ondisk_files_with_stray_meta
dedent|''
name|'def'
name|'test_get_ondisk_files_with_stray_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# get_ondisk_files ignores a stray .meta file'
nl|'\n'
indent|'        '
name|'class_under_test'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'contextmanager'
newline|'\n'
DECL|function|create_files
name|'def'
name|'create_files'
op|'('
name|'df'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'for'
name|'fname'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                '
name|'fpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'fname'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'fpath'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                    '
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'f'
op|','
op|'{'
string|"'name'"
op|':'
name|'df'
op|'.'
name|'_name'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
newline|'\n'
name|'rmtree'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'ignore_errors'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
name|'files'
op|'='
op|'['
nl|'\n'
string|"'0000000006.00000#1.data'"
op|','
nl|'\n'
string|"'0000000006.00000.durable'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'with'
name|'create_files'
op|'('
name|'class_under_test'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'class_under_test'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'scenarios'
op|'='
op|'['
op|'['
string|"'0000000007.00000.meta'"
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
string|"'0000000007.00000.meta'"
op|','
nl|'\n'
string|"'0000000006.00000.durable'"
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
string|"'0000000007.00000.meta'"
op|','
nl|'\n'
string|"'0000000006.00000#1.data'"
op|']'
op|','
nl|'\n'
nl|'\n'
op|'['
string|"'0000000007.00000.meta'"
op|','
nl|'\n'
string|"'0000000006.00000.durable'"
op|','
nl|'\n'
string|"'0000000005.00000#1.data'"
op|']'
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'files'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'create_files'
op|'('
name|'class_under_test'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'class_under_test'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
string|"'expected DiskFileNotExist opening %s with %r'"
op|'%'
op|'('
nl|'\n'
name|'class_under_test'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'files'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verify_ondisk_files
dedent|''
dedent|''
name|'def'
name|'test_verify_ondisk_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# _verify_ondisk_files should only return False if get_ondisk_files'
nl|'\n'
comment|'# has produced a bad set of files due to a bug, so to test it we need'
nl|'\n'
comment|'# to probe it directly.'
nl|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'ok_scenarios'
op|'='
op|'('
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
name|'None'
op|','
string|"'meta_file'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'durable_frag_set'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
string|"'a_file'"
op|','
string|"'meta_file'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'durable_frag_set'"
op|':'
op|'['
string|"'a_file'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
name|'None'
op|','
string|"'data_file'"
op|':'
string|"'a_file'"
op|','
string|"'meta_file'"
op|':'
string|"'a_file'"
op|','
nl|'\n'
string|"'durable_frag_set'"
op|':'
op|'['
string|"'a_file'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ts_file'"
op|':'
string|"'a_file'"
op|','
string|"'data_file'"
op|':'
name|'None'
op|','
string|"'meta_file'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'durable_frag_set'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'scenario'
name|'in'
name|'ok_scenarios'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mgr'
op|'.'
name|'_verify_ondisk_files'
op|'('
name|'scenario'
op|')'
op|','
nl|'\n'
string|"'Unexpected result for scenario %s'"
op|'%'
name|'scenario'
op|')'
newline|'\n'
nl|'\n'
comment|'# construct every possible invalid combination of results'
nl|'\n'
dedent|''
name|'vals'
op|'='
op|'('
name|'None'
op|','
string|"'a_file'"
op|')'
newline|'\n'
name|'for'
name|'ts_file'
op|','
name|'data_file'
op|','
name|'meta_file'
op|','
name|'durable_frag'
name|'in'
op|'['
nl|'\n'
op|'('
name|'a'
op|','
name|'b'
op|','
name|'c'
op|','
name|'d'
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'vals'
name|'for'
name|'b'
name|'in'
name|'vals'
name|'for'
name|'c'
name|'in'
name|'vals'
name|'for'
name|'d'
name|'in'
name|'vals'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'scenario'
op|'='
op|'{'
nl|'\n'
string|"'ts_file'"
op|':'
name|'ts_file'
op|','
nl|'\n'
string|"'data_file'"
op|':'
name|'data_file'
op|','
nl|'\n'
string|"'meta_file'"
op|':'
name|'meta_file'
op|','
nl|'\n'
string|"'durable_frag_set'"
op|':'
op|'['
name|'durable_frag'
op|']'
name|'if'
name|'durable_frag'
name|'else'
name|'None'
op|'}'
newline|'\n'
name|'if'
name|'scenario'
name|'in'
name|'ok_scenarios'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mgr'
op|'.'
name|'_verify_ondisk_files'
op|'('
name|'scenario'
op|')'
op|','
nl|'\n'
string|"'Unexpected result for scenario %s'"
op|'%'
name|'scenario'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_on_disk_filename
dedent|''
dedent|''
name|'def'
name|'test_parse_on_disk_filename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'for'
name|'ts'
name|'in'
op|'('
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|')'
op|','
nl|'\n'
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|','
name|'offset'
op|'='
number|'17'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'frag'
name|'in'
op|'('
number|'0'
op|','
number|'2'
op|','
number|'14'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'frag'
op|')'
newline|'\n'
name|'info'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'fname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'info'
op|'['
string|"'timestamp'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'.data'"
op|','
name|'info'
op|'['
string|"'ext'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'frag'
op|','
name|'info'
op|'['
string|"'frag_index'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
op|'**'
name|'info'
op|')'
op|','
name|'fname'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'ext'
name|'in'
op|'('
string|"'.meta'"
op|','
string|"'.durable'"
op|','
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'ext'
op|')'
newline|'\n'
name|'info'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'fname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'info'
op|'['
string|"'timestamp'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ext'
op|','
name|'info'
op|'['
string|"'ext'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'info'
op|'['
string|"'frag_index'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
op|'**'
name|'info'
op|')'
op|','
name|'fname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_on_disk_filename_errors
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_parse_on_disk_filename_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'for'
name|'ts'
name|'in'
op|'('
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|')'
op|','
nl|'\n'
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|','
name|'offset'
op|'='
number|'17'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
string|"'%s.data'"
op|'%'
name|'ts'
op|'.'
name|'internal'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|')'
name|'as'
name|'cm'
op|':'
newline|'\n'
indent|'                '
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'fname'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'str'
op|'('
name|'cm'
op|'.'
name|'exception'
op|')'
op|'.'
name|'startswith'
op|'('
string|'"Bad fragment index"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"''"
op|':'
string|"'bad'"
op|','
nl|'\n'
string|"'foo'"
op|':'
string|"'bad'"
op|','
nl|'\n'
string|"'1.314'"
op|':'
string|"'bad'"
op|','
nl|'\n'
number|'1.314'
op|':'
string|"'bad'"
op|','
nl|'\n'
op|'-'
number|'2'
op|':'
string|"'negative'"
op|','
nl|'\n'
string|"'-2'"
op|':'
string|"'negative'"
op|','
nl|'\n'
name|'None'
op|':'
string|"'bad'"
op|','
nl|'\n'
string|"'None'"
op|':'
string|"'bad'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'frag'
op|','
name|'msg'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'frag'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|')'
name|'as'
name|'cm'
op|':'
newline|'\n'
indent|'                    '
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'fname'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'msg'
op|','
name|'str'
op|'('
name|'cm'
op|'.'
name|'exception'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|')'
name|'as'
name|'cm'
op|':'
newline|'\n'
indent|'            '
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
string|"'junk'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"Invalid Timestamp value in filename \'junk\'"'
op|','
nl|'\n'
name|'str'
op|'('
name|'cm'
op|'.'
name|'exception'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_make_on_disk_filename
dedent|''
name|'def'
name|'test_make_on_disk_filename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'for'
name|'ts'
name|'in'
op|'('
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|')'
op|','
nl|'\n'
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|','
name|'offset'
op|'='
number|'17'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'frag'
name|'in'
op|'('
number|'0'
op|','
string|"'0'"
op|','
number|'2'
op|','
string|"'2'"
op|','
number|'14'
op|','
string|"'14'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'frag'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
nl|'\n'
name|'ts'
op|','
string|"'.data'"
op|','
name|'frag_index'
op|'='
name|'frag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'actual'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parsed'
op|','
op|'{'
nl|'\n'
string|"'timestamp'"
op|':'
name|'ts'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'int'
op|'('
name|'frag'
op|')'
op|','
nl|'\n'
string|"'ext'"
op|':'
string|"'.data'"
op|','
nl|'\n'
string|"'ctype_timestamp'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
newline|'\n'
comment|'# these functions are inverse'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
op|'**'
name|'parsed'
op|')'
op|','
nl|'\n'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ext'
name|'in'
op|'('
string|"'.meta'"
op|','
string|"'.durable'"
op|','
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'expected'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'ext'
op|')'
newline|'\n'
comment|'# frag index should not be required'
nl|'\n'
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
name|'ts'
op|','
name|'ext'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
comment|'# frag index should be ignored'
nl|'\n'
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
nl|'\n'
name|'ts'
op|','
name|'ext'
op|','
name|'frag_index'
op|'='
name|'frag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'actual'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parsed'
op|','
op|'{'
nl|'\n'
string|"'timestamp'"
op|':'
name|'ts'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ext'"
op|':'
name|'ext'
op|','
nl|'\n'
string|"'ctype_timestamp'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
newline|'\n'
comment|'# these functions are inverse'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
op|'**'
name|'parsed'
op|')'
op|','
nl|'\n'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_make_on_disk_filename_with_bad_frag_index
dedent|''
dedent|''
name|'def'
name|'test_make_on_disk_filename_with_bad_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'ts'
op|'='
name|'Timestamp'
op|'('
string|"'1234567890.00001'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# .data requires a frag_index kwarg'
nl|'\n'
indent|'            '
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
name|'ts'
op|','
string|"'.data'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected DiskFileError for missing frag_index'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'frag'
name|'in'
op|'('
name|'None'
op|','
string|"'foo'"
op|','
string|"'1.314'"
op|','
number|'1.314'
op|','
op|'-'
number|'2'
op|','
string|"'-2'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
name|'ts'
op|','
string|"'.data'"
op|','
name|'frag_index'
op|'='
name|'frag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected DiskFileError for frag_index %s'"
op|'%'
name|'frag'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'for'
name|'ext'
name|'in'
op|'('
string|"'.meta'"
op|','
string|"'.durable'"
op|','
string|"'.ts'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'ts'
op|'.'
name|'internal'
op|','
name|'ext'
op|')'
newline|'\n'
comment|'# bad frag index should be ignored'
nl|'\n'
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
name|'ts'
op|','
name|'ext'
op|','
name|'frag_index'
op|'='
name|'frag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_make_on_disk_filename_for_meta_with_content_type
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_make_on_disk_filename_for_meta_with_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# verify .meta filename encodes content-type timestamp'
nl|'\n'
indent|'        '
name|'mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'time_'
op|'='
number|'1234567890.00001'
newline|'\n'
name|'for'
name|'delta'
name|'in'
op|'('
number|'0.0'
op|','
number|'.00001'
op|','
number|'1.11111'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t_meta'
op|'='
name|'Timestamp'
op|'('
name|'time_'
op|')'
newline|'\n'
name|'t_type'
op|'='
name|'Timestamp'
op|'('
name|'time_'
op|'-'
name|'delta'
op|')'
newline|'\n'
name|'sign'
op|'='
string|"'-'"
name|'if'
name|'delta'
name|'else'
string|"'+'"
newline|'\n'
name|'expected'
op|'='
string|"'%s%s%x.meta'"
op|'%'
op|'('
name|'t_meta'
op|'.'
name|'short'
op|','
name|'sign'
op|','
number|'100000'
op|'*'
name|'delta'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
nl|'\n'
name|'t_meta'
op|','
string|"'.meta'"
op|','
name|'ctype_timestamp'
op|'='
name|'t_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'mgr'
op|'.'
name|'parse_on_disk_filename'
op|'('
name|'actual'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parsed'
op|','
op|'{'
nl|'\n'
string|"'timestamp'"
op|':'
name|'t_meta'
op|','
nl|'\n'
string|"'frag_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ext'"
op|':'
string|"'.meta'"
op|','
nl|'\n'
string|"'ctype_timestamp'"
op|':'
name|'t_type'
nl|'\n'
op|'}'
op|')'
newline|'\n'
comment|'# these functions are inverse'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'mgr'
op|'.'
name|'make_on_disk_filename'
op|'('
op|'**'
name|'parsed'
op|')'
op|','
nl|'\n'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes
dedent|''
dedent|''
name|'def'
name|'test_yield_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_ts'
op|'='
string|"'1383180000.12345'"
newline|'\n'
name|'fresh_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'10'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'fresher_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'old_ts'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'old_ts'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'def'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresh_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'old_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresher_ts'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_yields_meta_timestamp
dedent|''
name|'def'
name|'test_yield_hashes_yields_meta_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts3'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts3'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts2'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# but meta timestamp is *not* returned if specified frag index'
nl|'\n'
comment|'# is not found'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_suffix_filter
dedent|''
name|'def'
name|'test_yield_hashes_suffix_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test again with limited suffixes'
nl|'\n'
indent|'        '
name|'old_ts'
op|'='
string|"'1383180000.12345'"
newline|'\n'
name|'fresh_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'10'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'fresher_ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'abc'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b4abc'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'old_ts'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'old_ts'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'fresh_ts'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'fresher_ts'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'def'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'old_ts'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'fresher_ts'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'suffixes'
op|'='
op|'['
string|"'456'"
op|']'
op|','
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_skips_missing_durable
dedent|''
name|'def'
name|'test_yield_hashes_skips_missing_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# if we add a durable it shows up'
nl|'\n'
name|'suffix_map'
op|'['
string|"'456'"
op|']'
op|'['
string|"'9373a92d072897b136b3fc06595b7456'"
op|']'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
string|"'9373a92d072897b136b3fc06595b7456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_skips_data_without_durable
dedent|''
name|'def'
name|'test_yield_hashes_skips_data_without_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts3'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# if we add a durable then newer data shows up'
nl|'\n'
name|'suffix_map'
op|'['
string|"'456'"
op|']'
op|'['
string|"'9373a92d072897b136b3fc06595b0456'"
op|']'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9373a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts2'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_ignores_bad_ondisk_filesets
dedent|''
name|'def'
name|'test_yield_hashes_ignores_bad_ondisk_filesets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# this differs from DiskFileManager.yield_hashes which will fail'
nl|'\n'
comment|'# when encountering a bad on-disk file set'
nl|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'456'"
op|':'
op|'{'
nl|'\n'
comment|'# this one is fine'
nl|'\n'
string|"'9333a92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
comment|'# missing frag index'
nl|'\n'
string|"'9444a92d072897b136b3fc06595b7456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|']'
op|','
nl|'\n'
comment|'# junk'
nl|'\n'
string|"'9555a92d072897b136b3fc06595b8456'"
op|':'
op|'['
nl|'\n'
string|"'junk_file'"
op|']'
op|','
nl|'\n'
comment|'# missing .durable'
nl|'\n'
string|"'9666a92d072897b136b3fc06595b9456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
comment|"# .meta files w/o .data files can't be opened, and are ignored"
nl|'\n'
string|"'9777a92d072897b136b3fc06595ba456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
comment|'# multiple meta files with no data'
nl|'\n'
string|"'9888a92d072897b136b3fc06595bb456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
comment|'# this is good with meta'
nl|'\n'
string|"'9999a92d072897b136b3fc06595bb456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|']'
op|','
nl|'\n'
comment|'# this one is wrong frag index'
nl|'\n'
string|"'9aaaa92d072897b136b3fc06595b0456'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#7.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'9333a92d072897b136b3fc06595b0456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
string|"'9999a92d072897b136b3fc06595bb456'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|','
nl|'\n'
string|"'ts_meta'"
op|':'
name|'ts2'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_yield_hashes_filters_frag_index
dedent|''
name|'def'
name|'test_yield_hashes_filters_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'ts1'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'ts3'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'suffix_map'
op|'='
op|'{'
nl|'\n'
string|"'27e'"
op|':'
op|'{'
nl|'\n'
string|"'1111111111111111111111111111127e'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#3.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'2222222222222222222222222222227e'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'d41'"
op|':'
op|'{'
nl|'\n'
string|"'aaaaaaaaaaaaaaaaaaaaaaaaaaaaad41'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#3.data'"
op|','
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'00b'"
op|':'
op|'{'
nl|'\n'
string|"'3333333333333333333333333333300b'"
op|':'
op|'['
nl|'\n'
name|'ts1'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts2'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts3'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'1111111111111111111111111111127e'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts1'
op|'}'
op|','
nl|'\n'
string|"'2222222222222222222222222222227e'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts2'
op|'}'
op|','
nl|'\n'
string|"'3333333333333333333333333333300b'"
op|':'
op|'{'
string|"'ts_data'"
op|':'
name|'ts3'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_check_yield_hashes'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'suffix_map'
op|','
name|'expected'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diskfile_from_hash_frag_index_filter
dedent|''
name|'def'
name|'test_get_diskfile_from_hash_frag_index_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_diskfile'
op|'('
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'hash_'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
nl|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|','
nl|'\n'
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'0'"
op|','
name|'hash_'
op|','
nl|'\n'
name|'POLICIES'
op|'.'
name|'default'
op|')'
comment|'# sanity'
newline|'\n'
name|'frag_index'
op|'='
number|'7'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'frag_index'
name|'in'
op|'('
number|'4'
op|','
number|'7'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
string|"'test_data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'str'
op|'('
name|'frag_index'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'df4'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'0'"
op|','
name|'hash_'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df4'
op|'.'
name|'_frag_index'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'df4'
op|'.'
name|'read_metadata'
op|'('
op|')'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
op|','
string|"'4'"
op|')'
newline|'\n'
name|'df7'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_hash'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device1'
op|','
string|"'0'"
op|','
name|'hash_'
op|','
name|'POLICIES'
op|'.'
name|'default'
op|','
name|'frag_index'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df7'
op|'.'
name|'_frag_index'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'df7'
op|'.'
name|'read_metadata'
op|'('
op|')'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
op|','
string|"'7'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskFileMixin
dedent|''
dedent|''
name|'class'
name|'DiskFileMixin'
op|'('
name|'BaseDiskFileTestMixin'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# set mgr_cls on subclasses'
nl|'\n'
DECL|variable|mgr_cls
indent|'    '
name|'mgr_cls'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up for testing swift.obj.diskfile"""'
newline|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|'='
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'tmpdir'
op|','
string|"'tmp_test_obj_server_DiskFile'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existing_device'
op|'='
string|"'sda1'"
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'mkdirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'policy'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_orig_tpool_exc'
op|'='
name|'tpool'
op|'.'
name|'execute'
newline|'\n'
name|'tpool'
op|'.'
name|'execute'
op|'='
name|'lambda'
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'dict'
op|'('
name|'devices'
op|'='
name|'self'
op|'.'
name|'testdir'
op|','
name|'mount_check'
op|'='
string|"'false'"
op|','
nl|'\n'
name|'keep_cache_size'
op|'='
number|'2'
op|'*'
number|'1024'
op|','
name|'mb_per_sync'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'test-'"
op|'+'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'mgr_cls'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
nl|'\n'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ts
dedent|''
name|'def'
name|'ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Timestamps - forever.\n        """'
newline|'\n'
name|'return'
name|'next'
op|'('
name|'self'
op|'.'
name|'_ts_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tear down for testing swift.obj.diskfile"""'
newline|'\n'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tmpdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
name|'tpool'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'_orig_tpool_exc'
newline|'\n'
nl|'\n'
DECL|member|_create_ondisk_file
dedent|''
name|'def'
name|'_create_ondisk_file'
op|'('
name|'self'
op|','
name|'df'
op|','
name|'data'
op|','
name|'timestamp'
op|','
name|'metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'ctype_timestamp'
op|'='
name|'None'
op|','
nl|'\n'
name|'ext'
op|'='
string|"'.data'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mkdirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'if'
name|'timestamp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
dedent|''
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
string|"'X-Timestamp'"
name|'not'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
dedent|''
name|'if'
string|"'ETag'"
name|'not'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'etag'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'etag'
op|'.'
name|'update'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'['
string|"'ETag'"
op|']'
op|'='
name|'etag'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'name'"
name|'not'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'name'"
op|']'
op|'='
string|"'/a/c/o'"
newline|'\n'
dedent|''
name|'if'
string|"'Content-Length'"
name|'not'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'Content-Length'"
op|']'
op|'='
name|'str'
op|'('
name|'len'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
dedent|''
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'ext'
op|'=='
string|"'.data'"
name|'and'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'='
string|"'%s#%s'"
op|'%'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'_frag_index'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'ctype_timestamp'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
string|"'Content-Type-Timestamp'"
op|':'
nl|'\n'
name|'Timestamp'
op|'('
name|'ctype_timestamp'
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'encode_timestamps'
op|'('
name|'timestamp'
op|','
nl|'\n'
name|'Timestamp'
op|'('
name|'ctype_timestamp'
op|')'
op|','
nl|'\n'
name|'explicit'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'data_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'filename'
op|'+'
name|'ext'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'data_file'
op|','
string|"'wb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'xattr'
op|'.'
name|'setxattr'
op|'('
name|'f'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'diskfile'
op|'.'
name|'METADATA_KEY'
op|','
nl|'\n'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'metadata'
op|','
name|'diskfile'
op|'.'
name|'PICKLE_PROTOCOL'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_simple_get_diskfile
dedent|''
dedent|''
name|'def'
name|'_simple_get_diskfile'
op|'('
name|'self'
op|','
name|'partition'
op|'='
string|"'0'"
op|','
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o'"
op|','
name|'policy'
op|'='
name|'None'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'policy'
name|'or'
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
name|'and'
name|'frag_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'frag_index'
op|'='
number|'2'
newline|'\n'
dedent|''
name|'return'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
name|'partition'
op|','
nl|'\n'
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_test_file
dedent|''
name|'def'
name|'_create_test_file'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'timestamp'
op|'='
name|'None'
op|','
name|'metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
name|'obj'
op|'='
string|"'o'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'metadata'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'metadata'
op|'.'
name|'setdefault'
op|'('
string|"'name'"
op|','
string|"'/%s/%s/%s'"
op|'%'
op|'('
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|')'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
name|'account'
op|','
name|'container'
op|'='
name|'container'
op|','
nl|'\n'
name|'obj'
op|'='
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'timestamp'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
dedent|''
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'new_metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'new_metadata'
op|'.'
name|'update'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'new_metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'return'
name|'df'
newline|'\n'
nl|'\n'
DECL|member|test_get_dev_path
dedent|''
name|'def'
name|'test_get_dev_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'devices'
op|'='
string|"'/srv'"
newline|'\n'
name|'device'
op|'='
string|"'sda1'"
newline|'\n'
name|'dev_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'devices'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
name|'mount_check'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'mount_check'
op|'='
name|'True'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'False'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'True'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'dev_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'mount_check'
op|'='
name|'False'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_dir'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'False'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_dir'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'True'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'dev_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mount_check'
op|'='
name|'True'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'False'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'return_value'
op|'='
name|'True'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'dev_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mount_check'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_dev_path'
op|'('
name|'device'
op|','
name|'mount_check'
op|')'
op|','
nl|'\n'
name|'dev_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_not_exist
dedent|''
name|'def'
name|'test_open_not_exist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_expired
dedent|''
name|'def'
name|'test_open_expired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileExpired'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_test_file'
op|','
nl|'\n'
string|"'1234567890'"
op|','
name|'metadata'
op|'='
op|'{'
string|"'X-Delete-At'"
op|':'
string|"'0'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_not_expired
dedent|''
name|'def'
name|'test_open_not_expired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_test_file'
op|'('
nl|'\n'
string|"'1234567890'"
op|','
name|'metadata'
op|'='
op|'{'
string|"'X-Delete-At'"
op|':'
name|'str'
op|'('
number|'2'
op|'*'
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SwiftException'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected swift exception raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_metadata
dedent|''
dedent|''
name|'def'
name|'test_get_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|')'
newline|'\n'
name|'md'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_metadata
dedent|''
name|'def'
name|'test_read_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'md'
op|'='
name|'df'
op|'.'
name|'read_metadata'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_metadata_no_xattr
dedent|''
name|'def'
name|'test_read_metadata_no_xattr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|mock_getxattr
indent|'        '
name|'def'
name|'mock_getxattr'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'error_num'
op|'='
name|'errno'
op|'.'
name|'ENOTSUP'
name|'if'
name|'hasattr'
op|'('
name|'errno'
op|','
string|"'ENOTSUP'"
op|')'
name|'else'
name|'errno'
op|'.'
name|'EOPNOTSUPP'
newline|'\n'
name|'raise'
name|'IOError'
op|'('
name|'error_num'
op|','
string|'"Operation not supported"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'xattr.getxattr'"
op|','
name|'mock_getxattr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileXattrNotSupported'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'read_metadata'
op|','
string|"'n/a'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_metadata_not_opened
dedent|''
dedent|''
name|'def'
name|'test_get_metadata_not_opened'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_datafile_metadata
dedent|''
dedent|''
name|'def'
name|'test_get_datafile_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
string|"'1234567890'"
newline|'\n'
name|'ts_data'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Object-Meta-Test'"
op|':'
string|"'test1'"
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Test'"
op|':'
string|"'test1'"
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
name|'body'
op|','
name|'timestamp'
op|'='
name|'ts_data'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
newline|'\n'
name|'ts_meta'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_meta'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-Test'"
op|':'
string|"'changed'"
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Test'"
op|':'
string|"'ignored'"
op|'}'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'df'
op|'.'
name|'get_datafile_metadata'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'update'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_meta'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-Test'"
op|':'
string|"'changed'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_datafile_metadata_not_opened
dedent|''
name|'def'
name|'test_get_datafile_metadata_not_opened'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'get_datafile_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_metafile_metadata
dedent|''
dedent|''
name|'def'
name|'test_get_metafile_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
string|"'1234567890'"
newline|'\n'
name|'ts_data'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Object-Meta-Test'"
op|':'
string|"'test1'"
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Test'"
op|':'
string|"'test1'"
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
name|'body'
op|','
name|'timestamp'
op|'='
name|'ts_data'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'df'
op|'.'
name|'get_metafile_metadata'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# now create a meta file'
nl|'\n'
name|'ts_meta'
op|'='
name|'next'
op|'('
name|'ts_iter'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_meta'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-Test'"
op|':'
string|"'changed'"
op|'}'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_meta'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-Test'"
op|':'
string|"'changed'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'df'
op|'.'
name|'get_metafile_metadata'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_metafile_metadata_not_opened
dedent|''
name|'def'
name|'test_get_metafile_metadata_not_opened'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'get_metafile_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_not_opened
dedent|''
dedent|''
name|'def'
name|'test_not_opened'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'df'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_default_disallowed_metadata
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_disk_file_default_disallowed_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# build an object with some meta (at t0+1s)'
nl|'\n'
indent|'        '
name|'orig_metadata'
op|'='
op|'{'
string|"'X-Object-Meta-Key1'"
op|':'
string|"'Value1'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'text/garbage'"
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'orig_metadata'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1024'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Length'"
op|']'
op|')'
newline|'\n'
comment|"# write some new metadata (fast POST, don't send orig meta, at t0+1)"
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-Key2'"
op|':'
string|"'Value2'"
op|'}'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# non-fast-post updateable keys are preserved'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'text/garbage'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Type'"
op|']'
op|')'
newline|'\n'
comment|'# original fast-post updateable keys are removed'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'X-Object-Meta-Key1'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
comment|'# new fast-post updateable keys are added'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Value2'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Object-Meta-Key2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_preserves_sysmeta
dedent|''
dedent|''
name|'def'
name|'test_disk_file_preserves_sysmeta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# build an object with some meta (at t0)'
nl|'\n'
indent|'        '
name|'orig_metadata'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Key1'"
op|':'
string|"'Value1'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'text/garbage'"
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'orig_metadata'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1024'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Length'"
op|']'
op|')'
newline|'\n'
comment|"# write some new metadata (fast POST, don't send orig meta, at t0+1s)"
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Key1'"
op|':'
string|"'Value2'"
op|','
nl|'\n'
string|"'X-Object-Meta-Key3'"
op|':'
string|"'Value3'"
op|'}'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# non-fast-post updateable keys are preserved'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'text/garbage'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Type'"
op|']'
op|')'
newline|'\n'
comment|'# original sysmeta keys are preserved'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Value1'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Object-Sysmeta-Key1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_reader_iter
dedent|''
dedent|''
name|'def'
name|'test_disk_file_reader_iter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'reader'
op|')'
op|','
string|"'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_reader_iter_w_quarantine
dedent|''
name|'def'
name|'test_disk_file_reader_iter_w_quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|raise_dfq
name|'def'
name|'raise_dfq'
op|'('
name|'m'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DiskFileQuarantined'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'raise_dfq'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_obj_size'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileQuarantined'
op|','
string|"''"
op|'.'
name|'join'
op|','
name|'reader'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_corners
dedent|''
name|'def'
name|'test_disk_file_app_iter_corners'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'reader'
op|'.'
name|'app_iter_range'
op|'('
number|'0'
op|','
name|'None'
op|')'
op|')'
op|','
nl|'\n'
string|"'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'reader'
op|'.'
name|'app_iter_range'
op|'('
number|'5'
op|','
name|'None'
op|')'
op|')'
op|','
string|"'67890'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_range_w_none
dedent|''
dedent|''
name|'def'
name|'test_disk_file_app_iter_range_w_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'reader'
op|'.'
name|'app_iter_range'
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
op|','
nl|'\n'
string|"'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_partial_closes
dedent|''
name|'def'
name|'test_disk_file_app_iter_partial_closes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_range'
op|'('
number|'0'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
op|','
string|"'12345'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reader'
op|'.'
name|'_fp'
name|'is'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_ranges
dedent|''
name|'def'
name|'test_disk_file_app_iter_ranges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'012345678911234567892123456789'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|'('
number|'0'
op|','
number|'10'
op|')'
op|','
op|'('
number|'10'
op|','
number|'20'
op|')'
op|','
op|'('
number|'20'
op|','
number|'30'
op|')'
op|']'
op|','
nl|'\n'
string|"'plain/text'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'30'
op|')'
newline|'\n'
name|'value'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'0123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'1123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'2123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_ranges_w_quarantine
dedent|''
name|'def'
name|'test_disk_file_app_iter_ranges_w_quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'012345678911234567892123456789'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_obj_size'
op|'+='
number|'1'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|'('
number|'0'
op|','
number|'30'
op|')'
op|']'
op|','
nl|'\n'
string|"'plain/text'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'30'
op|')'
newline|'\n'
name|'value'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'0123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'1123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'2123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
nl|'\n'
op|'['
string|'"Bytes read: 30, does not match metadata: 31"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_ranges_w_no_etag_quarantine
dedent|''
name|'def'
name|'test_disk_file_app_iter_ranges_w_no_etag_quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'012345678911234567892123456789'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|'('
number|'0'
op|','
number|'10'
op|')'
op|']'
op|','
nl|'\n'
string|"'plain/text'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'30'
op|')'
newline|'\n'
name|'value'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'0123456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_ranges_edges
dedent|''
name|'def'
name|'test_disk_file_app_iter_ranges_edges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'012345678911234567892123456789'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|'('
number|'3'
op|','
number|'10'
op|')'
op|','
op|'('
number|'0'
op|','
number|'2'
op|')'
op|']'
op|','
string|"'application/whatever'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'30'
op|')'
newline|'\n'
name|'value'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'3456789'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'01'"
op|','
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_large_app_iter_ranges
dedent|''
name|'def'
name|'test_disk_file_large_app_iter_ranges'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This test case is to make sure that the disk file app_iter_ranges'
nl|'\n'
comment|'# method all the paths being tested.'
nl|'\n'
indent|'        '
name|'long_str'
op|'='
string|"'01234567890'"
op|'*'
number|'65536'
newline|'\n'
name|'target_strs'
op|'='
op|'['
string|"'3456789'"
op|','
name|'long_str'
op|'['
number|'0'
op|':'
number|'65590'
op|']'
op|']'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
name|'long_str'
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|'('
number|'3'
op|','
number|'10'
op|')'
op|','
op|'('
number|'0'
op|','
number|'65590'
op|')'
op|']'
op|','
string|"'plain/text'"
op|','
nl|'\n'
string|"'5e816ff8b8b8e9a5d355497e5d9e0301'"
op|','
number|'655360'
op|')'
newline|'\n'
nl|'\n'
comment|'# The produced string actually missing the MIME headers'
nl|'\n'
comment|'# need to add these headers to make it as real MIME message.'
nl|'\n'
comment|'# The body of the message is produced by method app_iter_ranges'
nl|'\n'
comment|'# off of DiskFile object.'
nl|'\n'
name|'header'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'Content-Type: multipart/byteranges;'"
op|','
nl|'\n'
string|"'boundary='"
op|','
nl|'\n'
string|"'5e816ff8b8b8e9a5d355497e5d9e0301\\r\\n'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'value'
op|'='
name|'header'
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'parts'
op|'='
name|'map'
op|'('
name|'lambda'
name|'p'
op|':'
name|'p'
op|'.'
name|'get_payload'
op|'('
name|'decode'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'email'
op|'.'
name|'message_from_string'
op|'('
name|'value'
op|')'
op|'.'
name|'walk'
op|'('
op|')'
op|')'
op|'['
number|'1'
op|':'
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parts'
op|','
name|'target_strs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_app_iter_ranges_empty
dedent|''
name|'def'
name|'test_disk_file_app_iter_ranges_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This test case tests when empty value passed into app_iter_ranges'
nl|'\n'
comment|'# When ranges passed into the method is either empty array or None,'
nl|'\n'
comment|'# this method will yield empty string'
nl|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'012345678911234567892123456789'"
op|')'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
op|'['
op|']'
op|','
string|"'application/whatever'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'100'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'it'
op|'='
name|'reader'
op|'.'
name|'app_iter_ranges'
op|'('
name|'None'
op|','
string|"'app/something'"
op|','
nl|'\n'
string|"'\\r\\n--someheader\\r\\n'"
op|','
number|'150'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'it'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quarantine_msgs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disk_file_mkstemp_creates_dir
dedent|''
dedent|''
name|'def'
name|'test_disk_file_mkstemp_creates_dir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'tmpdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_tmp_dir'
op|'('
name|'policy'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tmpdir'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_open_disk_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_open_disk_file'
op|'('
name|'self'
op|','
name|'invalid_type'
op|'='
name|'None'
op|','
name|'obj_name'
op|'='
string|"'o'"
op|','
name|'fsize'
op|'='
number|'1024'
op|','
nl|'\n'
name|'csize'
op|'='
number|'8'
op|','
name|'mark_deleted'
op|'='
name|'False'
op|','
name|'prealloc'
op|'='
name|'False'
op|','
nl|'\n'
name|'ts'
op|'='
name|'None'
op|','
name|'mount_check'
op|'='
name|'False'
op|','
name|'extra_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'policy'
op|'='
name|'None'
op|','
name|'frag_index'
op|'='
name|'None'
op|','
name|'data'
op|'='
name|'None'
op|','
nl|'\n'
name|'commit'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''returns a DiskFile'''"
newline|'\n'
name|'policy'
op|'='
name|'policy'
name|'or'
name|'POLICIES'
op|'.'
name|'legacy'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'obj'
op|'='
name|'obj_name'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'data'
op|'='
name|'data'
name|'or'
string|"'0'"
op|'*'
name|'fsize'
newline|'\n'
name|'etag'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ts'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'ts'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'prealloc'
op|':'
newline|'\n'
indent|'            '
name|'prealloc_size'
op|'='
name|'fsize'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'prealloc_size'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
name|'prealloc_size'
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'upload_size'
op|'='
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'etag'
op|'.'
name|'update'
op|'('
name|'data'
op|')'
newline|'\n'
name|'etag'
op|'='
name|'etag'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'etag'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'str'
op|'('
name|'upload_size'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'metadata'
op|'.'
name|'update'
op|'('
name|'extra_metadata'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'if'
name|'invalid_type'
op|'=='
string|"'ETag'"
op|':'
newline|'\n'
indent|'                '
name|'etag'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'etag'
op|'.'
name|'update'
op|'('
string|"'1'"
op|'+'
string|"'0'"
op|'*'
op|'('
name|'fsize'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'etag'
op|'='
name|'etag'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'['
string|"'ETag'"
op|']'
op|'='
name|'etag'
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'writer'
op|'.'
name|'_fd'
op|','
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Content-Length'"
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'['
string|"'Content-Length'"
op|']'
op|'='
name|'fsize'
op|'-'
number|'1'
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'writer'
op|'.'
name|'_fd'
op|','
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Bad-Content-Length'"
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'['
string|"'Content-Length'"
op|']'
op|'='
string|"'zero'"
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'writer'
op|'.'
name|'_fd'
op|','
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Missing-Content-Length'"
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'metadata'
op|'['
string|"'Content-Length'"
op|']'
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'writer'
op|'.'
name|'_fd'
op|','
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Bad-X-Delete-At'"
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'['
string|"'X-Delete-At'"
op|']'
op|'='
string|"'bad integer'"
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'writer'
op|'.'
name|'_fd'
op|','
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'commit'
op|':'
newline|'\n'
indent|'                '
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'mark_deleted'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'data_files'
op|'='
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'fname'
op|')'
nl|'\n'
name|'for'
name|'fname'
name|'in'
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|','
nl|'\n'
name|'reverse'
op|'='
name|'True'
op|')'
nl|'\n'
name|'if'
name|'fname'
op|'.'
name|'endswith'
op|'('
string|"'.data'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'invalid_type'
op|'=='
string|"'Corrupt-Xattrs'"
op|':'
newline|'\n'
comment|'# We have to go below read_metadata/write_metadata to get proper'
nl|'\n'
comment|'# corruption.'
nl|'\n'
indent|'            '
name|'meta_xattr'
op|'='
name|'xattr'
op|'.'
name|'getxattr'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
string|'"user.swift.metadata"'
op|')'
newline|'\n'
name|'wrong_byte'
op|'='
string|"'X'"
name|'if'
name|'meta_xattr'
op|'['
number|'0'
op|']'
op|'!='
string|"'X'"
name|'else'
string|"'Y'"
newline|'\n'
name|'xattr'
op|'.'
name|'setxattr'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
string|'"user.swift.metadata"'
op|','
nl|'\n'
name|'wrong_byte'
op|'+'
name|'meta_xattr'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Truncated-Xattrs'"
op|':'
newline|'\n'
indent|'            '
name|'meta_xattr'
op|'='
name|'xattr'
op|'.'
name|'getxattr'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
string|'"user.swift.metadata"'
op|')'
newline|'\n'
name|'xattr'
op|'.'
name|'setxattr'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
string|'"user.swift.metadata"'
op|','
nl|'\n'
name|'meta_xattr'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Missing-Name'"
op|':'
newline|'\n'
indent|'            '
name|'md'
op|'='
name|'diskfile'
op|'.'
name|'read_metadata'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'del'
name|'md'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
name|'md'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'invalid_type'
op|'=='
string|"'Bad-Name'"
op|':'
newline|'\n'
indent|'            '
name|'md'
op|'='
name|'diskfile'
op|'.'
name|'read_metadata'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'md'
op|'['
string|"'name'"
op|']'
op|'='
name|'md'
op|'['
string|"'name'"
op|']'
op|'+'
string|"'garbage'"
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'data_files'
op|'['
number|'0'
op|']'
op|','
name|'md'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conf'
op|'['
string|"'disk_chunk_size'"
op|']'
op|'='
name|'csize'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'['
string|"'mount_check'"
op|']'
op|'='
name|'mount_check'
newline|'\n'
name|'self'
op|'.'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'mgr_cls'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'df_router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
nl|'\n'
comment|'# actual on disk frag_index may have been set by metadata'
nl|'\n'
name|'frag_index'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|','
nl|'\n'
name|'frag_index'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'obj'
op|'='
name|'obj_name'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'invalid_type'
op|'=='
string|"'Zero-Byte'"
op|':'
newline|'\n'
indent|'            '
name|'fp'
op|'='
name|'open'
op|'('
name|'df'
op|'.'
name|'_data_file'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'df'
op|'.'
name|'unit_test_len'
op|'='
name|'fsize'
newline|'\n'
name|'return'
name|'df'
newline|'\n'
nl|'\n'
DECL|member|test_keep_cache
dedent|''
name|'def'
name|'test_keep_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'65'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.drop_buffer_cache"'
op|')'
name|'as'
name|'foo'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'_'
name|'in'
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'foo'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'65'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.drop_buffer_cache"'
op|')'
name|'as'
name|'bar'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'_'
name|'in'
name|'df'
op|'.'
name|'reader'
op|'('
name|'keep_cache'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'bar'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'65'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.drop_buffer_cache"'
op|')'
name|'as'
name|'boo'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'_'
name|'in'
name|'df'
op|'.'
name|'reader'
op|'('
name|'keep_cache'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'boo'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'5'
op|'*'
number|'1024'
op|','
name|'csize'
op|'='
number|'256'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.drop_buffer_cache"'
op|')'
name|'as'
name|'goo'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'_'
name|'in'
name|'df'
op|'.'
name|'reader'
op|'('
name|'keep_cache'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'goo'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_valids
dedent|''
dedent|''
name|'def'
name|'test_quarantine_valids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|verify
indent|'        '
name|'def'
name|'verify'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'reader'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileQuarantined'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Unexpected quarantining occurred: args=%r, kwargs=%r"'
op|'%'
op|'('
nl|'\n'
name|'args'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'verify'
op|'('
name|'obj_name'
op|'='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'verify'
op|'('
name|'obj_name'
op|'='
string|"'2'"
op|','
name|'csize'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'verify'
op|'('
name|'obj_name'
op|'='
string|"'3'"
op|','
name|'csize'
op|'='
number|'100000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_quarantine_invalids
dedent|''
name|'def'
name|'run_quarantine_invalids'
op|'('
name|'self'
op|','
name|'invalid_type'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|verify
indent|'        '
name|'def'
name|'verify'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'open_exc'
op|'='
name|'invalid_type'
name|'in'
op|'('
string|"'Content-Length'"
op|','
string|"'Bad-Content-Length'"
op|','
nl|'\n'
string|"'Corrupt-Xattrs'"
op|','
string|"'Truncated-Xattrs'"
op|','
nl|'\n'
string|"'Missing-Name'"
op|','
string|"'Bad-X-Delete-At'"
op|')'
newline|'\n'
name|'open_collision'
op|'='
name|'invalid_type'
op|'=='
string|"'Bad-Name'"
newline|'\n'
name|'reader'
op|'='
name|'None'
newline|'\n'
name|'quarantine_msgs'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
name|'_quarantine_hook'
op|'='
name|'quarantine_msgs'
op|'.'
name|'append'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileQuarantined'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'open_exc'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Unexpected DiskFileQuarantine raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileCollision'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'open_collision'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Unexpected DiskFileCollision raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'open_exc'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileQuarantine exception"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'chunk'
name|'in'
name|'reader'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileQuarantined'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected DiskFileQuarantine raised: :%r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'open_exc'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'quarantine_msgs'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'verify'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'verify'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'2'"
op|','
name|'csize'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'verify'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'3'"
op|','
name|'csize'
op|'='
number|'100000'
op|')'
newline|'\n'
nl|'\n'
name|'verify'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|verify_air
name|'def'
name|'verify_air'
op|'('
name|'params'
op|','
name|'start'
op|'='
number|'0'
op|','
name|'adjustment'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""verify (a)pp (i)ter (r)ange"""'
newline|'\n'
name|'open_exc'
op|'='
name|'invalid_type'
name|'in'
op|'('
string|"'Content-Length'"
op|','
string|"'Bad-Content-Length'"
op|','
nl|'\n'
string|"'Corrupt-Xattrs'"
op|','
string|"'Truncated-Xattrs'"
op|','
nl|'\n'
string|"'Missing-Name'"
op|','
string|"'Bad-X-Delete-At'"
op|')'
newline|'\n'
name|'open_collision'
op|'='
name|'invalid_type'
op|'=='
string|"'Bad-Name'"
newline|'\n'
name|'reader'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|'**'
name|'params'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileQuarantined'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'open_exc'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Unexpected DiskFileQuarantine raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileCollision'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'open_collision'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
nl|'\n'
string|'"Unexpected DiskFileCollision raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'open_exc'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileQuarantine exception"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'chunk'
name|'in'
name|'reader'
op|'.'
name|'app_iter_range'
op|'('
nl|'\n'
name|'start'
op|','
nl|'\n'
name|'df'
op|'.'
name|'unit_test_len'
op|'+'
name|'adjustment'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileQuarantined'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected DiskFileQuarantine raised: :%r"'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'verify_air'
op|'('
name|'dict'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'5'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'verify_air'
op|'('
name|'dict'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'6'"
op|')'
op|','
number|'0'
op|','
number|'100'
op|')'
newline|'\n'
nl|'\n'
name|'verify_air'
op|'('
name|'dict'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'7'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'verify_air'
op|'('
name|'dict'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'8'"
op|')'
op|','
number|'0'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'verify_air'
op|'('
name|'dict'
op|'('
name|'invalid_type'
op|'='
name|'invalid_type'
op|','
name|'obj_name'
op|'='
string|"'8'"
op|')'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_corrupt_xattrs
dedent|''
name|'def'
name|'test_quarantine_corrupt_xattrs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Corrupt-Xattrs'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_truncated_xattrs
dedent|''
name|'def'
name|'test_quarantine_truncated_xattrs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Truncated-Xattrs'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_etag
dedent|''
name|'def'
name|'test_quarantine_invalid_etag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'ETag'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_missing_name
dedent|''
name|'def'
name|'test_quarantine_invalid_missing_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Missing-Name'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_bad_name
dedent|''
name|'def'
name|'test_quarantine_invalid_bad_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Bad-Name'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_bad_x_delete_at
dedent|''
name|'def'
name|'test_quarantine_invalid_bad_x_delete_at'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Bad-X-Delete-At'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_content_length
dedent|''
name|'def'
name|'test_quarantine_invalid_content_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Content-Length'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_content_length_bad
dedent|''
name|'def'
name|'test_quarantine_invalid_content_length_bad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Bad-Content-Length'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_invalid_zero_byte
dedent|''
name|'def'
name|'test_quarantine_invalid_zero_byte'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'run_quarantine_invalids'
op|'('
string|"'Zero-Byte'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_deleted_files
dedent|''
name|'def'
name|'test_quarantine_deleted_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'invalid_type'
op|'='
string|"'Content-Length'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileQuarantined'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileQuarantined exception"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'invalid_type'
op|'='
string|"'Content-Length'"
op|','
nl|'\n'
name|'mark_deleted'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileQuarantined'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected DiskFileQuarantined exception"'
nl|'\n'
string|'" encountered: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileNotExist exception"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'invalid_type'
op|'='
string|"'Content-Length'"
op|','
nl|'\n'
name|'mark_deleted'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileNotExist exception"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_missing_content_length
dedent|''
dedent|''
name|'def'
name|'test_quarantine_missing_content_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileQuarantined'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|','
nl|'\n'
name|'invalid_type'
op|'='
string|"'Missing-Content-Length'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_bad_content_length
dedent|''
name|'def'
name|'test_quarantine_bad_content_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileQuarantined'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|','
nl|'\n'
name|'invalid_type'
op|'='
string|"'Bad-Content-Length'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_fstat_oserror
dedent|''
name|'def'
name|'test_quarantine_fstat_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'invocations'
op|'='
op|'['
number|'0'
op|']'
newline|'\n'
name|'orig_os_fstat'
op|'='
name|'os'
op|'.'
name|'fstat'
newline|'\n'
nl|'\n'
DECL|function|bad_fstat
name|'def'
name|'bad_fstat'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'invocations'
op|'['
number|'0'
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'invocations'
op|'['
number|'0'
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
comment|'# FIXME - yes, this an icky way to get code coverage ... worth'
nl|'\n'
comment|'# it?'
nl|'\n'
indent|'                '
name|'raise'
name|'OSError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'orig_os_fstat'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.fstat'"
op|','
name|'bad_fstat'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileQuarantined'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quarantine_hashdir_not_a_directory
dedent|''
dedent|''
name|'def'
name|'test_quarantine_hashdir_not_a_directory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'account'
op|'='
string|'"abc"'
op|','
nl|'\n'
name|'container'
op|'='
string|"'123'"
op|','
name|'obj'
op|'='
string|"'xyz'"
op|')'
newline|'\n'
name|'hashdir'
op|'='
name|'df'
op|'.'
name|'_datadir'
newline|'\n'
name|'rmtree'
op|'('
name|'hashdir'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'hashdir'
op|','
string|"'w'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileQuarantined'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure the right thing got quarantined; the suffix dir should not'
nl|'\n'
comment|'# have moved, as that could have many objects in it'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashdir'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'hashdir'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_prealloc
dedent|''
name|'def'
name|'test_create_prealloc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.fallocate"'
op|')'
name|'as'
name|'fa'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'used_fd'
op|'='
name|'writer'
op|'.'
name|'_fd'
newline|'\n'
dedent|''
dedent|''
name|'fa'
op|'.'
name|'assert_called_with'
op|'('
name|'used_fd'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_prealloc_oserror
dedent|''
name|'def'
name|'test_create_prealloc_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'for'
name|'e'
name|'in'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
name|'errno'
op|'.'
name|'EDQUOT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.fallocate"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
nl|'\n'
name|'e'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'e'
op|')'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileNoSpace'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception DiskFileNoSpace"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Other OSErrors must not be raised as DiskFileNoSpace'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.fallocate"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
nl|'\n'
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception OSError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_mkstemp_no_space
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_mkstemp_no_space'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'for'
name|'e'
name|'in'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
name|'errno'
op|'.'
name|'EDQUOT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.mkstemp"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
nl|'\n'
name|'e'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'e'
op|')'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileNoSpace'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception DiskFileNoSpace"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Other OSErrors must not be raised as DiskFileNoSpace'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.mkstemp"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
nl|'\n'
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception OSError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_close_oserror
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_close_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.os.close"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
nl|'\n'
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'200'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected exception raised: %r"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_write_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|','
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.meta'"
op|'%'
name|'timestamp'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_with_content_type
dedent|''
name|'def'
name|'test_write_metadata_with_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if metadata has content-type then its time should be in file name'
nl|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s+0.meta'"
op|'%'
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exp_name'
name|'in'
name|'set'
op|'('
name|'dl'
op|')'
op|','
nl|'\n'
string|"'Expected file %s not found in %s'"
op|'%'
op|'('
name|'exp_name'
op|','
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_with_older_content_type
dedent|''
name|'def'
name|'test_write_metadata_with_older_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if metadata has content-type then its time should be in file name'
nl|'\n'
indent|'        '
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'timestamp2'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|','
name|'dl'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'timestamp2'
op|'.'
name|'raw'
op|'-'
name|'timestamp'
op|'.'
name|'raw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exp_name'
name|'in'
name|'set'
op|'('
name|'dl'
op|')'
op|','
nl|'\n'
string|"'Expected file %s not found in %s'"
op|'%'
op|'('
name|'exp_name'
op|','
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_with_content_type_removes_same_time_meta
dedent|''
name|'def'
name|'test_write_metadata_with_content_type_removes_same_time_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# a meta file without content-type should be cleaned up in favour of'
nl|'\n'
comment|'# a meta file at same time with content-type'
nl|'\n'
indent|'        '
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'timestamp2'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|','
name|'dl'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'timestamp2'
op|'.'
name|'raw'
op|'-'
name|'timestamp'
op|'.'
name|'raw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exp_name'
name|'in'
name|'set'
op|'('
name|'dl'
op|')'
op|','
nl|'\n'
string|"'Expected file %s not found in %s'"
op|'%'
op|'('
name|'exp_name'
op|','
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_with_content_type_removes_multiple_metas
dedent|''
name|'def'
name|'test_write_metadata_with_content_type_removes_multiple_metas'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# a combination of a meta file without content-type and an older meta'
nl|'\n'
comment|'# file with content-type should be cleaned up in favour of a meta file'
nl|'\n'
comment|'# at newer time with content-type'
nl|'\n'
indent|'        '
name|'ts_iter'
op|'='
name|'make_timestamp_iter'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
string|"'1234567890'"
op|','
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'timestamp2'
op|'='
name|'ts_iter'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'2'
op|','
name|'dl'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|','
name|'dl'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s-%x.meta'"
op|'%'
op|'('
name|'timestamp2'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'timestamp2'
op|'.'
name|'raw'
op|'-'
name|'timestamp'
op|'.'
name|'raw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'exp_name'
name|'in'
name|'set'
op|'('
name|'dl'
op|')'
op|','
nl|'\n'
string|"'Expected file %s not found in %s'"
op|'%'
op|'('
name|'exp_name'
op|','
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_no_xattr
dedent|''
name|'def'
name|'test_write_metadata_no_xattr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|','
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|mock_setxattr
name|'def'
name|'mock_setxattr'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'error_num'
op|'='
name|'errno'
op|'.'
name|'ENOTSUP'
name|'if'
name|'hasattr'
op|'('
name|'errno'
op|','
string|"'ENOTSUP'"
op|')'
name|'else'
name|'errno'
op|'.'
name|'EOPNOTSUPP'
newline|'\n'
name|'raise'
name|'IOError'
op|'('
name|'error_num'
op|','
string|'"Operation not supported"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'xattr.setxattr'"
op|','
name|'mock_setxattr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileXattrNotSupported'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|','
string|"'n/a'"
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_metadata_disk_full
dedent|''
dedent|''
name|'def'
name|'test_write_metadata_disk_full'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|','
string|"'X-Object-Meta-test'"
op|':'
string|"'data'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|mock_setxattr_ENOSPC
name|'def'
name|'mock_setxattr_ENOSPC'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
string|'"No space left on device"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|mock_setxattr_EDQUOT
dedent|''
name|'def'
name|'mock_setxattr_EDQUOT'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IOError'
op|'('
name|'errno'
op|'.'
name|'EDQUOT'
op|','
string|'"Exceeded quota"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'xattr.setxattr'"
op|','
name|'mock_setxattr_ENOSPC'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNoSpace'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|','
string|"'n/a'"
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'xattr.setxattr'"
op|','
name|'mock_setxattr_EDQUOT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileNoSpace'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|','
string|"'n/a'"
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_diskfile_dir
dedent|''
dedent|''
name|'def'
name|'_create_diskfile_dir'
op|'('
name|'self'
op|','
name|'timestamp'
op|','
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_%s'"
op|'%'
name|'policy'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'['
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|']'
op|'='
name|'df'
op|'.'
name|'_frag_index'
name|'or'
number|'7'
newline|'\n'
dedent|''
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'writer'
op|'.'
name|'_datadir'
newline|'\n'
nl|'\n'
DECL|member|test_commit
dedent|''
name|'def'
name|'test_commit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
comment|'# create first fileset as starting state'
nl|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'datadir'
op|'='
name|'self'
op|'.'
name|'_create_diskfile_dir'
op|'('
name|'timestamp'
op|','
name|'policy'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'datadir'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s.data'"
op|'%'
name|'timestamp'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
op|'['
string|"'%s#2.data'"
op|'%'
name|'timestamp'
op|','
nl|'\n'
string|"'%s.durable'"
op|'%'
name|'timestamp'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'len'
op|'('
name|'expected'
op|')'
op|','
nl|'\n'
string|"'Unexpected dir listing %s'"
op|'%'
name|'dl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_cleanup
dedent|''
dedent|''
name|'def'
name|'test_write_cleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
comment|'# create first fileset as starting state'
nl|'\n'
indent|'            '
name|'timestamp_1'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'datadir_1'
op|'='
name|'self'
op|'.'
name|'_create_diskfile_dir'
op|'('
name|'timestamp_1'
op|','
name|'policy'
op|')'
newline|'\n'
comment|'# second write should clean up first fileset'
nl|'\n'
name|'timestamp_2'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'+'
number|'1'
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'datadir_2'
op|'='
name|'self'
op|'.'
name|'_create_diskfile_dir'
op|'('
name|'timestamp_2'
op|','
name|'policy'
op|')'
newline|'\n'
comment|'# sanity check'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'datadir_1'
op|','
name|'datadir_2'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'datadir_2'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s.data'"
op|'%'
name|'timestamp_2'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
op|'['
string|"'%s#2.data'"
op|'%'
name|'timestamp_2'
op|','
nl|'\n'
string|"'%s.durable'"
op|'%'
name|'timestamp_2'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'len'
op|'('
name|'expected'
op|')'
op|','
nl|'\n'
string|"'Unexpected dir listing %s'"
op|'%'
name|'dl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_commit_fsync
dedent|''
dedent|''
name|'def'
name|'test_commit_fsync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'mock_fsync'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.fsync'"
op|','
name|'mock_fsync'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
number|'1'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'mock_fsync'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'mock_fsync'
op|'.'
name|'call_args'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'int'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_commit_ignores_hash_cleanup_listdir_error
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_commit_ignores_hash_cleanup_listdir_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
comment|'# Check OSError from hash_cleanup_listdir is caught and ignored'
nl|'\n'
indent|'            '
name|'mock_hcl'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_hcl_error'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|','
name|'mock_hcl'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
number|'1'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s.data'"
op|'%'
name|'timestamp'
op|'.'
name|'internal'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
op|'['
string|"'%s#2.data'"
op|'%'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'%s.durable'"
op|'%'
name|'timestamp'
op|'.'
name|'internal'
op|']'
newline|'\n'
dedent|''
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'len'
op|'('
name|'expected'
op|')'
op|','
nl|'\n'
string|"'Unexpected dir listing %s'"
op|'%'
name|'dl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_number_calls_to_hash_cleanup_listdir_during_create
dedent|''
dedent|''
name|'def'
name|'test_number_calls_to_hash_cleanup_listdir_during_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Check how many calls are made to hash_cleanup_listdir, and when,'
nl|'\n'
comment|'# during put(), commit() sequence'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'('
number|'0'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'('
number|'1'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_hcl_error'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|')'
name|'as'
name|'mock_hcl'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
number|'0'
op|']'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|')'
name|'as'
name|'mock_hcl'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
number|'1'
op|']'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_number_calls_to_hash_cleanup_listdir_during_delete
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_number_calls_to_hash_cleanup_listdir_during_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Check how many calls are made to hash_cleanup_listdir, and when,'
nl|'\n'
comment|'# for delete() and necessary prerequisite steps'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'('
number|'0'
op|','
number|'1'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'('
number|'1'
op|','
number|'0'
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_hcl_error'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|')'
name|'as'
name|'mock_hcl'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
number|'0'
op|']'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|')'
name|'as'
name|'mock_hcl'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
number|'1'
op|']'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
nl|'\n'
string|"'cleanup_ondisk_files'"
op|','
name|'df'
op|')'
op|')'
name|'as'
name|'mock_hcl'
op|':'
newline|'\n'
indent|'                    '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
number|'2'
op|']'
op|','
name|'mock_hcl'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
string|"'1'"
op|'}'
newline|'\n'
name|'fi'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'fi'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'fi'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'ts'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'ts'
op|'.'
name|'internal'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
comment|'# cleanup before next policy'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'exp_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_deleted
dedent|''
dedent|''
name|'def'
name|'test_open_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'str'
op|'('
name|'Timestamp'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileDeleted'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_deleted_with_corrupt_tombstone
dedent|''
name|'def'
name|'test_open_deleted_with_corrupt_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'str'
op|'('
name|'Timestamp'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
comment|"# it's pickle-format, so removing the last byte is sufficient to"
nl|'\n'
comment|'# corrupt it'
nl|'\n'
name|'ts_fullpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'exp_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'ts_fullpath'
op|')'
op|')'
comment|'# sanity check'
newline|'\n'
name|'meta_xattr'
op|'='
name|'xattr'
op|'.'
name|'getxattr'
op|'('
name|'ts_fullpath'
op|','
string|'"user.swift.metadata"'
op|')'
newline|'\n'
name|'xattr'
op|'.'
name|'setxattr'
op|'('
name|'ts_fullpath'
op|','
string|'"user.swift.metadata"'
op|','
name|'meta_xattr'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'ts_fullpath'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_audit_location
dedent|''
name|'def'
name|'test_from_audit_location'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hashdir'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
nl|'\n'
string|"'blah blah'"
op|','
nl|'\n'
name|'account'
op|'='
string|"'three'"
op|','
name|'container'
op|'='
string|"'blind'"
op|','
name|'obj'
op|'='
string|"'mice'"
op|')'
op|'.'
name|'_datadir'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_audit_location'
op|'('
nl|'\n'
name|'diskfile'
op|'.'
name|'AuditLocation'
op|'('
name|'hashdir'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_name'
op|','
string|"'/three/blind/mice'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_audit_location_with_mismatched_hash
dedent|''
name|'def'
name|'test_from_audit_location_with_mismatched_hash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hashdir'
op|'='
name|'self'
op|'.'
name|'_create_test_file'
op|'('
nl|'\n'
string|"'blah blah'"
op|','
nl|'\n'
name|'account'
op|'='
string|"'this'"
op|','
name|'container'
op|'='
string|"'is'"
op|','
name|'obj'
op|'='
string|"'right'"
op|')'
op|'.'
name|'_datadir'
newline|'\n'
name|'datafilename'
op|'='
op|'['
name|'f'
name|'for'
name|'f'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'hashdir'
op|')'
nl|'\n'
name|'if'
name|'f'
op|'.'
name|'endswith'
op|'('
string|"'.data'"
op|')'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'datafile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'hashdir'
op|','
name|'datafilename'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'diskfile'
op|'.'
name|'read_metadata'
op|'('
name|'datafile'
op|')'
newline|'\n'
name|'meta'
op|'['
string|"'name'"
op|']'
op|'='
string|"'/this/is/wrong'"
newline|'\n'
name|'diskfile'
op|'.'
name|'write_metadata'
op|'('
name|'datafile'
op|','
name|'meta'
op|')'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile_from_audit_location'
op|'('
nl|'\n'
name|'diskfile'
op|'.'
name|'AuditLocation'
op|'('
name|'hashdir'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileQuarantined'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_close_error
dedent|''
name|'def'
name|'test_close_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|mock_handle_close_quarantine
indent|'        '
name|'def'
name|'mock_handle_close_quarantine'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Bad"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'2'
op|','
name|'csize'
op|'='
number|'1024'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_handle_close_quarantine'
op|'='
name|'mock_handle_close_quarantine'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'reader'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# close is called at the end of the iterator'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reader'
op|'.'
name|'_fp'
op|','
name|'None'
op|')'
newline|'\n'
name|'error_lines'
op|'='
name|'df'
op|'.'
name|'_logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'error_lines'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'close failure'"
op|','
name|'error_lines'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'Bad'"
op|','
name|'error_lines'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mount_checking
dedent|''
name|'def'
name|'test_mount_checking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_mock_cm
indent|'        '
name|'def'
name|'_mock_cm'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.common.constraints.check_mount"'
op|','
name|'_mock_cm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileDeviceUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|','
nl|'\n'
name|'mount_check'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_ts_meta_data
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_ts_meta_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'d'
op|'.'
name|'timestamp'
op|','
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileDeleted exception"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_meta_ts_data
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_meta_ts_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'d'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'d'
op|'.'
name|'timestamp'
op|','
name|'Timestamp'
op|'('
number|'8'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected DiskFileDeleted exception"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_meta_data_ts
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_meta_data_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'X-Timestamp'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
nl|'\n'
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'deleted'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_multiple_meta_data
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_multiple_meta_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'10'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Object-Meta-User'"
op|':'
string|"'user-meta'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'9'
op|','
nl|'\n'
name|'ctype_timestamp'
op|'='
number|'9'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'newest'"
op|','
nl|'\n'
string|"'X-Object-Meta-User'"
op|':'
string|"'blah'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'8'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'newer'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'7'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'oldest'"
op|'}'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Timestamp'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
nl|'\n'
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Content-Type'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Type'"
op|']'
op|','
string|"'newest'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Object-Meta-User'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Object-Meta-User'"
op|']'
op|','
string|"'user-meta'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_stale_meta_data
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_stale_meta_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'10'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Object-Meta-User'"
op|':'
string|"'user-meta'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'9'
op|','
nl|'\n'
name|'ctype_timestamp'
op|'='
number|'7'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'older'"
op|','
nl|'\n'
string|"'X-Object-Meta-User'"
op|':'
string|"'blah'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'8'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'newer'"
op|'}'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Timestamp'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
nl|'\n'
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'Content-Type'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'Content-Type'"
op|']'
op|','
string|"'newer'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'X-Object-Meta-User'"
name|'in'
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Object-Meta-User'"
op|']'
op|','
string|"'user-meta'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_data_ts_meta
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_data_ts_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'X-Timestamp'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
nl|'\n'
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'deleted'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_wayward_files_ignored
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_wayward_files_ignored'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'X'"
op|','
name|'ext'
op|'='
string|"'.bar'"
op|','
name|'timestamp'
op|'='
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'X-Timestamp'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'_metadata'
op|'['
string|"'X-Timestamp'"
op|']'
op|','
nl|'\n'
name|'Timestamp'
op|'('
number|'10'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'deleted'"
op|','
name|'df'
op|'.'
name|'_metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ondisk_search_loop_listdir_error
dedent|''
dedent|''
name|'def'
name|'test_ondisk_search_loop_listdir_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|mock_listdir_exp
name|'def'
name|'mock_listdir_exp'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.listdir"'
op|','
name|'mock_listdir_exp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'X'"
op|','
name|'ext'
op|'='
string|"'.bar'"
op|','
name|'timestamp'
op|'='
number|'11'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'B'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"'A'"
op|','
name|'ext'
op|'='
string|"'.data'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
name|'if'
name|'df'
op|'.'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.durable'"
op|','
name|'timestamp'
op|'='
number|'9'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.ts'"
op|','
name|'timestamp'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_ondisk_file'
op|'('
name|'df'
op|','
string|"''"
op|','
name|'ext'
op|'='
string|"'.meta'"
op|','
name|'timestamp'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_exception_in_handle_close_quarantine
dedent|''
dedent|''
name|'def'
name|'test_exception_in_handle_close_quarantine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|blow_up
name|'def'
name|'blow_up'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'a very special error'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'_handle_close_quarantine'
op|'='
name|'blow_up'
newline|'\n'
name|'for'
name|'_'
name|'in'
name|'reader'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'reader'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'log_lines'
op|'='
name|'df'
op|'.'
name|'_logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'a very special error'"
op|','
name|'log_lines'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_names
dedent|''
name|'def'
name|'test_diskfile_names'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'account'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'container'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'obj'
op|','
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_content_length_not_open
dedent|''
name|'def'
name|'test_diskfile_content_length_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'content_length'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotOpen'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_content_length_deleted
dedent|''
name|'def'
name|'test_diskfile_content_length_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'str'
op|'('
name|'Timestamp'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'.'
name|'content_length'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_content_length
dedent|''
name|'def'
name|'test_diskfile_content_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'content_length'
op|','
number|'1024'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_timestamp_not_open
dedent|''
dedent|''
name|'def'
name|'test_diskfile_timestamp_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'timestamp'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotOpen'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_timestamp_deleted
dedent|''
name|'def'
name|'test_diskfile_timestamp_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'str'
op|'('
name|'Timestamp'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'exc'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'.'
name|'timestamp'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileDeleted'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'exc'
op|'='
name|'err'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diskfile_timestamp
dedent|''
name|'def'
name|'test_diskfile_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'timestamp'
op|','
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
dedent|''
name|'ts_2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_2'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'timestamp'
op|','
name|'ts_2'
op|'.'
name|'internal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_data_timestamp
dedent|''
dedent|''
name|'def'
name|'test_data_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'data_timestamp'
op|','
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
dedent|''
name|'ts_2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_2'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'data_timestamp'
op|','
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_data_timestamp_not_open
dedent|''
dedent|''
name|'def'
name|'test_data_timestamp_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'data_timestamp'
newline|'\n'
nl|'\n'
DECL|member|test_content_type_and_timestamp
dedent|''
dedent|''
name|'def'
name|'test_content_type_and_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
op|'{'
string|"'Content-Type'"
op|':'
string|"'image/jpeg'"
op|'}'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'data_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'content_type_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'image/jpeg'"
op|','
name|'df'
op|'.'
name|'content_type'
op|')'
newline|'\n'
dedent|''
name|'ts_2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'ts_3'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_3'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'image/gif'"
op|','
nl|'\n'
string|"'Content-Type-Timestamp'"
op|':'
name|'ts_2'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'data_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_3'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts_2'
op|'.'
name|'internal'
op|','
name|'df'
op|'.'
name|'content_type_timestamp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'image/gif'"
op|','
name|'df'
op|'.'
name|'content_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_content_type_timestamp_not_open
dedent|''
dedent|''
name|'def'
name|'test_content_type_timestamp_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'content_type_timestamp'
newline|'\n'
nl|'\n'
DECL|member|test_content_type_not_open
dedent|''
dedent|''
name|'def'
name|'test_content_type_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'content_type'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp
dedent|''
dedent|''
name|'def'
name|'test_durable_timestamp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'durable_timestamp'
op|','
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
comment|'# verify durable timestamp does not change when metadata is written'
nl|'\n'
dedent|''
name|'ts_2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts_2'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'durable_timestamp'
op|','
name|'ts_1'
op|'.'
name|'internal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp_not_open
dedent|''
dedent|''
name|'def'
name|'test_durable_timestamp_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotOpen'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'durable_timestamp'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp_no_data_file
dedent|''
dedent|''
name|'def'
name|'test_durable_timestamp_no_data_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'f'
op|'.'
name|'endswith'
op|'('
string|"'.data'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'f'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
comment|'# open() was attempted, but no data file so expect None'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'df'
op|'.'
name|'durable_timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_error_in_hash_cleanup_listdir
dedent|''
name|'def'
name|'test_error_in_hash_cleanup_listdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|mock_hcl
indent|'        '
name|'def'
name|'mock_hcl'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OSError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
op|')'
newline|'\n'
name|'file_count'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
name|'self'
op|'.'
name|'_manager_mock'
op|'('
string|"'cleanup_ondisk_files'"
op|')'
op|','
name|'mock_hcl'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"OSError raised when it should have been swallowed"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'exp_name'
op|'='
string|"'%s.ts'"
op|'%'
name|'str'
op|'('
name|'Timestamp'
op|'('
name|'ts'
op|')'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'file_count'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_name'
op|','
name|'set'
op|'('
name|'dl'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_system_can_zero_copy
dedent|''
name|'def'
name|'_system_can_zero_copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'splice'
op|'.'
name|'available'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'get_md5_socket'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|test_zero_copy_cache_dropping
dedent|''
name|'def'
name|'test_zero_copy_cache_dropping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_system_can_zero_copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
string|'"zero-copy support is missing"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conf'
op|'['
string|"'splice'"
op|']'
op|'='
string|"'on'"
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'['
string|"'keep_cache_size'"
op|']'
op|'='
number|'16384'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'['
string|"'disk_chunk_size'"
op|']'
op|'='
number|'4096'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'16385'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reader'
op|'.'
name|'can_zero_copy_send'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.drop_buffer_cache"'
op|')'
name|'as'
name|'dbc'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.DROP_CACHE_WINDOW"'
op|','
number|'4095'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'open'
op|'('
string|"'/dev/null'"
op|','
string|"'w'"
op|')'
name|'as'
name|'devnull'
op|':'
newline|'\n'
indent|'                    '
name|'reader'
op|'.'
name|'zero_copy_send'
op|'('
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'dbc'
op|'.'
name|'mock_calls'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zero_copy_turns_off_when_md5_sockets_not_supported
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_zero_copy_turns_off_when_md5_sockets_not_supported'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_system_can_zero_copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
string|'"zero-copy support is missing"'
op|')'
newline|'\n'
dedent|''
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'POLICIES'
op|'.'
name|'default'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'['
string|"'splice'"
op|']'
op|'='
string|"'on'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.get_md5_socket'"
op|')'
name|'as'
name|'mock_md5sock'
op|':'
newline|'\n'
indent|'            '
name|'mock_md5sock'
op|'.'
name|'side_effect'
op|'='
name|'IOError'
op|'('
nl|'\n'
name|'errno'
op|'.'
name|'EAFNOSUPPORT'
op|','
string|'"MD5 socket busted"'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'128'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'reader'
op|'.'
name|'can_zero_copy_send'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'log_lines'
op|'='
name|'df_mgr'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'warning'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'MD5 sockets'"
op|','
name|'log_lines'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_tee_to_md5_pipe_length_mismatch
dedent|''
dedent|''
name|'def'
name|'test_tee_to_md5_pipe_length_mismatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_system_can_zero_copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
string|'"zero-copy support is missing"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conf'
op|'['
string|"'splice'"
op|']'
op|'='
string|"'on'"
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'16385'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reader'
op|'.'
name|'can_zero_copy_send'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.tee'"
op|')'
name|'as'
name|'mock_tee'
op|':'
newline|'\n'
indent|'            '
name|'mock_tee'
op|'.'
name|'side_effect'
op|'='
name|'lambda'
name|'_1'
op|','
name|'_2'
op|','
name|'_3'
op|','
name|'cnt'
op|':'
name|'cnt'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
string|"'/dev/null'"
op|','
string|"'w'"
op|')'
name|'as'
name|'devnull'
op|':'
newline|'\n'
indent|'                '
name|'exc_re'
op|'='
op|'('
string|"r'tee\\(\\) failed: tried to move \\d+ bytes, but only '"
nl|'\n'
string|"'moved -?\\d+'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'reader'
op|'.'
name|'zero_copy_send'
op|'('
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'re'
op|'.'
name|'match'
op|'('
name|'exc_re'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected Exception was not raised'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_splice_to_wsockfd_blocks
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_splice_to_wsockfd_blocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_system_can_zero_copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SkipTest'
op|'('
string|'"zero-copy support is missing"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conf'
op|'['
string|"'splice'"
op|']'
op|'='
string|"'on'"
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'fsize'
op|'='
number|'16385'
op|')'
newline|'\n'
name|'reader'
op|'='
name|'df'
op|'.'
name|'reader'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reader'
op|'.'
name|'can_zero_copy_send'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_run_test
name|'def'
name|'_run_test'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Set up mock of `splice`'
nl|'\n'
indent|'            '
name|'splice_called'
op|'='
op|'['
name|'False'
op|']'
comment|'# State hack'
newline|'\n'
nl|'\n'
DECL|function|fake_splice
name|'def'
name|'fake_splice'
op|'('
name|'fd_in'
op|','
name|'off_in'
op|','
name|'fd_out'
op|','
name|'off_out'
op|','
name|'len_'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'fd_out'
op|'=='
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
name|'and'
name|'not'
name|'splice_called'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'splice_called'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
name|'err'
op|'='
name|'errno'
op|'.'
name|'EWOULDBLOCK'
newline|'\n'
name|'raise'
name|'IOError'
op|'('
name|'err'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'splice'
op|'('
name|'fd_in'
op|','
name|'off_in'
op|','
name|'fd_out'
op|','
name|'off_out'
op|','
nl|'\n'
name|'len_'
op|','
name|'flags'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_splice'
op|'.'
name|'side_effect'
op|'='
name|'fake_splice'
newline|'\n'
nl|'\n'
comment|'# Set up mock of `trampoline`'
nl|'\n'
comment|'# There are 2 reasons to mock this:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# - We want to ensure it's called with the expected arguments at"
nl|'\n'
comment|'#   least once'
nl|'\n'
comment|'# - When called with our write FD (which points to `/dev/null`), we'
nl|'\n'
comment|"#   can't actually call `trampoline`, because adding such FD to an"
nl|'\n'
comment|'#   `epoll` handle results in `EPERM`'
nl|'\n'
DECL|function|fake_trampoline
name|'def'
name|'fake_trampoline'
op|'('
name|'fd'
op|','
name|'read'
op|'='
name|'None'
op|','
name|'write'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|','
nl|'\n'
name|'timeout_exc'
op|'='
name|'timeout'
op|'.'
name|'Timeout'
op|','
nl|'\n'
name|'mark_as_closed'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'write'
name|'and'
name|'fd'
op|'=='
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'hubs'
op|'.'
name|'trampoline'
op|'('
name|'fd'
op|','
name|'read'
op|'='
name|'read'
op|','
name|'write'
op|'='
name|'write'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|','
name|'timeout_exc'
op|'='
name|'timeout_exc'
op|','
nl|'\n'
name|'mark_as_closed'
op|'='
name|'mark_as_closed'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'mock_trampoline'
op|'.'
name|'side_effect'
op|'='
name|'fake_trampoline'
newline|'\n'
nl|'\n'
name|'reader'
op|'.'
name|'zero_copy_send'
op|'('
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Assert the end of `zero_copy_send` was reached'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_close'
op|'.'
name|'called'
op|')'
newline|'\n'
comment|'# Assert there was at least one call to `trampoline` waiting for'
nl|'\n'
comment|'# `write` access to the output FD'
nl|'\n'
name|'mock_trampoline'
op|'.'
name|'assert_any_call'
op|'('
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'write'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# Assert at least one call to `splice` with the output FD we expect'
nl|'\n'
name|'for'
name|'call'
name|'in'
name|'mock_splice'
op|'.'
name|'call_args_list'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'='
name|'call'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'args'
op|'['
number|'2'
op|']'
op|'=='
name|'devnull'
op|'.'
name|'fileno'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'`splice` not called with expected arguments'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.splice'"
op|')'
name|'as'
name|'mock_splice'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'reader'
op|','
string|"'close'"
op|','
name|'side_effect'
op|'='
name|'reader'
op|'.'
name|'close'
op|')'
name|'as'
name|'mock_close'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'open'
op|'('
string|"'/dev/null'"
op|','
string|"'w'"
op|')'
name|'as'
name|'devnull'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.trampoline'"
op|')'
name|'as'
name|'mock_trampoline'
op|':'
newline|'\n'
indent|'                        '
name|'_run_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_unlink_cleanup_DiskFileNoSpace
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_unlink_cleanup_DiskFileNoSpace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test cleanup when DiskFileNoSpace() is raised.'
nl|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'_m_fallocate'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
nl|'\n'
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|')'
op|')'
op|')'
newline|'\n'
name|'_m_unlink'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.fallocate"'
op|','
name|'_m_fallocate'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.unlink"'
op|','
name|'_m_unlink'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'100'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileNoSpace'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception DiskFileNoSpace"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_fallocate'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_unlink'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'error'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'all_log_lines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_unlink_cleanup_renamer_fails
dedent|''
name|'def'
name|'test_create_unlink_cleanup_renamer_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test cleanup when renamer fails'
nl|'\n'
indent|'        '
name|'_m_renamer'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|','
nl|'\n'
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|')'
op|')'
op|')'
newline|'\n'
name|'_m_unlink'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'data'
op|'='
string|"'0'"
op|'*'
number|'100'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'str'
op|'('
number|'100'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.renamer"'
op|','
name|'_m_renamer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.unlink"'
op|','
name|'_m_unlink'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'100'
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                        '
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected OSError exception"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'writer'
op|'.'
name|'put_succeeded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_renamer'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_unlink'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'error'"
op|','
name|'self'
op|'.'
name|'logger'
op|'.'
name|'all_log_lines'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_unlink_cleanup_logging
dedent|''
name|'def'
name|'test_create_unlink_cleanup_logging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test logging of os.unlink() failures.'
nl|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'abc'"
op|','
string|"'123'"
op|','
nl|'\n'
string|"'xyz'"
op|','
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'legacy'
op|')'
newline|'\n'
name|'_m_fallocate'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
nl|'\n'
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|')'
op|')'
op|')'
newline|'\n'
name|'_m_unlink'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|','
nl|'\n'
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'ENOENT'
op|')'
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"swift.obj.diskfile.fallocate"'
op|','
name|'_m_fallocate'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.unlink"'
op|','
name|'_m_unlink'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
name|'size'
op|'='
number|'100'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'DiskFileNoSpace'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Expected exception DiskFileNoSpace"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_fallocate'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_m_unlink'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'error_lines'
op|'='
name|'self'
op|'.'
name|'logger'
op|'.'
name|'get_lines_for_level'
op|'('
string|"'error'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'error_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'line'
op|'.'
name|'startswith'
op|'('
string|'"Error removing tempfile:"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'test_policies'
op|')'
newline|'\n'
DECL|class|TestDiskFile
name|'class'
name|'TestDiskFile'
op|'('
name|'DiskFileMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|mgr_cls
indent|'    '
name|'mgr_cls'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileManager'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestECDiskFile
name|'class'
name|'TestECDiskFile'
op|'('
name|'DiskFileMixin'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|mgr_cls
indent|'    '
name|'mgr_cls'
op|'='
name|'diskfile'
op|'.'
name|'ECDiskFileManager'
newline|'\n'
nl|'\n'
DECL|member|test_commit_raises_DiskFileErrors
name|'def'
name|'test_commit_raises_DiskFileErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'scenarios'
op|'='
op|'('
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
name|'DiskFileNoSpace'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'EDQUOT'
op|','
name|'DiskFileNoSpace'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
name|'DiskFileError'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'EPERM'
op|','
name|'DiskFileError'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check IOErrors from open() is handled'
nl|'\n'
name|'for'
name|'err_number'
op|','
name|'expected_exception'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
indent|'            '
name|'io_error'
op|'='
name|'IOError'
op|'('
op|')'
newline|'\n'
name|'io_error'
op|'.'
name|'errno'
op|'='
name|'err_number'
newline|'\n'
name|'mock_open'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'io_error'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_%s'"
op|'%'
name|'err_number'
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'six.moves.builtins.open'"
op|','
name|'mock_open'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'expected_exception'
op|','
nl|'\n'
name|'writer'
op|'.'
name|'commit'
op|','
nl|'\n'
name|'timestamp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'dl'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check OSError from fsync() is handled'
nl|'\n'
dedent|''
name|'mock_fsync'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'OSError'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_fsync_error'"
op|')'
newline|'\n'
nl|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.fsync'"
op|','
name|'mock_fsync'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
nl|'\n'
name|'writer'
op|'.'
name|'commit'
op|','
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_commit_fsync_dir_raises_DiskFileErrors
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_commit_fsync_dir_raises_DiskFileErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'scenarios'
op|'='
op|'('
op|'('
name|'errno'
op|'.'
name|'ENOSPC'
op|','
name|'DiskFileNoSpace'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'EDQUOT'
op|','
name|'DiskFileNoSpace'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'ENOTDIR'
op|','
name|'DiskFileError'
op|')'
op|','
nl|'\n'
op|'('
name|'errno'
op|'.'
name|'EPERM'
op|','
name|'DiskFileError'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check IOErrors from fsync_dir() is handled'
nl|'\n'
name|'for'
name|'err_number'
op|','
name|'expected_exception'
name|'in'
name|'scenarios'
op|':'
newline|'\n'
indent|'            '
name|'io_error'
op|'='
name|'IOError'
op|'('
name|'err_number'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'err_number'
op|')'
op|')'
newline|'\n'
name|'mock_open'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'io_error'
op|')'
newline|'\n'
name|'mock_io_error'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
name|'io_error'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_%s'"
op|'%'
name|'err_number'
op|','
nl|'\n'
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'six.moves.builtins.open'"
op|','
name|'mock_open'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'expected_exception'
op|','
nl|'\n'
name|'writer'
op|'.'
name|'commit'
op|','
nl|'\n'
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.fsync_dir'"
op|','
name|'mock_io_error'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'expected_exception'
op|','
nl|'\n'
name|'writer'
op|'.'
name|'commit'
op|','
nl|'\n'
name|'timestamp'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'dl'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'dl'
op|')'
op|','
name|'dl'
op|')'
newline|'\n'
name|'rmtree'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check OSError from fsync_dir() is handled'
nl|'\n'
dedent|''
name|'mock_os_error'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
nl|'\n'
name|'side_effect'
op|'='
name|'OSError'
op|'('
number|'100'
op|','
string|"'Some Error'"
op|')'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'account'
op|'='
string|"'a'"
op|','
name|'container'
op|'='
string|"'c'"
op|','
nl|'\n'
name|'obj'
op|'='
string|"'o_fsync_dir_error'"
op|')'
newline|'\n'
nl|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
string|"'bogus_etag'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
string|"'0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.fsync_dir'"
op|','
name|'mock_os_error'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
nl|'\n'
name|'writer'
op|'.'
name|'commit'
op|','
name|'timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_data_file_has_frag_index
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_data_file_has_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'for'
name|'good_value'
name|'in'
op|'('
number|'0'
op|','
string|"'0'"
op|','
number|'2'
op|','
string|"'2'"
op|','
number|'14'
op|','
string|"'14'"
op|')'
op|':'
newline|'\n'
comment|'# frag_index set by constructor arg'
nl|'\n'
indent|'            '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|','
name|'good_value'
op|')'
op|','
string|"'%s.durable'"
op|'%'
name|'ts'
op|']'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'good_value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# frag index should be added to object sysmeta'
nl|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'good_value'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# metadata value overrides the constructor arg'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|','
name|'good_value'
op|')'
op|','
string|"'%s.durable'"
op|'%'
name|'ts'
op|']'
newline|'\n'
name|'meta'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'good_value'
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
string|"'99'"
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'good_value'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# metadata value alone is sufficient'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|','
name|'good_value'
op|')'
op|','
string|"'%s.durable'"
op|'%'
name|'ts'
op|']'
newline|'\n'
name|'meta'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'good_value'
op|'}'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_metadata'
op|'='
name|'meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'good_value'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sysmeta_frag_index_is_immutable
dedent|''
dedent|''
name|'def'
name|'test_sysmeta_frag_index_is_immutable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# the X-Object-Sysmeta-Ec-Frag-Index should *only* be set when'
nl|'\n'
comment|'# the .data file is written.'
nl|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'orig_frag_index'
op|'='
number|'14'
newline|'\n'
comment|'# frag_index set by constructor arg'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'%s#%s.data'"
op|'%'
op|'('
name|'ts'
op|','
name|'orig_frag_index'
op|')'
op|','
string|"'%s.durable'"
op|'%'
name|'ts'
op|']'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts'
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'obj_name'
op|'='
string|"'my_obj'"
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'orig_frag_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# frag index should be added to object sysmeta'
nl|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'orig_frag_index'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# open the same diskfile with no frag_index passed to constructor'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device'
op|','
number|'0'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'my_obj'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'orig_frag_index'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# write metadata to a meta file'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|','
nl|'\n'
string|"'X-Object-Meta-Fruit'"
op|':'
string|"'kiwi'"
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
comment|'# sanity check we did write a meta file'
nl|'\n'
name|'expected'
op|'.'
name|'append'
op|'('
string|"'%s.meta'"
op|'%'
name|'ts'
op|')'
newline|'\n'
name|'actual_files'
op|'='
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual_files'
op|')'
newline|'\n'
nl|'\n'
comment|'# open the same diskfile, check frag index is unchanged'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device'
op|','
number|'0'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'my_obj'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
comment|'# sanity check we have read the meta file'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Timestamp'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'kiwi'"
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Meta-Fruit'"
op|')'
op|')'
newline|'\n'
comment|'# check frag index sysmeta is unchanged'
nl|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'orig_frag_index'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# attempt to overwrite frag index sysmeta'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
number|'99'
op|','
nl|'\n'
string|"'X-Object-Meta-Fruit'"
op|':'
string|"'apple'"
op|'}'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# open the same diskfile, check frag index is unchanged'
nl|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device'
op|','
number|'0'
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'my_obj'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
comment|'# sanity check we have read the meta file'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts'
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Timestamp'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'apple'"
op|','
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Meta-Fruit'"
op|')'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'df'
op|'.'
name|'get_metadata'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'int'
op|'('
name|'orig_frag_index'
op|')'
op|','
name|'int'
op|'('
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_data_file_errors_bad_frag_index
dedent|''
name|'def'
name|'test_data_file_errors_bad_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'for'
name|'bad_value'
name|'in'
op|'('
string|"'foo'"
op|','
string|"'-2'"
op|','
op|'-'
number|'2'
op|','
string|"'3.14'"
op|','
number|'3.14'
op|')'
op|':'
newline|'\n'
comment|'# check that bad frag_index set by constructor arg raises error'
nl|'\n'
comment|'# as soon as diskfile is constructed, before data is written'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileError'
op|','
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'bad_value'
op|')'
newline|'\n'
nl|'\n'
comment|'# bad frag_index set by metadata value'
nl|'\n'
comment|'# (drive-by check that it is ok for constructor arg to be None)'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'bad_value'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'Etag'"
op|':'
name|'EMPTY_ETAG'
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'plain/text'"
op|'}'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'put'
op|'('
name|'meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected DiskFileError for frag_index %s'"
nl|'\n'
op|'%'
name|'bad_value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# bad frag_index set by metadata value overrides ok constructor arg'
nl|'\n'
dedent|''
dedent|''
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'='
op|'{'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
name|'bad_value'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'Etag'"
op|':'
name|'EMPTY_ETAG'
op|','
nl|'\n'
string|"'Content-Type'"
op|':'
string|"'plain/text'"
op|'}'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'writer'
op|'.'
name|'put'
op|'('
name|'meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Expected DiskFileError for frag_index %s'"
nl|'\n'
op|'%'
name|'bad_value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_purge_one_fragment_index
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_purge_one_fragment_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'for'
name|'frag_index'
name|'in'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#1.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#2.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'ts'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#1.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_last_fragment_index
dedent|''
name|'def'
name|'test_purge_last_fragment_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'frag_index'
op|'='
number|'0'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#0.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'ts'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_non_existent_fragment_index
dedent|''
name|'def'
name|'test_purge_non_existent_fragment_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'frag_index'
op|'='
number|'7'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#7.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'ts'
op|','
number|'3'
op|')'
newline|'\n'
comment|'# no effect'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#7.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_old_timestamp_frag_index
dedent|''
name|'def'
name|'test_purge_old_timestamp_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'frag_index'
op|'='
number|'1'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
name|'frag_index'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#1.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'old_ts'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# no effect'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'#1.data'"
op|','
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_tombstone
dedent|''
name|'def'
name|'test_purge_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
number|'3'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'ts'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_without_frag
dedent|''
name|'def'
name|'test_purge_without_frag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'ts'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_old_tombstone
dedent|''
name|'def'
name|'test_purge_old_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
number|'5'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'old_ts'
op|','
number|'5'
op|')'
newline|'\n'
comment|'# no effect'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
nl|'\n'
name|'ts'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_purge_already_removed
dedent|''
name|'def'
name|'test_purge_already_removed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
number|'6'
op|')'
newline|'\n'
nl|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
number|'6'
op|')'
comment|'# no errors'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'purge'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
number|'6'
op|')'
newline|'\n'
comment|'# no effect'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_most_recent_durable
dedent|''
name|'def'
name|'test_open_most_recent_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
number|'3'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'ts'
op|')'
newline|'\n'
nl|'\n'
comment|'# add some .meta stuff'
nl|'\n'
dedent|''
name|'extra_meta'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Meta-Foo'"
op|':'
string|"'Bar'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'extra_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'update'
op|'('
name|'extra_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'df'
op|'.'
name|'read_metadata'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# add a newer datafile'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'new_metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
number|'3'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'new_metadata'
op|')'
newline|'\n'
comment|"# N.B. don't make it durable"
nl|'\n'
nl|'\n'
comment|'# and we still get the old metadata (same as if no .data!)'
nl|'\n'
dedent|''
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'df'
op|'.'
name|'read_metadata'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_open_most_recent_missing_durable
dedent|''
name|'def'
name|'test_open_most_recent_missing_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'POLICIES'
op|'.'
name|'default'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'read_metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# now create a datafile missing durable'
nl|'\n'
name|'ts'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
string|"'test data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'new_metadata'
op|'='
op|'{'
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'ts'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'data'
op|')'
op|','
nl|'\n'
string|"'X-Object-Sysmeta-Ec-Frag-Index'"
op|':'
number|'3'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'new_metadata'
op|')'
newline|'\n'
comment|"# N.B. don't make it durable"
nl|'\n'
nl|'\n'
comment|'# add some .meta stuff'
nl|'\n'
dedent|''
name|'extra_meta'
op|'='
op|'{'
nl|'\n'
string|"'X-Object-Meta-Foo'"
op|':'
string|"'Bar'"
op|','
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
name|'extra_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# we still get the DiskFileNotExist (same as if no .data!)'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'read_metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity, withtout the frag_index kwarg'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'read_metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fragments
dedent|''
name|'def'
name|'test_fragments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts_1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'frag_index'
op|'='
number|'0'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_1'
op|'.'
name|'internal'
op|','
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'fragments'
op|','
op|'{'
name|'ts_1'
op|':'
op|'['
number|'0'
op|','
number|'2'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|"# now add a newer datafile for frag index 3 but don't write a"
nl|'\n'
comment|'# durable with it (so ignore the error when we try to open)'
nl|'\n'
name|'ts_2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts_2'
op|'.'
name|'internal'
op|','
name|'frag_index'
op|'='
number|'3'
op|','
nl|'\n'
name|'commit'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# sanity check: should have 2* .data, .durable, .data'
nl|'\n'
dedent|''
name|'files'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'files'
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'fragments'
op|','
op|'{'
name|'ts_1'
op|':'
op|'['
number|'0'
op|','
number|'2'
op|']'
op|','
name|'ts_2'
op|':'
op|'['
number|'3'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify frags available even if open fails e.g. if .durable missing'
nl|'\n'
dedent|''
name|'for'
name|'f'
name|'in'
name|'filter'
op|'('
name|'lambda'
name|'f'
op|':'
name|'f'
op|'.'
name|'endswith'
op|'('
string|"'.durable'"
op|')'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'f'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|','
name|'df'
op|'.'
name|'open'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df'
op|'.'
name|'fragments'
op|','
op|'{'
name|'ts_1'
op|':'
op|'['
number|'0'
op|','
number|'2'
op|']'
op|','
name|'ts_2'
op|':'
op|'['
number|'3'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fragments_not_open
dedent|''
name|'def'
name|'test_fragments_not_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'df'
op|'.'
name|'fragments'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp_no_durable_file
dedent|''
name|'def'
name|'test_durable_timestamp_no_durable_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|','
name|'commit'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
comment|'# open() was attempted, but no durable file so expect None'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'df'
op|'.'
name|'durable_timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp_missing_frag_index
dedent|''
name|'def'
name|'test_durable_timestamp_missing_frag_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts1'
op|'.'
name|'internal'
op|','
name|'frag_index'
op|'='
number|'1'
op|')'
newline|'\n'
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'DiskFileNotExist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
comment|'# open() was attempted, but no data file for frag index so expect None'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'df'
op|'.'
name|'durable_timestamp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_durable_timestamp_newer_non_durable_data_file
dedent|''
name|'def'
name|'test_durable_timestamp_newer_non_durable_data_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ts1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts1'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_open_disk_file'
op|'('
name|'ts'
op|'='
name|'ts2'
op|'.'
name|'internal'
op|','
name|'commit'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'DiskFileNotExist'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'df'
op|'='
name|'self'
op|'.'
name|'_simple_get_diskfile'
op|'('
op|')'
newline|'\n'
comment|'# sanity check - one .durable file, two .data files'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ts1'
op|','
name|'df'
op|'.'
name|'durable_timestamp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'patch_policies'
op|'('
name|'with_ec_default'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|class|TestSuffixHashes
name|'class'
name|'TestSuffixHashes'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This tests all things related to hashing suffixes and therefore\n    there\'s also few test methods for hash_cleanup_listdir as well\n    (because it\'s used by hash_suffix).\n\n    The public interface to suffix hashing is on the Manager::\n\n         * hash_cleanup_listdir(hsh_path)\n         * get_hashes(device, partition, suffixes, policy)\n         * invalidate_hash(suffix_dir)\n\n    The Manager.get_hashes method (used by the REPLICATE verb)\n    calls Manager._get_hashes (which may be an alias to the module\n    method get_hashes), which calls hash_suffix, which calls\n    hash_cleanup_listdir.\n\n    Outside of that, hash_cleanup_listdir and invalidate_hash are\n    used mostly after writing new files via PUT or DELETE.\n\n    Test methods are organized by::\n\n        * hash_cleanup_listdir tests - behaviors\n        * hash_cleanup_listdir tests - error handling\n        * invalidate_hash tests - behavior\n        * invalidate_hash tests - error handling\n        * get_hashes tests - hash_suffix behaviors\n        * get_hashes tests - hash_suffix error handling\n        * get_hashes tests - behaviors\n        * get_hashes tests - error handling\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'testdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'debug_logger'
op|'('
string|"'suffix-hash-test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'devices'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'node'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'devices'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existing_device'
op|'='
string|"'sda1'"
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
op|'{'
nl|'\n'
string|"'swift_dir'"
op|':'
name|'self'
op|'.'
name|'testdir'
op|','
nl|'\n'
string|"'devices'"
op|':'
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
string|"'mount_check'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'df_router'
op|'='
name|'diskfile'
op|'.'
name|'DiskFileRouter'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'logger'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ts_iter'
op|'='
op|'('
name|'Timestamp'
op|'('
name|'t'
op|')'
name|'for'
name|'t'
name|'in'
nl|'\n'
name|'itertools'
op|'.'
name|'count'
op|'('
name|'int'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|ts
dedent|''
name|'def'
name|'ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Timestamps - forever.\n        """'
newline|'\n'
name|'return'
name|'next'
op|'('
name|'self'
op|'.'
name|'_ts_iter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fname_to_ts_hash
dedent|''
name|'def'
name|'fname_to_ts_hash'
op|'('
name|'self'
op|','
name|'fname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        EC datafiles are only hashed by their timestamp\n        """'
newline|'\n'
name|'return'
name|'md5'
op|'('
name|'fname'
op|'.'
name|'split'
op|'('
string|"'#'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
name|'ignore_errors'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|iter_policies
dedent|''
name|'def'
name|'iter_policies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'policy'
op|'='
name|'policy'
newline|'\n'
name|'yield'
name|'policy'
newline|'\n'
nl|'\n'
DECL|member|assertEqual
dedent|''
dedent|''
name|'def'
name|'assertEqual'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'unittest'
op|'.'
name|'TestCase'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'policy'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'policy_trailer'
op|'='
string|"'\\n\\n... for policy %r'"
op|'%'
name|'self'
op|'.'
name|'policy'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
name|'str'
op|'('
name|'err'
op|')'
op|'+'
name|'policy_trailer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_datafilename
dedent|''
dedent|''
name|'def'
name|'_datafilename'
op|'('
name|'self'
op|','
name|'timestamp'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'frag_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'frag_index'
op|'='
name|'randint'
op|'('
number|'0'
op|','
number|'9'
op|')'
newline|'\n'
dedent|''
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'+='
string|"'#%d'"
op|'%'
name|'frag_index'
newline|'\n'
dedent|''
name|'filename'
op|'+='
string|"'.data'"
newline|'\n'
name|'return'
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|_metafilename
dedent|''
name|'def'
name|'_metafilename'
op|'('
name|'self'
op|','
name|'meta_timestamp'
op|','
name|'ctype_timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'meta_timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'ctype_timestamp'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'delta'
op|'='
name|'meta_timestamp'
op|'.'
name|'raw'
op|'-'
name|'ctype_timestamp'
op|'.'
name|'raw'
newline|'\n'
name|'filename'
op|'='
string|"'%s-%x'"
op|'%'
op|'('
name|'filename'
op|','
name|'delta'
op|')'
newline|'\n'
dedent|''
name|'filename'
op|'+='
string|"'.meta'"
newline|'\n'
name|'return'
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|check_hash_cleanup_listdir
dedent|''
name|'def'
name|'check_hash_cleanup_listdir'
op|'('
name|'self'
op|','
name|'policy'
op|','
name|'input_files'
op|','
name|'output_files'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_unlink'
op|'='
name|'os'
op|'.'
name|'unlink'
newline|'\n'
name|'file_list'
op|'='
name|'list'
op|'('
name|'input_files'
op|')'
newline|'\n'
nl|'\n'
DECL|function|mock_listdir
name|'def'
name|'mock_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'list'
op|'('
name|'file_list'
op|')'
newline|'\n'
nl|'\n'
DECL|function|mock_unlink
dedent|''
name|'def'
name|'mock_unlink'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
comment|'# timestamp 1 is a special tag to pretend a file disappeared'
nl|'\n'
comment|'# between the listdir and unlink.'
nl|'\n'
indent|'            '
name|'if'
string|"'/0000000001.00000.'"
name|'in'
name|'path'
op|':'
newline|'\n'
comment|'# Using actual os.unlink for a non-existent name to reproduce'
nl|'\n'
comment|'# exactly what OSError it raises in order to prove that'
nl|'\n'
comment|'# common.utils.remove_file is squelching the error - but any'
nl|'\n'
comment|'# OSError would do.'
nl|'\n'
indent|'                '
name|'orig_unlink'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
dedent|''
name|'file_list'
op|'.'
name|'remove'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'with'
name|'unit_mock'
op|'('
op|'{'
string|"'os.listdir'"
op|':'
name|'mock_listdir'
op|','
string|"'os.unlink'"
op|':'
name|'mock_unlink'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'output_files'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'does-not-matter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'output_files'
op|'.'
name|'__class__'
op|','
nl|'\n'
name|'df_mgr'
op|'.'
name|'cleanup_ondisk_files'
op|','
name|'path'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'files'
op|'='
name|'df_mgr'
op|'.'
name|'cleanup_ondisk_files'
op|'('
string|"'/whatever'"
op|')'
op|'['
string|"'files'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'files'
op|','
name|'output_files'
op|')'
newline|'\n'
nl|'\n'
comment|'# hash_cleanup_listdir tests - behaviors'
nl|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_data_newer_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_data_newer_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# purge .data if there's a newer .ts"
nl|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_expired_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_expired_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# purge older .ts files if there's a newer .data"
nl|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamp'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
comment|"# no durable datafile means you can't get rid of the"
nl|'\n'
comment|'# latest tombstone even if datafile is newer'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'file3'
op|','
name|'file2'
op|']'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file3'
op|']'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_ts_newer_data
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_ts_newer_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# purge .ts if there's a newer .data"
nl|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamp'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'durable_file'
op|'='
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'durable_file'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'durable_file'
op|','
name|'file2'
op|']'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file2'
op|']'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_older_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_older_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file4'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
comment|'# no durable means we can only throw out things before'
nl|'\n'
comment|'# the latest tombstone'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'file4'
op|','
name|'file3'
op|','
name|'file2'
op|']'
op|','
nl|'\n'
comment|'# keep .meta and .data and purge all .ts files'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file4'
op|','
name|'file3'
op|']'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|','
name|'file4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keep_meta_data_purge_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keep_meta_data_purge_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamp'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'durable_filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'durable_filename'
op|')'
newline|'\n'
dedent|''
name|'file4'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'file4'
op|')'
newline|'\n'
comment|'# keep .meta and .data if meta newer than data and purge .ts'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'file4'
op|','
name|'durable_filename'
op|','
name|'file3'
op|']'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file4'
op|','
name|'file3'
op|']'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keep_one_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keep_one_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|'='
op|'['
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
comment|'# keep only latest of multiple .ts files'
nl|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_multi_data_file
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_multi_data_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|','
number|'1'
op|')'
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|','
number|'2'
op|')'
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|','
number|'3'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
comment|'# keep all non-durable datafiles'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'file3'
op|','
name|'file2'
op|','
name|'file1'
op|']'
op|','
nl|'\n'
comment|'# keep only latest of multiple .data files'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file3'
op|']'
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keeps_one_datafile
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keeps_one_datafile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'timestamps'
op|'='
op|'['
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamps'
op|'['
number|'0'
op|']'
op|','
name|'policy'
op|','
number|'1'
op|')'
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamps'
op|'['
number|'1'
op|']'
op|','
name|'policy'
op|','
number|'2'
op|')'
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'timestamps'
op|'['
number|'2'
op|']'
op|','
name|'policy'
op|','
number|'3'
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'t'
name|'in'
name|'timestamps'
op|':'
newline|'\n'
indent|'                    '
name|'file_list'
op|'.'
name|'append'
op|'('
name|'t'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
dedent|''
name|'latest_durable'
op|'='
name|'file_list'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
comment|'# keep latest durable and datafile'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'latest_durable'
op|','
name|'file3'
op|']'
op|','
nl|'\n'
comment|'# keep only latest of multiple .data files'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file3'
op|']'
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keep_one_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keep_one_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# keep only latest of multiple .meta files'
nl|'\n'
indent|'            '
name|'t_data'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'t_data'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file2'
op|','
name|'file3'
op|'='
op|'['
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'durable_file'
op|'='
name|'t_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'durable_file'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'['
name|'file3'
op|','
name|'durable_file'
op|','
name|'file1'
op|']'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'['
name|'file3'
op|','
name|'file1'
op|']'
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_only_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_only_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file1'
op|','
name|'file2'
op|'='
op|'['
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_ignore_orphaned_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_ignore_orphaned_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# A more recent orphaned .meta file will prevent old .ts files'
nl|'\n'
comment|'# from being cleaned up otherwise'
nl|'\n'
indent|'            '
name|'file1'
op|','
name|'file2'
op|'='
op|'['
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file3'
op|','
name|'file2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_old_data_only
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_old_data_only'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# Oldest .data will be purge, .meta and .ts won't be touched"
nl|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file2'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file3'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|','
name|'file3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file3'
op|','
name|'file2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_purge_old_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_purge_old_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# A single old .ts file will be removed'
nl|'\n'
indent|'            '
name|'old_float'
op|'='
name|'time'
op|'('
op|')'
op|'-'
op|'('
name|'diskfile'
op|'.'
name|'ONE_WEEK'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'file1'
op|'='
name|'Timestamp'
op|'('
name|'old_float'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_meta_keeps_old_ts
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_meta_keeps_old_ts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'old_float'
op|'='
name|'time'
op|'('
op|')'
op|'-'
op|'('
name|'diskfile'
op|'.'
name|'ONE_WEEK'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'file1'
op|'='
name|'Timestamp'
op|'('
name|'old_float'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'file2'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'+'
number|'2'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keep_single_old_data
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keep_single_old_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'old_float'
op|'='
name|'time'
op|'('
op|')'
op|'-'
op|'('
name|'diskfile'
op|'.'
name|'ONE_WEEK'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'Timestamp'
op|'('
name|'old_float'
op|')'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
comment|'# for EC an isolated old .data file is removed, its useless'
nl|'\n'
comment|'# without a .durable'
nl|'\n'
indent|'                '
name|'expected'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# A single old .data file will not be removed'
nl|'\n'
indent|'                '
name|'expected'
op|'='
name|'file_list'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_drops_isolated_durable
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_drops_isolated_durable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'file1'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_keep_single_old_meta
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_keep_single_old_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# A single old .meta file will not be removed'
nl|'\n'
indent|'            '
name|'old_float'
op|'='
name|'time'
op|'('
op|')'
op|'-'
op|'('
name|'diskfile'
op|'.'
name|'ONE_WEEK'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'file1'
op|'='
name|'Timestamp'
op|'('
name|'old_float'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
name|'file1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# hash_cleanup_listdir tests - error handling'
nl|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_hsh_path_enoent
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_hsh_path_enoent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# common.utils.listdir *completely* mutes ENOENT'
nl|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'does-not-exist'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'df_mgr'
op|'.'
name|'cleanup_ondisk_files'
op|'('
name|'path'
op|')'
op|'['
string|"'files'"
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_hsh_path_other_oserror
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_hsh_path_other_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|')'
name|'as'
name|'mock_listdir'
op|':'
newline|'\n'
indent|'                '
name|'mock_listdir'
op|'.'
name|'side_effect'
op|'='
name|'OSError'
op|'('
string|"'kaboom!'"
op|')'
newline|'\n'
comment|'# but it will raise other OSErrors'
nl|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'testdir'
op|','
string|"'does-not-matter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'OSError'
op|','
name|'df_mgr'
op|'.'
name|'cleanup_ondisk_files'
op|','
nl|'\n'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_reclaim_tombstone_remove_file_error
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_reclaim_tombstone_remove_file_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Timestamp 1 makes the check routine pretend the file'
nl|'\n'
comment|'# disappeared after listdir before unlink.'
nl|'\n'
indent|'            '
name|'file1'
op|'='
string|"'0000000001.00000.ts'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_cleanup_listdir_older_remove_file_error
dedent|''
dedent|''
name|'def'
name|'test_hash_cleanup_listdir_older_remove_file_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Timestamp 1 makes the check routine pretend the file'
nl|'\n'
comment|'# disappeared after listdir before unlink.'
nl|'\n'
indent|'            '
name|'file1'
op|'='
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'Timestamp'
op|'('
number|'1'
op|')'
op|','
name|'policy'
op|')'
newline|'\n'
name|'file2'
op|'='
string|"'0000000002.00000.ts'"
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'file1'
op|','
name|'file2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_hash_cleanup_listdir'
op|'('
name|'policy'
op|','
name|'file_list'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# invalidate_hash tests - behavior'
nl|'\n'
nl|'\n'
DECL|member|test_invalidate_hash_file_does_not_exist
dedent|''
dedent|''
name|'def'
name|'test_invalidate_hash_file_does_not_exist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'suffix_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'inv_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_INVALIDATIONS_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.lock_path'"
op|')'
name|'as'
name|'mock_lock'
op|':'
newline|'\n'
indent|'                '
name|'df_mgr'
op|'.'
name|'invalidate_hash'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_lock'
op|'.'
name|'called'
op|')'
newline|'\n'
comment|'# does not create files'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'inv_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalidate_hash_file_exists
dedent|''
dedent|''
name|'def'
name|'test_invalidate_hash_file_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# create something to hash'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|')'
newline|'\n'
name|'suffix_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
comment|'# sanity'
newline|'\n'
comment|'# sanity check hashes file'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'invalidations_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_INVALIDATIONS_FILE'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'pickle'
op|'.'
name|'load'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# invalidate the hash'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.lock_path'"
op|')'
name|'as'
name|'mock_lock'
op|':'
newline|'\n'
indent|'                '
name|'df_mgr'
op|'.'
name|'invalidate_hash'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_lock'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'invalidations_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'suffix'
op|'+'
string|'"\\n"'
op|','
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# consolidate the hash and the invalidations'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.lock_path'"
op|')'
name|'as'
name|'mock_lock'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'consolidate_hashes'
op|'('
name|'part_path'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'hashes'
op|'.'
name|'get'
op|'('
name|'suffix'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'pickle'
op|'.'
name|'load'
op|'('
name|'f'
op|')'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'invalidations_file'
op|','
string|"'rb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'""'
op|','
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# invalidate_hash tests - error handling'
nl|'\n'
nl|'\n'
DECL|member|test_invalidate_hash_bad_pickle
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_invalidate_hash_bad_pickle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# make some valid data'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'suffix_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# sanity check hashes file'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
newline|'\n'
comment|'# write some garbage in hashes file'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
string|"'asdf'"
op|')'
newline|'\n'
comment|'# invalidate_hash silently *NOT* repair invalid data'
nl|'\n'
dedent|''
name|'df_mgr'
op|'.'
name|'invalidate_hash'
op|'('
name|'suffix_dir'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'hashes_file'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'asdf'"
op|')'
newline|'\n'
comment|'# ... but get_hashes will'
nl|'\n'
dedent|''
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
comment|'# get_hashes tests - hash_suffix behaviors'
nl|'\n'
nl|'\n'
DECL|member|test_hash_suffix_one_tombstone
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_one_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# write a tombstone'
nl|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'tombstone_hash'
op|'='
name|'md5'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
name|'tombstone_hash'
op|'}'
op|','
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|'# fi is None here because we have a tombstone'
nl|'\n'
name|'None'
op|':'
name|'tombstone_hash'
op|'}'
op|'}'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_one_tombstone_and_one_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_one_tombstone_and_one_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# A tombstone plus a newer meta file can happen if a tombstone is'
nl|'\n'
comment|'# replicated to a node with a newer meta file but older data file. The'
nl|'\n'
comment|'# meta file will be ignored when the diskfile is opened so the'
nl|'\n'
comment|'# effective state of the disk files is equivalent to only having the'
nl|'\n'
comment|'# tombstone. Replication cannot remove the meta file, and the meta file'
nl|'\n'
comment|'# cannot be ssync replicated to a node with only the tombstone, so'
nl|'\n'
comment|'# we want the get_hashes result to be the same as if the meta file was'
nl|'\n'
comment|'# not there.'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# write a tombstone'
nl|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
comment|'# write a meta file'
nl|'\n'
name|'df'
op|'.'
name|'write_metadata'
op|'('
op|'{'
string|"'X-Timestamp'"
op|':'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|'.'
name|'internal'
op|'}'
op|')'
newline|'\n'
comment|'# sanity check'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|')'
newline|'\n'
name|'tombstone_hash'
op|'='
name|'md5'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
name|'tombstone_hash'
op|'}'
op|','
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|'# fi is None here because we have a tombstone'
nl|'\n'
name|'None'
op|':'
name|'tombstone_hash'
op|'}'
op|'}'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_one_reclaim_tombstone
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_one_reclaim_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
comment|"# scale back this tests manager's reclaim age a bit"
nl|'\n'
name|'df_mgr'
op|'.'
name|'reclaim_age'
op|'='
number|'1000'
newline|'\n'
comment|"# write a tombstone that's just a *little* older"
nl|'\n'
name|'old_time'
op|'='
name|'time'
op|'('
op|')'
op|'-'
number|'1001'
newline|'\n'
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_one_reclaim_and_one_valid_tombstone
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_one_reclaim_and_one_valid_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'paths'
op|','
name|'suffix'
op|'='
name|'find_paths_with_matching_suffixes'
op|'('
number|'2'
op|','
number|'1'
op|')'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'a'
op|','
name|'c'
op|','
name|'o'
op|'='
name|'paths'
op|'['
name|'suffix'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'df1'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
name|'a'
op|','
name|'c'
op|','
name|'o'
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
comment|"# scale back this tests manager's reclaim age a bit"
nl|'\n'
name|'df_mgr'
op|'.'
name|'reclaim_age'
op|'='
number|'1000'
newline|'\n'
comment|"# write one tombstone that's just a *little* older"
nl|'\n'
name|'df1'
op|'.'
name|'delete'
op|'('
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'1001'
op|')'
op|')'
newline|'\n'
comment|"# create another tombstone in same suffix dir that's newer"
nl|'\n'
name|'a'
op|','
name|'c'
op|','
name|'o'
op|'='
name|'paths'
op|'['
name|'suffix'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'df2'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
name|'a'
op|','
name|'c'
op|','
name|'o'
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'t_df2'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|'-'
number|'900'
op|')'
newline|'\n'
name|'df2'
op|'.'
name|'delete'
op|'('
name|'t_df2'
op|')'
newline|'\n'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df1'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'df2_tombstone_hash'
op|'='
name|'md5'
op|'('
name|'t_df2'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
name|'df2_tombstone_hash'
op|'}'
op|','
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|'# fi is None here because we have a tombstone'
nl|'\n'
name|'None'
op|':'
name|'df2_tombstone_hash'
op|'}'
op|'}'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_one_datafile
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_one_datafile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'7'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# write a datafile'
nl|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'test_data'
op|'='
string|"'test file'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
dedent|''
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'datafile_hash'
op|'='
name|'md5'
op|'('
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
name|'datafile_hash'
op|'}'
op|','
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|"# because there's no .durable file, we have no hash for"
nl|'\n'
comment|'# the None key - only the frag index for the data file'
nl|'\n'
number|'7'
op|':'
name|'datafile_hash'
op|'}'
op|'}'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_multi_file_ends_in_tombstone
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_multi_file_ends_in_tombstone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'mkdirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
comment|'# go behind the scenes and setup a bunch of weird file names'
nl|'\n'
name|'for'
name|'tdiff'
name|'in'
op|'['
number|'500'
op|','
number|'100'
op|','
number|'10'
op|','
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'suff'
name|'in'
op|'['
string|"'.meta'"
op|','
string|"'.data'"
op|','
string|"'.ts'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'now'
op|'-'
name|'tdiff'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
name|'and'
name|'suff'
op|'=='
string|"'.data'"
op|':'
newline|'\n'
indent|'                        '
name|'filename'
op|'+='
string|"'#%s'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'filename'
op|'+='
name|'suff'
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'filename'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'tombstone_hash'
op|'='
name|'md5'
op|'('
name|'filename'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
comment|'# call get_hashes and it should clean things up'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'REPL_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
name|'tombstone_hash'
op|'}'
op|','
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|'# fi is None here because we have a tombstone'
nl|'\n'
name|'None'
op|':'
name|'tombstone_hash'
op|'}'
op|'}'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|')'
newline|'\n'
comment|'# only the tombstone should be left'
nl|'\n'
name|'found_files'
op|'='
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'found_files'
op|','
op|'['
name|'filename'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_multi_file_ends_in_datafile
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_multi_file_ends_in_datafile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'mkdirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'None'
newline|'\n'
comment|'# go behind the scenes and setup a bunch of weird file names'
nl|'\n'
name|'for'
name|'tdiff'
name|'in'
op|'['
number|'500'
op|','
number|'100'
op|','
number|'10'
op|','
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'suffs'
op|'='
op|'['
string|"'.meta'"
op|','
string|"'.data'"
op|']'
newline|'\n'
name|'if'
name|'tdiff'
op|'>'
number|'50'
op|':'
newline|'\n'
indent|'                    '
name|'suffs'
op|'.'
name|'append'
op|'('
string|"'.ts'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                    '
name|'suffs'
op|'.'
name|'append'
op|'('
string|"'.durable'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'suff'
name|'in'
name|'suffs'
op|':'
newline|'\n'
indent|'                    '
name|'timestamp'
op|'='
name|'Timestamp'
op|'('
name|'now'
op|'-'
name|'tdiff'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
name|'and'
name|'suff'
op|'=='
string|"'.data'"
op|':'
newline|'\n'
indent|'                        '
name|'filename'
op|'+='
string|"'#%s'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'filename'
op|'+='
name|'suff'
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'filename'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'meta_timestamp'
op|'='
name|'Timestamp'
op|'('
name|'now'
op|')'
newline|'\n'
name|'metadata_filename'
op|'='
name|'meta_timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'metadata_filename'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# call get_hashes and it should clean things up'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'data_filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'data_filename'
op|'+='
string|"'#%s'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'data_filename'
op|'+='
string|"'.data'"
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'durable_filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
newline|'\n'
name|'hasher'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'metadata_filename'
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'durable_filename'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'suffix'
op|':'
op|'{'
nl|'\n'
comment|'# metadata & durable updates are hashed separately'
nl|'\n'
name|'None'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
number|'4'
op|':'
name|'self'
op|'.'
name|'fname_to_ts_hash'
op|'('
name|'data_filename'
op|')'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'expected_files'
op|'='
op|'['
name|'data_filename'
op|','
name|'durable_filename'
op|','
nl|'\n'
name|'metadata_filename'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'REPL_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'metadata_filename'
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'data_filename'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'suffix'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|'}'
newline|'\n'
name|'expected_files'
op|'='
op|'['
name|'data_filename'
op|','
name|'metadata_filename'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'unknown policy type %r'"
op|'%'
name|'policy'
op|'.'
name|'policy_type'
op|')'
newline|'\n'
dedent|''
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
comment|'# only the meta and data should be left'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'os'
op|'.'
name|'listdir'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'expected_files'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_get_hashes
dedent|''
dedent|''
name|'def'
name|'_verify_get_hashes'
op|'('
name|'self'
op|','
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_meta'
op|','
name|'ts_ctype'
op|','
nl|'\n'
name|'policy'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper method to create a set of ondisk files and verify suffix_hashes.\n\n        :param filenames: list of filenames to create in an object hash dir\n        :param ts_data: newest data timestamp, used for expected result\n        :param ts_meta: newest meta timestamp, used for expected result\n        :param ts_ctype: newest content-type timestamp, used for expected\n                         result\n        :param policy: storage policy to use for test\n        """'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'mkdirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
nl|'\n'
comment|'# calculate expected result'
nl|'\n'
name|'hasher'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_meta'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
name|'if'
name|'ts_ctype'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_ctype'
op|'.'
name|'internal'
op|'+'
string|"'_ctype'"
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'suffix'
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
number|'4'
op|':'
name|'md5'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'REPL_POLICY'
op|':'
newline|'\n'
indent|'            '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_meta'
op|'.'
name|'internal'
op|'+'
string|"'.meta'"
op|')'
newline|'\n'
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.data'"
op|')'
newline|'\n'
name|'if'
name|'ts_ctype'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'ts_ctype'
op|'.'
name|'internal'
op|'+'
string|"'_ctype'"
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
name|'suffix'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'unknown policy type %r'"
op|'%'
name|'policy'
op|'.'
name|'policy_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'fname'
name|'in'
name|'filenames'
op|':'
newline|'\n'
indent|'            '
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'fname'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_older_content_type_in_meta
dedent|''
name|'def'
name|'test_hash_suffix_with_older_content_type_in_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# single meta file having older content-type'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_ctype'
op|','
name|'ts_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_meta'
op|','
name|'ts_ctype'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_meta'
op|','
name|'ts_ctype'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_same_age_content_type_in_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_same_age_content_type_in_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# single meta file having same age content-type'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_meta'
op|'='
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_meta'
op|','
name|'ts_meta'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_meta'
op|','
name|'ts_meta'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_obsolete_content_type_in_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_obsolete_content_type_in_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have a single meta file having'
nl|'\n'
comment|'# content-type older than a replicated data file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_ctype'
op|','
name|'ts_data'
op|','
name|'ts_meta'
op|'='
op|'('
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_meta'
op|','
name|'ts_ctype'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_meta'
op|','
name|'None'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_older_content_type_in_newer_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_older_content_type_in_newer_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have two meta files: newest'
nl|'\n'
comment|'# content-type is in newer meta file, older than newer meta file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_older_meta'
op|','
name|'ts_ctype'
op|','
name|'ts_newer_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_older_meta'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_newer_meta'
op|','
name|'ts_ctype'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_newer_meta'
op|','
name|'ts_ctype'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_same_age_content_type_in_newer_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_same_age_content_type_in_newer_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have two meta files: newest'
nl|'\n'
comment|'# content-type is in newer meta file, at same age as newer meta file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_older_meta'
op|','
name|'ts_newer_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_newer_meta'
op|','
name|'ts_newer_meta'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_newer_meta'
op|','
name|'ts_newer_meta'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_older_content_type_in_older_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_older_content_type_in_older_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have two meta files: newest'
nl|'\n'
comment|'# content-type is in older meta file, older than older meta file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_ctype'
op|','
name|'ts_older_meta'
op|','
name|'ts_newer_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_newer_meta'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_older_meta'
op|','
name|'ts_ctype'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_newer_meta'
op|','
name|'ts_ctype'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_same_age_content_type_in_older_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_same_age_content_type_in_older_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have two meta files: newest'
nl|'\n'
comment|'# content-type is in older meta file, at same age as older meta file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_data'
op|','
name|'ts_older_meta'
op|','
name|'ts_newer_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_newer_meta'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_older_meta'
op|','
name|'ts_older_meta'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_newer_meta'
op|','
name|'ts_older_meta'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_with_obsolete_content_type_in_older_meta
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_with_obsolete_content_type_in_older_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# After rsync replication we could have two meta files: newest'
nl|'\n'
comment|'# content-type is in older meta file, but older than data file'
nl|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts_ctype'
op|','
name|'ts_data'
op|','
name|'ts_older_meta'
op|','
name|'ts_newer_meta'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'filenames'
op|'='
op|'['
name|'self'
op|'.'
name|'_datafilename'
op|'('
name|'ts_data'
op|','
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_newer_meta'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_metafilename'
op|'('
name|'ts_older_meta'
op|','
name|'ts_ctype'
op|')'
op|']'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filenames'
op|'.'
name|'append'
op|'('
name|'ts_data'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_get_hashes'
op|'('
nl|'\n'
name|'filenames'
op|','
name|'ts_data'
op|','
name|'ts_newer_meta'
op|','
name|'None'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_removes_empty_hashdir_and_suffix
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_removes_empty_hashdir_and_suffix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'suffix_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_dir'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_removes_empty_hashdirs_in_valid_suffix
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_removes_empty_hashdirs_in_valid_suffix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|','
name|'suffix'
op|'='
name|'find_paths_with_matching_suffixes'
op|'('
name|'needed_matches'
op|'='
number|'3'
op|','
nl|'\n'
name|'needed_suffixes'
op|'='
number|'0'
op|')'
newline|'\n'
name|'matching_paths'
op|'='
name|'paths'
op|'.'
name|'pop'
op|'('
name|'suffix'
op|')'
newline|'\n'
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'*'
name|'matching_paths'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'2'
op|')'
newline|'\n'
comment|'# create a real, valid hsh_path'
nl|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# and a couple of empty hsh_paths'
nl|'\n'
name|'empty_hsh_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'matching_paths'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fake_df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'*'
name|'path'
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'fake_df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'empty_hsh_paths'
op|'.'
name|'append'
op|'('
name|'fake_df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'hsh_path'
name|'in'
name|'empty_hsh_paths'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hsh_path'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
comment|'# get_hashes will cleanup empty hsh_path and leave valid one'
nl|'\n'
dedent|''
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'for'
name|'hsh_path'
name|'in'
name|'empty_hsh_paths'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hsh_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get_hashes tests - hash_suffix error handling'
nl|'\n'
nl|'\n'
DECL|member|test_hash_suffix_listdir_enotdir
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_listdir_enotdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'suffix'
op|'='
string|"'123'"
newline|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|','
nl|'\n'
name|'suffix'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'suffix_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
comment|'# suffix dir cleaned up by get_hashes'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# now make the suffix path a file'
nl|'\n'
name|'open'
op|'('
name|'suffix_path'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_listdir_enoent
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_listdir_enoent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'orig_listdir'
op|'='
name|'os'
op|'.'
name|'listdir'
newline|'\n'
name|'listdir_calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|mock_listdir
name|'def'
name|'mock_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'success'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'rv'
op|'='
name|'orig_listdir'
op|'('
name|'path'
op|')'
newline|'\n'
name|'success'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'listdir_calls'
op|'.'
name|'append'
op|'('
op|'('
name|'path'
op|','
name|'success'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.os.listdir'"
op|','
nl|'\n'
name|'mock_listdir'
op|')'
op|':'
newline|'\n'
comment|'# recalc always forces hash_suffix even if the suffix'
nl|'\n'
comment|'# does not exist!'
nl|'\n'
indent|'                '
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
string|"'123'"
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'listdir_calls'
op|','
op|'['
nl|'\n'
comment|'# part path gets created automatically'
nl|'\n'
op|'('
name|'part_path'
op|','
name|'True'
op|')'
op|','
nl|'\n'
comment|'# this one blows up'
nl|'\n'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
string|"'123'"
op|')'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_hash_cleanup_listdir_enotdir_quarantined
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_hash_cleanup_listdir_enotdir_quarantined'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
op|'.'
name|'get_diskfile'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
comment|'# make the suffix directory'
nl|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'suffix_path'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'suffix_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# make the df hash path a file'
nl|'\n'
name|'open'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'# and hash path is quarantined'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# each device a quarantined directory'
nl|'\n'
name|'quarantine_base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
nl|'\n'
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'quarantined'"
op|')'
newline|'\n'
comment|'# the quarantine path is...'
nl|'\n'
name|'quarantine_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'quarantine_base'
op|','
comment|'# quarantine root'
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
comment|'# per-policy data dir'
nl|'\n'
name|'suffix'
op|','
comment|'# first dir from which quarantined file was removed'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
comment|'# name of quarantined file'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'quarantine_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_hash_cleanup_listdir_other_oserror
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_hash_cleanup_listdir_other_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'7'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'test_data'
op|'='
string|"'test_data'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_os_listdir'
op|'='
name|'os'
op|'.'
name|'listdir'
newline|'\n'
name|'listdir_calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'suffix'
op|')'
newline|'\n'
name|'datadir_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'suffix_path'
op|','
name|'hash_path'
op|'('
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|mock_os_listdir
name|'def'
name|'mock_os_listdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'listdir_calls'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'=='
name|'datadir_path'
op|':'
newline|'\n'
comment|'# we want the part and suffix listdir calls to pass and'
nl|'\n'
comment|'# make the hash_cleanup_listdir raise an exception'
nl|'\n'
indent|'                    '
name|'raise'
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'orig_os_listdir'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.listdir'"
op|','
name|'mock_os_listdir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'listdir_calls'
op|','
op|'['
nl|'\n'
name|'part_path'
op|','
nl|'\n'
name|'suffix_path'
op|','
nl|'\n'
name|'datadir_path'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'suffix'
op|':'
name|'None'
op|'}'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
nl|'\n'
name|'expected'
op|','
name|'hashes'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_rmdir_hsh_path_oserror
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_rmdir_hsh_path_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# make an empty hsh_path to be removed'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.rmdir'"
op|','
name|'side_effect'
op|'='
name|'OSError'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
name|'md5'
op|'('
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
name|'suffix'
op|':'
name|'expected'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_suffix_rmdir_suffix_oserror
dedent|''
dedent|''
name|'def'
name|'test_hash_suffix_rmdir_suffix_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# make an empty hsh_path to be removed'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'suffix_path'
op|')'
newline|'\n'
nl|'\n'
name|'captured_paths'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|mock_rmdir
name|'def'
name|'mock_rmdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'captured_paths'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'=='
name|'suffix_path'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'OSError'
op|'('
string|"'kaboom!'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.rmdir'"
op|','
name|'mock_rmdir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'EC_POLICY'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
name|'REPL_POLICY'
op|':'
name|'md5'
op|'('
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'policy'
op|'.'
name|'policy_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
name|'suffix'
op|':'
name|'expected'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
nl|'\n'
name|'df'
op|'.'
name|'_datadir'
op|','
nl|'\n'
name|'suffix_path'
op|','
nl|'\n'
op|']'
op|','
name|'captured_paths'
op|')'
newline|'\n'
nl|'\n'
comment|'# get_hashes tests - behaviors'
nl|'\n'
nl|'\n'
DECL|member|test_get_hashes_creates_partition_and_pkl
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_creates_partition_and_pkl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'part_path'
op|')'
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# and double check the hashes'
nl|'\n'
name|'new_hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'new_hashes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_new_pkl_finds_new_suffix_dirs
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_new_pkl_finds_new_suffix_dirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
comment|'# add something to find'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# get_hashes will find the untracked suffix dir'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
comment|'# ... and create a hashes pickle for it'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_old_pickle_does_not_find_new_suffix_dirs
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_old_pickle_does_not_find_new_suffix_dirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# create a empty stale pickle'
nl|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
string|"'sda1'"
op|','
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'hashes_file'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
comment|'# add something to find'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
string|"'o'"
op|','
nl|'\n'
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|','
name|'filename'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|"# but get_hashes has no reason to find it (because we didn't"
nl|'\n'
comment|'# call invalidate_hash)'
nl|'\n'
name|'new_hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_hashes'
op|','
name|'hashes'
op|')'
newline|'\n'
comment|'# ... unless remote end asks for a recalc'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_does_not_rehash_known_suffix_dirs
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_does_not_rehash_known_suffix_dirs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
comment|'# create the baseline hashes file'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
comment|'# now change the contents of the suffix w/o calling'
nl|'\n'
comment|'# invalidate_hash'
nl|'\n'
name|'rmtree'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'new_hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
comment|'# ... and get_hashes is none the wiser'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_hashes'
op|','
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
comment|'# ... unless remote end asks for a recalc'
nl|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'new_hashes'
op|','
name|'hashes'
op|')'
newline|'\n'
comment|'# and the empty suffix path is removed'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
newline|'\n'
comment|'# ... and the suffix key is removed'
nl|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_multi_file_multi_suffix
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_multi_file_multi_suffix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|','
name|'suffix'
op|'='
name|'find_paths_with_matching_suffixes'
op|'('
name|'needed_matches'
op|'='
number|'2'
op|','
nl|'\n'
name|'needed_suffixes'
op|'='
number|'3'
op|')'
newline|'\n'
name|'matching_paths'
op|'='
name|'paths'
op|'.'
name|'pop'
op|'('
name|'suffix'
op|')'
newline|'\n'
name|'matching_paths'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'path'
op|':'
name|'hash_path'
op|'('
op|'*'
name|'path'
op|')'
op|')'
newline|'\n'
name|'other_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'suffix'
op|','
name|'paths'
name|'in'
name|'paths'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other_paths'
op|'.'
name|'append'
op|'('
name|'paths'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'other_paths'
op|')'
op|'>='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|"# first we'll make a tombstone"
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
op|'*'
name|'other_paths'
op|'['
number|'0'
op|']'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'4'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'timestamp'
op|')'
newline|'\n'
name|'tombstone_hash'
op|'='
name|'md5'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.ts'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'tombstone_suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# second file in another suffix has a .datafile'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
op|'*'
name|'other_paths'
op|'['
number|'1'
op|']'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'5'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'test_data'
op|'='
string|"'test_file'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'datafile_name'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'datafile_name'
op|'+='
string|"'#%d'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'datafile_name'
op|'+='
string|"'.data'"
newline|'\n'
name|'durable_hash'
op|'='
name|'md5'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'datafile_suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# in the *third* suffix - two datafiles for different hashes'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
op|'*'
name|'matching_paths'
op|'['
number|'0'
op|']'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'6'
op|')'
newline|'\n'
name|'matching_suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'test_data'
op|'='
string|"'test_file'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
comment|"# we'll keep track of file names for hash calculations"
nl|'\n'
dedent|''
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filename'
op|'+='
string|"'#%d'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'filename'
op|'+='
string|"'.data'"
newline|'\n'
name|'filenames'
op|'='
op|'{'
nl|'\n'
string|"'data'"
op|':'
op|'{'
nl|'\n'
number|'6'
op|':'
name|'filename'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'durable'"
op|':'
op|'['
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
nl|'\n'
op|'*'
name|'matching_paths'
op|'['
number|'1'
op|']'
op|','
name|'policy'
op|'='
name|'policy'
op|','
nl|'\n'
name|'frag_index'
op|'='
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
op|','
nl|'\n'
name|'matching_suffix'
op|')'
comment|'# sanity'
newline|'\n'
name|'timestamp'
op|'='
name|'self'
op|'.'
name|'ts'
op|'('
op|')'
newline|'\n'
name|'with'
name|'df'
op|'.'
name|'create'
op|'('
op|')'
name|'as'
name|'writer'
op|':'
newline|'\n'
indent|'                '
name|'test_data'
op|'='
string|"'test_file'"
newline|'\n'
name|'writer'
op|'.'
name|'write'
op|'('
name|'test_data'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'X-Timestamp'"
op|':'
name|'timestamp'
op|'.'
name|'internal'
op|','
nl|'\n'
string|"'ETag'"
op|':'
name|'md5'
op|'('
name|'test_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
string|"'Content-Length'"
op|':'
name|'len'
op|'('
name|'test_data'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'writer'
op|'.'
name|'put'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'commit'
op|'('
name|'timestamp'
op|')'
newline|'\n'
dedent|''
name|'filename'
op|'='
name|'timestamp'
op|'.'
name|'internal'
newline|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'filename'
op|'+='
string|"'#%d'"
op|'%'
name|'df'
op|'.'
name|'_frag_index'
newline|'\n'
dedent|''
name|'filename'
op|'+='
string|"'.data'"
newline|'\n'
name|'filenames'
op|'['
string|"'data'"
op|']'
op|'['
number|'7'
op|']'
op|'='
name|'filename'
newline|'\n'
name|'filenames'
op|'['
string|"'durable'"
op|']'
op|'.'
name|'append'
op|'('
name|'timestamp'
op|'.'
name|'internal'
op|'+'
string|"'.durable'"
op|')'
newline|'\n'
comment|'# now make up the expected suffixes!'
nl|'\n'
name|'if'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'EC_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'filenames'
op|'['
string|"'durable'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'tombstone_suffix'
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
name|'tombstone_hash'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
name|'datafile_suffix'
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
name|'durable_hash'
op|','
nl|'\n'
number|'5'
op|':'
name|'self'
op|'.'
name|'fname_to_ts_hash'
op|'('
name|'datafile_name'
op|')'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
name|'matching_suffix'
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
number|'6'
op|':'
name|'self'
op|'.'
name|'fname_to_ts_hash'
op|'('
name|'filenames'
op|'['
string|"'data'"
op|']'
op|'['
number|'6'
op|']'
op|')'
op|','
nl|'\n'
number|'7'
op|':'
name|'self'
op|'.'
name|'fname_to_ts_hash'
op|'('
name|'filenames'
op|'['
string|"'data'"
op|']'
op|'['
number|'7'
op|']'
op|')'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'policy'
op|'.'
name|'policy_type'
op|'=='
name|'REPL_POLICY'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'for'
name|'filename'
name|'in'
name|'filenames'
op|'['
string|"'data'"
op|']'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
nl|'\n'
name|'tombstone_suffix'
op|':'
name|'tombstone_hash'
op|','
nl|'\n'
name|'datafile_suffix'
op|':'
name|'md5'
op|'('
name|'datafile_name'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
name|'matching_suffix'
op|':'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'unknown policy type %r'"
op|'%'
name|'policy'
op|'.'
name|'policy_type'
op|')'
newline|'\n'
dedent|''
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# get_hashes tests - error handling'
nl|'\n'
nl|'\n'
DECL|member|test_get_hashes_bad_dev
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_bad_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'df_mgr'
op|'.'
name|'mount_check'
op|'='
name|'True'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.check_mount'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'side_effect'
op|'='
op|'['
name|'False'
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'DiskFileDeviceUnavailable'
op|','
nl|'\n'
name|'df_mgr'
op|'.'
name|'get_hashes'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
string|"'123'"
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_zero_bytes_pickle
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_zero_bytes_pickle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'part_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'part_path'
op|')'
newline|'\n'
comment|'# create a pre-existing zero-byte file'
nl|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_path'
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_hash_suffix_enotdir
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_hash_suffix_enotdir'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# create a real suffix dir'
nl|'\n'
name|'df'
op|'='
name|'df_mgr'
op|'.'
name|'get_diskfile'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
string|"'a'"
op|','
string|"'c'"
op|','
nl|'\n'
string|"'o'"
op|','
name|'policy'
op|'='
name|'policy'
op|','
name|'frag_index'
op|'='
number|'3'
op|')'
newline|'\n'
name|'df'
op|'.'
name|'delete'
op|'('
name|'Timestamp'
op|'('
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'df'
op|'.'
name|'_datadir'
op|')'
op|')'
newline|'\n'
comment|'# touch a bad suffix dir'
nl|'\n'
name|'part_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|')'
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'part_dir'
op|','
string|"'bad'"
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'suffix'
op|','
name|'hashes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'bad'"
op|','
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_hash_suffix_other_oserror
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_hash_suffix_other_oserror'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
name|'suffix'
op|'='
string|"'123'"
newline|'\n'
name|'suffix_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|','
nl|'\n'
name|'suffix'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'suffix_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'suffix_path'
op|')'
op|')'
comment|'# sanity'
newline|'\n'
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
name|'expected'
op|','
name|'hashes'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# this OSError does *not* raise PathNotDir, and is allowed to leak'
nl|'\n'
comment|'# from hash_suffix into get_hashes'
nl|'\n'
name|'mocked_os_listdir'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
nl|'\n'
name|'side_effect'
op|'='
name|'OSError'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'os'
op|'.'
name|'strerror'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|')'
op|')'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.listdir"'
op|','
name|'mocked_os_listdir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.logging'"
op|')'
name|'as'
name|'mock_logging'
op|':'
newline|'\n'
indent|'                    '
name|'hashes'
op|'='
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
string|"'sda1'"
op|','
string|"'0'"
op|','
op|'['
name|'suffix'
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock_logging'
op|'.'
name|'method_calls'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'call'
op|'.'
name|'exception'
op|'('
string|"'Error hashing suffix'"
op|')'
op|']'
op|')'
newline|'\n'
comment|'# recalc always causes a suffix to get reset to None; the listdir'
nl|'\n'
comment|'# error prevents the suffix from being rehashed'
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'123'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'msg'
op|'='
string|"'expected %r != %r for policy %r'"
op|'%'
op|'('
name|'expected'
op|','
name|'hashes'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashes'
op|','
name|'expected'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hashes_modified_recursive_retry
dedent|''
dedent|''
name|'def'
name|'test_get_hashes_modified_recursive_retry'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'policy'
name|'in'
name|'self'
op|'.'
name|'iter_policies'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'df_mgr'
op|'='
name|'self'
op|'.'
name|'df_router'
op|'['
name|'policy'
op|']'
newline|'\n'
comment|'# first create an empty pickle'
nl|'\n'
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
op|']'
op|','
name|'policy'
op|')'
newline|'\n'
name|'hashes_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'devices'
op|','
name|'self'
op|'.'
name|'existing_device'
op|','
nl|'\n'
name|'diskfile'
op|'.'
name|'get_data_dir'
op|'('
name|'policy'
op|')'
op|','
string|"'0'"
op|','
name|'diskfile'
op|'.'
name|'HASH_FILE'
op|')'
newline|'\n'
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'hashes_file'
op|')'
newline|'\n'
name|'non_local'
op|'='
op|'{'
string|"'mtime'"
op|':'
name|'mtime'
op|'}'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|mock_getmtime
name|'def'
name|'mock_getmtime'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'t'
op|'='
name|'non_local'
op|'['
string|"'mtime'"
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'calls'
op|')'
op|'<='
number|'3'
op|':'
newline|'\n'
comment|'# this will make the *next* call get a slightly'
nl|'\n'
comment|'# newer mtime than the last'
nl|'\n'
indent|'                    '
name|'non_local'
op|'['
string|"'mtime'"
op|']'
op|'+='
number|'1'
newline|'\n'
comment|'# track exactly the value for every return'
nl|'\n'
dedent|''
name|'calls'
op|'.'
name|'append'
op|'('
name|'t'
op|')'
newline|'\n'
name|'return'
name|'t'
newline|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'swift.obj.diskfile.getmtime'"
op|','
nl|'\n'
name|'mock_getmtime'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'df_mgr'
op|'.'
name|'get_hashes'
op|'('
name|'self'
op|'.'
name|'existing_device'
op|','
string|"'0'"
op|','
op|'['
string|"'123'"
op|']'
op|','
nl|'\n'
name|'policy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'calls'
op|','
op|'['
nl|'\n'
name|'mtime'
op|'+'
number|'0'
op|','
comment|'# read'
nl|'\n'
name|'mtime'
op|'+'
number|'1'
op|','
comment|'# modified'
nl|'\n'
name|'mtime'
op|'+'
number|'2'
op|','
comment|'# read'
nl|'\n'
name|'mtime'
op|'+'
number|'3'
op|','
comment|'# modifed'
nl|'\n'
name|'mtime'
op|'+'
number|'4'
op|','
comment|'# read'
nl|'\n'
name|'mtime'
op|'+'
number|'4'
op|','
comment|'# not modifed'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
