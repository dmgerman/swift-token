begin_unit
comment|'# Copyright (c) 2010-2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or'
nl|'\n'
comment|'# implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mimetypes'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'from'
name|'swift'
name|'import'
name|'gettext_'
name|'as'
name|'_'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'shuffle'
newline|'\n'
name|'from'
name|'time'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'Timeout'
newline|'\n'
nl|'\n'
name|'from'
name|'swift'
name|'import'
name|'__canonical_version__'
name|'as'
name|'swift_version'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
name|'import'
name|'constraints'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'storage_policy'
name|'import'
name|'POLICIES'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'ring'
name|'import'
name|'Ring'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'utils'
name|'import'
name|'cache_from_env'
op|','
name|'get_logger'
op|','
name|'get_remote_client'
op|','
name|'split_path'
op|','
name|'config_true_value'
op|','
name|'generate_trans_id'
op|','
name|'affinity_key_function'
op|','
name|'affinity_locality_predicate'
op|','
name|'list_from_csv'
op|','
name|'register_swift_info'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'constraints'
name|'import'
name|'check_utf8'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'proxy'
op|'.'
name|'controllers'
name|'import'
name|'AccountController'
op|','
name|'ObjectController'
op|','
name|'ContainerController'
op|','
name|'InfoController'
newline|'\n'
name|'from'
name|'swift'
op|'.'
name|'common'
op|'.'
name|'swob'
name|'import'
name|'HTTPBadRequest'
op|','
name|'HTTPForbidden'
op|','
name|'HTTPMethodNotAllowed'
op|','
name|'HTTPNotFound'
op|','
name|'HTTPPreconditionFailed'
op|','
name|'HTTPServerError'
op|','
name|'HTTPException'
op|','
name|'Request'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# List of entry points for mandatory middlewares.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Fields:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# "name" (required) is the entry point name from setup.py.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# "after_fn" (optional) a function that takes a PipelineWrapper object as its'
nl|'\n'
comment|'# single argument and returns a list of middlewares that this middleware'
nl|'\n'
comment|'# should come after. Any middlewares in the returned list that are not present'
nl|'\n'
comment|'# in the pipeline will be ignored, so you can safely name optional middlewares'
nl|'\n'
comment|'# to come after. For example, ["catch_errors", "bulk"] would install this'
nl|'\n'
comment|'# middleware after catch_errors and bulk if both were present, but if bulk'
nl|'\n'
comment|'# were absent, would just install it after catch_errors.'
nl|'\n'
nl|'\n'
DECL|variable|required_filters
name|'required_filters'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'name'"
op|':'
string|"'catch_errors'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
string|"'gatekeeper'"
op|','
nl|'\n'
string|"'after_fn'"
op|':'
name|'lambda'
name|'pipe'
op|':'
op|'('
op|'['
string|"'catch_errors'"
op|']'
nl|'\n'
name|'if'
name|'pipe'
op|'.'
name|'startswith'
op|'('
string|"'catch_errors'"
op|')'
nl|'\n'
name|'else'
op|'['
op|']'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
string|"'dlo'"
op|','
string|"'after_fn'"
op|':'
name|'lambda'
name|'_junk'
op|':'
op|'['
nl|'\n'
string|"'staticweb'"
op|','
string|"'tempauth'"
op|','
string|"'keystoneauth'"
op|','
nl|'\n'
string|"'catch_errors'"
op|','
string|"'gatekeeper'"
op|','
string|"'proxy_logging'"
op|']'
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Application
name|'class'
name|'Application'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""WSGI application for the proxy server."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'memcache'
op|'='
name|'None'
op|','
name|'logger'
op|'='
name|'None'
op|','
name|'account_ring'
op|'='
name|'None'
op|','
nl|'\n'
name|'container_ring'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'conf'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'logger'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'='
name|'get_logger'
op|'('
name|'conf'
op|','
name|'log_route'
op|'='
string|"'proxy-server'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'='
name|'logger'
newline|'\n'
nl|'\n'
dedent|''
name|'swift_dir'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'swift_dir'"
op|','
string|"'/etc/swift'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'swift_dir'
op|'='
name|'swift_dir'
newline|'\n'
name|'self'
op|'.'
name|'node_timeout'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'node_timeout'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recoverable_node_timeout'
op|'='
name|'int'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'recoverable_node_timeout'"
op|','
name|'self'
op|'.'
name|'node_timeout'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn_timeout'
op|'='
name|'float'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'conn_timeout'"
op|','
number|'0.5'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client_timeout'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'client_timeout'"
op|','
number|'60'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'put_queue_depth'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'put_queue_depth'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'object_chunk_size'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'object_chunk_size'"
op|','
number|'65536'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client_chunk_size'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'client_chunk_size'"
op|','
number|'65536'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'trans_id_suffix'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'trans_id_suffix'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'post_quorum_timeout'
op|'='
name|'float'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'post_quorum_timeout'"
op|','
number|'0.5'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error_suppression_interval'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'error_suppression_interval'"
op|','
number|'60'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error_suppression_limit'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'error_suppression_limit'"
op|','
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recheck_container_existence'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'recheck_container_existence'"
op|','
number|'60'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recheck_account_existence'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'recheck_account_existence'"
op|','
number|'60'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allow_account_management'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'allow_account_management'"
op|','
string|"'no'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'object_post_as_copy'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'object_post_as_copy'"
op|','
string|"'true'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'container_ring'
op|'='
name|'container_ring'
name|'or'
name|'Ring'
op|'('
name|'swift_dir'
op|','
nl|'\n'
name|'ring_name'
op|'='
string|"'container'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'account_ring'
op|'='
name|'account_ring'
name|'or'
name|'Ring'
op|'('
name|'swift_dir'
op|','
nl|'\n'
name|'ring_name'
op|'='
string|"'account'"
op|')'
newline|'\n'
comment|'# ensure rings are loaded for all configured storage policies'
nl|'\n'
name|'for'
name|'policy'
name|'in'
name|'POLICIES'
op|':'
newline|'\n'
indent|'            '
name|'policy'
op|'.'
name|'load_ring'
op|'('
name|'swift_dir'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'memcache'
op|'='
name|'memcache'
newline|'\n'
name|'mimetypes'
op|'.'
name|'init'
op|'('
name|'mimetypes'
op|'.'
name|'knownfiles'
op|'+'
nl|'\n'
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'swift_dir'
op|','
string|"'mime.types'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'account_autocreate'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'account_autocreate'"
op|','
string|"'no'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auto_create_account_prefix'
op|'='
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'auto_create_account_prefix'"
op|')'
name|'or'
string|"'.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expiring_objects_account'
op|'='
name|'self'
op|'.'
name|'auto_create_account_prefix'
op|'+'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'expiring_objects_account_name'"
op|')'
name|'or'
string|"'expiring_objects'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expiring_objects_container_divisor'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'expiring_objects_container_divisor'"
op|')'
name|'or'
number|'86400'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_containers_per_account'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'max_containers_per_account'"
op|')'
name|'or'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_containers_whitelist'
op|'='
op|'['
nl|'\n'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'max_containers_whitelist'"
op|','
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
nl|'\n'
name|'if'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'deny_host_headers'
op|'='
op|'['
nl|'\n'
name|'host'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'host'
name|'in'
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'deny_host_headers'"
op|','
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
name|'if'
name|'host'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'log_handoffs'
op|'='
name|'config_true_value'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'log_handoffs'"
op|','
string|"'true'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cors_allow_origin'
op|'='
op|'['
nl|'\n'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'cors_allow_origin'"
op|','
string|"''"
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
nl|'\n'
name|'if'
name|'a'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'strict_cors_mode'
op|'='
name|'config_true_value'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'strict_cors_mode'"
op|','
string|"'t'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'node_timings'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'timing_expiry'
op|'='
name|'int'
op|'('
name|'conf'
op|'.'
name|'get'
op|'('
string|"'timing_expiry'"
op|','
number|'300'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sorting_method'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'sorting_method'"
op|','
string|"'shuffle'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_large_object_get_time'
op|'='
name|'float'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'max_large_object_get_time'"
op|','
string|"'86400'"
op|')'
op|')'
newline|'\n'
name|'value'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'request_node_count'"
op|','
string|"'2 * replicas'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'rnc_value'
op|'='
name|'int'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request_node_count'
op|'='
name|'lambda'
name|'replicas'
op|':'
name|'rnc_value'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'value'
op|')'
op|'=='
number|'3'
name|'and'
name|'value'
op|'['
number|'1'
op|']'
op|'=='
string|"'*'"
name|'and'
name|'value'
op|'['
number|'2'
op|']'
op|'=='
string|"'replicas'"
op|':'
newline|'\n'
indent|'            '
name|'rnc_value'
op|'='
name|'int'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request_node_count'
op|'='
name|'lambda'
name|'replicas'
op|':'
name|'rnc_value'
op|'*'
name|'replicas'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Invalid request_node_count value: %r'"
op|'%'
string|"''"
op|'.'
name|'join'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_read_affinity'
op|'='
name|'read_affinity'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'read_affinity'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'read_affinity_sort_key'
op|'='
name|'affinity_key_function'
op|'('
name|'read_affinity'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|'# make the message a little more useful'
nl|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid read_affinity value: %r (%s)"'
op|'%'
nl|'\n'
op|'('
name|'read_affinity'
op|','
name|'err'
op|'.'
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'write_affinity'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'write_affinity'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write_affinity_is_local_fn'
op|'='
name|'affinity_locality_predicate'
op|'('
name|'write_affinity'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|'# make the message a little more useful'
nl|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid write_affinity value: %r (%s)"'
op|'%'
nl|'\n'
op|'('
name|'write_affinity'
op|','
name|'err'
op|'.'
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'value'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'write_affinity_node_count'"
op|','
nl|'\n'
string|"'2 * replicas'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'wanc_value'
op|'='
name|'int'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write_affinity_node_count'
op|'='
name|'lambda'
name|'replicas'
op|':'
name|'wanc_value'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'value'
op|')'
op|'=='
number|'3'
name|'and'
name|'value'
op|'['
number|'1'
op|']'
op|'=='
string|"'*'"
name|'and'
name|'value'
op|'['
number|'2'
op|']'
op|'=='
string|"'replicas'"
op|':'
newline|'\n'
indent|'            '
name|'wanc_value'
op|'='
name|'int'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write_affinity_node_count'
op|'='
name|'lambda'
name|'replicas'
op|':'
name|'wanc_value'
op|'*'
name|'replicas'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|"'Invalid write_affinity_node_count value: %r'"
op|'%'
string|"''"
op|'.'
name|'join'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
comment|'# swift_owner_headers are stripped by the account and container'
nl|'\n'
comment|'# controllers; we should extend header stripping to object controller'
nl|'\n'
comment|'# when a privileged object header is implemented.'
nl|'\n'
dedent|''
name|'swift_owner_headers'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'swift_owner_headers'"
op|','
nl|'\n'
string|"'x-container-read, x-container-write, '"
nl|'\n'
string|"'x-container-sync-key, x-container-sync-to, '"
nl|'\n'
string|"'x-account-meta-temp-url-key, x-account-meta-temp-url-key-2, '"
nl|'\n'
string|"'x-account-access-control'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'swift_owner_headers'
op|'='
op|'['
nl|'\n'
name|'name'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'title'
op|'('
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'swift_owner_headers'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
name|'if'
name|'name'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
comment|'# Initialization was successful, so now apply the client chunk size'
nl|'\n'
comment|'# parameter as the default read / write buffer size for the network'
nl|'\n'
comment|'# sockets.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# NOTE WELL: This is a class setting, so until we get set this on a'
nl|'\n'
comment|'# per-connection basis, this affects reading and writing on ALL'
nl|'\n'
comment|'# sockets, those between the proxy servers and external clients, and'
nl|'\n'
comment|'# those between the proxy servers and the other internal servers.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ** Because it affects the client as well, currently, we use the'
nl|'\n'
comment|'# client chunk size as the govenor and not the object chunk size.'
nl|'\n'
name|'socket'
op|'.'
name|'_fileobject'
op|'.'
name|'default_bufsize'
op|'='
name|'self'
op|'.'
name|'client_chunk_size'
newline|'\n'
name|'self'
op|'.'
name|'expose_info'
op|'='
name|'config_true_value'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'expose_info'"
op|','
string|"'yes'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disallowed_sections'
op|'='
name|'list_from_csv'
op|'('
nl|'\n'
name|'conf'
op|'.'
name|'get'
op|'('
string|"'disallowed_sections'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'admin_key'
op|'='
name|'conf'
op|'.'
name|'get'
op|'('
string|"'admin_key'"
op|','
name|'None'
op|')'
newline|'\n'
name|'register_swift_info'
op|'('
nl|'\n'
name|'version'
op|'='
name|'swift_version'
op|','
nl|'\n'
name|'strict_cors_mode'
op|'='
name|'self'
op|'.'
name|'strict_cors_mode'
op|','
nl|'\n'
name|'policies'
op|'='
name|'POLICIES'
op|'.'
name|'get_policy_info'
op|'('
op|')'
op|','
nl|'\n'
op|'**'
name|'constraints'
op|'.'
name|'EFFECTIVE_CONSTRAINTS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_config
dedent|''
name|'def'
name|'check_config'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check the configuration for possible errors\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_read_affinity'
name|'and'
name|'self'
op|'.'
name|'sorting_method'
op|'!='
string|"'affinity'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warn'
op|'('
string|'"sorting_method is set to \'%s\', not \'affinity\'; "'
nl|'\n'
string|'"read_affinity setting will have no effect."'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'sorting_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_object_ring
dedent|''
dedent|''
name|'def'
name|'get_object_ring'
op|'('
name|'self'
op|','
name|'policy_idx'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the ring object to use to handle a request based on its policy.\n\n        :param policy_idx: policy index as defined in swift.conf\n\n        :returns: appropriate ring object\n        """'
newline|'\n'
name|'return'
name|'POLICIES'
op|'.'
name|'get_object_ring'
op|'('
name|'policy_idx'
op|','
name|'self'
op|'.'
name|'swift_dir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_controller
dedent|''
name|'def'
name|'get_controller'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the controller to handle a request.\n\n        :param path: path from request\n        :returns: tuple of (controller class, path dictionary)\n\n        :raises: ValueError (thrown by split_path) if given invalid path\n        """'
newline|'\n'
name|'if'
name|'path'
op|'=='
string|"'/info'"
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'dict'
op|'('
name|'version'
op|'='
name|'None'
op|','
nl|'\n'
name|'expose_info'
op|'='
name|'self'
op|'.'
name|'expose_info'
op|','
nl|'\n'
name|'disallowed_sections'
op|'='
name|'self'
op|'.'
name|'disallowed_sections'
op|','
nl|'\n'
name|'admin_key'
op|'='
name|'self'
op|'.'
name|'admin_key'
op|')'
newline|'\n'
name|'return'
name|'InfoController'
op|','
name|'d'
newline|'\n'
nl|'\n'
dedent|''
name|'version'
op|','
name|'account'
op|','
name|'container'
op|','
name|'obj'
op|'='
name|'split_path'
op|'('
name|'path'
op|','
number|'1'
op|','
number|'4'
op|','
name|'True'
op|')'
newline|'\n'
name|'d'
op|'='
name|'dict'
op|'('
name|'version'
op|'='
name|'version'
op|','
nl|'\n'
name|'account_name'
op|'='
name|'account'
op|','
nl|'\n'
name|'container_name'
op|'='
name|'container'
op|','
nl|'\n'
name|'object_name'
op|'='
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'obj'
name|'and'
name|'container'
name|'and'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ObjectController'
op|','
name|'d'
newline|'\n'
dedent|''
name|'elif'
name|'container'
name|'and'
name|'account'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ContainerController'
op|','
name|'d'
newline|'\n'
dedent|''
name|'elif'
name|'account'
name|'and'
name|'not'
name|'container'
name|'and'
name|'not'
name|'obj'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'AccountController'
op|','
name|'d'
newline|'\n'
dedent|''
name|'return'
name|'None'
op|','
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'env'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        WSGI entry point.\n        Wraps env in swob.Request object and passes it down.\n\n        :param env: WSGI environment dictionary\n        :param start_response: WSGI callable\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'memcache'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'memcache'
op|'='
name|'cache_from_env'
op|'('
name|'env'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'req'
op|'='
name|'self'
op|'.'
name|'update_request'
op|'('
name|'Request'
op|'('
name|'env'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'handle_request'
op|'('
name|'req'
op|')'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'HTTPPreconditionFailed'
op|'('
nl|'\n'
name|'request'
op|'='
name|'req'
op|','
name|'body'
op|'='
string|"'Invalid UTF8 or contains NULL'"
op|')'
newline|'\n'
name|'return'
name|'err'
op|'('
name|'env'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_response'
op|'('
string|"'500 Server Error'"
op|','
nl|'\n'
op|'['
op|'('
string|"'Content-Type'"
op|','
string|"'text/plain'"
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
string|"'Internal server error.\\n'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|update_request
dedent|''
dedent|''
name|'def'
name|'update_request'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'x-storage-token'"
name|'in'
name|'req'
op|'.'
name|'headers'
name|'and'
string|"'x-auth-token'"
name|'not'
name|'in'
name|'req'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-auth-token'"
op|']'
op|'='
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-storage-token'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'req'
newline|'\n'
nl|'\n'
DECL|member|handle_request
dedent|''
name|'def'
name|'handle_request'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Entry point for proxy server.\n        Should return a WSGI-style callable (such as swob.Response).\n\n        :param req: swob.Request object\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'proxy-server'"
op|')'
newline|'\n'
name|'if'
name|'req'
op|'.'
name|'content_length'
name|'and'
name|'req'
op|'.'
name|'content_length'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPBadRequest'
op|'('
name|'request'
op|'='
name|'req'
op|','
nl|'\n'
name|'body'
op|'='
string|"'Invalid Content-Length'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'check_utf8'
op|'('
name|'req'
op|'.'
name|'path_info'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPPreconditionFailed'
op|'('
nl|'\n'
name|'request'
op|'='
name|'req'
op|','
name|'body'
op|'='
string|"'Invalid UTF8 or contains NULL'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'UnicodeError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPPreconditionFailed'
op|'('
nl|'\n'
name|'request'
op|'='
name|'req'
op|','
name|'body'
op|'='
string|"'Invalid UTF8 or contains NULL'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'controller'
op|','
name|'path_parts'
op|'='
name|'self'
op|'.'
name|'get_controller'
op|'('
name|'req'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'p'
op|'='
name|'req'
op|'.'
name|'path_info'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'p'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'p'
op|'='
name|'p'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPNotFound'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'controller'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'errors'"
op|')'
newline|'\n'
name|'return'
name|'HTTPPreconditionFailed'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'body'
op|'='
string|"'Bad URL'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'deny_host_headers'
name|'and'
name|'req'
op|'.'
name|'host'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
name|'in'
name|'self'
op|'.'
name|'deny_host_headers'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'HTTPForbidden'
op|'('
name|'request'
op|'='
name|'req'
op|','
name|'body'
op|'='
string|"'Invalid host header'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'set_statsd_prefix'
op|'('
string|"'proxy-server.'"
op|'+'
nl|'\n'
name|'controller'
op|'.'
name|'server_type'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
name|'controller'
op|'='
name|'controller'
op|'('
name|'self'
op|','
op|'**'
name|'path_parts'
op|')'
newline|'\n'
name|'if'
string|"'swift.trans_id'"
name|'not'
name|'in'
name|'req'
op|'.'
name|'environ'
op|':'
newline|'\n'
comment|"# if this wasn't set by an earlier middleware, set it now"
nl|'\n'
indent|'                '
name|'trans_id_suffix'
op|'='
name|'self'
op|'.'
name|'trans_id_suffix'
newline|'\n'
name|'trans_id_extra'
op|'='
name|'req'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'x-trans-id-extra'"
op|')'
newline|'\n'
name|'if'
name|'trans_id_extra'
op|':'
newline|'\n'
indent|'                    '
name|'trans_id_suffix'
op|'+='
string|"'-'"
op|'+'
name|'trans_id_extra'
op|'['
op|':'
number|'32'
op|']'
newline|'\n'
dedent|''
name|'trans_id'
op|'='
name|'generate_trans_id'
op|'('
name|'trans_id_suffix'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.trans_id'"
op|']'
op|'='
name|'trans_id'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'txn_id'
op|'='
name|'trans_id'
newline|'\n'
dedent|''
name|'req'
op|'.'
name|'headers'
op|'['
string|"'x-trans-id'"
op|']'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.trans_id'"
op|']'
newline|'\n'
name|'controller'
op|'.'
name|'trans_id'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.trans_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'client_ip'
op|'='
name|'get_remote_client'
op|'('
name|'req'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
name|'req'
op|'.'
name|'method'
op|')'
newline|'\n'
name|'getattr'
op|'('
name|'handler'
op|','
string|"'publicly_accessible'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'allowed_methods'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
string|"'allowed_methods'"
op|','
name|'set'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'HTTPMethodNotAllowed'
op|'('
nl|'\n'
name|'request'
op|'='
name|'req'
op|','
name|'headers'
op|'='
op|'{'
string|"'Allow'"
op|':'
string|"', '"
op|'.'
name|'join'
op|'('
name|'allowed_methods'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'swift.authorize'"
name|'in'
name|'req'
op|'.'
name|'environ'
op|':'
newline|'\n'
comment|'# We call authorize before the handler, always. If authorized,'
nl|'\n'
comment|"# we remove the swift.authorize hook so isn't ever called"
nl|'\n'
comment|'# again. If not authorized, we return the denial unless the'
nl|'\n'
comment|"# controller's method indicates it'd like to gather more"
nl|'\n'
comment|'# information and try again later.'
nl|'\n'
indent|'                '
name|'resp'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.authorize'"
op|']'
op|'('
name|'req'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resp'
op|':'
newline|'\n'
comment|'# No resp means authorized, no delayed recheck required.'
nl|'\n'
indent|'                    '
name|'del'
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.authorize'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Response indicates denial, but we might delay the denial'
nl|'\n'
comment|'# and recheck later. If not delayed, return the error now.'
nl|'\n'
indent|'                    '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'handler'
op|','
string|"'delay_denial'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'resp'
newline|'\n'
comment|'# Save off original request method (GET, POST, etc.) in case it'
nl|'\n'
comment|'# gets mutated during handling.  This way logging can display the'
nl|'\n'
comment|'# method the client actually sent.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'req'
op|'.'
name|'environ'
op|'['
string|"'swift.orig_req_method'"
op|']'
op|'='
name|'req'
op|'.'
name|'method'
newline|'\n'
name|'return'
name|'handler'
op|'('
name|'req'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'HTTPException'
name|'as'
name|'error_response'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'error_response'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'Exception'
op|','
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'ERROR Unhandled exception in request'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'HTTPServerError'
op|'('
name|'request'
op|'='
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sort_nodes
dedent|''
dedent|''
name|'def'
name|'sort_nodes'
op|'('
name|'self'
op|','
name|'nodes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'\'\'\'\n        Sorts nodes in-place (and returns the sorted list) according to\n        the configured strategy. The default "sorting" is to randomly\n        shuffle the nodes. If the "timing" strategy is chosen, the nodes\n        are sorted according to the stored timing data.\n        \'\'\''
newline|'\n'
comment|'# In the case of timing sorting, shuffling ensures that close timings'
nl|'\n'
comment|"# (ie within the rounding resolution) won't prefer one over another."
nl|'\n'
comment|"# Python's sort is stable (http://wiki.python.org/moin/HowTo/Sorting/)"
nl|'\n'
name|'shuffle'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'sorting_method'
op|'=='
string|"'timing'"
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|key_func
name|'def'
name|'key_func'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'timing'
op|','
name|'expires'
op|'='
name|'self'
op|'.'
name|'node_timings'
op|'.'
name|'get'
op|'('
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
op|'('
op|'-'
number|'1.0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'timing'
name|'if'
name|'expires'
op|'>'
name|'now'
name|'else'
op|'-'
number|'1.0'
newline|'\n'
dedent|''
name|'nodes'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'key_func'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'sorting_method'
op|'=='
string|"'affinity'"
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'self'
op|'.'
name|'read_affinity_sort_key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'nodes'
newline|'\n'
nl|'\n'
DECL|member|set_node_timing
dedent|''
name|'def'
name|'set_node_timing'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'timing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'sorting_method'
op|'!='
string|"'timing'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'timing'
op|'='
name|'round'
op|'('
name|'timing'
op|','
number|'3'
op|')'
comment|'# sort timings to the millisecond'
newline|'\n'
name|'self'
op|'.'
name|'node_timings'
op|'['
name|'node'
op|'['
string|"'ip'"
op|']'
op|']'
op|'='
op|'('
name|'timing'
op|','
name|'now'
op|'+'
name|'self'
op|'.'
name|'timing_expiry'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_limited
dedent|''
name|'def'
name|'error_limited'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the node is currently error limited.\n\n        :param node: dictionary of node to check\n        :returns: True if error limited, False otherwise\n        """'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'errors'"
name|'not'
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
string|"'last_error'"
name|'in'
name|'node'
name|'and'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'<'
name|'now'
op|'-'
name|'self'
op|'.'
name|'error_suppression_interval'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'node'
op|'['
string|"'last_error'"
op|']'
newline|'\n'
name|'if'
string|"'errors'"
name|'in'
name|'node'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'node'
op|'['
string|"'errors'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'limited'
op|'='
name|'node'
op|'['
string|"'errors'"
op|']'
op|'>'
name|'self'
op|'.'
name|'error_suppression_limit'
newline|'\n'
name|'if'
name|'limited'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Node error limited %(ip)s:%(port)s (%(device)s)'"
op|')'
op|','
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'limited'
newline|'\n'
nl|'\n'
DECL|member|error_limit
dedent|''
name|'def'
name|'error_limit'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mark a node as error limited. This immediately pretends the\n        node received enough errors to trigger error suppression. Use\n        this for errors like Insufficient Storage. For other errors\n        use :func:`error_occurred`.\n\n        :param node: dictionary of node to error limit\n        :param msg: error message\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'self'
op|'.'
name|'error_suppression_limit'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(msg)s %(ip)s:%(port)s/%(device)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'msg'"
op|':'
name|'msg'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_occurred
dedent|''
name|'def'
name|'error_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging, and handling of errors.\n\n        :param node: dictionary of node to handle errors for\n        :param msg: error message\n        """'
newline|'\n'
name|'node'
op|'['
string|"'errors'"
op|']'
op|'='
name|'node'
op|'.'
name|'get'
op|'('
string|"'errors'"
op|','
number|'0'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'node'
op|'['
string|"'last_error'"
op|']'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%(msg)s %(ip)s:%(port)s/%(device)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'msg'"
op|':'
name|'msg'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|iter_nodes
dedent|''
name|'def'
name|'iter_nodes'
op|'('
name|'self'
op|','
name|'ring'
op|','
name|'partition'
op|','
name|'node_iter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Yields nodes for a ring partition, skipping over error\n        limited nodes and stopping at the configurable number of\n        nodes. If a node yielded subsequently gets error limited, an\n        extra node will be yielded to take its place.\n\n        Note that if you\'re going to iterate over this concurrently from\n        multiple greenthreads, you\'ll want to use a\n        swift.common.utils.GreenthreadSafeIterator to serialize access.\n        Otherwise, you may get ValueErrors from concurrent access. (You also\n        may not, depending on how logging is configured, the vagaries of\n        socket IO and eventlet, and the phase of the moon.)\n\n        :param ring: ring to get yield nodes from\n        :param partition: ring partition to yield nodes for\n        :param node_iter: optional iterable of nodes to try. Useful if you\n            want to filter or reorder the nodes.\n        """'
newline|'\n'
name|'part_nodes'
op|'='
name|'ring'
op|'.'
name|'get_part_nodes'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'node_iter'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node_iter'
op|'='
name|'itertools'
op|'.'
name|'chain'
op|'('
name|'part_nodes'
op|','
nl|'\n'
name|'ring'
op|'.'
name|'get_more_nodes'
op|'('
name|'partition'
op|')'
op|')'
newline|'\n'
dedent|''
name|'num_primary_nodes'
op|'='
name|'len'
op|'('
name|'part_nodes'
op|')'
newline|'\n'
nl|'\n'
comment|'# Use of list() here forcibly yanks the first N nodes (the primary'
nl|'\n'
comment|'# nodes) from node_iter, so the rest of its values are handoffs.'
nl|'\n'
name|'primary_nodes'
op|'='
name|'self'
op|'.'
name|'sort_nodes'
op|'('
nl|'\n'
name|'list'
op|'('
name|'itertools'
op|'.'
name|'islice'
op|'('
name|'node_iter'
op|','
name|'num_primary_nodes'
op|')'
op|')'
op|')'
newline|'\n'
name|'handoff_nodes'
op|'='
name|'node_iter'
newline|'\n'
name|'nodes_left'
op|'='
name|'self'
op|'.'
name|'request_node_count'
op|'('
name|'len'
op|'('
name|'primary_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'log_handoffs_threshold'
op|'='
name|'nodes_left'
op|'-'
name|'len'
op|'('
name|'primary_nodes'
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'primary_nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'handoffs'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'handoff_nodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'handoffs'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'log_handoffs'
name|'and'
name|'handoffs'
op|'>'
name|'log_handoffs_threshold'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_count'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'warning'
op|'('
nl|'\n'
string|"'Handoff requested (%d)'"
op|'%'
name|'handoffs'
op|')'
newline|'\n'
name|'if'
name|'handoffs'
op|'-'
name|'log_handoffs_threshold'
op|'=='
name|'len'
op|'('
name|'primary_nodes'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'increment'
op|'('
string|"'handoff_all_count'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
name|'node'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'error_limited'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'nodes_left'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'nodes_left'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|exception_occurred
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'exception_occurred'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'typ'
op|','
name|'additional_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Handle logging of generic exceptions.\n\n        :param node: dictionary of node to log the error for\n        :param typ: server type\n        :param additional_info: additional information to log\n        """'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'ERROR with %(type)s server %(ip)s:%(port)s/%(device)s re: '"
nl|'\n'
string|"'%(info)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'typ'
op|','
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ip'"
op|']'
op|','
string|"'port'"
op|':'
name|'node'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'node'
op|'['
string|"'device'"
op|']'
op|','
string|"'info'"
op|':'
name|'additional_info'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_wsgi_pipeline
dedent|''
name|'def'
name|'modify_wsgi_pipeline'
op|'('
name|'self'
op|','
name|'pipe'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called during WSGI pipeline creation. Modifies the WSGI pipeline\n        context to ensure that mandatory middleware is present in the pipeline.\n\n        :param pipe: A PipelineWrapper object\n        """'
newline|'\n'
name|'pipeline_was_modified'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'filter_spec'
name|'in'
name|'reversed'
op|'('
name|'required_filters'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filter_name'
op|'='
name|'filter_spec'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'filter_name'
name|'not'
name|'in'
name|'pipe'
op|':'
newline|'\n'
indent|'                '
name|'afters'
op|'='
name|'filter_spec'
op|'.'
name|'get'
op|'('
string|"'after_fn'"
op|','
name|'lambda'
name|'_junk'
op|':'
op|'['
op|']'
op|')'
op|'('
name|'pipe'
op|')'
newline|'\n'
name|'insert_at'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'after'
name|'in'
name|'afters'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'insert_at'
op|'='
name|'max'
op|'('
name|'insert_at'
op|','
name|'pipe'
op|'.'
name|'index'
op|'('
name|'after'
op|')'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
comment|'# not in pipeline; ignore it'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'logger'
op|'.'
name|'info'
op|'('
nl|'\n'
string|"'Adding required filter %s to pipeline at position %d'"
op|'%'
nl|'\n'
op|'('
name|'filter_name'
op|','
name|'insert_at'
op|')'
op|')'
newline|'\n'
name|'ctx'
op|'='
name|'pipe'
op|'.'
name|'create_filter'
op|'('
name|'filter_name'
op|')'
newline|'\n'
name|'pipe'
op|'.'
name|'insert_filter'
op|'('
name|'ctx'
op|','
name|'index'
op|'='
name|'insert_at'
op|')'
newline|'\n'
name|'pipeline_was_modified'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'pipeline_was_modified'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'info'
op|'('
string|'"Pipeline was modified. New pipeline is \\"%s\\"."'
op|','
nl|'\n'
name|'pipe'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'logger'
op|'.'
name|'debug'
op|'('
string|'"Pipeline is \\"%s\\""'
op|','
name|'pipe'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|app_factory
dedent|''
dedent|''
dedent|''
name|'def'
name|'app_factory'
op|'('
name|'global_conf'
op|','
op|'**'
name|'local_conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""paste.deploy app factory for creating WSGI proxy apps."""'
newline|'\n'
name|'conf'
op|'='
name|'global_conf'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'update'
op|'('
name|'local_conf'
op|')'
newline|'\n'
name|'app'
op|'='
name|'Application'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'app'
op|'.'
name|'check_config'
op|'('
op|')'
newline|'\n'
name|'return'
name|'app'
newline|'\n'
dedent|''
endmarker|''
end_unit
